
RIDE_Drone_Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab68  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014f  0800ada0  0800ada0  0000bda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aef0  0800aef0  0000bef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aef8  0800aef8  0000bef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800aefc  0800aefc  0000befc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000000  0800af00  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  2000005c  0800af5c  0000c05c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000890  0800af5c  0000c890  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018cd1  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003016  00000000  00000000  00024d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001328  00000000  00000000  00027d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eb8  00000000  00000000  000290a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036c36  00000000  00000000  00029f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018c74  00000000  00000000  00060b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015abcf  00000000  00000000  0007980a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d43d9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000056c0  00000000  00000000  001d441c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000089  00000000  00000000  001d9adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000005c 	.word	0x2000005c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800ad88 	.word	0x0800ad88

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000060 	.word	0x20000060
 8000274:	0800ad88 	.word	0x0800ad88

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b97e 	b.w	800059c <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	460c      	mov	r4, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14d      	bne.n	8000360 <__udivmoddi4+0xa8>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	460f      	mov	r7, r1
 80002c8:	4684      	mov	ip, r0
 80002ca:	4696      	mov	lr, r2
 80002cc:	fab2 f382 	clz	r3, r2
 80002d0:	d960      	bls.n	8000394 <__udivmoddi4+0xdc>
 80002d2:	b14b      	cbz	r3, 80002e8 <__udivmoddi4+0x30>
 80002d4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002d8:	f1c3 0220 	rsb	r2, r3, #32
 80002dc:	409f      	lsls	r7, r3
 80002de:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e2:	fa20 f202 	lsr.w	r2, r0, r2
 80002e6:	4317      	orrs	r7, r2
 80002e8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002ec:	fa1f f48e 	uxth.w	r4, lr
 80002f0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002f8:	fb06 7711 	mls	r7, r6, r1, r7
 80002fc:	fb01 f004 	mul.w	r0, r1, r4
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x62>
 8000308:	eb1e 0202 	adds.w	r2, lr, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x60>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 812d 	bhi.w	8000572 <__udivmoddi4+0x2ba>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fa1f fc8c 	uxth.w	ip, ip
 8000320:	fbb2 f0f6 	udiv	r0, r2, r6
 8000324:	fb06 2210 	mls	r2, r6, r0, r2
 8000328:	fb00 f404 	mul.w	r4, r0, r4
 800032c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000330:	4564      	cmp	r4, ip
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x8e>
 8000334:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x8c>
 800033e:	4564      	cmp	r4, ip
 8000340:	f200 811a 	bhi.w	8000578 <__udivmoddi4+0x2c0>
 8000344:	4610      	mov	r0, r2
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	ebac 0c04 	sub.w	ip, ip, r4
 800034e:	2100      	movs	r1, #0
 8000350:	b125      	cbz	r5, 800035c <__udivmoddi4+0xa4>
 8000352:	fa2c f303 	lsr.w	r3, ip, r3
 8000356:	2200      	movs	r2, #0
 8000358:	e9c5 3200 	strd	r3, r2, [r5]
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	428b      	cmp	r3, r1
 8000362:	d905      	bls.n	8000370 <__udivmoddi4+0xb8>
 8000364:	b10d      	cbz	r5, 800036a <__udivmoddi4+0xb2>
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	2100      	movs	r1, #0
 800036c:	4608      	mov	r0, r1
 800036e:	e7f5      	b.n	800035c <__udivmoddi4+0xa4>
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14d      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000378:	42a3      	cmp	r3, r4
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2aa>
 800037e:	4290      	cmp	r0, r2
 8000380:	f080 80ef 	bcs.w	8000562 <__udivmoddi4+0x2aa>
 8000384:	4606      	mov	r6, r0
 8000386:	4623      	mov	r3, r4
 8000388:	4608      	mov	r0, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0e6      	beq.n	800035c <__udivmoddi4+0xa4>
 800038e:	e9c5 6300 	strd	r6, r3, [r5]
 8000392:	e7e3      	b.n	800035c <__udivmoddi4+0xa4>
 8000394:	2b00      	cmp	r3, #0
 8000396:	f040 80a2 	bne.w	80004de <__udivmoddi4+0x226>
 800039a:	1a8a      	subs	r2, r1, r2
 800039c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a0:	fa1f f68e 	uxth.w	r6, lr
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003aa:	fb07 2014 	mls	r0, r7, r4, r2
 80003ae:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b6:	fb06 f004 	mul.w	r0, r6, r4
 80003ba:	4290      	cmp	r0, r2
 80003bc:	d90f      	bls.n	80003de <__udivmoddi4+0x126>
 80003be:	eb1e 0202 	adds.w	r2, lr, r2
 80003c2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	4290      	cmp	r0, r2
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80c8 	beq.w	800056c <__udivmoddi4+0x2b4>
 80003dc:	4644      	mov	r4, r8
 80003de:	1a12      	subs	r2, r2, r0
 80003e0:	fa1f fc8c 	uxth.w	ip, ip
 80003e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e8:	fb07 2210 	mls	r2, r7, r0, r2
 80003ec:	fb00 f606 	mul.w	r6, r0, r6
 80003f0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f4:	4566      	cmp	r6, ip
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x152>
 80003f8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x150>
 8000402:	4566      	cmp	r6, ip
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2c6>
 8000408:	4610      	mov	r0, r2
 800040a:	ebac 0c06 	sub.w	ip, ip, r6
 800040e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa04 fe01 	lsl.w	lr, r4, r1
 800041e:	fa22 f706 	lsr.w	r7, r2, r6
 8000422:	fa20 fc06 	lsr.w	ip, r0, r6
 8000426:	40f4      	lsrs	r4, r6
 8000428:	408a      	lsls	r2, r1
 800042a:	431f      	orrs	r7, r3
 800042c:	ea4e 030c 	orr.w	r3, lr, ip
 8000430:	fa00 fe01 	lsl.w	lr, r0, r1
 8000434:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fa1f fc87 	uxth.w	ip, r7
 8000440:	fbb4 f0f8 	udiv	r0, r4, r8
 8000444:	fb08 4410 	mls	r4, r8, r0, r4
 8000448:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044c:	fb00 f90c 	mul.w	r9, r0, ip
 8000450:	45a1      	cmp	r9, r4
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1ba>
 8000454:	193c      	adds	r4, r7, r4
 8000456:	f100 3aff 	add.w	sl, r0, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a1      	cmp	r9, r4
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b8>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 8093 	beq.w	8000596 <__udivmoddi4+0x2de>
 8000470:	4650      	mov	r0, sl
 8000472:	eba4 0409 	sub.w	r4, r4, r9
 8000476:	fa1f f983 	uxth.w	r9, r3
 800047a:	fbb4 f3f8 	udiv	r3, r4, r8
 800047e:	fb08 4413 	mls	r4, r8, r3, r4
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	45a4      	cmp	ip, r4
 800048c:	d906      	bls.n	800049c <__udivmoddi4+0x1e4>
 800048e:	193c      	adds	r4, r7, r4
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295
 8000494:	d201      	bcs.n	800049a <__udivmoddi4+0x1e2>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d87a      	bhi.n	8000590 <__udivmoddi4+0x2d8>
 800049a:	4643      	mov	r3, r8
 800049c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a0:	eba4 040c 	sub.w	r4, r4, ip
 80004a4:	fba0 9802 	umull	r9, r8, r0, r2
 80004a8:	4544      	cmp	r4, r8
 80004aa:	46cc      	mov	ip, r9
 80004ac:	4643      	mov	r3, r8
 80004ae:	d302      	bcc.n	80004b6 <__udivmoddi4+0x1fe>
 80004b0:	d106      	bne.n	80004c0 <__udivmoddi4+0x208>
 80004b2:	45ce      	cmp	lr, r9
 80004b4:	d204      	bcs.n	80004c0 <__udivmoddi4+0x208>
 80004b6:	3801      	subs	r0, #1
 80004b8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004bc:	eb68 0307 	sbc.w	r3, r8, r7
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x222>
 80004c2:	ebbe 020c 	subs.w	r2, lr, ip
 80004c6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ca:	fa04 f606 	lsl.w	r6, r4, r6
 80004ce:	fa22 f301 	lsr.w	r3, r2, r1
 80004d2:	40cc      	lsrs	r4, r1
 80004d4:	431e      	orrs	r6, r3
 80004d6:	e9c5 6400 	strd	r6, r4, [r5]
 80004da:	2100      	movs	r1, #0
 80004dc:	e73e      	b.n	800035c <__udivmoddi4+0xa4>
 80004de:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e2:	f1c3 0120 	rsb	r1, r3, #32
 80004e6:	fa04 f203 	lsl.w	r2, r4, r3
 80004ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ee:	40cc      	lsrs	r4, r1
 80004f0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f4:	fa20 f101 	lsr.w	r1, r0, r1
 80004f8:	fa1f f68e 	uxth.w	r6, lr
 80004fc:	fbb4 f0f7 	udiv	r0, r4, r7
 8000500:	430a      	orrs	r2, r1
 8000502:	fb07 4410 	mls	r4, r7, r0, r4
 8000506:	0c11      	lsrs	r1, r2, #16
 8000508:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800050c:	fb00 f406 	mul.w	r4, r0, r6
 8000510:	428c      	cmp	r4, r1
 8000512:	d90e      	bls.n	8000532 <__udivmoddi4+0x27a>
 8000514:	eb1e 0101 	adds.w	r1, lr, r1
 8000518:	f100 38ff 	add.w	r8, r0, #4294967295
 800051c:	bf2c      	ite	cs
 800051e:	f04f 0901 	movcs.w	r9, #1
 8000522:	f04f 0900 	movcc.w	r9, #0
 8000526:	428c      	cmp	r4, r1
 8000528:	d902      	bls.n	8000530 <__udivmoddi4+0x278>
 800052a:	f1b9 0f00 	cmp.w	r9, #0
 800052e:	d02c      	beq.n	800058a <__udivmoddi4+0x2d2>
 8000530:	4640      	mov	r0, r8
 8000532:	1b09      	subs	r1, r1, r4
 8000534:	b292      	uxth	r2, r2
 8000536:	fbb1 f4f7 	udiv	r4, r1, r7
 800053a:	fb07 1114 	mls	r1, r7, r4, r1
 800053e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000542:	fb04 f106 	mul.w	r1, r4, r6
 8000546:	4291      	cmp	r1, r2
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x2a2>
 800054a:	eb1e 0202 	adds.w	r2, lr, r2
 800054e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000552:	d201      	bcs.n	8000558 <__udivmoddi4+0x2a0>
 8000554:	4291      	cmp	r1, r2
 8000556:	d815      	bhi.n	8000584 <__udivmoddi4+0x2cc>
 8000558:	4644      	mov	r4, r8
 800055a:	1a52      	subs	r2, r2, r1
 800055c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000560:	e721      	b.n	80003a6 <__udivmoddi4+0xee>
 8000562:	1a86      	subs	r6, r0, r2
 8000564:	eb64 0303 	sbc.w	r3, r4, r3
 8000568:	2001      	movs	r0, #1
 800056a:	e70e      	b.n	800038a <__udivmoddi4+0xd2>
 800056c:	3c02      	subs	r4, #2
 800056e:	4472      	add	r2, lr
 8000570:	e735      	b.n	80003de <__udivmoddi4+0x126>
 8000572:	3902      	subs	r1, #2
 8000574:	4472      	add	r2, lr
 8000576:	e6d0      	b.n	800031a <__udivmoddi4+0x62>
 8000578:	44f4      	add	ip, lr
 800057a:	3802      	subs	r0, #2
 800057c:	e6e3      	b.n	8000346 <__udivmoddi4+0x8e>
 800057e:	44f4      	add	ip, lr
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x152>
 8000584:	3c02      	subs	r4, #2
 8000586:	4472      	add	r2, lr
 8000588:	e7e7      	b.n	800055a <__udivmoddi4+0x2a2>
 800058a:	3802      	subs	r0, #2
 800058c:	4471      	add	r1, lr
 800058e:	e7d0      	b.n	8000532 <__udivmoddi4+0x27a>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e782      	b.n	800049c <__udivmoddi4+0x1e4>
 8000596:	3802      	subs	r0, #2
 8000598:	443c      	add	r4, r7
 800059a:	e76a      	b.n	8000472 <__udivmoddi4+0x1ba>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80005a8:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80005ae:	4909      	ldr	r1, [pc, #36]	@ (80005d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c4:	68fb      	ldr	r3, [r7, #12]
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	46020c00 	.word	0x46020c00

080005d8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005e0:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <LL_APB1_GRP2_EnableClock+0x34>)
 80005e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005e6:	4909      	ldr	r1, [pc, #36]	@ (800060c <LL_APB1_GRP2_EnableClock+0x34>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <LL_APB1_GRP2_EnableClock+0x34>)
 80005f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4013      	ands	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fc:	68fb      	ldr	r3, [r7, #12]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	46020c00 	.word	0x46020c00

08000610 <HAL_UART_RxCpltCallback>:
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* Callback for when data is received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000614:	b089      	sub	sp, #36	@ 0x24
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]

	// Expecting Receive Packet 0x90 of size 16 Bytes + size of data field in transmit packet
	// Size of test packet is 16 + 6 = 22 bytes

	if (huart->Instance == USART2) {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a45      	ldr	r2, [pc, #276]	@ (8000734 <HAL_UART_RxCpltCallback+0x124>)
 8000620:	4293      	cmp	r3, r2
 8000622:	f040 8082 	bne.w	800072a <HAL_UART_RxCpltCallback+0x11a>
 8000626:	466b      	mov	r3, sp
 8000628:	461e      	mov	r6, r3
        // Store received byte in buffer for later use
        for(int i = 0; i<sizeof(newRxData); i++){
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
 800062e:	e00b      	b.n	8000648 <HAL_UART_RxCpltCallback+0x38>
        	rxData[i] = newRxData[i];
 8000630:	4a41      	ldr	r2, [pc, #260]	@ (8000738 <HAL_UART_RxCpltCallback+0x128>)
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	4413      	add	r3, r2
 8000636:	7819      	ldrb	r1, [r3, #0]
 8000638:	4a40      	ldr	r2, [pc, #256]	@ (800073c <HAL_UART_RxCpltCallback+0x12c>)
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	4413      	add	r3, r2
 800063e:	460a      	mov	r2, r1
 8000640:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i<sizeof(newRxData); i++){
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	3301      	adds	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	69fb      	ldr	r3, [r7, #28]
 800064a:	2b16      	cmp	r3, #22
 800064c:	d9f0      	bls.n	8000630 <HAL_UART_RxCpltCallback+0x20>
        }

        const char *output = "Received Data: ";
 800064e:	4b3c      	ldr	r3, [pc, #240]	@ (8000740 <HAL_UART_RxCpltCallback+0x130>)
 8000650:	617b      	str	r3, [r7, #20]
        HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), 1000);
 8000652:	6978      	ldr	r0, [r7, #20]
 8000654:	f7ff fe10 	bl	8000278 <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	b29a      	uxth	r2, r3
 800065c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000660:	6979      	ldr	r1, [r7, #20]
 8000662:	4838      	ldr	r0, [pc, #224]	@ (8000744 <HAL_UART_RxCpltCallback+0x134>)
 8000664:	f006 fff2 	bl	800764c <HAL_UART_Transmit>

        size_t msgLength = sizeof(rxData) / sizeof(rxData[0]);
 8000668:	2318      	movs	r3, #24
 800066a:	613b      	str	r3, [r7, #16]
        char msg[msgLength * 2 + 1];
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	1c59      	adds	r1, r3, #1
 8000672:	460b      	mov	r3, r1
 8000674:	3b01      	subs	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	2300      	movs	r3, #0
 800067a:	4688      	mov	r8, r1
 800067c:	4699      	mov	r9, r3
 800067e:	f04f 0200 	mov.w	r2, #0
 8000682:	f04f 0300 	mov.w	r3, #0
 8000686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800068a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800068e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000692:	2300      	movs	r3, #0
 8000694:	460c      	mov	r4, r1
 8000696:	461d      	mov	r5, r3
 8000698:	f04f 0200 	mov.w	r2, #0
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	00eb      	lsls	r3, r5, #3
 80006a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006a6:	00e2      	lsls	r2, r4, #3
 80006a8:	1dcb      	adds	r3, r1, #7
 80006aa:	08db      	lsrs	r3, r3, #3
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	ebad 0d03 	sub.w	sp, sp, r3
 80006b2:	466b      	mov	r3, sp
 80006b4:	3300      	adds	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]

        for(size_t i = 0; i<msgLength; i++){
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	e00e      	b.n	80006dc <HAL_UART_RxCpltCallback+0xcc>
        	sprintf(msg + (i*2), "%02X", rxData[i]);
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	18d0      	adds	r0, r2, r3
 80006c6:	4a1d      	ldr	r2, [pc, #116]	@ (800073c <HAL_UART_RxCpltCallback+0x12c>)
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	491d      	ldr	r1, [pc, #116]	@ (8000748 <HAL_UART_RxCpltCallback+0x138>)
 80006d2:	f009 fea7 	bl	800a424 <siprintf>
        for(size_t i = 0; i<msgLength; i++){
 80006d6:	69bb      	ldr	r3, [r7, #24]
 80006d8:	3301      	adds	r3, #1
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69ba      	ldr	r2, [r7, #24]
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d3ec      	bcc.n	80006be <HAL_UART_RxCpltCallback+0xae>
        }
        msg[msgLength*2] = '\0';
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	2100      	movs	r1, #0
 80006ec:	54d1      	strb	r1, [r2, r3]

        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 80006ee:	68b8      	ldr	r0, [r7, #8]
 80006f0:	f7ff fdc2 	bl	8000278 <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fc:	68b9      	ldr	r1, [r7, #8]
 80006fe:	4811      	ldr	r0, [pc, #68]	@ (8000744 <HAL_UART_RxCpltCallback+0x134>)
 8000700:	f006 ffa4 	bl	800764c <HAL_UART_Transmit>

        output = "\r\n";
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <HAL_UART_RxCpltCallback+0x13c>)
 8000706:	617b      	str	r3, [r7, #20]
        HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), 1000);
 8000708:	6978      	ldr	r0, [r7, #20]
 800070a:	f7ff fdb5 	bl	8000278 <strlen>
 800070e:	4603      	mov	r3, r0
 8000710:	b29a      	uxth	r2, r3
 8000712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000716:	6979      	ldr	r1, [r7, #20]
 8000718:	480a      	ldr	r0, [pc, #40]	@ (8000744 <HAL_UART_RxCpltCallback+0x134>)
 800071a:	f006 ff97 	bl	800764c <HAL_UART_Transmit>

        // expecting packet that is 23 bytes long during test
        HAL_UART_Receive_IT(&huart2, newRxData, 23);
 800071e:	2217      	movs	r2, #23
 8000720:	4905      	ldr	r1, [pc, #20]	@ (8000738 <HAL_UART_RxCpltCallback+0x128>)
 8000722:	480b      	ldr	r0, [pc, #44]	@ (8000750 <HAL_UART_RxCpltCallback+0x140>)
 8000724:	f007 f830 	bl	8007788 <HAL_UART_Receive_IT>
 8000728:	46b5      	mov	sp, r6
    }
}
 800072a:	bf00      	nop
 800072c:	3724      	adds	r7, #36	@ 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000734:	40004400 	.word	0x40004400
 8000738:	20000728 	.word	0x20000728
 800073c:	20000710 	.word	0x20000710
 8000740:	0800ada0 	.word	0x0800ada0
 8000744:	20000104 	.word	0x20000104
 8000748:	0800adb0 	.word	0x0800adb0
 800074c:	0800adb8 	.word	0x0800adb8
 8000750:	20000198 	.word	0x20000198

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fd54 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f81c 	bl	8000798 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000760:	f000 f87e 	bl	8000860 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f000 f9e2 	bl	8000b2c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000768:	f000 f888 	bl	800087c <MX_ADC1_Init>
  MX_ICACHE_Init();
 800076c:	f000 f8ca 	bl	8000904 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 8000770:	f000 f8dc 	bl	800092c <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8000774:	f000 f910 	bl	8000998 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000778:	f000 f9a6 	bl	8000ac8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 800077c:	f000 f958 	bl	8000a30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // During test, expecting packet that is 23 bytes long
  HAL_UART_Receive_IT(&huart2, newRxData, 23);
 8000780:	2217      	movs	r2, #23
 8000782:	4903      	ldr	r1, [pc, #12]	@ (8000790 <main+0x3c>)
 8000784:	4803      	ldr	r0, [pc, #12]	@ (8000794 <main+0x40>)
 8000786:	f006 ffff 	bl	8007788 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800078a:	bf00      	nop
 800078c:	e7fd      	b.n	800078a <main+0x36>
 800078e:	bf00      	nop
 8000790:	20000728 	.word	0x20000728
 8000794:	20000198 	.word	0x20000198

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b09e      	sub	sp, #120	@ 0x78
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	2260      	movs	r2, #96	@ 0x60
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f009 fe5c 	bl	800a464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	463b      	mov	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
 80007ba:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007bc:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80007c0:	f002 fea4 	bl	800350c <HAL_PWREx_ControlVoltageScaling>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x36>
  {
    Error_Handler();
 80007ca:	f000 fa65 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80007ce:	2332      	movs	r3, #50	@ 0x32
 80007d0:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007de:	2310      	movs	r3, #16
 80007e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007e2:	2301      	movs	r3, #1
 80007e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007e6:	2310      	movs	r3, #16
 80007e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80007ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f0:	2302      	movs	r3, #2
 80007f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007f4:	2301      	movs	r3, #1
 80007f6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000800:	2350      	movs	r3, #80	@ 0x50
 8000802:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000804:	2302      	movs	r3, #2
 8000806:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000808:	2302      	movs	r3, #2
 800080a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000810:	2300      	movs	r3, #0
 8000812:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0318 	add.w	r3, r7, #24
 800081c:	4618      	mov	r0, r3
 800081e:	f002 ff81 	bl	8003724 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000828:	f000 fa36 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	231f      	movs	r3, #31
 800082e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000830:	2303      	movs	r3, #3
 8000832:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	2104      	movs	r1, #4
 8000848:	4618      	mov	r0, r3
 800084a:	f003 fe47 	bl	80044dc <HAL_RCC_ClockConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000854:	f000 fa20 	bl	8000c98 <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	3778      	adds	r7, #120	@ 0x78
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000864:	f002 ff3e 	bl	80036e4 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000868:	2002      	movs	r0, #2
 800086a:	f002 fedb 	bl	8003624 <HAL_PWREx_ConfigSupply>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000874:	f000 fa10 	bl	8000c98 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}

0800087c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000880:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <MX_ADC1_Init+0x80>)
 8000882:	4a1f      	ldr	r2, [pc, #124]	@ (8000900 <MX_ADC1_Init+0x84>)
 8000884:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000886:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <MX_ADC1_Init+0x80>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800088c:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <MX_ADC1_Init+0x80>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000892:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <MX_ADC1_Init+0x80>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <MX_ADC1_Init+0x80>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <MX_ADC1_Init+0x80>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <MX_ADC1_Init+0x80>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008aa:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_ADC1_Init+0x80>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80008b2:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_ADC1_Init+0x80>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b8:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <MX_ADC1_Init+0x80>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_ADC1_Init+0x80>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_ADC1_Init+0x80>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_ADC1_Init+0x80>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_ADC1_Init+0x80>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_ADC1_Init+0x80>)
 80008dc:	2200      	movs	r2, #0
 80008de:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_ADC1_Init+0x80>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_ADC1_Init+0x80>)
 80008ea:	f000 fe73 	bl	80015d4 <HAL_ADC_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80008f4:	f000 f9d0 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000078 	.word	0x20000078
 8000900:	42028000 	.word	0x42028000

08000904 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fd57 	bl	80023bc <HAL_ICACHE_ConfigAssociativityMode>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000914:	f000 f9c0 	bl	8000c98 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000918:	f001 fd70 	bl	80023fc <HAL_ICACHE_Enable>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000922:	f000 f9b9 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
 8000940:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000942:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000946:	f7ff fe47 	bl	80005d8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800094a:	2002      	movs	r0, #2
 800094c:	f7ff fe28 	bl	80005a0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000950:	2001      	movs	r0, #1
 8000952:	f7ff fe25 	bl	80005a0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800095a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800095c:	2303      	movs	r3, #3
 800095e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	4809      	ldr	r0, [pc, #36]	@ (8000990 <MX_UCPD1_Init+0x64>)
 800096a:	f008 ff10 	bl	800978e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800096e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000972:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000974:	2303      	movs	r3, #3
 8000976:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <MX_UCPD1_Init+0x68>)
 8000982:	f008 ff04 	bl	800978e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	42020400 	.word	0x42020400
 8000994:	42020000 	.word	0x42020000

08000998 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800099c:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 800099e:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <MX_USART1_UART_Init+0x94>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e0:	4811      	ldr	r0, [pc, #68]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009e2:	f006 fde3 	bl	80075ac <HAL_UART_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f954 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 80009f4:	f008 fcb5 	bl	8009362 <HAL_UARTEx_SetTxFifoThreshold>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009fe:	f000 f94b 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4808      	ldr	r0, [pc, #32]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 8000a06:	f008 fcea 	bl	80093de <HAL_UARTEx_SetRxFifoThreshold>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a10:	f000 f942 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_USART1_UART_Init+0x90>)
 8000a16:	f008 fc6b 	bl	80092f0 <HAL_UARTEx_DisableFifoMode>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f000 f93a 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000104 	.word	0x20000104
 8000a2c:	40013800 	.word	0x40013800

08000a30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a34:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a36:	4a23      	ldr	r2, [pc, #140]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a72:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a78:	4811      	ldr	r0, [pc, #68]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a7a:	f006 fd97 	bl	80075ac <HAL_UART_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a84:	f000 f908 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a8c:	f008 fc69 	bl	8009362 <HAL_UARTEx_SetTxFifoThreshold>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a96:	f000 f8ff 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4808      	ldr	r0, [pc, #32]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a9e:	f008 fc9e 	bl	80093de <HAL_UARTEx_SetRxFifoThreshold>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa8:	f000 f8f6 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000aae:	f008 fc1f 	bl	80092f0 <HAL_UARTEx_DisableFifoMode>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab8:	f000 f8ee 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000198 	.word	0x20000198
 8000ac4:	40004400 	.word	0x40004400

08000ac8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000acc:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ace:	4a16      	ldr	r2, [pc, #88]	@ (8000b28 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ad2:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad4:	2206      	movs	r2, #6
 8000ad6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000afc:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b10:	f001 fc84 	bl	800241c <HAL_PCD_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b1a:	f000 f8bd 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000022c 	.word	0x2000022c
 8000b28:	42040000 	.word	0x42040000

08000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	@ 0x28
 8000b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	4b50      	ldr	r3, [pc, #320]	@ (8000c84 <MX_GPIO_Init+0x158>)
 8000b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b48:	4a4e      	ldr	r2, [pc, #312]	@ (8000c84 <MX_GPIO_Init+0x158>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b52:	4b4c      	ldr	r3, [pc, #304]	@ (8000c84 <MX_GPIO_Init+0x158>)
 8000b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b48      	ldr	r3, [pc, #288]	@ (8000c84 <MX_GPIO_Init+0x158>)
 8000b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b66:	4a47      	ldr	r2, [pc, #284]	@ (8000c84 <MX_GPIO_Init+0x158>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b70:	4b44      	ldr	r3, [pc, #272]	@ (8000c84 <MX_GPIO_Init+0x158>)
 8000b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	4b41      	ldr	r3, [pc, #260]	@ (8000c84 <MX_GPIO_Init+0x158>)
 8000b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b84:	4a3f      	ldr	r2, [pc, #252]	@ (8000c84 <MX_GPIO_Init+0x158>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c84 <MX_GPIO_Init+0x158>)
 8000b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b9c:	4b39      	ldr	r3, [pc, #228]	@ (8000c84 <MX_GPIO_Init+0x158>)
 8000b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba2:	4a38      	ldr	r2, [pc, #224]	@ (8000c84 <MX_GPIO_Init+0x158>)
 8000ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ba8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bac:	4b35      	ldr	r3, [pc, #212]	@ (8000c84 <MX_GPIO_Init+0x158>)
 8000bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	4832      	ldr	r0, [pc, #200]	@ (8000c88 <MX_GPIO_Init+0x15c>)
 8000bc0:	f001 fbe4 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2180      	movs	r1, #128	@ 0x80
 8000bc8:	4830      	ldr	r0, [pc, #192]	@ (8000c8c <MX_GPIO_Init+0x160>)
 8000bca:	f001 fbdf 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	21a0      	movs	r1, #160	@ 0xa0
 8000bd2:	482f      	ldr	r0, [pc, #188]	@ (8000c90 <MX_GPIO_Init+0x164>)
 8000bd4:	f001 fbda 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000bd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bde:	4b2d      	ldr	r3, [pc, #180]	@ (8000c94 <MX_GPIO_Init+0x168>)
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4827      	ldr	r0, [pc, #156]	@ (8000c8c <MX_GPIO_Init+0x160>)
 8000bee:	f001 f9f5 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000bf2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4822      	ldr	r0, [pc, #136]	@ (8000c90 <MX_GPIO_Init+0x164>)
 8000c08:	f001 f9e8 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4819      	ldr	r0, [pc, #100]	@ (8000c88 <MX_GPIO_Init+0x15c>)
 8000c24:	f001 f9da 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c28:	2380      	movs	r3, #128	@ 0x80
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c34:	2302      	movs	r3, #2
 8000c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4813      	ldr	r0, [pc, #76]	@ (8000c8c <MX_GPIO_Init+0x160>)
 8000c40:	f001 f9cc 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000c44:	2320      	movs	r3, #32
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480d      	ldr	r0, [pc, #52]	@ (8000c90 <MX_GPIO_Init+0x164>)
 8000c5c:	f001 f9be 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000c60:	2380      	movs	r3, #128	@ 0x80
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4806      	ldr	r0, [pc, #24]	@ (8000c90 <MX_GPIO_Init+0x164>)
 8000c78:	f001 f9b0 	bl	8001fdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	@ 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	46020c00 	.word	0x46020c00
 8000c88:	42021800 	.word	0x42021800
 8000c8c:	42020800 	.word	0x42020800
 8000c90:	42020400 	.word	0x42020400
 8000c94:	10210000 	.word	0x10210000

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <Error_Handler+0x8>

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_MspInit+0x38>)
 8000cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <HAL_MspInit+0x38>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <HAL_MspInit+0x38>)
 8000cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000cc8:	f002 fd1c 	bl	8003704 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000ccc:	2004      	movs	r0, #4
 8000cce:	f000 fff8 	bl	8001cc2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	46020c00 	.word	0x46020c00

08000ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	22c0      	movs	r2, #192	@ 0xc0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f009 fbaf 	bl	800a464 <memset>
  if(hadc->Instance==ADC1)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a24      	ldr	r2, [pc, #144]	@ (8000d9c <HAL_ADC_MspInit+0xbc>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d140      	bne.n	8000d92 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000d10:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000d1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f003 ffa7 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000d34:	f7ff ffb0 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d38:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <HAL_ADC_MspInit+0xc0>)
 8000d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d3e:	4a18      	ldr	r2, [pc, #96]	@ (8000da0 <HAL_ADC_MspInit+0xc0>)
 8000d40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d48:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <HAL_ADC_MspInit+0xc0>)
 8000d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d56:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <HAL_ADC_MspInit+0xc0>)
 8000d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d5c:	4a10      	ldr	r2, [pc, #64]	@ (8000da0 <HAL_ADC_MspInit+0xc0>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <HAL_ADC_MspInit+0xc0>)
 8000d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000d74:	2304      	movs	r3, #4
 8000d76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <HAL_ADC_MspInit+0xc4>)
 8000d8e:	f001 f925 	bl	8001fdc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d92:	bf00      	nop
 8000d94:	37e8      	adds	r7, #232	@ 0xe8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	42028000 	.word	0x42028000
 8000da0:	46020c00 	.word	0x46020c00
 8000da4:	42020800 	.word	0x42020800

08000da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0bc      	sub	sp, #240	@ 0xf0
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	22c0      	movs	r2, #192	@ 0xc0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f009 fb4b 	bl	800a464 <memset>
  if(huart->Instance==USART1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a50      	ldr	r2, [pc, #320]	@ (8000f14 <HAL_UART_MspInit+0x16c>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d146      	bne.n	8000e66 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dd8:	f04f 0201 	mov.w	r2, #1
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000de4:	2300      	movs	r3, #0
 8000de6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de8:	f107 0318 	add.w	r3, r7, #24
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 ff45 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000df8:	f7ff ff4e 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dfc:	4b46      	ldr	r3, [pc, #280]	@ (8000f18 <HAL_UART_MspInit+0x170>)
 8000dfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e02:	4a45      	ldr	r2, [pc, #276]	@ (8000f18 <HAL_UART_MspInit+0x170>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e08:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000e0c:	4b42      	ldr	r3, [pc, #264]	@ (8000f18 <HAL_UART_MspInit+0x170>)
 8000e0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f18 <HAL_UART_MspInit+0x170>)
 8000e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e20:	4a3d      	ldr	r2, [pc, #244]	@ (8000f18 <HAL_UART_MspInit+0x170>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f18 <HAL_UART_MspInit+0x170>)
 8000e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000e38:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e52:	2307      	movs	r3, #7
 8000e54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	482f      	ldr	r0, [pc, #188]	@ (8000f1c <HAL_UART_MspInit+0x174>)
 8000e60:	f001 f8bc 	bl	8001fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e64:	e051      	b.n	8000f0a <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART2)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8000f20 <HAL_UART_MspInit+0x178>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d14c      	bne.n	8000f0a <HAL_UART_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e70:	f04f 0202 	mov.w	r2, #2
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e80:	f107 0318 	add.w	r3, r7, #24
 8000e84:	4618      	mov	r0, r3
 8000e86:	f003 fef9 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8000e90:	f7ff ff02 	bl	8000c98 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e94:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <HAL_UART_MspInit+0x170>)
 8000e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f18 <HAL_UART_MspInit+0x170>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <HAL_UART_MspInit+0x170>)
 8000ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <HAL_UART_MspInit+0x170>)
 8000eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eb8:	4a17      	ldr	r2, [pc, #92]	@ (8000f18 <HAL_UART_MspInit+0x170>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <HAL_UART_MspInit+0x170>)
 8000ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ed0:	230c      	movs	r3, #12
 8000ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee8:	2307      	movs	r3, #7
 8000eea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4809      	ldr	r0, [pc, #36]	@ (8000f1c <HAL_UART_MspInit+0x174>)
 8000ef6:	f001 f871 	bl	8001fdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	203e      	movs	r0, #62	@ 0x3e
 8000f00:	f000 feea 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f04:	203e      	movs	r0, #62	@ 0x3e
 8000f06:	f000 ff01 	bl	8001d0c <HAL_NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	37f0      	adds	r7, #240	@ 0xf0
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40013800 	.word	0x40013800
 8000f18:	46020c00 	.word	0x46020c00
 8000f1c:	42020000 	.word	0x42020000
 8000f20:	40004400 	.word	0x40004400

08000f24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0bc      	sub	sp, #240	@ 0xf0
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	22c0      	movs	r2, #192	@ 0xc0
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f009 fa8d 	bl	800a464 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a3c      	ldr	r2, [pc, #240]	@ (8001040 <HAL_PCD_MspInit+0x11c>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d171      	bne.n	8001038 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f54:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f66:	f107 0318 	add.w	r3, r7, #24
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 fe86 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000f76:	f7ff fe8f 	bl	8000c98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b32      	ldr	r3, [pc, #200]	@ (8001044 <HAL_PCD_MspInit+0x120>)
 8000f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f80:	4a30      	ldr	r2, [pc, #192]	@ (8001044 <HAL_PCD_MspInit+0x120>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001044 <HAL_PCD_MspInit+0x120>)
 8000f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f98:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4822      	ldr	r0, [pc, #136]	@ (8001048 <HAL_PCD_MspInit+0x124>)
 8000fc0:	f001 f80c 	bl	8001fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001044 <HAL_PCD_MspInit+0x120>)
 8000fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fca:	4a1e      	ldr	r2, [pc, #120]	@ (8001044 <HAL_PCD_MspInit+0x120>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <HAL_PCD_MspInit+0x120>)
 8000fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <HAL_PCD_MspInit+0x120>)
 8000fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d119      	bne.n	8001024 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <HAL_PCD_MspInit+0x120>)
 8000ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ff6:	4a13      	ldr	r2, [pc, #76]	@ (8001044 <HAL_PCD_MspInit+0x120>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001000:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <HAL_PCD_MspInit+0x120>)
 8001002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800100e:	f002 fb59 	bl	80036c4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <HAL_PCD_MspInit+0x120>)
 8001014:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001018:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <HAL_PCD_MspInit+0x120>)
 800101a:	f023 0304 	bic.w	r3, r3, #4
 800101e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001022:	e001      	b.n	8001028 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001024:	f002 fb4e 	bl	80036c4 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2049      	movs	r0, #73	@ 0x49
 800102e:	f000 fe53 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001032:	2049      	movs	r0, #73	@ 0x49
 8001034:	f000 fe6a 	bl	8001d0c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001038:	bf00      	nop
 800103a:	37f0      	adds	r7, #240	@ 0xf0
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	42040000 	.word	0x42040000
 8001044:	46020c00 	.word	0x46020c00
 8001048:	42020000 	.word	0x42020000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a2:	f000 f955 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <USART2_IRQHandler+0x10>)
 80010b2:	f006 fbcb 	bl	800784c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000198 	.word	0x20000198

080010c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <OTG_FS_IRQHandler+0x10>)
 80010c6:	f001 fac1 	bl	800264c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000022c 	.word	0x2000022c

080010d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010dc:	4a14      	ldr	r2, [pc, #80]	@ (8001130 <_sbrk+0x5c>)
 80010de:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <_sbrk+0x60>)
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f0:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <_sbrk+0x64>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	@ (800113c <_sbrk+0x68>)
 80010f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	429a      	cmp	r2, r3
 8001102:	d207      	bcs.n	8001114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001104:	f009 f9b6 	bl	800a474 <__errno>
 8001108:	4603      	mov	r3, r0
 800110a:	220c      	movs	r2, #12
 800110c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	e009      	b.n	8001128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111a:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <_sbrk+0x64>)
 8001124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200c0000 	.word	0x200c0000
 8001134:	00000400 	.word	0x00000400
 8001138:	20000740 	.word	0x20000740
 800113c:	20000890 	.word	0x20000890

08001140 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001144:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <SystemInit+0x68>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800114a:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <SystemInit+0x68>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001154:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <SystemInit+0x6c>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <SystemInit+0x6c>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <SystemInit+0x6c>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <SystemInit+0x6c>)
 8001168:	2200      	movs	r2, #0
 800116a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <SystemInit+0x6c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0e      	ldr	r2, [pc, #56]	@ (80011ac <SystemInit+0x6c>)
 8001172:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001176:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800117a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800117c:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <SystemInit+0x6c>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001182:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <SystemInit+0x6c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a09      	ldr	r2, [pc, #36]	@ (80011ac <SystemInit+0x6c>)
 8001188:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800118c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800118e:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <SystemInit+0x6c>)
 8001190:	2200      	movs	r2, #0
 8001192:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <SystemInit+0x68>)
 8001196:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800119a:	609a      	str	r2, [r3, #8]
  #endif
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00
 80011ac:	46020c00 	.word	0x46020c00

080011b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80011b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011e8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011b4:	f7ff ffc4 	bl	8001140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011ba:	e003      	b.n	80011c4 <LoopCopyDataInit>

080011bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011c2:	3104      	adds	r1, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011c4:	480a      	ldr	r0, [pc, #40]	@ (80011f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011cc:	d3f6      	bcc.n	80011bc <CopyDataInit>
	ldr	r2, =_sbss
 80011ce:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011d0:	e002      	b.n	80011d8 <LoopFillZerobss>

080011d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011d4:	f842 3b04 	str.w	r3, [r2], #4

080011d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <LoopForever+0x16>)
	cmp	r2, r3
 80011da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011dc:	d3f9      	bcc.n	80011d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011de:	f009 f94f 	bl	800a480 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011e2:	f7ff fab7 	bl	8000754 <main>

080011e6 <LoopForever>:

LoopForever:
    b LoopForever
 80011e6:	e7fe      	b.n	80011e6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80011e8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80011ec:	0800af00 	.word	0x0800af00
	ldr	r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011f4:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 80011f8:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 80011fc:	20000890 	.word	0x20000890

08001200 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC1_IRQHandler>
	...

08001204 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_Init+0x50>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a11      	ldr	r2, [pc, #68]	@ (8001254 <HAL_Init+0x50>)
 800120e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 fd54 	bl	8001cc2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800121a:	f003 fb51 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 800121e:	4602      	mov	r2, r0
 8001220:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <HAL_Init+0x54>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	490c      	ldr	r1, [pc, #48]	@ (800125c <HAL_Init+0x58>)
 800122a:	5ccb      	ldrb	r3, [r1, r3]
 800122c:	fa22 f303 	lsr.w	r3, r2, r3
 8001230:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <HAL_Init+0x5c>)
 8001232:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001234:	2004      	movs	r0, #4
 8001236:	f000 fd99 	bl	8001d6c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800123a:	2000      	movs	r0, #0
 800123c:	f000 f812 	bl	8001264 <HAL_InitTick>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e002      	b.n	8001250 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800124a:	f7ff fd2b 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40022000 	.word	0x40022000
 8001258:	46020c00 	.word	0x46020c00
 800125c:	0800adbc 	.word	0x0800adbc
 8001260:	20000000 	.word	0x20000000

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001270:	4b33      	ldr	r3, [pc, #204]	@ (8001340 <HAL_InitTick+0xdc>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e05c      	b.n	8001336 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800127c:	4b31      	ldr	r3, [pc, #196]	@ (8001344 <HAL_InitTick+0xe0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b04      	cmp	r3, #4
 8001286:	d10c      	bne.n	80012a2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001288:	4b2f      	ldr	r3, [pc, #188]	@ (8001348 <HAL_InitTick+0xe4>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b2c      	ldr	r3, [pc, #176]	@ (8001340 <HAL_InitTick+0xdc>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e037      	b.n	8001312 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80012a2:	f000 fdbb 	bl	8001e1c <HAL_SYSTICK_GetCLKSourceConfig>
 80012a6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d023      	beq.n	80012f6 <HAL_InitTick+0x92>
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d82d      	bhi.n	8001310 <HAL_InitTick+0xac>
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_InitTick+0x5e>
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d00d      	beq.n	80012dc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80012c0:	e026      	b.n	8001310 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <HAL_InitTick+0xe4>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <HAL_InitTick+0xdc>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80012d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	60fb      	str	r3, [r7, #12]
        break;
 80012da:	e01a      	b.n	8001312 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80012dc:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <HAL_InitTick+0xdc>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80012ea:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	60fb      	str	r3, [r7, #12]
        break;
 80012f4:	e00d      	b.n	8001312 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <HAL_InitTick+0xdc>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001300:	fbb3 f3f2 	udiv	r3, r3, r2
 8001304:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001308:	fbb2 f3f3 	udiv	r3, r2, r3
 800130c:	60fb      	str	r3, [r7, #12]
        break;
 800130e:	e000      	b.n	8001312 <HAL_InitTick+0xae>
        break;
 8001310:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 fd08 	bl	8001d28 <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e009      	b.n	8001336 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001322:	2200      	movs	r2, #0
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	f04f 30ff 	mov.w	r0, #4294967295
 800132a:	f000 fcd5 	bl	8001cd8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800132e:	4a07      	ldr	r2, [pc, #28]	@ (800134c <HAL_InitTick+0xe8>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	e000e010 	.word	0xe000e010
 8001348:	20000000 	.word	0x20000000
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000008 	.word	0x20000008
 8001374:	20000744 	.word	0x20000744

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	@ (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000744 	.word	0x20000744

08001390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff ffee 	bl	8001378 <HAL_GetTick>
 800139c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d005      	beq.n	80013b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <HAL_Delay+0x44>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b6:	bf00      	nop
 80013b8:	f7ff ffde 	bl	8001378 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8f7      	bhi.n	80013b8 <HAL_Delay+0x28>
  {
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000008 	.word	0x20000008

080013d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <LL_ADC_SetResolution+0x3c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d104      	bne.n	8001420 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3b01      	subs	r3, #1
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f023 020c 	bic.w	r2, r3, #12
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	60da      	str	r2, [r3, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	46021000 	.word	0x46021000

08001440 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800144e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001452:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001462:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	2a00      	cmp	r2, #0
 800146a:	d002      	beq.n	8001472 <LL_ADC_SetGainCompensation+0x32>
 800146c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001470:	e000      	b.n	8001474 <LL_ADC_SetGainCompensation+0x34>
 8001472:	2200      	movs	r2, #0
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	671a      	str	r2, [r3, #112]	@ 0x70
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2107      	movs	r1, #7
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	401a      	ands	r2, r3
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	431a      	orrs	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80014d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6093      	str	r3, [r2, #8]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014fc:	d101      	bne.n	8001502 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001520:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001524:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	609a      	str	r2, [r3, #8]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001548:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800154c:	d101      	bne.n	8001552 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <LL_ADC_IsEnabled+0x18>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <LL_ADC_IsEnabled+0x1a>
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b04      	cmp	r3, #4
 8001598:	d101      	bne.n	800159e <LL_ADC_REG_IsConversionOngoing+0x18>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d101      	bne.n	80015c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e2b3      	b.n	8001b5c <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a8b      	ldr	r2, [pc, #556]	@ (8001830 <HAL_ADC_Init+0x25c>)
 8001602:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001608:	2b00      	cmp	r3, #0
 800160a:	d109      	bne.n	8001620 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fb67 	bl	8000ce0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff5f 	bl	80014e8 <LL_ADC_IsDeepPowerDownEnabled>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff45 	bl	80014c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff7a 	bl	8001538 <LL_ADC_IsInternalRegulatorEnabled>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d115      	bne.n	8001676 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff5e 	bl	8001510 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001654:	4b77      	ldr	r3, [pc, #476]	@ (8001834 <HAL_ADC_Init+0x260>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	099b      	lsrs	r3, r3, #6
 800165a:	4a77      	ldr	r2, [pc, #476]	@ (8001838 <HAL_ADC_Init+0x264>)
 800165c:	fba2 2303 	umull	r2, r3, r2, r3
 8001660:	099b      	lsrs	r3, r3, #6
 8001662:	3301      	adds	r3, #1
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001668:	e002      	b.n	8001670 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3b01      	subs	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f9      	bne.n	800166a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff5c 	bl	8001538 <LL_ADC_IsInternalRegulatorEnabled>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10e      	bne.n	80016a4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800168a:	f043 0210 	orr.w	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001696:	f043 0201 	orr.w	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff6c 	bl	8001586 <LL_ADC_REG_IsConversionOngoing>
 80016ae:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f040 8244 	bne.w	8001b46 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f040 8240 	bne.w	8001b46 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80016ca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80016ce:	f043 0202 	orr.w	r2, r3, #2
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff40 	bl	8001560 <LL_ADC_IsEnabled>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d140      	bne.n	8001768 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a51      	ldr	r2, [pc, #324]	@ (8001830 <HAL_ADC_Init+0x25c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d028      	beq.n	8001742 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a51      	ldr	r2, [pc, #324]	@ (800183c <HAL_ADC_Init+0x268>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d109      	bne.n	800170e <HAL_ADC_Init+0x13a>
 80016fa:	4850      	ldr	r0, [pc, #320]	@ (800183c <HAL_ADC_Init+0x268>)
 80016fc:	f7ff ff30 	bl	8001560 <LL_ADC_IsEnabled>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	bf0c      	ite	eq
 8001706:	2301      	moveq	r3, #1
 8001708:	2300      	movne	r3, #0
 800170a:	b2db      	uxtb	r3, r3
 800170c:	e008      	b.n	8001720 <HAL_ADC_Init+0x14c>
 800170e:	4848      	ldr	r0, [pc, #288]	@ (8001830 <HAL_ADC_Init+0x25c>)
 8001710:	f7ff ff26 	bl	8001560 <LL_ADC_IsEnabled>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf0c      	ite	eq
 800171a:	2301      	moveq	r3, #1
 800171c:	2300      	movne	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d021      	beq.n	8001768 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a44      	ldr	r2, [pc, #272]	@ (800183c <HAL_ADC_Init+0x268>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d101      	bne.n	8001732 <HAL_ADC_Init+0x15e>
 800172e:	4a44      	ldr	r2, [pc, #272]	@ (8001840 <HAL_ADC_Init+0x26c>)
 8001730:	e000      	b.n	8001734 <HAL_ADC_Init+0x160>
 8001732:	4a44      	ldr	r2, [pc, #272]	@ (8001844 <HAL_ADC_Init+0x270>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4619      	mov	r1, r3
 800173a:	4610      	mov	r0, r2
 800173c:	f7ff fe4c 	bl	80013d8 <LL_ADC_SetCommonClock>
 8001740:	e012      	b.n	8001768 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	4619      	mov	r1, r3
 800174c:	4610      	mov	r0, r2
 800174e:	f7ff fe57 	bl	8001400 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001752:	4b3c      	ldr	r3, [pc, #240]	@ (8001844 <HAL_ADC_Init+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001762:	4938      	ldr	r1, [pc, #224]	@ (8001844 <HAL_ADC_Init+0x270>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a30      	ldr	r2, [pc, #192]	@ (8001830 <HAL_ADC_Init+0x25c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d010      	beq.n	8001794 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001778:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800177e:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001784:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800178c:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800178e:	4313      	orrs	r3, r2
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	e030      	b.n	80017f6 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7f1b      	ldrb	r3, [r3, #28]
 8001798:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017a0:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017a2:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80017a8:	2a00      	cmp	r2, #0
 80017aa:	d002      	beq.n	80017b2 <HAL_ADC_Init+0x1de>
 80017ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017b0:	e000      	b.n	80017b4 <HAL_ADC_Init+0x1e0>
 80017b2:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017b4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80017ba:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	da04      	bge.n	80017ce <HAL_ADC_Init+0x1fa>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017cc:	e001      	b.n	80017d2 <HAL_ADC_Init+0x1fe>
 80017ce:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80017d2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4918      	ldr	r1, [pc, #96]	@ (800183c <HAL_ADC_Init+0x268>)
 80017da:	428b      	cmp	r3, r1
 80017dc:	d103      	bne.n	80017e6 <HAL_ADC_Init+0x212>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017e4:	e003      	b.n	80017ee <HAL_ADC_Init+0x21a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017ec:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80017ee:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017f0:	6a3a      	ldr	r2, [r7, #32]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d12f      	bne.n	8001860 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <HAL_ADC_Init+0x25c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d007      	beq.n	800181a <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	3b01      	subs	r3, #1
 8001810:	045b      	lsls	r3, r3, #17
 8001812:	6a3a      	ldr	r2, [r7, #32]
 8001814:	4313      	orrs	r3, r2
 8001816:	623b      	str	r3, [r7, #32]
 8001818:	e022      	b.n	8001860 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001820:	2b00      	cmp	r3, #0
 8001822:	d111      	bne.n	8001848 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800182a:	623b      	str	r3, [r7, #32]
 800182c:	e018      	b.n	8001860 <HAL_ADC_Init+0x28c>
 800182e:	bf00      	nop
 8001830:	46021000 	.word	0x46021000
 8001834:	20000000 	.word	0x20000000
 8001838:	053e2d63 	.word	0x053e2d63
 800183c:	42028000 	.word	0x42028000
 8001840:	42028308 	.word	0x42028308
 8001844:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800184c:	f043 0220 	orr.w	r2, r3, #32
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a92      	ldr	r2, [pc, #584]	@ (8001ab0 <HAL_ADC_Init+0x4dc>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d018      	beq.n	800189c <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186e:	2b00      	cmp	r3, #0
 8001870:	d009      	beq.n	8001886 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001876:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800187e:	4313      	orrs	r3, r2
 8001880:	6a3a      	ldr	r2, [r7, #32]
 8001882:	4313      	orrs	r3, r2
 8001884:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	4b89      	ldr	r3, [pc, #548]	@ (8001ab4 <HAL_ADC_Init+0x4e0>)
 800188e:	4013      	ands	r3, r2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	6a39      	ldr	r1, [r7, #32]
 8001896:	430b      	orrs	r3, r1
 8001898:	60d3      	str	r3, [r2, #12]
 800189a:	e031      	b.n	8001900 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d009      	beq.n	80018b8 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a8:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018b0:	4313      	orrs	r3, r2
 80018b2:	6a3a      	ldr	r2, [r7, #32]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	4b7e      	ldr	r3, [pc, #504]	@ (8001ab8 <HAL_ADC_Init+0x4e4>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	6a39      	ldr	r1, [r7, #32]
 80018c8:	430b      	orrs	r3, r1
 80018ca:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1a      	ldr	r2, [r3, #32]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a6a      	ldr	r2, [pc, #424]	@ (8001ab0 <HAL_ADC_Init+0x4dc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	f000 8093 	beq.w	8001a32 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fe38 	bl	8001586 <LL_ADC_REG_IsConversionOngoing>
 8001916:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fe45 	bl	80015ac <LL_ADC_INJ_IsConversionOngoing>
 8001922:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d161      	bne.n	80019ee <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d15e      	bne.n	80019ee <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7f1b      	ldrb	r3, [r3, #28]
 8001934:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4960      	ldr	r1, [pc, #384]	@ (8001abc <HAL_ADC_Init+0x4e8>)
 800193c:	428b      	cmp	r3, r1
 800193e:	d102      	bne.n	8001946 <HAL_ADC_Init+0x372>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001944:	e002      	b.n	800194c <HAL_ADC_Init+0x378>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800194a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800194c:	4313      	orrs	r3, r2
 800194e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800195a:	f023 0303 	bic.w	r3, r3, #3
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	6a39      	ldr	r1, [r7, #32]
 8001964:	430b      	orrs	r3, r1
 8001966:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4619      	mov	r1, r3
 800197a:	4610      	mov	r0, r2
 800197c:	f7ff fd60 	bl	8001440 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001986:	2b01      	cmp	r3, #1
 8001988:	d11e      	bne.n	80019c8 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800198e:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac0 <HAL_ADC_Init+0x4ec>)
 8001998:	4013      	ands	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800199e:	0411      	lsls	r1, r2, #16
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019a4:	4311      	orrs	r1, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80019aa:	4311      	orrs	r1, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80019b0:	4311      	orrs	r1, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80019b6:	0892      	lsrs	r2, r2, #2
 80019b8:	430a      	orrs	r2, r1
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0201 	orr.w	r2, r2, #1
 80019c4:	611a      	str	r2, [r3, #16]
 80019c6:	e007      	b.n	80019d8 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d10c      	bne.n	8001a10 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fc:	f023 010f 	bic.w	r1, r3, #15
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a04:	1e5a      	subs	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a0e:	e007      	b.n	8001a20 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 020f 	bic.w	r2, r2, #15
 8001a1e:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001a24:	f023 0303 	bic.w	r3, r3, #3
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001a30:	e092      	b.n	8001b58 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d111      	bne.n	8001a60 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001a44:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8001a4a:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8001a50:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <HAL_ADC_Init+0x4f0>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	69f9      	ldr	r1, [r7, #28]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2100      	movs	r1, #0
 8001a80:	f7ff fd01 	bl	8001486 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8001a92:	f7ff fcf8 	bl	8001486 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d114      	bne.n	8001ac8 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f062 020f 	orn	r2, r2, #15
 8001aac:	629a      	str	r2, [r3, #40]	@ 0x28
 8001aae:	e024      	b.n	8001afa <HAL_ADC_Init+0x526>
 8001ab0:	46021000 	.word	0x46021000
 8001ab4:	fff0c013 	.word	0xfff0c013
 8001ab8:	ffde800d 	.word	0xffde800d
 8001abc:	42028000 	.word	0x42028000
 8001ac0:	fc00f81e 	.word	0xfc00f81e
 8001ac4:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ad0:	d113      	bne.n	8001afa <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001adc:	3b01      	subs	r3, #1
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	f003 031c 	and.w	r3, r3, #28
 8001ae4:	f06f 020f 	mvn.w	r2, #15
 8001ae8:	fa02 f103 	lsl.w	r1, r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <HAL_ADC_Init+0x590>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	6a3a      	ldr	r2, [r7, #32]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d10b      	bne.n	8001b22 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b14:	f023 0303 	bic.w	r3, r3, #3
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001b20:	e01a      	b.n	8001b58 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b26:	f023 0312 	bic.w	r3, r3, #18
 8001b2a:	f043 0210 	orr.w	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001b44:	e008      	b.n	8001b58 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b4a:	f043 0210 	orr.w	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8001b58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3728      	adds	r7, #40	@ 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	833ffff3 	.word	0x833ffff3

08001b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b78:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b84:	4013      	ands	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9a:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	60d3      	str	r3, [r2, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb4:	4b04      	ldr	r3, [pc, #16]	@ (8001bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	f003 0307 	and.w	r3, r3, #7
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	db0b      	blt.n	8001bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	f003 021f 	and.w	r2, r3, #31
 8001be4:	4907      	ldr	r1, [pc, #28]	@ (8001c04 <__NVIC_EnableIRQ+0x38>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	2001      	movs	r0, #1
 8001bee:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000e100 	.word	0xe000e100

08001c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	db0a      	blt.n	8001c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	490c      	ldr	r1, [pc, #48]	@ (8001c54 <__NVIC_SetPriority+0x4c>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c30:	e00a      	b.n	8001c48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4908      	ldr	r1, [pc, #32]	@ (8001c58 <__NVIC_SetPriority+0x50>)
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	3b04      	subs	r3, #4
 8001c40:	0112      	lsls	r2, r2, #4
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	440b      	add	r3, r1
 8001c46:	761a      	strb	r2, [r3, #24]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000e100 	.word	0xe000e100
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	@ 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f1c3 0307 	rsb	r3, r3, #7
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	bf28      	it	cs
 8001c7a:	2304      	movcs	r3, #4
 8001c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3304      	adds	r3, #4
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d902      	bls.n	8001c8c <NVIC_EncodePriority+0x30>
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3b03      	subs	r3, #3
 8001c8a:	e000      	b.n	8001c8e <NVIC_EncodePriority+0x32>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	f04f 32ff 	mov.w	r2, #4294967295
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	43d9      	mvns	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	4313      	orrs	r3, r2
         );
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3724      	adds	r7, #36	@ 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ff4c 	bl	8001b68 <__NVIC_SetPriorityGrouping>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce6:	f7ff ff63 	bl	8001bb0 <__NVIC_GetPriorityGrouping>
 8001cea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	6978      	ldr	r0, [r7, #20]
 8001cf2:	f7ff ffb3 	bl	8001c5c <NVIC_EncodePriority>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ff82 	bl	8001c08 <__NVIC_SetPriority>
}
 8001d04:	bf00      	nop
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff56 	bl	8001bcc <__NVIC_EnableIRQ>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d38:	d301      	bcc.n	8001d3e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00d      	b.n	8001d5a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <HAL_SYSTICK_Config+0x40>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001d46:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <HAL_SYSTICK_Config+0x40>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001d4c:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <HAL_SYSTICK_Config+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a05      	ldr	r2, [pc, #20]	@ (8001d68 <HAL_SYSTICK_Config+0x40>)
 8001d52:	f043 0303 	orr.w	r3, r3, #3
 8001d56:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e010 	.word	0xe000e010

08001d6c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d844      	bhi.n	8001e04 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d80 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d80:	08001da3 	.word	0x08001da3
 8001d84:	08001dc1 	.word	0x08001dc1
 8001d88:	08001de3 	.word	0x08001de3
 8001d8c:	08001e05 	.word	0x08001e05
 8001d90:	08001d95 	.word	0x08001d95
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d94:	4b1f      	ldr	r3, [pc, #124]	@ (8001e14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1e      	ldr	r2, [pc, #120]	@ (8001e14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6013      	str	r3, [r2, #0]
      break;
 8001da0:	e031      	b.n	8001e06 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001da2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001dae:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db4:	4a18      	ldr	r2, [pc, #96]	@ (8001e18 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001db6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001dba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001dbe:	e022      	b.n	8001e06 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001dc0:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a13      	ldr	r2, [pc, #76]	@ (8001e14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001dcc:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001dd6:	4a10      	ldr	r2, [pc, #64]	@ (8001e18 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001dd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001de0:	e011      	b.n	8001e06 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001de2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a0b      	ldr	r2, [pc, #44]	@ (8001e14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001de8:	f023 0304 	bic.w	r3, r3, #4
 8001dec:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001dee:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001df8:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001dfa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001e02:	e000      	b.n	8001e06 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001e04:	bf00      	nop
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010
 8001e18:	46020c00 	.word	0x46020c00

08001e1c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001e22:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001e2e:	2304      	movs	r3, #4
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	e021      	b.n	8001e78 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001e34:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e3a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001e3e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e46:	d011      	beq.n	8001e6c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e4e:	d810      	bhi.n	8001e72 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d004      	beq.n	8001e60 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e5c:	d003      	beq.n	8001e66 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001e5e:	e008      	b.n	8001e72 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001e60:	2300      	movs	r3, #0
 8001e62:	607b      	str	r3, [r7, #4]
        break;
 8001e64:	e008      	b.n	8001e78 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001e66:	2301      	movs	r3, #1
 8001e68:	607b      	str	r3, [r7, #4]
        break;
 8001e6a:	e005      	b.n	8001e78 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	607b      	str	r3, [r7, #4]
        break;
 8001e70:	e002      	b.n	8001e78 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
        break;
 8001e76:	bf00      	nop
    }
  }
  return systick_source;
 8001e78:	687b      	ldr	r3, [r7, #4]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010
 8001e8c:	46020c00 	.word	0x46020c00

08001e90 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001e98:	f7ff fa6e 	bl	8001378 <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e06b      	b.n	8001f80 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d008      	beq.n	8001ec6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e05c      	b.n	8001f80 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0204 	orr.w	r2, r2, #4
 8001ed4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2205      	movs	r2, #5
 8001eda:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001ede:	e020      	b.n	8001f22 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001ee0:	f7ff fa4a 	bl	8001378 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b05      	cmp	r3, #5
 8001eec:	d919      	bls.n	8001f22 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef2:	f043 0210 	orr.w	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2203      	movs	r2, #3
 8001efe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f12:	2201      	movs	r2, #1
 8001f14:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e02e      	b.n	8001f80 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0d7      	beq.n	8001ee0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0202 	orr.w	r2, r2, #2
 8001f3e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2204      	movs	r2, #4
 8001f44:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001f50:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2200      	movs	r2, #0
 8001f74:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e019      	b.n	8001fce <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d004      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e00e      	b.n	8001fce <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	@ 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001fee:	e1ba      	b.n	8002366 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 81aa 	beq.w	8002360 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a55      	ldr	r2, [pc, #340]	@ (8002164 <HAL_GPIO_Init+0x188>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d15d      	bne.n	80020d0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800201a:	2201      	movs	r2, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	4013      	ands	r3, r2
 8002028:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	4313      	orrs	r3, r2
 800203c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002044:	4a48      	ldr	r2, [pc, #288]	@ (8002168 <HAL_GPIO_Init+0x18c>)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800204c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800204e:	4a46      	ldr	r2, [pc, #280]	@ (8002168 <HAL_GPIO_Init+0x18c>)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	08da      	lsrs	r2, r3, #3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	3208      	adds	r2, #8
 8002062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002066:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	220f      	movs	r2, #15
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	4013      	ands	r3, r2
 800207c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	220b      	movs	r2, #11
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	4313      	orrs	r3, r2
 8002090:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	08da      	lsrs	r2, r3, #3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	3208      	adds	r2, #8
 800209a:	69f9      	ldr	r1, [r7, #28]
 800209c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2202      	movs	r2, #2
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e067      	b.n	80021a0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x104>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b12      	cmp	r3, #18
 80020de:	d145      	bne.n	800216c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	08da      	lsrs	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3208      	adds	r2, #8
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	4013      	ands	r3, r2
 8002102:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f003 020f 	and.w	r2, r3, #15
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	4313      	orrs	r3, r2
 800211c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	69f9      	ldr	r1, [r7, #28]
 8002128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	4013      	ands	r3, r2
 8002142:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0203 	and.w	r2, r3, #3
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	4313      	orrs	r3, r2
 8002158:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	69fa      	ldr	r2, [r7, #28]
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e01e      	b.n	80021a0 <HAL_GPIO_Init+0x1c4>
 8002162:	bf00      	nop
 8002164:	46020000 	.word	0x46020000
 8002168:	0800ae14 	.word	0x0800ae14
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	4013      	ands	r3, r2
 8002182:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	4313      	orrs	r3, r2
 8002198:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d00b      	beq.n	80021c0 <HAL_GPIO_Init+0x1e4>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b4:	2b11      	cmp	r3, #17
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b12      	cmp	r3, #18
 80021be:	d130      	bne.n	8002222 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80021f6:	2201      	movs	r2, #1
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	4013      	ands	r3, r2
 8002204:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	f003 0201 	and.w	r2, r3, #1
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	4313      	orrs	r3, r2
 800221a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d017      	beq.n	800225a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	4013      	ands	r3, r2
 8002240:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	4313      	orrs	r3, r2
 8002252:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d07c      	beq.n	8002360 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002266:	4a47      	ldr	r2, [pc, #284]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3318      	adds	r3, #24
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	4013      	ands	r3, r2
 8002288:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0a9a      	lsrs	r2, r3, #10
 800228e:	4b3e      	ldr	r3, [pc, #248]	@ (8002388 <HAL_GPIO_Init+0x3ac>)
 8002290:	4013      	ands	r3, r2
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	f002 0203 	and.w	r2, r2, #3
 8002298:	00d2      	lsls	r2, r2, #3
 800229a:	4093      	lsls	r3, r2
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80022a2:	4938      	ldr	r1, [pc, #224]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3318      	adds	r3, #24
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80022b0:	4b34      	ldr	r3, [pc, #208]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	4013      	ands	r3, r2
 80022be:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80022d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80022da:	4b2a      	ldr	r3, [pc, #168]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80022fe:	4a21      	ldr	r2, [pc, #132]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002304:	4b1f      	ldr	r3, [pc, #124]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 8002306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800230a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	43db      	mvns	r3, r3
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	4013      	ands	r3, r2
 8002314:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800232a:	4a16      	ldr	r2, [pc, #88]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002332:	4b14      	ldr	r3, [pc, #80]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 8002334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002338:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43db      	mvns	r3, r3
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	4013      	ands	r3, r2
 8002342:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002358:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <HAL_GPIO_Init+0x3a8>)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3301      	adds	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	f47f ae3d 	bne.w	8001ff0 <HAL_GPIO_Init+0x14>
  }
}
 8002376:	bf00      	nop
 8002378:	bf00      	nop
 800237a:	3724      	adds	r7, #36	@ 0x24
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	46022000 	.word	0x46022000
 8002388:	002f7f7f 	.word	0x002f7f7f

0800238c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
 8002398:	4613      	mov	r3, r2
 800239a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800239c:	787b      	ldrb	r3, [r7, #1]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80023a8:	e002      	b.n	80023b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80023c8:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e007      	b.n	80023ea <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80023da:	4b07      	ldr	r3, [pc, #28]	@ (80023f8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 0204 	bic.w	r2, r3, #4
 80023e2:	4905      	ldr	r1, [pc, #20]	@ (80023f8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	40030400 	.word	0x40030400

080023fc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002400:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_ICACHE_Enable+0x1c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <HAL_ICACHE_Enable+0x1c>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40030400 	.word	0x40030400

0800241c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af02      	add	r7, sp, #8
 8002422:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e108      	b.n	8002640 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d106      	bne.n	800244e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7fe fd6b 	bl	8000f24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2203      	movs	r2, #3
 8002452:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4a7b      	ldr	r2, [pc, #492]	@ (8002648 <HAL_PCD_Init+0x22c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d102      	bne.n	8002464 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f007 fadd 	bl	8009a28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	7c1a      	ldrb	r2, [r3, #16]
 8002476:	f88d 2000 	strb.w	r2, [sp]
 800247a:	3304      	adds	r3, #4
 800247c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800247e:	f007 fa04 	bl	800988a <USB_CoreInit>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0d5      	b.n	8002640 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f007 fad5 	bl	8009a4a <USB_SetCurrentMode>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0c6      	b.n	8002640 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	e04a      	b.n	800254e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	3315      	adds	r3, #21
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	3314      	adds	r3, #20
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	b298      	uxth	r0, r3
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	332e      	adds	r3, #46	@ 0x2e
 80024f4:	4602      	mov	r2, r0
 80024f6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	3318      	adds	r3, #24
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	331c      	adds	r3, #28
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	3320      	adds	r3, #32
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	3324      	adds	r3, #36	@ 0x24
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	3301      	adds	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	791b      	ldrb	r3, [r3, #4]
 8002552:	7bfa      	ldrb	r2, [r7, #15]
 8002554:	429a      	cmp	r2, r3
 8002556:	d3af      	bcc.n	80024b8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	e044      	b.n	80025e8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	3301      	adds	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	791b      	ldrb	r3, [r3, #4]
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d3b5      	bcc.n	800255e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7c1a      	ldrb	r2, [r3, #16]
 80025fa:	f88d 2000 	strb.w	r2, [sp]
 80025fe:	3304      	adds	r3, #4
 8002600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002602:	f007 fa6f 	bl	8009ae4 <USB_DevInit>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e013      	b.n	8002640 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7b1b      	ldrb	r3, [r3, #12]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d102      	bne.n	8002634 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 ff3c 	bl	80034ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f007 fd7d 	bl	800a138 <USB_DevDisconnect>

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	42040000 	.word	0x42040000

0800264c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b08d      	sub	sp, #52	@ 0x34
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f007 fe1c 	bl	800a2a0 <USB_GetMode>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 84b9 	bne.w	8002fe2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f007 fd80 	bl	800a17a <USB_ReadInterrupts>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 84af 	beq.w	8002fe0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f007 fd6d 	bl	800a17a <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d107      	bne.n	80026ba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f002 0202 	and.w	r2, r2, #2
 80026b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f007 fd5b 	bl	800a17a <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d161      	bne.n	8002792 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0210 	bic.w	r2, r2, #16
 80026dc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f003 020f 	and.w	r2, r3, #15
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	3304      	adds	r3, #4
 80026fc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	0c5b      	lsrs	r3, r3, #17
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	2b02      	cmp	r3, #2
 8002708:	d124      	bne.n	8002754 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d035      	beq.n	8002782 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002720:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002724:	b29b      	uxth	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	6a38      	ldr	r0, [r7, #32]
 800272a:	f007 fcad 	bl	800a088 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800273a:	441a      	add	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800274c:	441a      	add	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	615a      	str	r2, [r3, #20]
 8002752:	e016      	b.n	8002782 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	0c5b      	lsrs	r3, r3, #17
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	2b06      	cmp	r3, #6
 800275e:	d110      	bne.n	8002782 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002766:	2208      	movs	r2, #8
 8002768:	4619      	mov	r1, r3
 800276a:	6a38      	ldr	r0, [r7, #32]
 800276c:	f007 fc8c 	bl	800a088 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800277c:	441a      	add	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0210 	orr.w	r2, r2, #16
 8002790:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f007 fcef 	bl	800a17a <USB_ReadInterrupts>
 800279c:	4603      	mov	r3, r0
 800279e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027a2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027a6:	f040 80a7 	bne.w	80028f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f007 fcf4 	bl	800a1a0 <USB_ReadDevAllOutEpInterrupt>
 80027b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80027ba:	e099      	b.n	80028f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 808e 	beq.w	80028e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f007 fd18 	bl	800a208 <USB_ReadDevOutEPInterrupt>
 80027d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00c      	beq.n	80027fe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027f0:	461a      	mov	r2, r3
 80027f2:	2301      	movs	r3, #1
 80027f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fd29 	bl	8003250 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00c      	beq.n	8002822 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002814:	461a      	mov	r2, r3
 8002816:	2308      	movs	r3, #8
 8002818:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800281a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fdff 	bl	8003420 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002838:	461a      	mov	r2, r3
 800283a:	2310      	movs	r3, #16
 800283c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d030      	beq.n	80028aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002850:	2b80      	cmp	r3, #128	@ 0x80
 8002852:	d109      	bne.n	8002868 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002862:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002866:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800286a:	4613      	mov	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	3304      	adds	r3, #4
 800287c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	78db      	ldrb	r3, [r3, #3]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d108      	bne.n	8002898 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2200      	movs	r2, #0
 800288a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288e:	b2db      	uxtb	r3, r3
 8002890:	4619      	mov	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fbf2 	bl	800307c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028a4:	461a      	mov	r2, r3
 80028a6:	2302      	movs	r3, #2
 80028a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028c0:	461a      	mov	r2, r3
 80028c2:	2320      	movs	r3, #32
 80028c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028dc:	461a      	mov	r2, r3
 80028de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	3301      	adds	r3, #1
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80028ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80028f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f47f af62 	bne.w	80027bc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f007 fc3c 	bl	800a17a <USB_ReadInterrupts>
 8002902:	4603      	mov	r3, r0
 8002904:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002908:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800290c:	f040 80db 	bne.w	8002ac6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f007 fc5d 	bl	800a1d4 <USB_ReadDevAllInEpInterrupt>
 800291a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002920:	e0cd      	b.n	8002abe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80c2 	beq.w	8002ab2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f007 fc83 	bl	800a244 <USB_ReadDevInEPInterrupt>
 800293e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d057      	beq.n	80029fa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	2201      	movs	r2, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800295e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	43db      	mvns	r3, r3
 8002964:	69f9      	ldr	r1, [r7, #28]
 8002966:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800296a:	4013      	ands	r3, r2
 800296c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	4413      	add	r3, r2
 8002976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800297a:	461a      	mov	r2, r3
 800297c:	2301      	movs	r3, #1
 800297e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	799b      	ldrb	r3, [r3, #6]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d132      	bne.n	80029ee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	3320      	adds	r3, #32
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4403      	add	r3, r0
 80029a8:	331c      	adds	r3, #28
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4419      	add	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4403      	add	r3, r0
 80029bc:	3320      	adds	r3, #32
 80029be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d113      	bne.n	80029ee <HAL_PCD_IRQHandler+0x3a2>
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3324      	adds	r3, #36	@ 0x24
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d108      	bne.n	80029ee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029e6:	461a      	mov	r2, r3
 80029e8:	2101      	movs	r1, #1
 80029ea:	f007 fc8b 	bl	800a304 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fb03 	bl	8003000 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a10:	461a      	mov	r2, r3
 8002a12:	2308      	movs	r3, #8
 8002a14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2310      	movs	r3, #16
 8002a30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2340      	movs	r3, #64	@ 0x40
 8002a4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d023      	beq.n	8002aa0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a5a:	6a38      	ldr	r0, [r7, #32]
 8002a5c:	f007 f98e 	bl	8009d7c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	3310      	adds	r3, #16
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	3304      	adds	r3, #4
 8002a72:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	78db      	ldrb	r3, [r3, #3]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d108      	bne.n	8002a8e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fb03 	bl	8003094 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002aaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fb42 	bl	8003136 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f47f af2e 	bne.w	8002922 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f007 fb55 	bl	800a17a <USB_ReadInterrupts>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ada:	d122      	bne.n	8002b22 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d108      	bne.n	8002b0c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b02:	2100      	movs	r1, #0
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fcf5 	bl	80034f4 <HAL_PCDEx_LPM_Callback>
 8002b0a:	e002      	b.n	8002b12 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 faab 	bl	8003068 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f007 fb27 	bl	800a17a <USB_ReadInterrupts>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b36:	d112      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d102      	bne.n	8002b4e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fa83 	bl	8003054 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f007 fb09 	bl	800a17a <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b72:	d121      	bne.n	8002bb8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002b82:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d111      	bne.n	8002bb2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	f003 020f 	and.w	r2, r3, #15
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ba8:	2101      	movs	r1, #1
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fca2 	bl	80034f4 <HAL_PCDEx_LPM_Callback>
 8002bb0:	e002      	b.n	8002bb8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fa4e 	bl	8003054 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f007 fadc 	bl	800a17a <USB_ReadInterrupts>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bcc:	f040 80b7 	bne.w	8002d3e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2110      	movs	r1, #16
 8002bea:	4618      	mov	r0, r3
 8002bec:	f007 f8c6 	bl	8009d7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bf4:	e046      	b.n	8002c84 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c02:	461a      	mov	r2, r3
 8002c04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c1a:	0151      	lsls	r1, r2, #5
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	440a      	add	r2, r1
 8002c20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c36:	461a      	mov	r2, r3
 8002c38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c4e:	0151      	lsls	r1, r2, #5
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	440a      	add	r2, r1
 8002c54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c6e:	0151      	lsls	r1, r2, #5
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	440a      	add	r2, r1
 8002c74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002c7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c80:	3301      	adds	r3, #1
 8002c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	791b      	ldrb	r3, [r3, #4]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d3b2      	bcc.n	8002bf6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c9e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ca2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7bdb      	ldrb	r3, [r3, #15]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d016      	beq.n	8002cda <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cbc:	f043 030b 	orr.w	r3, r3, #11
 8002cc0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ccc:	69fa      	ldr	r2, [r7, #28]
 8002cce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cd2:	f043 030b 	orr.w	r3, r3, #11
 8002cd6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cd8:	e015      	b.n	8002d06 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ce8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cec:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002cf0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d00:	f043 030b 	orr.w	r3, r3, #11
 8002d04:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d14:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d18:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f007 faeb 	bl	800a304 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f007 fa19 	bl	800a17a <USB_ReadInterrupts>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d52:	d123      	bne.n	8002d9c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f007 faaf 	bl	800a2bc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f007 f883 	bl	8009e6e <USB_GetDevSpeed>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681c      	ldr	r4, [r3, #0]
 8002d74:	f001 fea6 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8002d78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4620      	mov	r0, r4
 8002d82:	f006 fdaf 	bl	80098e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f95a 	bl	8003040 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f007 f9ea 	bl	800a17a <USB_ReadInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d10a      	bne.n	8002dc6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f93b 	bl	800302c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f002 0208 	and.w	r2, r2, #8
 8002dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f007 f9d5 	bl	800a17a <USB_ReadInterrupts>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd6:	2b80      	cmp	r3, #128	@ 0x80
 8002dd8:	d123      	bne.n	8002e22 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002de6:	2301      	movs	r3, #1
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dea:	e014      	b.n	8002e16 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d105      	bne.n	8002e10 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	4619      	mov	r1, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f962 	bl	80030d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	3301      	adds	r3, #1
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	791b      	ldrb	r3, [r3, #4]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d3e4      	bcc.n	8002dec <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f007 f9a7 	bl	800a17a <USB_ReadInterrupts>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e36:	d13c      	bne.n	8002eb2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e38:	2301      	movs	r3, #1
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3c:	e02b      	b.n	8002e96 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	3318      	adds	r3, #24
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d115      	bne.n	8002e90 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	da12      	bge.n	8002e90 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	3317      	adds	r3, #23
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f922 	bl	80030d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	3301      	adds	r3, #1
 8002e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	791b      	ldrb	r3, [r3, #4]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d3cd      	bcc.n	8002e3e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002eb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f007 f95f 	bl	800a17a <USB_ReadInterrupts>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ec6:	d156      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec8:	2301      	movs	r3, #1
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ecc:	e045      	b.n	8002f5a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d12e      	bne.n	8002f54 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ef6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	da2b      	bge.n	8002f54 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f08:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d121      	bne.n	8002f54 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10a      	bne.n	8002f54 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f50:	6053      	str	r3, [r2, #4]
            break;
 8002f52:	e008      	b.n	8002f66 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f56:	3301      	adds	r3, #1
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	791b      	ldrb	r3, [r3, #4]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d3b3      	bcc.n	8002ece <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002f74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f007 f8fd 	bl	800a17a <USB_ReadInterrupts>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f8a:	d10a      	bne.n	8002fa2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f88d 	bl	80030ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f007 f8e7 	bl	800a17a <USB_ReadInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d115      	bne.n	8002fe2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f879 	bl	80030c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	e000      	b.n	8002fe2 <HAL_PCD_IRQHandler+0x996>
      return;
 8002fe0:	bf00      	nop
    }
  }
}
 8002fe2:	3734      	adds	r7, #52	@ 0x34
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd90      	pop	{r4, r7, pc}

08002fe8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	da0c      	bge.n	8003102 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	f003 020f 	and.w	r2, r3, #15
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	3310      	adds	r3, #16
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	3304      	adds	r3, #4
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e00c      	b.n	800311c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	f003 020f 	and.w	r2, r3, #15
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	4413      	add	r3, r2
 8003118:	3304      	adds	r3, #4
 800311a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68f9      	ldr	r1, [r7, #12]
 8003122:	4618      	mov	r0, r3
 8003124:	f006 fec8 	bl	8009eb8 <USB_EPStopXfer>
 8003128:	4603      	mov	r3, r0
 800312a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800312c:	7afb      	ldrb	r3, [r7, #11]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b08a      	sub	sp, #40	@ 0x28
 800313a:	af02      	add	r7, sp, #8
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	3310      	adds	r3, #16
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4413      	add	r3, r2
 800315a:	3304      	adds	r3, #4
 800315c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	429a      	cmp	r2, r3
 8003168:	d901      	bls.n	800316e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e06b      	b.n	8003246 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	429a      	cmp	r2, r3
 8003182:	d902      	bls.n	800318a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3303      	adds	r3, #3
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003192:	e02a      	b.n	80031ea <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	69fa      	ldr	r2, [r7, #28]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d902      	bls.n	80031b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	3303      	adds	r3, #3
 80031b4:	089b      	lsrs	r3, r3, #2
 80031b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	68d9      	ldr	r1, [r3, #12]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	4603      	mov	r3, r0
 80031cc:	6978      	ldr	r0, [r7, #20]
 80031ce:	f006 ff1d 	bl	800a00c <USB_WritePacket>

    ep->xfer_buff  += len;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	441a      	add	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	441a      	add	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d809      	bhi.n	8003214 <PCD_WriteEmptyTxFifo+0xde>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003208:	429a      	cmp	r2, r3
 800320a:	d203      	bcs.n	8003214 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1bf      	bne.n	8003194 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	429a      	cmp	r2, r3
 800321e:	d811      	bhi.n	8003244 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	2201      	movs	r2, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	43db      	mvns	r3, r3
 800323a:	6939      	ldr	r1, [r7, #16]
 800323c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003240:	4013      	ands	r3, r2
 8003242:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3720      	adds	r7, #32
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	333c      	adds	r3, #60	@ 0x3c
 8003268:	3304      	adds	r3, #4
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4413      	add	r3, r2
 8003276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	799b      	ldrb	r3, [r3, #6]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d17b      	bne.n	800337e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d015      	beq.n	80032bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	4a61      	ldr	r2, [pc, #388]	@ (8003418 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	f240 80b9 	bls.w	800340c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80b3 	beq.w	800340c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032b2:	461a      	mov	r2, r3
 80032b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032b8:	6093      	str	r3, [r2, #8]
 80032ba:	e0a7      	b.n	800340c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d009      	beq.n	80032da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032d2:	461a      	mov	r2, r3
 80032d4:	2320      	movs	r3, #32
 80032d6:	6093      	str	r3, [r2, #8]
 80032d8:	e098      	b.n	800340c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f040 8093 	bne.w	800340c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003418 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d90f      	bls.n	800330e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003304:	461a      	mov	r2, r3
 8003306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800330a:	6093      	str	r3, [r2, #8]
 800330c:	e07e      	b.n	800340c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	4613      	mov	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	3304      	adds	r3, #4
 8003322:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a1a      	ldr	r2, [r3, #32]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	0159      	lsls	r1, r3, #5
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	440b      	add	r3, r1
 8003330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333a:	1ad2      	subs	r2, r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d114      	bne.n	8003370 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003358:	461a      	mov	r2, r3
 800335a:	2101      	movs	r1, #1
 800335c:	f006 ffd2 	bl	800a304 <USB_EP0_OutStart>
 8003360:	e006      	b.n	8003370 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	441a      	add	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	4619      	mov	r1, r3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff fe36 	bl	8002fe8 <HAL_PCD_DataOutStageCallback>
 800337c:	e046      	b.n	800340c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	4a26      	ldr	r2, [pc, #152]	@ (800341c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d124      	bne.n	80033d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800339c:	461a      	mov	r2, r3
 800339e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033a2:	6093      	str	r3, [r2, #8]
 80033a4:	e032      	b.n	800340c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033bc:	461a      	mov	r2, r3
 80033be:	2320      	movs	r3, #32
 80033c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	4619      	mov	r1, r3
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff fe0d 	bl	8002fe8 <HAL_PCD_DataOutStageCallback>
 80033ce:	e01d      	b.n	800340c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d114      	bne.n	8003400 <PCD_EP_OutXfrComplete_int+0x1b0>
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d108      	bne.n	8003400 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033f8:	461a      	mov	r2, r3
 80033fa:	2100      	movs	r1, #0
 80033fc:	f006 ff82 	bl	800a304 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fdee 	bl	8002fe8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3720      	adds	r7, #32
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	4f54300a 	.word	0x4f54300a
 800341c:	4f54310a 	.word	0x4f54310a

08003420 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	333c      	adds	r3, #60	@ 0x3c
 8003438:	3304      	adds	r3, #4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4a15      	ldr	r2, [pc, #84]	@ (80034a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d90e      	bls.n	8003474 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800345c:	2b00      	cmp	r3, #0
 800345e:	d009      	beq.n	8003474 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800346c:	461a      	mov	r2, r3
 800346e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003472:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff fdcf 	bl	8003018 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a0a      	ldr	r2, [pc, #40]	@ (80034a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d90c      	bls.n	800349c <PCD_EP_OutSetupPacket_int+0x7c>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	799b      	ldrb	r3, [r3, #6]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d108      	bne.n	800349c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003494:	461a      	mov	r2, r3
 8003496:	2101      	movs	r1, #1
 8003498:	f006 ff34 	bl	800a304 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	4f54300a 	.word	0x4f54300a

080034ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034de:	f043 0303 	orr.w	r3, r3, #3
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003514:	4b39      	ldr	r3, [pc, #228]	@ (80035fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003518:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800351c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	429a      	cmp	r2, r3
 8003524:	d10b      	bne.n	800353e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800352c:	d905      	bls.n	800353a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800352e:	4b33      	ldr	r3, [pc, #204]	@ (80035fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	4a32      	ldr	r2, [pc, #200]	@ (80035fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003538:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	e057      	b.n	80035ee <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003544:	d90a      	bls.n	800355c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003546:	4b2d      	ldr	r3, [pc, #180]	@ (80035fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4313      	orrs	r3, r2
 8003552:	4a2a      	ldr	r2, [pc, #168]	@ (80035fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003558:	60d3      	str	r3, [r2, #12]
 800355a:	e007      	b.n	800356c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800355c:	4b27      	ldr	r3, [pc, #156]	@ (80035fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003564:	4925      	ldr	r1, [pc, #148]	@ (80035fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4313      	orrs	r3, r2
 800356a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800356c:	4b24      	ldr	r3, [pc, #144]	@ (8003600 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a24      	ldr	r2, [pc, #144]	@ (8003604 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	099b      	lsrs	r3, r3, #6
 8003578:	2232      	movs	r2, #50	@ 0x32
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	4a21      	ldr	r2, [pc, #132]	@ (8003604 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	3301      	adds	r3, #1
 8003588:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800358a:	e002      	b.n	8003592 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3b01      	subs	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003592:	4b1a      	ldr	r3, [pc, #104]	@ (80035fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HAL_PWREx_ControlVoltageScaling+0x98>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f3      	bne.n	800358c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01b      	beq.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80035aa:	4b15      	ldr	r3, [pc, #84]	@ (8003600 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a15      	ldr	r2, [pc, #84]	@ (8003604 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	099b      	lsrs	r3, r3, #6
 80035b6:	2232      	movs	r2, #50	@ 0x32
 80035b8:	fb02 f303 	mul.w	r3, r2, r3
 80035bc:	4a11      	ldr	r2, [pc, #68]	@ (8003604 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	099b      	lsrs	r3, r3, #6
 80035c4:	3301      	adds	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80035c8:	e002      	b.n	80035d0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80035d0:	4b0a      	ldr	r3, [pc, #40]	@ (80035fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d102      	bne.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f3      	bne.n	80035ca <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e000      	b.n	80035ee <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	46020800 	.word	0x46020800
 8003600:	20000000 	.word	0x20000000
 8003604:	10624dd3 	.word	0x10624dd3

08003608 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800360c:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <HAL_PWREx_GetVoltageRange+0x18>)
 800360e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	46020800 	.word	0x46020800

08003624 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800362c:	4b22      	ldr	r3, [pc, #136]	@ (80036b8 <HAL_PWREx_ConfigSupply+0x94>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a22      	ldr	r2, [pc, #136]	@ (80036bc <HAL_PWREx_ConfigSupply+0x98>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	099b      	lsrs	r3, r3, #6
 8003638:	2232      	movs	r2, #50	@ 0x32
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	4a1f      	ldr	r2, [pc, #124]	@ (80036bc <HAL_PWREx_ConfigSupply+0x98>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	3301      	adds	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d113      	bne.n	8003678 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003650:	4b1b      	ldr	r3, [pc, #108]	@ (80036c0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4a1a      	ldr	r2, [pc, #104]	@ (80036c0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003656:	f023 0302 	bic.w	r3, r3, #2
 800365a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800365c:	e002      	b.n	8003664 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3b01      	subs	r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003664:	4b16      	ldr	r3, [pc, #88]	@ (80036c0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b02      	cmp	r3, #2
 800366e:	d116      	bne.n	800369e <HAL_PWREx_ConfigSupply+0x7a>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f3      	bne.n	800365e <HAL_PWREx_ConfigSupply+0x3a>
 8003676:	e012      	b.n	800369e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003678:	4b11      	ldr	r3, [pc, #68]	@ (80036c0 <HAL_PWREx_ConfigSupply+0x9c>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a10      	ldr	r2, [pc, #64]	@ (80036c0 <HAL_PWREx_ConfigSupply+0x9c>)
 800367e:	f043 0302 	orr.w	r3, r3, #2
 8003682:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003684:	e002      	b.n	800368c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3b01      	subs	r3, #1
 800368a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800368c:	4b0c      	ldr	r3, [pc, #48]	@ (80036c0 <HAL_PWREx_ConfigSupply+0x9c>)
 800368e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d102      	bne.n	800369e <HAL_PWREx_ConfigSupply+0x7a>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f3      	bne.n	8003686 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e000      	b.n	80036aa <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000000 	.word	0x20000000
 80036bc:	10624dd3 	.word	0x10624dd3
 80036c0:	46020800 	.word	0x46020800

080036c4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80036c8:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	4a04      	ldr	r2, [pc, #16]	@ (80036e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036d2:	6113      	str	r3, [r2, #16]
}
 80036d4:	bf00      	nop
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	46020800 	.word	0x46020800

080036e4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80036e8:	4b05      	ldr	r3, [pc, #20]	@ (8003700 <HAL_PWREx_EnableVddIO2+0x1c>)
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	4a04      	ldr	r2, [pc, #16]	@ (8003700 <HAL_PWREx_EnableVddIO2+0x1c>)
 80036ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036f2:	6113      	str	r3, [r2, #16]
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	46020800 	.word	0x46020800

08003704 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003708:	4b05      	ldr	r3, [pc, #20]	@ (8003720 <HAL_PWREx_EnableVddA+0x1c>)
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	4a04      	ldr	r2, [pc, #16]	@ (8003720 <HAL_PWREx_EnableVddA+0x1c>)
 800370e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003712:	6113      	str	r3, [r2, #16]
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	46020800 	.word	0x46020800

08003724 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08e      	sub	sp, #56	@ 0x38
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800372c:	2300      	movs	r3, #0
 800372e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f000 bec8 	b.w	80044ce <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373e:	4b99      	ldr	r3, [pc, #612]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003748:	4b96      	ldr	r3, [pc, #600]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 800374a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 816c 	beq.w	8003a38 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <HAL_RCC_OscConfig+0x52>
 8003766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003768:	2b0c      	cmp	r3, #12
 800376a:	f040 80de 	bne.w	800392a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800376e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003770:	2b01      	cmp	r3, #1
 8003772:	f040 80da 	bne.w	800392a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f000 bea5 	b.w	80044ce <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003788:	4b86      	ldr	r3, [pc, #536]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <HAL_RCC_OscConfig+0x7a>
 8003794:	4b83      	ldr	r3, [pc, #524]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800379c:	e005      	b.n	80037aa <HAL_RCC_OscConfig+0x86>
 800379e:	4b81      	ldr	r3, [pc, #516]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d255      	bcs.n	800385a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 f9d9 	bl	8004b70 <RCC_SetFlashLatencyFromMSIRange>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f000 be82 	b.w	80044ce <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80037ca:	4b76      	ldr	r3, [pc, #472]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	4a75      	ldr	r2, [pc, #468]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037d4:	6093      	str	r3, [r2, #8]
 80037d6:	4b73      	ldr	r3, [pc, #460]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	4970      	ldr	r1, [pc, #448]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80037f0:	d309      	bcc.n	8003806 <HAL_RCC_OscConfig+0xe2>
 80037f2:	4b6c      	ldr	r3, [pc, #432]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f023 021f 	bic.w	r2, r3, #31
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	4969      	ldr	r1, [pc, #420]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003800:	4313      	orrs	r3, r2
 8003802:	60cb      	str	r3, [r1, #12]
 8003804:	e07e      	b.n	8003904 <HAL_RCC_OscConfig+0x1e0>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	2b00      	cmp	r3, #0
 800380c:	da0a      	bge.n	8003824 <HAL_RCC_OscConfig+0x100>
 800380e:	4b65      	ldr	r3, [pc, #404]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	015b      	lsls	r3, r3, #5
 800381c:	4961      	ldr	r1, [pc, #388]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 800381e:	4313      	orrs	r3, r2
 8003820:	60cb      	str	r3, [r1, #12]
 8003822:	e06f      	b.n	8003904 <HAL_RCC_OscConfig+0x1e0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800382c:	d30a      	bcc.n	8003844 <HAL_RCC_OscConfig+0x120>
 800382e:	4b5d      	ldr	r3, [pc, #372]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	029b      	lsls	r3, r3, #10
 800383c:	4959      	ldr	r1, [pc, #356]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 800383e:	4313      	orrs	r3, r2
 8003840:	60cb      	str	r3, [r1, #12]
 8003842:	e05f      	b.n	8003904 <HAL_RCC_OscConfig+0x1e0>
 8003844:	4b57      	ldr	r3, [pc, #348]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	03db      	lsls	r3, r3, #15
 8003852:	4954      	ldr	r1, [pc, #336]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003854:	4313      	orrs	r3, r2
 8003856:	60cb      	str	r3, [r1, #12]
 8003858:	e054      	b.n	8003904 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800385a:	4b52      	ldr	r3, [pc, #328]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	4a51      	ldr	r2, [pc, #324]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003860:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003864:	6093      	str	r3, [r2, #8]
 8003866:	4b4f      	ldr	r3, [pc, #316]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	494c      	ldr	r1, [pc, #304]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003880:	d309      	bcc.n	8003896 <HAL_RCC_OscConfig+0x172>
 8003882:	4b48      	ldr	r3, [pc, #288]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f023 021f 	bic.w	r2, r3, #31
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4945      	ldr	r1, [pc, #276]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003890:	4313      	orrs	r3, r2
 8003892:	60cb      	str	r3, [r1, #12]
 8003894:	e028      	b.n	80038e8 <HAL_RCC_OscConfig+0x1c4>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	2b00      	cmp	r3, #0
 800389c:	da0a      	bge.n	80038b4 <HAL_RCC_OscConfig+0x190>
 800389e:	4b41      	ldr	r3, [pc, #260]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	015b      	lsls	r3, r3, #5
 80038ac:	493d      	ldr	r1, [pc, #244]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60cb      	str	r3, [r1, #12]
 80038b2:	e019      	b.n	80038e8 <HAL_RCC_OscConfig+0x1c4>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038bc:	d30a      	bcc.n	80038d4 <HAL_RCC_OscConfig+0x1b0>
 80038be:	4b39      	ldr	r3, [pc, #228]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	029b      	lsls	r3, r3, #10
 80038cc:	4935      	ldr	r1, [pc, #212]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60cb      	str	r3, [r1, #12]
 80038d2:	e009      	b.n	80038e8 <HAL_RCC_OscConfig+0x1c4>
 80038d4:	4b33      	ldr	r3, [pc, #204]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	03db      	lsls	r3, r3, #15
 80038e2:	4930      	ldr	r1, [pc, #192]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80038e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 f93c 	bl	8004b70 <RCC_SetFlashLatencyFromMSIRange>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	f000 bde5 	b.w	80044ce <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003904:	f001 f8de 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003908:	4b27      	ldr	r3, [pc, #156]	@ (80039a8 <HAL_RCC_OscConfig+0x284>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7fd fca9 	bl	8001264 <HAL_InitTick>
 8003912:	4603      	mov	r3, r0
 8003914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 808a 	beq.w	8003a36 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003922:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003926:	f000 bdd2 	b.w	80044ce <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d066      	beq.n	8003a00 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003932:	4b1c      	ldr	r3, [pc, #112]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1b      	ldr	r2, [pc, #108]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800393e:	f7fd fd1b 	bl	8001378 <HAL_GetTick>
 8003942:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003944:	e009      	b.n	800395a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003946:	f7fd fd17 	bl	8001378 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d902      	bls.n	800395a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	f000 bdba 	b.w	80044ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800395a:	4b12      	ldr	r3, [pc, #72]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0ef      	beq.n	8003946 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003966:	4b0f      	ldr	r3, [pc, #60]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	4a0e      	ldr	r2, [pc, #56]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 800396c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003970:	6093      	str	r3, [r2, #8]
 8003972:	4b0c      	ldr	r3, [pc, #48]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397e:	4909      	ldr	r1, [pc, #36]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003980:	4313      	orrs	r3, r2
 8003982:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800398c:	d30e      	bcc.n	80039ac <HAL_RCC_OscConfig+0x288>
 800398e:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f023 021f 	bic.w	r2, r3, #31
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	4902      	ldr	r1, [pc, #8]	@ (80039a4 <HAL_RCC_OscConfig+0x280>)
 800399c:	4313      	orrs	r3, r2
 800399e:	60cb      	str	r3, [r1, #12]
 80039a0:	e04a      	b.n	8003a38 <HAL_RCC_OscConfig+0x314>
 80039a2:	bf00      	nop
 80039a4:	46020c00 	.word	0x46020c00
 80039a8:	20000004 	.word	0x20000004
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	da0a      	bge.n	80039ca <HAL_RCC_OscConfig+0x2a6>
 80039b4:	4b98      	ldr	r3, [pc, #608]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	015b      	lsls	r3, r3, #5
 80039c2:	4995      	ldr	r1, [pc, #596]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60cb      	str	r3, [r1, #12]
 80039c8:	e036      	b.n	8003a38 <HAL_RCC_OscConfig+0x314>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d2:	d30a      	bcc.n	80039ea <HAL_RCC_OscConfig+0x2c6>
 80039d4:	4b90      	ldr	r3, [pc, #576]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	029b      	lsls	r3, r3, #10
 80039e2:	498d      	ldr	r1, [pc, #564]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60cb      	str	r3, [r1, #12]
 80039e8:	e026      	b.n	8003a38 <HAL_RCC_OscConfig+0x314>
 80039ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	03db      	lsls	r3, r3, #15
 80039f8:	4987      	ldr	r1, [pc, #540]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60cb      	str	r3, [r1, #12]
 80039fe:	e01b      	b.n	8003a38 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003a00:	4b85      	ldr	r3, [pc, #532]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a84      	ldr	r2, [pc, #528]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003a06:	f023 0301 	bic.w	r3, r3, #1
 8003a0a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a0c:	f7fd fcb4 	bl	8001378 <HAL_GetTick>
 8003a10:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a12:	e009      	b.n	8003a28 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a14:	f7fd fcb0 	bl	8001378 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d902      	bls.n	8003a28 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	f000 bd53 	b.w	80044ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a28:	4b7b      	ldr	r3, [pc, #492]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1ef      	bne.n	8003a14 <HAL_RCC_OscConfig+0x2f0>
 8003a34:	e000      	b.n	8003a38 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003a36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 808b 	beq.w	8003b5c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_OscConfig+0x334>
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4e:	2b0c      	cmp	r3, #12
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d106      	bne.n	8003a66 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d17d      	bne.n	8003b5c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f000 bd34 	b.w	80044ce <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCC_OscConfig+0x35a>
 8003a70:	4b69      	ldr	r3, [pc, #420]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a68      	ldr	r2, [pc, #416]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	e041      	b.n	8003b02 <HAL_RCC_OscConfig+0x3de>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a86:	d112      	bne.n	8003aae <HAL_RCC_OscConfig+0x38a>
 8003a88:	4b63      	ldr	r3, [pc, #396]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a62      	ldr	r2, [pc, #392]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003a8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b60      	ldr	r3, [pc, #384]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a5f      	ldr	r2, [pc, #380]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003a9a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	4b5d      	ldr	r3, [pc, #372]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a5c      	ldr	r2, [pc, #368]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003aa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	e029      	b.n	8003b02 <HAL_RCC_OscConfig+0x3de>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003ab6:	d112      	bne.n	8003ade <HAL_RCC_OscConfig+0x3ba>
 8003ab8:	4b57      	ldr	r3, [pc, #348]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a56      	ldr	r2, [pc, #344]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003abe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4b54      	ldr	r3, [pc, #336]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a53      	ldr	r2, [pc, #332]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003aca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b51      	ldr	r3, [pc, #324]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a50      	ldr	r2, [pc, #320]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	e011      	b.n	8003b02 <HAL_RCC_OscConfig+0x3de>
 8003ade:	4b4e      	ldr	r3, [pc, #312]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a4d      	ldr	r2, [pc, #308]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	4b4b      	ldr	r3, [pc, #300]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a4a      	ldr	r2, [pc, #296]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	4b48      	ldr	r3, [pc, #288]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a47      	ldr	r2, [pc, #284]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003afc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d014      	beq.n	8003b34 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003b0a:	f7fd fc35 	bl	8001378 <HAL_GetTick>
 8003b0e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b10:	e009      	b.n	8003b26 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b12:	f7fd fc31 	bl	8001378 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b64      	cmp	r3, #100	@ 0x64
 8003b1e:	d902      	bls.n	8003b26 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	f000 bcd4 	b.w	80044ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b26:	4b3c      	ldr	r3, [pc, #240]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0ef      	beq.n	8003b12 <HAL_RCC_OscConfig+0x3ee>
 8003b32:	e013      	b.n	8003b5c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003b34:	f7fd fc20 	bl	8001378 <HAL_GetTick>
 8003b38:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b3a:	e009      	b.n	8003b50 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b3c:	f7fd fc1c 	bl	8001378 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	@ 0x64
 8003b48:	d902      	bls.n	8003b50 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	f000 bcbf 	b.w	80044ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b50:	4b31      	ldr	r3, [pc, #196]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1ef      	bne.n	8003b3c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d05f      	beq.n	8003c28 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d005      	beq.n	8003b7a <HAL_RCC_OscConfig+0x456>
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b70:	2b0c      	cmp	r3, #12
 8003b72:	d114      	bne.n	8003b9e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d111      	bne.n	8003b9e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f000 bca3 	b.w	80044ce <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003b88:	4b23      	ldr	r3, [pc, #140]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	041b      	lsls	r3, r3, #16
 8003b96:	4920      	ldr	r1, [pc, #128]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003b9c:	e044      	b.n	8003c28 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d024      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a1b      	ldr	r2, [pc, #108]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003bb2:	f7fd fbe1 	bl	8001378 <HAL_GetTick>
 8003bb6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb8:	e009      	b.n	8003bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bba:	f7fd fbdd 	bl	8001378 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d902      	bls.n	8003bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	f000 bc80 	b.w	80044ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bce:	4b12      	ldr	r3, [pc, #72]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0ef      	beq.n	8003bba <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003bda:	4b0f      	ldr	r3, [pc, #60]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	041b      	lsls	r3, r3, #16
 8003be8:	490b      	ldr	r1, [pc, #44]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	610b      	str	r3, [r1, #16]
 8003bee:	e01b      	b.n	8003c28 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003bf0:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a08      	ldr	r2, [pc, #32]	@ (8003c18 <HAL_RCC_OscConfig+0x4f4>)
 8003bf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bfa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003bfc:	f7fd fbbc 	bl	8001378 <HAL_GetTick>
 8003c00:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c02:	e00b      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c04:	f7fd fbb8 	bl	8001378 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d904      	bls.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	f000 bc5b 	b.w	80044ce <HAL_RCC_OscConfig+0xdaa>
 8003c18:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c1c:	4baf      	ldr	r3, [pc, #700]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ed      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80c8 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c3c:	4ba7      	ldr	r3, [pc, #668]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d111      	bne.n	8003c6e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4a:	4ba4      	ldr	r3, [pc, #656]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c50:	4aa2      	ldr	r2, [pc, #648]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003c52:	f043 0304 	orr.w	r3, r3, #4
 8003c56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c5a:	4ba0      	ldr	r3, [pc, #640]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c6e:	4b9c      	ldr	r3, [pc, #624]	@ (8003ee0 <HAL_RCC_OscConfig+0x7bc>)
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d119      	bne.n	8003cae <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c7a:	4b99      	ldr	r3, [pc, #612]	@ (8003ee0 <HAL_RCC_OscConfig+0x7bc>)
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	4a98      	ldr	r2, [pc, #608]	@ (8003ee0 <HAL_RCC_OscConfig+0x7bc>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c86:	f7fd fb77 	bl	8001378 <HAL_GetTick>
 8003c8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c8c:	e009      	b.n	8003ca2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8e:	f7fd fb73 	bl	8001378 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d902      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	f000 bc16 	b.w	80044ce <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ca2:	4b8f      	ldr	r3, [pc, #572]	@ (8003ee0 <HAL_RCC_OscConfig+0x7bc>)
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0ef      	beq.n	8003c8e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d05f      	beq.n	8003d76 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003cb6:	4b89      	ldr	r3, [pc, #548]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003cb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cbc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d037      	beq.n	8003d3c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d006      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e3f4      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01b      	beq.n	8003d26 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003cee:	4b7b      	ldr	r3, [pc, #492]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cf4:	4a79      	ldr	r2, [pc, #484]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003cf6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003cfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003cfe:	f7fd fb3b 	bl	8001378 <HAL_GetTick>
 8003d02:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d06:	f7fd fb37 	bl	8001378 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b05      	cmp	r3, #5
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e3da      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d18:	4b70      	ldr	r3, [pc, #448]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1ef      	bne.n	8003d06 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003d26:	4b6d      	ldr	r3, [pc, #436]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d2c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	4969      	ldr	r1, [pc, #420]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003d3c:	4b67      	ldr	r3, [pc, #412]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003d3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d42:	4a66      	ldr	r2, [pc, #408]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003d44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003d4c:	f7fd fb14 	bl	8001378 <HAL_GetTick>
 8003d50:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d54:	f7fd fb10 	bl	8001378 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e3b3      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d66:	4b5d      	ldr	r3, [pc, #372]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0ef      	beq.n	8003d54 <HAL_RCC_OscConfig+0x630>
 8003d74:	e01b      	b.n	8003dae <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003d76:	4b59      	ldr	r3, [pc, #356]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d7c:	4a57      	ldr	r2, [pc, #348]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003d7e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003d82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003d86:	f7fd faf7 	bl	8001378 <HAL_GetTick>
 8003d8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8e:	f7fd faf3 	bl	8001378 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e396      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003da0:	4b4e      	ldr	r3, [pc, #312]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003da6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ef      	bne.n	8003d8e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dae:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d107      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db6:	4b49      	ldr	r3, [pc, #292]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dbc:	4a47      	ldr	r2, [pc, #284]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003dbe:	f023 0304 	bic.w	r3, r3, #4
 8003dc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8111 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dda:	4b40      	ldr	r3, [pc, #256]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d111      	bne.n	8003e0c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de8:	4b3c      	ldr	r3, [pc, #240]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dee:	4a3b      	ldr	r2, [pc, #236]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003df0:	f043 0304 	orr.w	r3, r3, #4
 8003df4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003df8:	4b38      	ldr	r3, [pc, #224]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e0c:	4b34      	ldr	r3, [pc, #208]	@ (8003ee0 <HAL_RCC_OscConfig+0x7bc>)
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d118      	bne.n	8003e4a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e18:	4b31      	ldr	r3, [pc, #196]	@ (8003ee0 <HAL_RCC_OscConfig+0x7bc>)
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1c:	4a30      	ldr	r2, [pc, #192]	@ (8003ee0 <HAL_RCC_OscConfig+0x7bc>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e24:	f7fd faa8 	bl	8001378 <HAL_GetTick>
 8003e28:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2c:	f7fd faa4 	bl	8001378 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e347      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e3e:	4b28      	ldr	r3, [pc, #160]	@ (8003ee0 <HAL_RCC_OscConfig+0x7bc>)
 8003e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d01f      	beq.n	8003e96 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d010      	beq.n	8003e84 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e62:	4b1e      	ldr	r3, [pc, #120]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e68:	4a1c      	ldr	r2, [pc, #112]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003e6a:	f043 0304 	orr.w	r3, r3, #4
 8003e6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e72:	4b1a      	ldr	r3, [pc, #104]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e78:	4a18      	ldr	r2, [pc, #96]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e82:	e018      	b.n	8003eb6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e84:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e8a:	4a14      	ldr	r2, [pc, #80]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e94:	e00f      	b.n	8003eb6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e96:	4b11      	ldr	r3, [pc, #68]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eac:	4a0b      	ldr	r2, [pc, #44]	@ (8003edc <HAL_RCC_OscConfig+0x7b8>)
 8003eae:	f023 0304 	bic.w	r3, r3, #4
 8003eb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d057      	beq.n	8003f6e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003ebe:	f7fd fa5b 	bl	8001378 <HAL_GetTick>
 8003ec2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec4:	e00e      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fd fa57 	bl	8001378 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d905      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e2f8      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
 8003edc:	46020c00 	.word	0x46020c00
 8003ee0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee4:	4b9c      	ldr	r3, [pc, #624]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8003ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0e9      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01b      	beq.n	8003f36 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003efe:	4b96      	ldr	r3, [pc, #600]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8003f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f04:	4a94      	ldr	r2, [pc, #592]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8003f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fd fa32 	bl	8001378 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e2d3      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f26:	4b8c      	ldr	r3, [pc, #560]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8003f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ed      	beq.n	8003f10 <HAL_RCC_OscConfig+0x7ec>
 8003f34:	e053      	b.n	8003fde <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f36:	4b88      	ldr	r3, [pc, #544]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8003f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f3c:	4a86      	ldr	r2, [pc, #536]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8003f3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f48:	f7fd fa16 	bl	8001378 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e2b7      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f5e:	4b7e      	ldr	r3, [pc, #504]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8003f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ed      	bne.n	8003f48 <HAL_RCC_OscConfig+0x824>
 8003f6c:	e037      	b.n	8003fde <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003f6e:	f7fd fa03 	bl	8001378 <HAL_GetTick>
 8003f72:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f74:	e00a      	b.n	8003f8c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f76:	f7fd f9ff 	bl	8001378 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e2a0      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f8c:	4b72      	ldr	r3, [pc, #456]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8003f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1ed      	bne.n	8003f76 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8003f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01a      	beq.n	8003fde <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003fa8:	4b6b      	ldr	r3, [pc, #428]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8003faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fae:	4a6a      	ldr	r2, [pc, #424]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8003fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fba:	f7fd f9dd 	bl	8001378 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e27e      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fd0:	4b61      	ldr	r3, [pc, #388]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8003fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1ed      	bne.n	8003fba <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fde:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d107      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8003fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fec:	4a5a      	ldr	r2, [pc, #360]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8003fee:	f023 0304 	bic.w	r3, r3, #4
 8003ff2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d036      	beq.n	8004070 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d019      	beq.n	800403e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800400a:	4b53      	ldr	r3, [pc, #332]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a52      	ldr	r2, [pc, #328]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8004010:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004014:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004016:	f7fd f9af 	bl	8001378 <HAL_GetTick>
 800401a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800401e:	f7fd f9ab 	bl	8001378 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e24e      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004030:	4b49      	ldr	r3, [pc, #292]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x8fa>
 800403c:	e018      	b.n	8004070 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800403e:	4b46      	ldr	r3, [pc, #280]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a45      	ldr	r2, [pc, #276]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8004044:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004048:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800404a:	f7fd f995 	bl	8001378 <HAL_GetTick>
 800404e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004052:	f7fd f991 	bl	8001378 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e234      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004064:	4b3c      	ldr	r3, [pc, #240]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f0      	bne.n	8004052 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	d036      	beq.n	80040ea <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004080:	2b00      	cmp	r3, #0
 8004082:	d019      	beq.n	80040b8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004084:	4b34      	ldr	r3, [pc, #208]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a33      	ldr	r2, [pc, #204]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 800408a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800408e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004090:	f7fd f972 	bl	8001378 <HAL_GetTick>
 8004094:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004098:	f7fd f96e 	bl	8001378 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e211      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80040aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x974>
 80040b6:	e018      	b.n	80040ea <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80040b8:	4b27      	ldr	r3, [pc, #156]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a26      	ldr	r2, [pc, #152]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 80040be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040c4:	f7fd f958 	bl	8001378 <HAL_GetTick>
 80040c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80040cc:	f7fd f954 	bl	8001378 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e1f7      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80040de:	4b1e      	ldr	r3, [pc, #120]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d07f      	beq.n	80041f6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d062      	beq.n	80041c4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80040fe:	4b16      	ldr	r3, [pc, #88]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	4a15      	ldr	r2, [pc, #84]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8004104:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004108:	6093      	str	r3, [r2, #8]
 800410a:	4b13      	ldr	r3, [pc, #76]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004116:	4910      	ldr	r1, [pc, #64]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8004118:	4313      	orrs	r3, r2
 800411a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004124:	d309      	bcc.n	800413a <HAL_RCC_OscConfig+0xa16>
 8004126:	4b0c      	ldr	r3, [pc, #48]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f023 021f 	bic.w	r2, r3, #31
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	4909      	ldr	r1, [pc, #36]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8004134:	4313      	orrs	r3, r2
 8004136:	60cb      	str	r3, [r1, #12]
 8004138:	e02a      	b.n	8004190 <HAL_RCC_OscConfig+0xa6c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	2b00      	cmp	r3, #0
 8004140:	da0c      	bge.n	800415c <HAL_RCC_OscConfig+0xa38>
 8004142:	4b05      	ldr	r3, [pc, #20]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	015b      	lsls	r3, r3, #5
 8004150:	4901      	ldr	r1, [pc, #4]	@ (8004158 <HAL_RCC_OscConfig+0xa34>)
 8004152:	4313      	orrs	r3, r2
 8004154:	60cb      	str	r3, [r1, #12]
 8004156:	e01b      	b.n	8004190 <HAL_RCC_OscConfig+0xa6c>
 8004158:	46020c00 	.word	0x46020c00
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004164:	d30a      	bcc.n	800417c <HAL_RCC_OscConfig+0xa58>
 8004166:	4ba1      	ldr	r3, [pc, #644]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	029b      	lsls	r3, r3, #10
 8004174:	499d      	ldr	r1, [pc, #628]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004176:	4313      	orrs	r3, r2
 8004178:	60cb      	str	r3, [r1, #12]
 800417a:	e009      	b.n	8004190 <HAL_RCC_OscConfig+0xa6c>
 800417c:	4b9b      	ldr	r3, [pc, #620]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	03db      	lsls	r3, r3, #15
 800418a:	4998      	ldr	r1, [pc, #608]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 800418c:	4313      	orrs	r3, r2
 800418e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004190:	4b96      	ldr	r3, [pc, #600]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a95      	ldr	r2, [pc, #596]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004196:	f043 0310 	orr.w	r3, r3, #16
 800419a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800419c:	f7fd f8ec 	bl	8001378 <HAL_GetTick>
 80041a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80041a4:	f7fd f8e8 	bl	8001378 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e18b      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80041b6:	4b8d      	ldr	r3, [pc, #564]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0xa80>
 80041c2:	e018      	b.n	80041f6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80041c4:	4b89      	ldr	r3, [pc, #548]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a88      	ldr	r2, [pc, #544]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 80041ca:	f023 0310 	bic.w	r3, r3, #16
 80041ce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80041d0:	f7fd f8d2 	bl	8001378 <HAL_GetTick>
 80041d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80041d8:	f7fd f8ce 	bl	8001378 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e171      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80041ea:	4b80      	ldr	r3, [pc, #512]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8166 	beq.w	80044cc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004200:	2300      	movs	r3, #0
 8004202:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004206:	4b79      	ldr	r3, [pc, #484]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	2b0c      	cmp	r3, #12
 8004210:	f000 80f2 	beq.w	80043f8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004218:	2b02      	cmp	r3, #2
 800421a:	f040 80c5 	bne.w	80043a8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800421e:	4b73      	ldr	r3, [pc, #460]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a72      	ldr	r2, [pc, #456]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004224:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004228:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800422a:	f7fd f8a5 	bl	8001378 <HAL_GetTick>
 800422e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004232:	f7fd f8a1 	bl	8001378 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e144      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004244:	4b69      	ldr	r3, [pc, #420]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f0      	bne.n	8004232 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004250:	4b66      	ldr	r3, [pc, #408]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d111      	bne.n	8004282 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800425e:	4b63      	ldr	r3, [pc, #396]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004260:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004264:	4a61      	ldr	r2, [pc, #388]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004266:	f043 0304 	orr.w	r3, r3, #4
 800426a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800426e:	4b5f      	ldr	r3, [pc, #380]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004270:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004282:	4b5b      	ldr	r3, [pc, #364]	@ (80043f0 <HAL_RCC_OscConfig+0xccc>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800428a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800428e:	d102      	bne.n	8004296 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004290:	2301      	movs	r3, #1
 8004292:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004296:	4b56      	ldr	r3, [pc, #344]	@ (80043f0 <HAL_RCC_OscConfig+0xccc>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	4a55      	ldr	r2, [pc, #340]	@ (80043f0 <HAL_RCC_OscConfig+0xccc>)
 800429c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042a0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80042a2:	4b52      	ldr	r3, [pc, #328]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042aa:	f023 0303 	bic.w	r3, r3, #3
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80042b6:	3a01      	subs	r2, #1
 80042b8:	0212      	lsls	r2, r2, #8
 80042ba:	4311      	orrs	r1, r2
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80042c0:	430a      	orrs	r2, r1
 80042c2:	494a      	ldr	r1, [pc, #296]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80042c8:	4b48      	ldr	r3, [pc, #288]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 80042ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042cc:	4b49      	ldr	r3, [pc, #292]	@ (80043f4 <HAL_RCC_OscConfig+0xcd0>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80042d4:	3a01      	subs	r2, #1
 80042d6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80042de:	3a01      	subs	r2, #1
 80042e0:	0252      	lsls	r2, r2, #9
 80042e2:	b292      	uxth	r2, r2
 80042e4:	4311      	orrs	r1, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042ea:	3a01      	subs	r2, #1
 80042ec:	0412      	lsls	r2, r2, #16
 80042ee:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80042f2:	4311      	orrs	r1, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80042f8:	3a01      	subs	r2, #1
 80042fa:	0612      	lsls	r2, r2, #24
 80042fc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004300:	430a      	orrs	r2, r1
 8004302:	493a      	ldr	r1, [pc, #232]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004304:	4313      	orrs	r3, r2
 8004306:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004308:	4b38      	ldr	r3, [pc, #224]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 800430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430c:	4a37      	ldr	r2, [pc, #220]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 800430e:	f023 0310 	bic.w	r3, r3, #16
 8004312:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004318:	4a34      	ldr	r2, [pc, #208]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800431e:	4b33      	ldr	r3, [pc, #204]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	4a32      	ldr	r2, [pc, #200]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004324:	f043 0310 	orr.w	r3, r3, #16
 8004328:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800432a:	4b30      	ldr	r3, [pc, #192]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	f023 020c 	bic.w	r2, r3, #12
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004336:	492d      	ldr	r1, [pc, #180]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004338:	4313      	orrs	r3, r2
 800433a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800433c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004344:	4b2a      	ldr	r3, [pc, #168]	@ (80043f0 <HAL_RCC_OscConfig+0xccc>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4a29      	ldr	r2, [pc, #164]	@ (80043f0 <HAL_RCC_OscConfig+0xccc>)
 800434a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800434e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004350:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004354:	2b01      	cmp	r3, #1
 8004356:	d107      	bne.n	8004368 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004358:	4b24      	ldr	r3, [pc, #144]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 800435a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800435e:	4a23      	ldr	r2, [pc, #140]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004360:	f023 0304 	bic.w	r3, r3, #4
 8004364:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004368:	4b20      	ldr	r3, [pc, #128]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1f      	ldr	r2, [pc, #124]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 800436e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004372:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004374:	f7fd f800 	bl	8001378 <HAL_GetTick>
 8004378:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437c:	f7fc fffc 	bl	8001378 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e09f      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800438e:	4b17      	ldr	r3, [pc, #92]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800439a:	4b14      	ldr	r3, [pc, #80]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 800439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439e:	4a13      	ldr	r2, [pc, #76]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 80043a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043a4:	6293      	str	r3, [r2, #40]	@ 0x28
 80043a6:	e091      	b.n	80044cc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80043a8:	4b10      	ldr	r3, [pc, #64]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a0f      	ldr	r2, [pc, #60]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 80043ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043b2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043b4:	f7fc ffe0 	bl	8001378 <HAL_GetTick>
 80043b8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043bc:	f7fc ffdc 	bl	8001378 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e07f      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043ce:	4b07      	ldr	r3, [pc, #28]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80043da:	4b04      	ldr	r3, [pc, #16]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 80043dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043de:	4a03      	ldr	r2, [pc, #12]	@ (80043ec <HAL_RCC_OscConfig+0xcc8>)
 80043e0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80043e4:	f023 0303 	bic.w	r3, r3, #3
 80043e8:	6293      	str	r3, [r2, #40]	@ 0x28
 80043ea:	e06f      	b.n	80044cc <HAL_RCC_OscConfig+0xda8>
 80043ec:	46020c00 	.word	0x46020c00
 80043f0:	46020800 	.word	0x46020800
 80043f4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80043f8:	4b37      	ldr	r3, [pc, #220]	@ (80044d8 <HAL_RCC_OscConfig+0xdb4>)
 80043fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043fe:	4b36      	ldr	r3, [pc, #216]	@ (80044d8 <HAL_RCC_OscConfig+0xdb4>)
 8004400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004402:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004408:	2b01      	cmp	r3, #1
 800440a:	d039      	beq.n	8004480 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f003 0203 	and.w	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d132      	bne.n	8004480 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	0a1b      	lsrs	r3, r3, #8
 800441e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d129      	bne.n	8004480 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004436:	429a      	cmp	r2, r3
 8004438:	d122      	bne.n	8004480 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004444:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004446:	429a      	cmp	r2, r3
 8004448:	d11a      	bne.n	8004480 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	0a5b      	lsrs	r3, r3, #9
 800444e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004456:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d111      	bne.n	8004480 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	0c1b      	lsrs	r3, r3, #16
 8004460:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004468:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d108      	bne.n	8004480 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	0e1b      	lsrs	r3, r3, #24
 8004472:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e024      	b.n	80044ce <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004484:	4b14      	ldr	r3, [pc, #80]	@ (80044d8 <HAL_RCC_OscConfig+0xdb4>)
 8004486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004488:	08db      	lsrs	r3, r3, #3
 800448a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004492:	429a      	cmp	r2, r3
 8004494:	d01a      	beq.n	80044cc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004496:	4b10      	ldr	r3, [pc, #64]	@ (80044d8 <HAL_RCC_OscConfig+0xdb4>)
 8004498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449a:	4a0f      	ldr	r2, [pc, #60]	@ (80044d8 <HAL_RCC_OscConfig+0xdb4>)
 800449c:	f023 0310 	bic.w	r3, r3, #16
 80044a0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a2:	f7fc ff69 	bl	8001378 <HAL_GetTick>
 80044a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80044a8:	bf00      	nop
 80044aa:	f7fc ff65 	bl	8001378 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d0f9      	beq.n	80044aa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ba:	4a07      	ldr	r2, [pc, #28]	@ (80044d8 <HAL_RCC_OscConfig+0xdb4>)
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80044c0:	4b05      	ldr	r3, [pc, #20]	@ (80044d8 <HAL_RCC_OscConfig+0xdb4>)
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	4a04      	ldr	r2, [pc, #16]	@ (80044d8 <HAL_RCC_OscConfig+0xdb4>)
 80044c6:	f043 0310 	orr.w	r3, r3, #16
 80044ca:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3738      	adds	r7, #56	@ 0x38
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	46020c00 	.word	0x46020c00

080044dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e1d9      	b.n	80048a4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044f0:	4b9b      	ldr	r3, [pc, #620]	@ (8004760 <HAL_RCC_ClockConfig+0x284>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d910      	bls.n	8004520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b98      	ldr	r3, [pc, #608]	@ (8004760 <HAL_RCC_ClockConfig+0x284>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 020f 	bic.w	r2, r3, #15
 8004506:	4996      	ldr	r1, [pc, #600]	@ (8004760 <HAL_RCC_ClockConfig+0x284>)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	4b94      	ldr	r3, [pc, #592]	@ (8004760 <HAL_RCC_ClockConfig+0x284>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d001      	beq.n	8004520 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e1c1      	b.n	80048a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b00      	cmp	r3, #0
 800452a:	d010      	beq.n	800454e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	695a      	ldr	r2, [r3, #20]
 8004530:	4b8c      	ldr	r3, [pc, #560]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 8004532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004534:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004538:	429a      	cmp	r2, r3
 800453a:	d908      	bls.n	800454e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800453c:	4b89      	ldr	r3, [pc, #548]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 800453e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004540:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	4986      	ldr	r1, [pc, #536]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 800454a:	4313      	orrs	r3, r2
 800454c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d012      	beq.n	8004580 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	4b81      	ldr	r3, [pc, #516]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004568:	429a      	cmp	r2, r3
 800456a:	d909      	bls.n	8004580 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800456c:	4b7d      	ldr	r3, [pc, #500]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	497a      	ldr	r1, [pc, #488]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 800457c:	4313      	orrs	r3, r2
 800457e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d010      	beq.n	80045ae <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	4b74      	ldr	r3, [pc, #464]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004598:	429a      	cmp	r2, r3
 800459a:	d908      	bls.n	80045ae <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800459c:	4b71      	ldr	r3, [pc, #452]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	496e      	ldr	r1, [pc, #440]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d010      	beq.n	80045dc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	4b69      	ldr	r3, [pc, #420]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d908      	bls.n	80045dc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80045ca:	4b66      	ldr	r3, [pc, #408]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	f023 020f 	bic.w	r2, r3, #15
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	4963      	ldr	r1, [pc, #396]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80d2 	beq.w	800478e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80045ea:	2300      	movs	r3, #0
 80045ec:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d143      	bne.n	800467e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 80045f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d110      	bne.n	8004626 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004604:	4b57      	ldr	r3, [pc, #348]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 8004606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800460a:	4a56      	ldr	r2, [pc, #344]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004614:	4b53      	ldr	r3, [pc, #332]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 8004616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004622:	2301      	movs	r3, #1
 8004624:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004626:	f7fc fea7 	bl	8001378 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800462c:	4b4e      	ldr	r3, [pc, #312]	@ (8004768 <HAL_RCC_ClockConfig+0x28c>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00f      	beq.n	8004658 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004638:	e008      	b.n	800464c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800463a:	f7fc fe9d 	bl	8001378 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e12b      	b.n	80048a4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800464c:	4b46      	ldr	r3, [pc, #280]	@ (8004768 <HAL_RCC_ClockConfig+0x28c>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800465e:	4b41      	ldr	r3, [pc, #260]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 8004660:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004664:	4a3f      	ldr	r2, [pc, #252]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 8004666:	f023 0304 	bic.w	r3, r3, #4
 800466a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800466e:	4b3d      	ldr	r3, [pc, #244]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d121      	bne.n	80046be <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e112      	b.n	80048a4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d107      	bne.n	8004696 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004686:	4b37      	ldr	r3, [pc, #220]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d115      	bne.n	80046be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e106      	b.n	80048a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d107      	bne.n	80046ae <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800469e:	4b31      	ldr	r3, [pc, #196]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d109      	bne.n	80046be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e0fa      	b.n	80048a4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e0f2      	b.n	80048a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80046be:	4b29      	ldr	r3, [pc, #164]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f023 0203 	bic.w	r2, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4926      	ldr	r1, [pc, #152]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80046d0:	f7fc fe52 	bl	8001378 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d112      	bne.n	8004704 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046de:	e00a      	b.n	80046f6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e0:	f7fc fe4a 	bl	8001378 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e0d6      	b.n	80048a4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	2b0c      	cmp	r3, #12
 8004700:	d1ee      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x204>
 8004702:	e044      	b.n	800478e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d112      	bne.n	8004732 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800470c:	e00a      	b.n	8004724 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800470e:	f7fc fe33 	bl	8001378 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e0bf      	b.n	80048a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004724:	4b0f      	ldr	r3, [pc, #60]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f003 030c 	and.w	r3, r3, #12
 800472c:	2b08      	cmp	r3, #8
 800472e:	d1ee      	bne.n	800470e <HAL_RCC_ClockConfig+0x232>
 8004730:	e02d      	b.n	800478e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d123      	bne.n	8004782 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800473a:	e00a      	b.n	8004752 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800473c:	f7fc fe1c 	bl	8001378 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e0a8      	b.n	80048a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004752:	4b04      	ldr	r3, [pc, #16]	@ (8004764 <HAL_RCC_ClockConfig+0x288>)
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1ee      	bne.n	800473c <HAL_RCC_ClockConfig+0x260>
 800475e:	e016      	b.n	800478e <HAL_RCC_ClockConfig+0x2b2>
 8004760:	40022000 	.word	0x40022000
 8004764:	46020c00 	.word	0x46020c00
 8004768:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476c:	f7fc fe04 	bl	8001378 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e090      	b.n	80048a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004782:	4b4a      	ldr	r3, [pc, #296]	@ (80048ac <HAL_RCC_ClockConfig+0x3d0>)
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b04      	cmp	r3, #4
 800478c:	d1ee      	bne.n	800476c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d010      	beq.n	80047bc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	4b43      	ldr	r3, [pc, #268]	@ (80048ac <HAL_RCC_ClockConfig+0x3d0>)
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d208      	bcs.n	80047bc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80047aa:	4b40      	ldr	r3, [pc, #256]	@ (80048ac <HAL_RCC_ClockConfig+0x3d0>)
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f023 020f 	bic.w	r2, r3, #15
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	493d      	ldr	r1, [pc, #244]	@ (80048ac <HAL_RCC_ClockConfig+0x3d0>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047bc:	4b3c      	ldr	r3, [pc, #240]	@ (80048b0 <HAL_RCC_ClockConfig+0x3d4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d210      	bcs.n	80047ec <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ca:	4b39      	ldr	r3, [pc, #228]	@ (80048b0 <HAL_RCC_ClockConfig+0x3d4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 020f 	bic.w	r2, r3, #15
 80047d2:	4937      	ldr	r1, [pc, #220]	@ (80048b0 <HAL_RCC_ClockConfig+0x3d4>)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b35      	ldr	r3, [pc, #212]	@ (80048b0 <HAL_RCC_ClockConfig+0x3d4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e05b      	b.n	80048a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	4b2b      	ldr	r3, [pc, #172]	@ (80048ac <HAL_RCC_ClockConfig+0x3d0>)
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004804:	429a      	cmp	r2, r3
 8004806:	d208      	bcs.n	800481a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004808:	4b28      	ldr	r3, [pc, #160]	@ (80048ac <HAL_RCC_ClockConfig+0x3d0>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4925      	ldr	r1, [pc, #148]	@ (80048ac <HAL_RCC_ClockConfig+0x3d0>)
 8004816:	4313      	orrs	r3, r2
 8004818:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d012      	beq.n	800484c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	4b20      	ldr	r3, [pc, #128]	@ (80048ac <HAL_RCC_ClockConfig+0x3d0>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004834:	429a      	cmp	r2, r3
 8004836:	d209      	bcs.n	800484c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004838:	4b1c      	ldr	r3, [pc, #112]	@ (80048ac <HAL_RCC_ClockConfig+0x3d0>)
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	4919      	ldr	r1, [pc, #100]	@ (80048ac <HAL_RCC_ClockConfig+0x3d0>)
 8004848:	4313      	orrs	r3, r2
 800484a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	d010      	beq.n	800487a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	4b13      	ldr	r3, [pc, #76]	@ (80048ac <HAL_RCC_ClockConfig+0x3d0>)
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004864:	429a      	cmp	r2, r3
 8004866:	d208      	bcs.n	800487a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004868:	4b10      	ldr	r3, [pc, #64]	@ (80048ac <HAL_RCC_ClockConfig+0x3d0>)
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	490d      	ldr	r1, [pc, #52]	@ (80048ac <HAL_RCC_ClockConfig+0x3d0>)
 8004876:	4313      	orrs	r3, r2
 8004878:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800487a:	f000 f821 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 800487e:	4602      	mov	r2, r0
 8004880:	4b0a      	ldr	r3, [pc, #40]	@ (80048ac <HAL_RCC_ClockConfig+0x3d0>)
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	490a      	ldr	r1, [pc, #40]	@ (80048b4 <HAL_RCC_ClockConfig+0x3d8>)
 800488a:	5ccb      	ldrb	r3, [r1, r3]
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
 8004890:	4a09      	ldr	r2, [pc, #36]	@ (80048b8 <HAL_RCC_ClockConfig+0x3dc>)
 8004892:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004894:	4b09      	ldr	r3, [pc, #36]	@ (80048bc <HAL_RCC_ClockConfig+0x3e0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7fc fce3 	bl	8001264 <HAL_InitTick>
 800489e:	4603      	mov	r3, r0
 80048a0:	73fb      	strb	r3, [r7, #15]

  return status;
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	46020c00 	.word	0x46020c00
 80048b0:	40022000 	.word	0x40022000
 80048b4:	0800adbc 	.word	0x0800adbc
 80048b8:	20000000 	.word	0x20000000
 80048bc:	20000004 	.word	0x20000004

080048c0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b08b      	sub	sp, #44	@ 0x2c
 80048c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ce:	4b78      	ldr	r3, [pc, #480]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048d8:	4b75      	ldr	r3, [pc, #468]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_GetSysClockFreq+0x34>
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	2b0c      	cmp	r3, #12
 80048ec:	d121      	bne.n	8004932 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d11e      	bne.n	8004932 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80048f4:	4b6e      	ldr	r3, [pc, #440]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004900:	4b6b      	ldr	r3, [pc, #428]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004906:	0b1b      	lsrs	r3, r3, #12
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	627b      	str	r3, [r7, #36]	@ 0x24
 800490e:	e005      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004910:	4b67      	ldr	r3, [pc, #412]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	0f1b      	lsrs	r3, r3, #28
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800491c:	4a65      	ldr	r2, [pc, #404]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d110      	bne.n	800494e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004930:	e00d      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004932:	4b5f      	ldr	r3, [pc, #380]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	2b04      	cmp	r3, #4
 800493c:	d102      	bne.n	8004944 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800493e:	4b5e      	ldr	r3, [pc, #376]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004940:	623b      	str	r3, [r7, #32]
 8004942:	e004      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	2b08      	cmp	r3, #8
 8004948:	d101      	bne.n	800494e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800494a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800494c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b0c      	cmp	r3, #12
 8004952:	f040 80a5 	bne.w	8004aa0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004956:	4b56      	ldr	r3, [pc, #344]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004960:	4b53      	ldr	r3, [pc, #332]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800496e:	4b50      	ldr	r3, [pc, #320]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004972:	091b      	lsrs	r3, r3, #4
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800497a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800497c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497e:	08db      	lsrs	r3, r3, #3
 8004980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b02      	cmp	r3, #2
 800499a:	d003      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0xe4>
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d022      	beq.n	80049e8 <HAL_RCC_GetSysClockFreq+0x128>
 80049a2:	e043      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ae:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004abc <HAL_RCC_GetSysClockFreq+0x1fc>
 80049b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049b6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049c6:	ed97 6a01 	vldr	s12, [r7, #4]
 80049ca:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004ac0 <HAL_RCC_GetSysClockFreq+0x200>
 80049ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049e6:	e046      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004abc <HAL_RCC_GetSysClockFreq+0x1fc>
 80049f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fa:	4b2d      	ldr	r3, [pc, #180]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a0a:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a0e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004ac0 <HAL_RCC_GetSysClockFreq+0x200>
 8004a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a2a:	e024      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	ee07 3a90 	vmov	s15, r3
 8004a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a44:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4c:	ee07 3a90 	vmov	s15, r3
 8004a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a54:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a58:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004ac0 <HAL_RCC_GetSysClockFreq+0x200>
 8004a5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a74:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004a76:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a7a:	0e1b      	lsrs	r3, r3, #24
 8004a7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a80:	3301      	adds	r3, #1
 8004a82:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a9a:	ee17 3a90 	vmov	r3, s15
 8004a9e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	372c      	adds	r7, #44	@ 0x2c
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	46020c00 	.word	0x46020c00
 8004ab4:	0800add4 	.word	0x0800add4
 8004ab8:	00f42400 	.word	0x00f42400
 8004abc:	4b742400 	.word	0x4b742400
 8004ac0:	46000000 	.word	0x46000000

08004ac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004ac8:	f7ff fefa 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8004acc:	4602      	mov	r2, r0
 8004ace:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <HAL_RCC_GetHCLKFreq+0x28>)
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	4906      	ldr	r1, [pc, #24]	@ (8004af0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004ad8:	5ccb      	ldrb	r3, [r1, r3]
 8004ada:	fa22 f303 	lsr.w	r3, r2, r3
 8004ade:	4a05      	ldr	r2, [pc, #20]	@ (8004af4 <HAL_RCC_GetHCLKFreq+0x30>)
 8004ae0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004ae2:	4b04      	ldr	r3, [pc, #16]	@ (8004af4 <HAL_RCC_GetHCLKFreq+0x30>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	46020c00 	.word	0x46020c00
 8004af0:	0800adbc 	.word	0x0800adbc
 8004af4:	20000000 	.word	0x20000000

08004af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004afc:	f7ff ffe2 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004b00:	4602      	mov	r2, r0
 8004b02:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	4903      	ldr	r1, [pc, #12]	@ (8004b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b0e:	5ccb      	ldrb	r3, [r1, r3]
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	46020c00 	.word	0x46020c00
 8004b1c:	0800adcc 	.word	0x0800adcc

08004b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004b24:	f7ff ffce 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	0a1b      	lsrs	r3, r3, #8
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	4903      	ldr	r1, [pc, #12]	@ (8004b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b36:	5ccb      	ldrb	r3, [r1, r3]
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	46020c00 	.word	0x46020c00
 8004b44:	0800adcc 	.word	0x0800adcc

08004b48 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004b4c:	f7ff ffba 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4b05      	ldr	r3, [pc, #20]	@ (8004b68 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b56:	091b      	lsrs	r3, r3, #4
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	4903      	ldr	r1, [pc, #12]	@ (8004b6c <HAL_RCC_GetPCLK3Freq+0x24>)
 8004b5e:	5ccb      	ldrb	r3, [r1, r3]
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	46020c00 	.word	0x46020c00
 8004b6c:	0800adcc 	.word	0x0800adcc

08004b70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b78:	4b3e      	ldr	r3, [pc, #248]	@ (8004c74 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b86:	f7fe fd3f 	bl	8003608 <HAL_PWREx_GetVoltageRange>
 8004b8a:	6178      	str	r0, [r7, #20]
 8004b8c:	e019      	b.n	8004bc2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b8e:	4b39      	ldr	r3, [pc, #228]	@ (8004c74 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b94:	4a37      	ldr	r2, [pc, #220]	@ (8004c74 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b96:	f043 0304 	orr.w	r3, r3, #4
 8004b9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004b9e:	4b35      	ldr	r3, [pc, #212]	@ (8004c74 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bac:	f7fe fd2c 	bl	8003608 <HAL_PWREx_GetVoltageRange>
 8004bb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bb2:	4b30      	ldr	r3, [pc, #192]	@ (8004c74 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8004c74 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bba:	f023 0304 	bic.w	r3, r3, #4
 8004bbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bc8:	d003      	beq.n	8004bd2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bd0:	d109      	bne.n	8004be6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bd8:	d202      	bcs.n	8004be0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004bda:	2301      	movs	r3, #1
 8004bdc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004bde:	e033      	b.n	8004c48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004be0:	2300      	movs	r3, #0
 8004be2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004be4:	e030      	b.n	8004c48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bec:	d208      	bcs.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf4:	d102      	bne.n	8004bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	e025      	b.n	8004c48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e035      	b.n	8004c6c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c06:	d90f      	bls.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c14:	d902      	bls.n	8004c1c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	e015      	b.n	8004c48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	e012      	b.n	8004c48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	e00f      	b.n	8004c48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c2e:	d109      	bne.n	8004c44 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c36:	d102      	bne.n	8004c3e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004c38:	2301      	movs	r3, #1
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	e004      	b.n	8004c48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004c3e:	2302      	movs	r3, #2
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	e001      	b.n	8004c48 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004c44:	2301      	movs	r3, #1
 8004c46:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c48:	4b0b      	ldr	r3, [pc, #44]	@ (8004c78 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f023 020f 	bic.w	r2, r3, #15
 8004c50:	4909      	ldr	r1, [pc, #36]	@ (8004c78 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004c58:	4b07      	ldr	r3, [pc, #28]	@ (8004c78 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d001      	beq.n	8004c6a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	46020c00 	.word	0x46020c00
 8004c78:	40022000 	.word	0x40022000

08004c7c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c80:	b0b8      	sub	sp, #224	@ 0xe0
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	f002 0401 	and.w	r4, r2, #1
 8004ca0:	2500      	movs	r5, #0
 8004ca2:	ea54 0305 	orrs.w	r3, r4, r5
 8004ca6:	d00b      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004ca8:	4bca      	ldr	r3, [pc, #808]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cae:	f023 0103 	bic.w	r1, r3, #3
 8004cb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cb8:	4ac6      	ldr	r2, [pc, #792]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f002 0802 	and.w	r8, r2, #2
 8004ccc:	f04f 0900 	mov.w	r9, #0
 8004cd0:	ea58 0309 	orrs.w	r3, r8, r9
 8004cd4:	d00b      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004cd6:	4bbf      	ldr	r3, [pc, #764]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cdc:	f023 010c 	bic.w	r1, r3, #12
 8004ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce6:	4abb      	ldr	r2, [pc, #748]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ce8:	430b      	orrs	r3, r1
 8004cea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	f002 0a04 	and.w	sl, r2, #4
 8004cfa:	f04f 0b00 	mov.w	fp, #0
 8004cfe:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d02:	d00b      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004d04:	4bb3      	ldr	r3, [pc, #716]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d0a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d14:	4aaf      	ldr	r2, [pc, #700]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d16:	430b      	orrs	r3, r1
 8004d18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f002 0308 	and.w	r3, r2, #8
 8004d28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	d00b      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004d3c:	4ba5      	ldr	r3, [pc, #660]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4c:	4aa1      	ldr	r2, [pc, #644]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	f002 0310 	and.w	r3, r2, #16
 8004d60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d64:	2300      	movs	r3, #0
 8004d66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004d6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4313      	orrs	r3, r2
 8004d72:	d00b      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004d74:	4b97      	ldr	r3, [pc, #604]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d84:	4a93      	ldr	r2, [pc, #588]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d86:	430b      	orrs	r3, r1
 8004d88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	f002 0320 	and.w	r3, r2, #32
 8004d98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004da2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4313      	orrs	r3, r2
 8004daa:	d00b      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004dac:	4b89      	ldr	r3, [pc, #548]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004db2:	f023 0107 	bic.w	r1, r3, #7
 8004db6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dbc:	4a85      	ldr	r2, [pc, #532]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dda:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dde:	460b      	mov	r3, r1
 8004de0:	4313      	orrs	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004de4:	4b7b      	ldr	r3, [pc, #492]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dea:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004dee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004df2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004df4:	4a77      	ldr	r2, [pc, #476]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004df6:	430b      	orrs	r3, r1
 8004df8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004e08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e12:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	d00b      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004e1c:	4b6d      	ldr	r3, [pc, #436]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e2c:	4a69      	ldr	r2, [pc, #420]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004e40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e44:	2300      	movs	r3, #0
 8004e46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e4a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4313      	orrs	r3, r2
 8004e52:	d00b      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004e54:	4b5f      	ldr	r3, [pc, #380]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e64:	4a5b      	ldr	r2, [pc, #364]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e66:	430b      	orrs	r3, r1
 8004e68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004e78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e82:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e86:	460b      	mov	r3, r1
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004e8c:	4b51      	ldr	r3, [pc, #324]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e92:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004e96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ea4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004eba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	d00b      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004ec4:	4b43      	ldr	r3, [pc, #268]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004eca:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004ece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ed2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ed4:	4a3f      	ldr	r2, [pc, #252]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004ee8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004eec:	2300      	movs	r3, #0
 8004eee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ef2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	d00b      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004efc:	4b35      	ldr	r3, [pc, #212]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f02:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004f06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f0c:	4a31      	ldr	r2, [pc, #196]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004f14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004f20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f22:	2300      	movs	r3, #0
 8004f24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f26:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	d00c      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004f30:	4b28      	ldr	r3, [pc, #160]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f42:	4a24      	ldr	r2, [pc, #144]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f44:	430b      	orrs	r3, r1
 8004f46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f56:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f58:	2300      	movs	r3, #0
 8004f5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004f5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004f60:	460b      	mov	r3, r1
 8004f62:	4313      	orrs	r3, r2
 8004f64:	d04f      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004f66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6e:	2b80      	cmp	r3, #128	@ 0x80
 8004f70:	d02d      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004f72:	2b80      	cmp	r3, #128	@ 0x80
 8004f74:	d827      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f76:	2b60      	cmp	r3, #96	@ 0x60
 8004f78:	d02e      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004f7a:	2b60      	cmp	r3, #96	@ 0x60
 8004f7c:	d823      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f7e:	2b40      	cmp	r3, #64	@ 0x40
 8004f80:	d006      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004f82:	2b40      	cmp	r3, #64	@ 0x40
 8004f84:	d81f      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d011      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004f8e:	e01a      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f90:	4b10      	ldr	r3, [pc, #64]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f94:	4a0f      	ldr	r2, [pc, #60]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f9a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f9c:	e01d      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f002 f9d1 	bl	800734c <RCCEx_PLL2_Config>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fb0:	e013      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fb6:	332c      	adds	r3, #44	@ 0x2c
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f002 fa5f 	bl	800747c <RCCEx_PLL3_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fc4:	e009      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004fcc:	e005      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004fce:	bf00      	nop
 8004fd0:	e003      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004fd2:	bf00      	nop
 8004fd4:	46020c00 	.word	0x46020c00
        break;
 8004fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fda:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10d      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004fe2:	4bb6      	ldr	r3, [pc, #728]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004fe4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fe8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004fec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff4:	4ab1      	ldr	r2, [pc, #708]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004ffc:	e003      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005002:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005006:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005012:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005014:	2300      	movs	r3, #0
 8005016:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005018:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800501c:	460b      	mov	r3, r1
 800501e:	4313      	orrs	r3, r2
 8005020:	d053      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005022:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800502a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800502e:	d033      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005034:	d82c      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800503a:	d02f      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800503c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005040:	d826      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005046:	d008      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800504c:	d820      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005056:	d011      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005058:	e01a      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800505a:	4b98      	ldr	r3, [pc, #608]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800505c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505e:	4a97      	ldr	r2, [pc, #604]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005064:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005066:	e01a      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800506c:	3308      	adds	r3, #8
 800506e:	4618      	mov	r0, r3
 8005070:	f002 f96c 	bl	800734c <RCCEx_PLL2_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800507a:	e010      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800507c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005080:	332c      	adds	r3, #44	@ 0x2c
 8005082:	4618      	mov	r0, r3
 8005084:	f002 f9fa 	bl	800747c <RCCEx_PLL3_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800508e:	e006      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005096:	e002      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005098:	bf00      	nop
 800509a:	e000      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800509c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10d      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80050a6:	4b85      	ldr	r3, [pc, #532]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80050a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050ac:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80050b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050b8:	4a80      	ldr	r2, [pc, #512]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80050ba:	430b      	orrs	r3, r1
 80050bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80050c0:	e003      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80050c6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80050ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80050d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80050d8:	2300      	movs	r3, #0
 80050da:	667b      	str	r3, [r7, #100]	@ 0x64
 80050dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80050e0:	460b      	mov	r3, r1
 80050e2:	4313      	orrs	r3, r2
 80050e4:	d046      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80050e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050ee:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80050f2:	d028      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80050f4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80050f8:	d821      	bhi.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80050fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050fe:	d022      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005100:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005104:	d81b      	bhi.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005106:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800510a:	d01c      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800510c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005110:	d815      	bhi.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005116:	d008      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800511c:	d80f      	bhi.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d011      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005126:	d00e      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005128:	e009      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800512a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800512e:	3308      	adds	r3, #8
 8005130:	4618      	mov	r0, r3
 8005132:	f002 f90b 	bl	800734c <RCCEx_PLL2_Config>
 8005136:	4603      	mov	r3, r0
 8005138:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800513c:	e004      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005144:	e000      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8005146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005148:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10d      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005150:	4b5a      	ldr	r3, [pc, #360]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005156:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800515a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800515e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005162:	4a56      	ldr	r2, [pc, #344]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005164:	430b      	orrs	r3, r1
 8005166:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800516a:	e003      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005170:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005180:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005182:	2300      	movs	r3, #0
 8005184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005186:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800518a:	460b      	mov	r3, r1
 800518c:	4313      	orrs	r3, r2
 800518e:	d03f      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005198:	2b04      	cmp	r3, #4
 800519a:	d81e      	bhi.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800519c:	a201      	add	r2, pc, #4	@ (adr r2, 80051a4 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800519e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	080051e3 	.word	0x080051e3
 80051a8:	080051b9 	.word	0x080051b9
 80051ac:	080051c7 	.word	0x080051c7
 80051b0:	080051e3 	.word	0x080051e3
 80051b4:	080051e3 	.word	0x080051e3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051b8:	4b40      	ldr	r3, [pc, #256]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051bc:	4a3f      	ldr	r2, [pc, #252]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051c2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80051c4:	e00e      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051ca:	332c      	adds	r3, #44	@ 0x2c
 80051cc:	4618      	mov	r0, r3
 80051ce:	f002 f955 	bl	800747c <RCCEx_PLL3_Config>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80051d8:	e004      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80051e0:	e000      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80051e2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80051e4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10d      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80051ec:	4b33      	ldr	r3, [pc, #204]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051f2:	f023 0107 	bic.w	r1, r3, #7
 80051f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fe:	4a2f      	ldr	r2, [pc, #188]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005200:	430b      	orrs	r3, r1
 8005202:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005206:	e003      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005208:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800520c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800521c:	653b      	str	r3, [r7, #80]	@ 0x50
 800521e:	2300      	movs	r3, #0
 8005220:	657b      	str	r3, [r7, #84]	@ 0x54
 8005222:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005226:	460b      	mov	r3, r1
 8005228:	4313      	orrs	r3, r2
 800522a:	d04d      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800522c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005234:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005238:	d028      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x610>
 800523a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800523e:	d821      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005240:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005244:	d024      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005246:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800524a:	d81b      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800524c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005250:	d00e      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005252:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005256:	d815      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01b      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005260:	d110      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005262:	4b16      	ldr	r3, [pc, #88]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005266:	4a15      	ldr	r2, [pc, #84]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800526c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800526e:	e012      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005270:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005274:	332c      	adds	r3, #44	@ 0x2c
 8005276:	4618      	mov	r0, r3
 8005278:	f002 f900 	bl	800747c <RCCEx_PLL3_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005282:	e008      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800528a:	e004      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800528c:	bf00      	nop
 800528e:	e002      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005290:	bf00      	nop
 8005292:	e000      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005294:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005296:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800529a:	2b00      	cmp	r3, #0
 800529c:	d110      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800529e:	4b07      	ldr	r3, [pc, #28]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80052a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052b0:	4a02      	ldr	r2, [pc, #8]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052b2:	430b      	orrs	r3, r1
 80052b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80052b8:	e006      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80052ba:	bf00      	nop
 80052bc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052c4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80052d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052d6:	2300      	movs	r3, #0
 80052d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052da:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80052de:	460b      	mov	r3, r1
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f000 80b5 	beq.w	8005450 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e6:	2300      	movs	r3, #0
 80052e8:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ec:	4b9d      	ldr	r3, [pc, #628]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d113      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052fa:	4b9a      	ldr	r3, [pc, #616]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005300:	4a98      	ldr	r2, [pc, #608]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005302:	f043 0304 	orr.w	r3, r3, #4
 8005306:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800530a:	4b96      	ldr	r3, [pc, #600]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800530c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005318:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005322:	4b91      	ldr	r3, [pc, #580]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	4a90      	ldr	r2, [pc, #576]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800532e:	f7fc f823 	bl	8001378 <HAL_GetTick>
 8005332:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005336:	e00b      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005338:	f7fc f81e 	bl	8001378 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d903      	bls.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800534e:	e005      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005350:	4b85      	ldr	r3, [pc, #532]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0ed      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800535c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005360:	2b00      	cmp	r3, #0
 8005362:	d165      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005364:	4b7f      	ldr	r3, [pc, #508]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800536a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800536e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005376:	2b00      	cmp	r3, #0
 8005378:	d023      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800537a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800537e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005386:	4293      	cmp	r3, r2
 8005388:	d01b      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800538a:	4b76      	ldr	r3, [pc, #472]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800538c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005394:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005398:	4b72      	ldr	r3, [pc, #456]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800539a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800539e:	4a71      	ldr	r2, [pc, #452]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053a8:	4b6e      	ldr	r3, [pc, #440]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053ae:	4a6d      	ldr	r2, [pc, #436]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053b8:	4a6a      	ldr	r2, [pc, #424]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d019      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ce:	f7fb ffd3 	bl	8001378 <HAL_GetTick>
 80053d2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053d6:	e00d      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d8:	f7fb ffce 	bl	8001378 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053e2:	1ad2      	subs	r2, r2, r3
 80053e4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d903      	bls.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80053f2:	e006      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f4:	4b5b      	ldr	r3, [pc, #364]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0ea      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8005402:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10d      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800540a:	4b56      	ldr	r3, [pc, #344]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800540c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005410:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005418:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800541c:	4a51      	ldr	r2, [pc, #324]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800541e:	430b      	orrs	r3, r1
 8005420:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005424:	e008      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005426:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800542a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800542e:	e003      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005430:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005434:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005438:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800543c:	2b01      	cmp	r3, #1
 800543e:	d107      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005440:	4b48      	ldr	r3, [pc, #288]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005446:	4a47      	ldr	r2, [pc, #284]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005448:	f023 0304 	bic.w	r3, r3, #4
 800544c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005450:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800545c:	643b      	str	r3, [r7, #64]	@ 0x40
 800545e:	2300      	movs	r3, #0
 8005460:	647b      	str	r3, [r7, #68]	@ 0x44
 8005462:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005466:	460b      	mov	r3, r1
 8005468:	4313      	orrs	r3, r2
 800546a:	d042      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800546c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005470:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005474:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005478:	d022      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800547a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800547e:	d81b      	bhi.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005480:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005484:	d011      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005486:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800548a:	d815      	bhi.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d019      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005490:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005494:	d110      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005496:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800549a:	3308      	adds	r3, #8
 800549c:	4618      	mov	r0, r3
 800549e:	f001 ff55 	bl	800734c <RCCEx_PLL2_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80054a8:	e00d      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054aa:	4b2e      	ldr	r3, [pc, #184]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ae:	4a2d      	ldr	r2, [pc, #180]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054b4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80054b6:	e006      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80054be:	e002      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80054c0:	bf00      	nop
 80054c2:	e000      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80054c4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054c6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10d      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80054ce:	4b25      	ldr	r3, [pc, #148]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054d4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80054d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054e0:	4a20      	ldr	r2, [pc, #128]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054e2:	430b      	orrs	r3, r1
 80054e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80054e8:	e003      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ea:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80054ee:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80054f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80054fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005500:	2300      	movs	r3, #0
 8005502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005504:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005508:	460b      	mov	r3, r1
 800550a:	4313      	orrs	r3, r2
 800550c:	d032      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800550e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005512:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800551a:	d00b      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800551c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005520:	d804      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8005522:	2b00      	cmp	r3, #0
 8005524:	d008      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800552a:	d007      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005532:	e004      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005534:	bf00      	nop
 8005536:	e002      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005538:	bf00      	nop
 800553a:	e000      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800553c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800553e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005542:	2b00      	cmp	r3, #0
 8005544:	d112      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005546:	4b07      	ldr	r3, [pc, #28]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005548:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800554c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005550:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005554:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005558:	4a02      	ldr	r2, [pc, #8]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800555a:	430b      	orrs	r3, r1
 800555c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005560:	e008      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005562:	bf00      	nop
 8005564:	46020c00 	.word	0x46020c00
 8005568:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005570:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005574:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005580:	633b      	str	r3, [r7, #48]	@ 0x30
 8005582:	2300      	movs	r3, #0
 8005584:	637b      	str	r3, [r7, #52]	@ 0x34
 8005586:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800558a:	460b      	mov	r3, r1
 800558c:	4313      	orrs	r3, r2
 800558e:	d019      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005590:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005594:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800559c:	d105      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800559e:	4b88      	ldr	r3, [pc, #544]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a2:	4a87      	ldr	r2, [pc, #540]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055a8:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80055aa:	4b85      	ldr	r3, [pc, #532]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055b0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80055b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055bc:	4a80      	ldr	r2, [pc, #512]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055be:	430b      	orrs	r3, r1
 80055c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80055c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80055d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055d2:	2300      	movs	r3, #0
 80055d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055d6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80055da:	460b      	mov	r3, r1
 80055dc:	4313      	orrs	r3, r2
 80055de:	d00c      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80055e0:	4b77      	ldr	r3, [pc, #476]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055f2:	4973      	ldr	r1, [pc, #460]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80055fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005606:	623b      	str	r3, [r7, #32]
 8005608:	2300      	movs	r3, #0
 800560a:	627b      	str	r3, [r7, #36]	@ 0x24
 800560c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005610:	460b      	mov	r3, r1
 8005612:	4313      	orrs	r3, r2
 8005614:	d00c      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005616:	4b6a      	ldr	r3, [pc, #424]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800561c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005624:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005628:	4965      	ldr	r1, [pc, #404]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005630:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800563c:	61bb      	str	r3, [r7, #24]
 800563e:	2300      	movs	r3, #0
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005646:	460b      	mov	r3, r1
 8005648:	4313      	orrs	r3, r2
 800564a:	d00c      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800564c:	4b5c      	ldr	r3, [pc, #368]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800564e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005652:	f023 0218 	bic.w	r2, r3, #24
 8005656:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800565a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800565e:	4958      	ldr	r1, [pc, #352]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005666:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005672:	613b      	str	r3, [r7, #16]
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800567c:	460b      	mov	r3, r1
 800567e:	4313      	orrs	r3, r2
 8005680:	d032      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005682:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005686:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800568a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800568e:	d105      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005690:	4b4b      	ldr	r3, [pc, #300]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005694:	4a4a      	ldr	r2, [pc, #296]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800569a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800569c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056a8:	d108      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056ae:	3308      	adds	r3, #8
 80056b0:	4618      	mov	r0, r3
 80056b2:	f001 fe4b 	bl	800734c <RCCEx_PLL2_Config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80056bc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10d      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80056c4:	4b3e      	ldr	r3, [pc, #248]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056d6:	493a      	ldr	r1, [pc, #232]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80056de:	e003      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056e4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80056e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80056fe:	460b      	mov	r3, r1
 8005700:	4313      	orrs	r3, r2
 8005702:	d03a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800570c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005710:	d00e      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005712:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005716:	d815      	bhi.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d017      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 800571c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005720:	d110      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005722:	4b27      	ldr	r3, [pc, #156]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005726:	4a26      	ldr	r2, [pc, #152]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800572c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800572e:	e00e      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005730:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005734:	3308      	adds	r3, #8
 8005736:	4618      	mov	r0, r3
 8005738:	f001 fe08 	bl	800734c <RCCEx_PLL2_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005742:	e004      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800574a:	e000      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800574c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800574e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10d      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005756:	4b1a      	ldr	r3, [pc, #104]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800575c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005768:	4915      	ldr	r1, [pc, #84]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800576a:	4313      	orrs	r3, r2
 800576c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005770:	e003      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005772:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005776:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800577a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	2300      	movs	r3, #0
 800578a:	607b      	str	r3, [r7, #4]
 800578c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005790:	460b      	mov	r3, r1
 8005792:	4313      	orrs	r3, r2
 8005794:	d00c      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005796:	4b0a      	ldr	r3, [pc, #40]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800579c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80057a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80057a8:	4905      	ldr	r1, [pc, #20]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80057b0:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	37e0      	adds	r7, #224	@ 0xe0
 80057b8:	46bd      	mov	sp, r7
 80057ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057be:	bf00      	nop
 80057c0:	46020c00 	.word	0x46020c00

080057c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b089      	sub	sp, #36	@ 0x24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80057cc:	4ba6      	ldr	r3, [pc, #664]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80057d6:	4ba4      	ldr	r3, [pc, #656]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80057e0:	4ba1      	ldr	r3, [pc, #644]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e4:	0a1b      	lsrs	r3, r3, #8
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	3301      	adds	r3, #1
 80057ec:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80057ee:	4b9e      	ldr	r3, [pc, #632]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f2:	091b      	lsrs	r3, r3, #4
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80057fa:	4b9b      	ldr	r3, [pc, #620]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fe:	08db      	lsrs	r3, r3, #3
 8005800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	fb02 f303 	mul.w	r3, r2, r3
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005812:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b03      	cmp	r3, #3
 800581a:	d062      	beq.n	80058e2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2b03      	cmp	r3, #3
 8005820:	f200 8081 	bhi.w	8005926 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d024      	beq.n	8005874 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d17a      	bne.n	8005926 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	ee07 3a90 	vmov	s15, r3
 8005836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005a6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800583e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005842:	4b89      	ldr	r3, [pc, #548]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005852:	ed97 6a02 	vldr	s12, [r7, #8]
 8005856:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800585a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800585e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005866:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800586a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005872:	e08f      	b.n	8005994 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005874:	4b7c      	ldr	r3, [pc, #496]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005880:	4b79      	ldr	r3, [pc, #484]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	0f1b      	lsrs	r3, r3, #28
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	e006      	b.n	800589a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800588c:	4b76      	ldr	r3, [pc, #472]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800588e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005892:	041b      	lsls	r3, r3, #16
 8005894:	0f1b      	lsrs	r3, r3, #28
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	4a76      	ldr	r2, [pc, #472]	@ (8005a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800589c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a0:	ee07 3a90 	vmov	s15, r3
 80058a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	ee07 3a90 	vmov	s15, r3
 80058bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80058c4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80058c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80058d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058e0:	e058      	b.n	8005994 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	ee07 3a90 	vmov	s15, r3
 80058e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ec:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005a6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80058f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058f4:	4b5c      	ldr	r3, [pc, #368]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fc:	ee07 3a90 	vmov	s15, r3
 8005900:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005904:	ed97 6a02 	vldr	s12, [r7, #8]
 8005908:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800590c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005910:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005914:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005918:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800591c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005920:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005924:	e036      	b.n	8005994 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005926:	4b50      	ldr	r3, [pc, #320]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005932:	4b4d      	ldr	r3, [pc, #308]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	0f1b      	lsrs	r3, r3, #28
 8005938:	f003 030f 	and.w	r3, r3, #15
 800593c:	e006      	b.n	800594c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800593e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005944:	041b      	lsls	r3, r3, #16
 8005946:	0f1b      	lsrs	r3, r3, #28
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	4a49      	ldr	r2, [pc, #292]	@ (8005a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800594e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	ee07 3a90 	vmov	s15, r3
 8005960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005972:	ed97 6a02 	vldr	s12, [r7, #8]
 8005976:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800597a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800597e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005986:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800598a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005992:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005994:	4b34      	ldr	r3, [pc, #208]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d017      	beq.n	80059d0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059a0:	4b31      	ldr	r3, [pc, #196]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a4:	0a5b      	lsrs	r3, r3, #9
 80059a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80059b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059b6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80059be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059c6:	ee17 2a90 	vmov	r2, s15
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	e002      	b.n	80059d6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80059d6:	4b24      	ldr	r3, [pc, #144]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d017      	beq.n	8005a12 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059e2:	4b21      	ldr	r3, [pc, #132]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e6:	0c1b      	lsrs	r3, r3, #16
 80059e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059ec:	ee07 3a90 	vmov	s15, r3
 80059f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80059f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059f8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a08:	ee17 2a90 	vmov	r2, s15
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	605a      	str	r2, [r3, #4]
 8005a10:	e002      	b.n	8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005a18:	4b13      	ldr	r3, [pc, #76]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d017      	beq.n	8005a54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a24:	4b10      	ldr	r3, [pc, #64]	@ (8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a28:	0e1b      	lsrs	r3, r3, #24
 8005a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005a36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a4a:	ee17 2a90 	vmov	r2, s15
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005a52:	e002      	b.n	8005a5a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	609a      	str	r2, [r3, #8]
}
 8005a5a:	bf00      	nop
 8005a5c:	3724      	adds	r7, #36	@ 0x24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	46020c00 	.word	0x46020c00
 8005a6c:	4b742400 	.word	0x4b742400
 8005a70:	46000000 	.word	0x46000000
 8005a74:	0800add4 	.word	0x0800add4

08005a78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b089      	sub	sp, #36	@ 0x24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005a80:	4ba6      	ldr	r3, [pc, #664]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a88:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005a8a:	4ba4      	ldr	r3, [pc, #656]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005a94:	4ba1      	ldr	r3, [pc, #644]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a98:	0a1b      	lsrs	r3, r3, #8
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005aa2:	4b9e      	ldr	r3, [pc, #632]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa6:	091b      	lsrs	r3, r3, #4
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005aae:	4b9b      	ldr	r3, [pc, #620]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	08db      	lsrs	r3, r3, #3
 8005ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d062      	beq.n	8005b96 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	f200 8081 	bhi.w	8005bda <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d024      	beq.n	8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d17a      	bne.n	8005bda <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aee:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af6:	4b89      	ldr	r3, [pc, #548]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b0a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b26:	e08f      	b.n	8005c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005b28:	4b7c      	ldr	r3, [pc, #496]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005b34:	4b79      	ldr	r3, [pc, #484]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	0f1b      	lsrs	r3, r3, #28
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	e006      	b.n	8005b4e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005b40:	4b76      	ldr	r3, [pc, #472]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b46:	041b      	lsls	r3, r3, #16
 8005b48:	0f1b      	lsrs	r3, r3, #28
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	4a76      	ldr	r2, [pc, #472]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b54:	ee07 3a90 	vmov	s15, r3
 8005b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	ee07 3a90 	vmov	s15, r3
 8005b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b74:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b78:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005b7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b94:	e058      	b.n	8005c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	ee07 3a90 	vmov	s15, r3
 8005b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba8:	4b5c      	ldr	r3, [pc, #368]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb0:	ee07 3a90 	vmov	s15, r3
 8005bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bbc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bd8:	e036      	b.n	8005c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005bda:	4b50      	ldr	r3, [pc, #320]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d005      	beq.n	8005bf2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005be6:	4b4d      	ldr	r3, [pc, #308]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	0f1b      	lsrs	r3, r3, #28
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	e006      	b.n	8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bf8:	041b      	lsls	r3, r3, #16
 8005bfa:	0f1b      	lsrs	r3, r3, #28
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	4a49      	ldr	r2, [pc, #292]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c06:	ee07 3a90 	vmov	s15, r3
 8005c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	ee07 3a90 	vmov	s15, r3
 8005c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c2a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c46:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005c48:	4b34      	ldr	r3, [pc, #208]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d017      	beq.n	8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c54:	4b31      	ldr	r3, [pc, #196]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c58:	0a5b      	lsrs	r3, r3, #9
 8005c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005c66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c7a:	ee17 2a90 	vmov	r2, s15
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	e002      	b.n	8005c8a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005c8a:	4b24      	ldr	r3, [pc, #144]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d017      	beq.n	8005cc6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c96:	4b21      	ldr	r3, [pc, #132]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9a:	0c1b      	lsrs	r3, r3, #16
 8005c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ca0:	ee07 3a90 	vmov	s15, r3
 8005ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005ca8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cac:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005cb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cbc:	ee17 2a90 	vmov	r2, s15
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	605a      	str	r2, [r3, #4]
 8005cc4:	e002      	b.n	8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005ccc:	4b13      	ldr	r3, [pc, #76]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d017      	beq.n	8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005cd8:	4b10      	ldr	r3, [pc, #64]	@ (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cdc:	0e1b      	lsrs	r3, r3, #24
 8005cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005cea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cfe:	ee17 2a90 	vmov	r2, s15
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d06:	e002      	b.n	8005d0e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	609a      	str	r2, [r3, #8]
}
 8005d0e:	bf00      	nop
 8005d10:	3724      	adds	r7, #36	@ 0x24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	46020c00 	.word	0x46020c00
 8005d20:	4b742400 	.word	0x4b742400
 8005d24:	46000000 	.word	0x46000000
 8005d28:	0800add4 	.word	0x0800add4

08005d2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b089      	sub	sp, #36	@ 0x24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005d34:	4ba6      	ldr	r3, [pc, #664]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005d3e:	4ba4      	ldr	r3, [pc, #656]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005d48:	4ba1      	ldr	r3, [pc, #644]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4c:	0a1b      	lsrs	r3, r3, #8
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	3301      	adds	r3, #1
 8005d54:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005d56:	4b9e      	ldr	r3, [pc, #632]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5a:	091b      	lsrs	r3, r3, #4
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005d62:	4b9b      	ldr	r3, [pc, #620]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d66:	08db      	lsrs	r3, r3, #3
 8005d68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	fb02 f303 	mul.w	r3, r2, r3
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d062      	beq.n	8005e4a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	f200 8081 	bhi.w	8005e8e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d024      	beq.n	8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d17a      	bne.n	8005e8e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005daa:	4b89      	ldr	r3, [pc, #548]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dbe:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005dda:	e08f      	b.n	8005efc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ddc:	4b7c      	ldr	r3, [pc, #496]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d005      	beq.n	8005df4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005de8:	4b79      	ldr	r3, [pc, #484]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	0f1b      	lsrs	r3, r3, #28
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	e006      	b.n	8005e02 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005df4:	4b76      	ldr	r3, [pc, #472]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005dfa:	041b      	lsls	r3, r3, #16
 8005dfc:	0f1b      	lsrs	r3, r3, #28
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	4a76      	ldr	r2, [pc, #472]	@ (8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	ee07 3a90 	vmov	s15, r3
 8005e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e28:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e2c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005e30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e48:	e058      	b.n	8005efc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	ee07 3a90 	vmov	s15, r3
 8005e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e54:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5c:	4b5c      	ldr	r3, [pc, #368]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e70:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005e74:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e80:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e8c:	e036      	b.n	8005efc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e8e:	4b50      	ldr	r3, [pc, #320]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005e9a:	4b4d      	ldr	r3, [pc, #308]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	0f1b      	lsrs	r3, r3, #28
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	e006      	b.n	8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ea8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005eac:	041b      	lsls	r3, r3, #16
 8005eae:	0f1b      	lsrs	r3, r3, #28
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	4a49      	ldr	r2, [pc, #292]	@ (8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ede:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005efa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005efc:	4b34      	ldr	r3, [pc, #208]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d017      	beq.n	8005f38 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f08:	4b31      	ldr	r3, [pc, #196]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0c:	0a5b      	lsrs	r3, r3, #9
 8005f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f2e:	ee17 2a90 	vmov	r2, s15
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	e002      	b.n	8005f3e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005f3e:	4b24      	ldr	r3, [pc, #144]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d017      	beq.n	8005f7a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f4a:	4b21      	ldr	r3, [pc, #132]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f4e:	0c1b      	lsrs	r3, r3, #16
 8005f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f54:	ee07 3a90 	vmov	s15, r3
 8005f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005f5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f60:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f70:	ee17 2a90 	vmov	r2, s15
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	605a      	str	r2, [r3, #4]
 8005f78:	e002      	b.n	8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005f80:	4b13      	ldr	r3, [pc, #76]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d017      	beq.n	8005fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f8c:	4b10      	ldr	r3, [pc, #64]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f90:	0e1b      	lsrs	r3, r3, #24
 8005f92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005f9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fa2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005fa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fb2:	ee17 2a90 	vmov	r2, s15
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005fba:	e002      	b.n	8005fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	609a      	str	r2, [r3, #8]
}
 8005fc2:	bf00      	nop
 8005fc4:	3724      	adds	r7, #36	@ 0x24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	46020c00 	.word	0x46020c00
 8005fd4:	4b742400 	.word	0x4b742400
 8005fd8:	46000000 	.word	0x46000000
 8005fdc:	0800add4 	.word	0x0800add4

08005fe0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08e      	sub	sp, #56	@ 0x38
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fee:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	d145      	bne.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005ff6:	4baa      	ldr	r3, [pc, #680]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006000:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006002:	4ba7      	ldr	r3, [pc, #668]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b02      	cmp	r3, #2
 800600e:	d108      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006016:	d104      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006018:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800601c:	637b      	str	r3, [r7, #52]	@ 0x34
 800601e:	f001 b987 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006022:	4b9f      	ldr	r3, [pc, #636]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800602c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006030:	d114      	bne.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006038:	d110      	bne.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800603a:	4b99      	ldr	r3, [pc, #612]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800603c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006048:	d103      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800604a:	23fa      	movs	r3, #250	@ 0xfa
 800604c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800604e:	f001 b96f 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006052:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006056:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006058:	f001 b96a 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800605c:	4b90      	ldr	r3, [pc, #576]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006064:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006068:	d107      	bne.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006070:	d103      	bne.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006072:	4b8c      	ldr	r3, [pc, #560]	@ (80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006074:	637b      	str	r3, [r7, #52]	@ 0x34
 8006076:	f001 b95b 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	637b      	str	r3, [r7, #52]	@ 0x34
 800607e:	f001 b957 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006086:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800608a:	430b      	orrs	r3, r1
 800608c:	d151      	bne.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800608e:	4b84      	ldr	r3, [pc, #528]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006090:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006094:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006098:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609c:	2b80      	cmp	r3, #128	@ 0x80
 800609e:	d035      	beq.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80060a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a2:	2b80      	cmp	r3, #128	@ 0x80
 80060a4:	d841      	bhi.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80060a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a8:	2b60      	cmp	r3, #96	@ 0x60
 80060aa:	d02a      	beq.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80060ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ae:	2b60      	cmp	r3, #96	@ 0x60
 80060b0:	d83b      	bhi.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80060b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b4:	2b40      	cmp	r3, #64	@ 0x40
 80060b6:	d009      	beq.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80060b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ba:	2b40      	cmp	r3, #64	@ 0x40
 80060bc:	d835      	bhi.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80060be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00c      	beq.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d012      	beq.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80060ca:	e02e      	b.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff fb77 	bl	80057c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060da:	f001 b929 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060de:	f107 0318 	add.w	r3, r7, #24
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff fcc8 	bl	8005a78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060ec:	f001 b920 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060f0:	f107 030c 	add.w	r3, r7, #12
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff fe19 	bl	8005d2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060fe:	f001 b917 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006102:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006106:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006108:	f001 b912 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800610c:	4b64      	ldr	r3, [pc, #400]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006118:	d103      	bne.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800611a:	4b63      	ldr	r3, [pc, #396]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800611c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800611e:	f001 b907 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006126:	f001 b903 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800612e:	f001 b8ff 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006136:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800613a:	430b      	orrs	r3, r1
 800613c:	d158      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800613e:	4b58      	ldr	r3, [pc, #352]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006140:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006144:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006148:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006150:	d03b      	beq.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006158:	d846      	bhi.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006160:	d02e      	beq.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006164:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006168:	d83e      	bhi.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006170:	d00b      	beq.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006178:	d836      	bhi.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00d      	beq.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006186:	d012      	beq.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006188:	e02e      	b.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800618a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff fb18 	bl	80057c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006196:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006198:	f001 b8ca 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800619c:	f107 0318 	add.w	r3, r7, #24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff fc69 	bl	8005a78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061aa:	f001 b8c1 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061ae:	f107 030c 	add.w	r3, r7, #12
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff fdba 	bl	8005d2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061bc:	f001 b8b8 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80061c0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80061c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061c6:	f001 b8b3 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061ca:	4b35      	ldr	r3, [pc, #212]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d6:	d103      	bne.n	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80061d8:	4b33      	ldr	r3, [pc, #204]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80061da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80061dc:	f001 b8a8 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061e4:	f001 b8a4 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061ec:	f001 b8a0 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80061f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f4:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80061f8:	430b      	orrs	r3, r1
 80061fa:	d16e      	bne.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80061fc:	4b28      	ldr	r3, [pc, #160]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80061fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006202:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006206:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800620e:	d034      	beq.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8006210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006212:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006216:	d85c      	bhi.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800621e:	d00b      	beq.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006222:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006226:	d854      	bhi.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622a:	2b00      	cmp	r3, #0
 800622c:	d016      	beq.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006234:	d009      	beq.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006236:	e04c      	b.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006238:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff fac1 	bl	80057c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006244:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006246:	f001 b873 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800624a:	f107 0318 	add.w	r3, r7, #24
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff fc12 	bl	8005a78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006258:	f001 b86a 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800625c:	4b10      	ldr	r3, [pc, #64]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006268:	d103      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800626a:	4b10      	ldr	r3, [pc, #64]	@ (80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800626c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800626e:	f001 b85f 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006276:	f001 b85b 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800627a:	4b09      	ldr	r3, [pc, #36]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b20      	cmp	r3, #32
 8006284:	d121      	bne.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006286:	4b06      	ldr	r3, [pc, #24]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00e      	beq.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8006292:	4b03      	ldr	r3, [pc, #12]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	0e1b      	lsrs	r3, r3, #24
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	e00f      	b.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800629e:	bf00      	nop
 80062a0:	46020c00 	.word	0x46020c00
 80062a4:	0007a120 	.word	0x0007a120
 80062a8:	00f42400 	.word	0x00f42400
 80062ac:	02dc6c00 	.word	0x02dc6c00
 80062b0:	4ba7      	ldr	r3, [pc, #668]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062b6:	041b      	lsls	r3, r3, #16
 80062b8:	0e1b      	lsrs	r3, r3, #24
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	4aa5      	ldr	r2, [pc, #660]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80062c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80062c6:	f001 b833 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062ce:	f001 b82f 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062d6:	f001 b82b 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80062da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062de:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80062e2:	430b      	orrs	r3, r1
 80062e4:	d17f      	bne.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80062e6:	4b9a      	ldr	r3, [pc, #616]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062f0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d165      	bne.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80062f8:	4b95      	ldr	r3, [pc, #596]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062fe:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006302:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006306:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800630a:	d034      	beq.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800630c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006312:	d853      	bhi.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800631a:	d00b      	beq.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800631c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006322:	d84b      	bhi.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	2b00      	cmp	r3, #0
 8006328:	d016      	beq.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006330:	d009      	beq.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006332:	e043      	b.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff fa43 	bl	80057c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006342:	f000 bff5 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006346:	f107 0318 	add.w	r3, r7, #24
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff fb94 	bl	8005a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006354:	f000 bfec 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006358:	4b7d      	ldr	r3, [pc, #500]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006364:	d103      	bne.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8006366:	4b7c      	ldr	r3, [pc, #496]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006368:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800636a:	f000 bfe1 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006372:	f000 bfdd 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006376:	4b76      	ldr	r3, [pc, #472]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b20      	cmp	r3, #32
 8006380:	d118      	bne.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006382:	4b73      	ldr	r3, [pc, #460]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d005      	beq.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800638e:	4b70      	ldr	r3, [pc, #448]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	0e1b      	lsrs	r3, r3, #24
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	e006      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800639a:	4b6d      	ldr	r3, [pc, #436]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800639c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063a0:	041b      	lsls	r3, r3, #16
 80063a2:	0e1b      	lsrs	r3, r3, #24
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	4a6a      	ldr	r2, [pc, #424]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80063aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ae:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80063b0:	f000 bfbe 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80063b8:	f000 bfba 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80063c0:	f000 bfb6 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80063c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063ca:	d108      	bne.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff f9f7 	bl	80057c4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063da:	f000 bfa9 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063e2:	f000 bfa5 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80063e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ea:	1e51      	subs	r1, r2, #1
 80063ec:	430b      	orrs	r3, r1
 80063ee:	d136      	bne.n	800645e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80063f0:	4b57      	ldr	r3, [pc, #348]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80063fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d104      	bne.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006402:	f7fe fb8d 	bl	8004b20 <HAL_RCC_GetPCLK2Freq>
 8006406:	6378      	str	r0, [r7, #52]	@ 0x34
 8006408:	f000 bf92 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	2b01      	cmp	r3, #1
 8006410:	d104      	bne.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006412:	f7fe fa55 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8006416:	6378      	str	r0, [r7, #52]	@ 0x34
 8006418:	f000 bf8a 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800641c:	4b4c      	ldr	r3, [pc, #304]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006428:	d106      	bne.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800642a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642c:	2b02      	cmp	r3, #2
 800642e:	d103      	bne.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8006430:	4b4a      	ldr	r3, [pc, #296]	@ (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006432:	637b      	str	r3, [r7, #52]	@ 0x34
 8006434:	f000 bf7c 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006438:	4b45      	ldr	r3, [pc, #276]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800643a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b02      	cmp	r3, #2
 8006444:	d107      	bne.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	2b03      	cmp	r3, #3
 800644a:	d104      	bne.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 800644c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006450:	637b      	str	r3, [r7, #52]	@ 0x34
 8006452:	f000 bf6d 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	637b      	str	r3, [r7, #52]	@ 0x34
 800645a:	f000 bf69 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800645e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006462:	1e91      	subs	r1, r2, #2
 8006464:	430b      	orrs	r3, r1
 8006466:	d136      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006468:	4b39      	ldr	r3, [pc, #228]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800646a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800646e:	f003 030c 	and.w	r3, r3, #12
 8006472:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006476:	2b00      	cmp	r3, #0
 8006478:	d104      	bne.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800647a:	f7fe fb3d 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 800647e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006480:	f000 bf56 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006486:	2b04      	cmp	r3, #4
 8006488:	d104      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800648a:	f7fe fa19 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 800648e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006490:	f000 bf4e 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006494:	4b2e      	ldr	r3, [pc, #184]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800649c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a0:	d106      	bne.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80064a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d103      	bne.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 80064a8:	4b2c      	ldr	r3, [pc, #176]	@ (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80064aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ac:	f000 bf40 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80064b0:	4b27      	ldr	r3, [pc, #156]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d107      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80064be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c0:	2b0c      	cmp	r3, #12
 80064c2:	d104      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 80064c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ca:	f000 bf31 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d2:	f000 bf2d 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80064d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064da:	1f11      	subs	r1, r2, #4
 80064dc:	430b      	orrs	r3, r1
 80064de:	d13f      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80064e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80064ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d104      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80064f2:	f7fe fb01 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 80064f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80064f8:	f000 bf1a 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80064fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fe:	2b10      	cmp	r3, #16
 8006500:	d104      	bne.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006502:	f7fe f9dd 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8006506:	6378      	str	r0, [r7, #52]	@ 0x34
 8006508:	f000 bf12 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800650c:	4b10      	ldr	r3, [pc, #64]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006518:	d106      	bne.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800651a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651c:	2b20      	cmp	r3, #32
 800651e:	d103      	bne.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8006520:	4b0e      	ldr	r3, [pc, #56]	@ (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006522:	637b      	str	r3, [r7, #52]	@ 0x34
 8006524:	f000 bf04 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006528:	4b09      	ldr	r3, [pc, #36]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800652a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b02      	cmp	r3, #2
 8006534:	d107      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006538:	2b30      	cmp	r3, #48	@ 0x30
 800653a:	d104      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 800653c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006540:	637b      	str	r3, [r7, #52]	@ 0x34
 8006542:	f000 bef5 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	637b      	str	r3, [r7, #52]	@ 0x34
 800654a:	f000 bef1 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800654e:	bf00      	nop
 8006550:	46020c00 	.word	0x46020c00
 8006554:	0800add4 	.word	0x0800add4
 8006558:	02dc6c00 	.word	0x02dc6c00
 800655c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006564:	f1a2 0108 	sub.w	r1, r2, #8
 8006568:	430b      	orrs	r3, r1
 800656a:	d136      	bne.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800656c:	4ba4      	ldr	r3, [pc, #656]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800656e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006572:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006576:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800657e:	f7fe fabb 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 8006582:	6378      	str	r0, [r7, #52]	@ 0x34
 8006584:	f000 bed4 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	2b40      	cmp	r3, #64	@ 0x40
 800658c:	d104      	bne.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800658e:	f7fe f997 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8006592:	6378      	str	r0, [r7, #52]	@ 0x34
 8006594:	f000 becc 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006598:	4b99      	ldr	r3, [pc, #612]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065a4:	d106      	bne.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80065a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a8:	2b80      	cmp	r3, #128	@ 0x80
 80065aa:	d103      	bne.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 80065ac:	4b95      	ldr	r3, [pc, #596]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80065ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b0:	f000 bebe 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80065b4:	4b92      	ldr	r3, [pc, #584]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80065b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d107      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 80065c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80065c6:	d104      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 80065c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ce:	f000 beaf 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d6:	f000 beab 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80065da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065de:	f1a2 0110 	sub.w	r1, r2, #16
 80065e2:	430b      	orrs	r3, r1
 80065e4:	d139      	bne.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80065e6:	4b86      	ldr	r3, [pc, #536]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80065e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065f0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80065f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d104      	bne.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80065f8:	f7fe fa7e 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 80065fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80065fe:	f000 be97 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006608:	d104      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800660a:	f7fe f959 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 800660e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006610:	f000 be8e 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006614:	4b7a      	ldr	r3, [pc, #488]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800661c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006620:	d107      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006628:	d103      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800662a:	4b76      	ldr	r3, [pc, #472]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800662c:	637b      	str	r3, [r7, #52]	@ 0x34
 800662e:	f000 be7f 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006632:	4b73      	ldr	r3, [pc, #460]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b02      	cmp	r3, #2
 800663e:	d108      	bne.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8006640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006642:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006646:	d104      	bne.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006648:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800664c:	637b      	str	r3, [r7, #52]	@ 0x34
 800664e:	f000 be6f 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	637b      	str	r3, [r7, #52]	@ 0x34
 8006656:	f000 be6b 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800665a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800665e:	f1a2 0120 	sub.w	r1, r2, #32
 8006662:	430b      	orrs	r3, r1
 8006664:	d158      	bne.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006666:	4b66      	ldr	r3, [pc, #408]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006674:	2b00      	cmp	r3, #0
 8006676:	d104      	bne.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006678:	f7fe fa66 	bl	8004b48 <HAL_RCC_GetPCLK3Freq>
 800667c:	6378      	str	r0, [r7, #52]	@ 0x34
 800667e:	f000 be57 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006684:	2b01      	cmp	r3, #1
 8006686:	d104      	bne.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006688:	f7fe f91a 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 800668c:	6378      	str	r0, [r7, #52]	@ 0x34
 800668e:	f000 be4f 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006692:	4b5b      	ldr	r3, [pc, #364]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800669a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800669e:	d106      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80066a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d103      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 80066a6:	4b57      	ldr	r3, [pc, #348]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066aa:	f000 be41 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80066ae:	4b54      	ldr	r3, [pc, #336]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d107      	bne.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d104      	bne.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 80066c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80066c8:	f000 be32 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80066cc:	4b4c      	ldr	r3, [pc, #304]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	d11b      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d118      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066de:	4b48      	ldr	r3, [pc, #288]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80066ea:	4b45      	ldr	r3, [pc, #276]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	0e1b      	lsrs	r3, r3, #24
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	e006      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80066f6:	4b42      	ldr	r3, [pc, #264]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066fc:	041b      	lsls	r3, r3, #16
 80066fe:	0e1b      	lsrs	r3, r3, #24
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	4a40      	ldr	r2, [pc, #256]	@ (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800670a:	637b      	str	r3, [r7, #52]	@ 0x34
 800670c:	f000 be10 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	637b      	str	r3, [r7, #52]	@ 0x34
 8006714:	f000 be0c 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800671c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006720:	430b      	orrs	r3, r1
 8006722:	d173      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006724:	4b36      	ldr	r3, [pc, #216]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006726:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800672a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800672e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006736:	d104      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006738:	f7fe f8c2 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 800673c:	6378      	str	r0, [r7, #52]	@ 0x34
 800673e:	f000 bdf7 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006748:	d108      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800674a:	f107 0318 	add.w	r3, r7, #24
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff f992 	bl	8005a78 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	637b      	str	r3, [r7, #52]	@ 0x34
 8006758:	f000 bdea 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800675c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675e:	2b00      	cmp	r3, #0
 8006760:	d104      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006762:	f7fe f9af 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8006766:	6378      	str	r0, [r7, #52]	@ 0x34
 8006768:	f000 bde2 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800676c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006772:	d122      	bne.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006774:	4b22      	ldr	r3, [pc, #136]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b20      	cmp	r3, #32
 800677e:	d118      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006780:	4b1f      	ldr	r3, [pc, #124]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800678c:	4b1c      	ldr	r3, [pc, #112]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	0e1b      	lsrs	r3, r3, #24
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	e006      	b.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006798:	4b19      	ldr	r3, [pc, #100]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800679a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800679e:	041b      	lsls	r3, r3, #16
 80067a0:	0e1b      	lsrs	r3, r3, #24
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	4a18      	ldr	r2, [pc, #96]	@ (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80067a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ae:	f000 bdbf 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b6:	f000 bdbb 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80067ba:	4b11      	ldr	r3, [pc, #68]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067c6:	d107      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 80067c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80067ce:	d103      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 80067d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80067d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d4:	f000 bdac 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80067d8:	4b09      	ldr	r3, [pc, #36]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067e4:	d107      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067ec:	d103      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80067ee:	4b05      	ldr	r3, [pc, #20]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80067f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f2:	f000 bd9d 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067fa:	f000 bd99 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80067fe:	bf00      	nop
 8006800:	46020c00 	.word	0x46020c00
 8006804:	00f42400 	.word	0x00f42400
 8006808:	0800add4 	.word	0x0800add4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800680c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006810:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006814:	430b      	orrs	r3, r1
 8006816:	d158      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006818:	4bad      	ldr	r3, [pc, #692]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800681a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	2b04      	cmp	r3, #4
 8006828:	d84b      	bhi.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800682a:	a201      	add	r2, pc, #4	@ (adr r2, 8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006869 	.word	0x08006869
 8006834:	08006845 	.word	0x08006845
 8006838:	08006857 	.word	0x08006857
 800683c:	08006873 	.word	0x08006873
 8006840:	0800687d 	.word	0x0800687d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe ffbb 	bl	80057c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006852:	f000 bd6d 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006856:	f107 030c 	add.w	r3, r7, #12
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff fa66 	bl	8005d2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006864:	f000 bd64 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006868:	f7fe f92c 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 800686c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800686e:	f000 bd5f 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006872:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006876:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006878:	f000 bd5a 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800687c:	4b94      	ldr	r3, [pc, #592]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0320 	and.w	r3, r3, #32
 8006884:	2b20      	cmp	r3, #32
 8006886:	d118      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006888:	4b91      	ldr	r3, [pc, #580]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d005      	beq.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006894:	4b8e      	ldr	r3, [pc, #568]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	0e1b      	lsrs	r3, r3, #24
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	e006      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80068a0:	4b8b      	ldr	r3, [pc, #556]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068a6:	041b      	lsls	r3, r3, #16
 80068a8:	0e1b      	lsrs	r3, r3, #24
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	4a89      	ldr	r2, [pc, #548]	@ (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80068b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068b6:	f000 bd3b 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068be:	f000 bd37 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068c6:	f000 bd33 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80068ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ce:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80068d2:	430b      	orrs	r3, r1
 80068d4:	d167      	bne.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80068d6:	4b7e      	ldr	r3, [pc, #504]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068dc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80068e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80068e8:	d036      	beq.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80068f0:	d855      	bhi.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80068f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80068f8:	d029      	beq.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006900:	d84d      	bhi.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006904:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006908:	d013      	beq.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006910:	d845      	bhi.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	2b00      	cmp	r3, #0
 8006916:	d015      	beq.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800691e:	d13e      	bne.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006924:	4618      	mov	r0, r3
 8006926:	f7fe ff4d 	bl	80057c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800692e:	f000 bcff 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006932:	f107 030c 	add.w	r3, r7, #12
 8006936:	4618      	mov	r0, r3
 8006938:	f7ff f9f8 	bl	8005d2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006940:	f000 bcf6 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006944:	f7fe f8be 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8006948:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800694a:	f000 bcf1 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800694e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006952:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006954:	f000 bcec 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006958:	4b5d      	ldr	r3, [pc, #372]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0320 	and.w	r3, r3, #32
 8006960:	2b20      	cmp	r3, #32
 8006962:	d118      	bne.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006964:	4b5a      	ldr	r3, [pc, #360]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8006970:	4b57      	ldr	r3, [pc, #348]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	0e1b      	lsrs	r3, r3, #24
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	e006      	b.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800697c:	4b54      	ldr	r3, [pc, #336]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800697e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006982:	041b      	lsls	r3, r3, #16
 8006984:	0e1b      	lsrs	r3, r3, #24
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	4a52      	ldr	r2, [pc, #328]	@ (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800698c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006990:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006992:	f000 bccd 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800699a:	f000 bcc9 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069a2:	f000 bcc5 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80069a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069aa:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80069ae:	430b      	orrs	r3, r1
 80069b0:	d14c      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80069b2:	4b47      	ldr	r3, [pc, #284]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069c4:	f7fe f898 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 80069c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80069ca:	f000 bcb1 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069d4:	d104      	bne.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069d6:	f7fd ff73 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 80069da:	6378      	str	r0, [r7, #52]	@ 0x34
 80069dc:	f000 bca8 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80069e0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ec:	d107      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069f4:	d103      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80069f6:	4b38      	ldr	r3, [pc, #224]	@ (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80069f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069fa:	f000 bc99 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80069fe:	4b34      	ldr	r3, [pc, #208]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d11c      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a10:	d118      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a12:	4b2f      	ldr	r3, [pc, #188]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	0e1b      	lsrs	r3, r3, #24
 8006a24:	f003 030f 	and.w	r3, r3, #15
 8006a28:	e006      	b.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8006a2a:	4b29      	ldr	r3, [pc, #164]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a30:	041b      	lsls	r3, r3, #16
 8006a32:	0e1b      	lsrs	r3, r3, #24
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	4a26      	ldr	r2, [pc, #152]	@ (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a40:	f000 bc76 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a48:	f000 bc72 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a50:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006a54:	430b      	orrs	r3, r1
 8006a56:	d152      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006a58:	4b1d      	ldr	r3, [pc, #116]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a5e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006a62:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a6a:	f7fe f845 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 8006a6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a70:	f000 bc5e 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a7a:	d104      	bne.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a7c:	f7fd ff20 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8006a80:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a82:	f000 bc55 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006a86:	4b12      	ldr	r3, [pc, #72]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a92:	d107      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a9a:	d103      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8006a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa0:	f000 bc46 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0320 	and.w	r3, r3, #32
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d122      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ab6:	d11e      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ab8:	4b05      	ldr	r3, [pc, #20]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006ac4:	4b02      	ldr	r3, [pc, #8]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	0e1b      	lsrs	r3, r3, #24
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	e00c      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006ad0:	46020c00 	.word	0x46020c00
 8006ad4:	0800add4 	.word	0x0800add4
 8006ad8:	00f42400 	.word	0x00f42400
 8006adc:	4ba1      	ldr	r3, [pc, #644]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	0e1b      	lsrs	r3, r3, #24
 8006ae6:	f003 030f 	and.w	r3, r3, #15
 8006aea:	4a9f      	ldr	r2, [pc, #636]	@ (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006af2:	f000 bc1d 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006afa:	f000 bc19 	b.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b02:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006b06:	430b      	orrs	r3, r1
 8006b08:	d151      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006b0a:	4b96      	ldr	r3, [pc, #600]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b10:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b14:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b18:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b1a:	d024      	beq.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b20:	d842      	bhi.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	2b80      	cmp	r3, #128	@ 0x80
 8006b26:	d00d      	beq.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2a:	2b80      	cmp	r3, #128	@ 0x80
 8006b2c:	d83c      	bhi.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8006b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b36:	2b40      	cmp	r3, #64	@ 0x40
 8006b38:	d011      	beq.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8006b3a:	e035      	b.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006b3c:	f7fe f804 	bl	8004b48 <HAL_RCC_GetPCLK3Freq>
 8006b40:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b42:	e3f5      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b44:	4b87      	ldr	r3, [pc, #540]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b50:	d102      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8006b52:	4b86      	ldr	r3, [pc, #536]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006b54:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b56:	e3eb      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b5c:	e3e8      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006b5e:	f7fd feaf 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8006b62:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b64:	e3e4      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b66:	4b7f      	ldr	r3, [pc, #508]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	2b20      	cmp	r3, #32
 8006b70:	d117      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b72:	4b7c      	ldr	r3, [pc, #496]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d005      	beq.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8006b7e:	4b79      	ldr	r3, [pc, #484]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	0e1b      	lsrs	r3, r3, #24
 8006b84:	f003 030f 	and.w	r3, r3, #15
 8006b88:	e006      	b.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006b8a:	4b76      	ldr	r3, [pc, #472]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b90:	041b      	lsls	r3, r3, #16
 8006b92:	0e1b      	lsrs	r3, r3, #24
 8006b94:	f003 030f 	and.w	r3, r3, #15
 8006b98:	4a73      	ldr	r2, [pc, #460]	@ (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ba0:	e3c6      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ba6:	e3c3      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bac:	e3c0      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bb2:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006bb6:	430b      	orrs	r3, r1
 8006bb8:	d147      	bne.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006bba:	4b6a      	ldr	r3, [pc, #424]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006bc4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d103      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006bcc:	f7fd ff94 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 8006bd0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bd2:	e3ad      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bda:	d103      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006bdc:	f7fd fe70 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8006be0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006be2:	e3a5      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006be4:	4b5f      	ldr	r3, [pc, #380]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bf0:	d106      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bf8:	d102      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8006bfa:	4b5c      	ldr	r3, [pc, #368]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfe:	e397      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006c00:	4b58      	ldr	r3, [pc, #352]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d11b      	bne.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006c12:	d117      	bne.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c14:	4b53      	ldr	r3, [pc, #332]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d005      	beq.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8006c20:	4b50      	ldr	r3, [pc, #320]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	0e1b      	lsrs	r3, r3, #24
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	e006      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c32:	041b      	lsls	r3, r3, #16
 8006c34:	0e1b      	lsrs	r3, r3, #24
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	4a4b      	ldr	r2, [pc, #300]	@ (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c42:	e375      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c48:	e372      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c4e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006c52:	430b      	orrs	r3, r1
 8006c54:	d164      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006c56:	4b43      	ldr	r3, [pc, #268]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c60:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d120      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c68:	4b3e      	ldr	r3, [pc, #248]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d117      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c74:	4b3b      	ldr	r3, [pc, #236]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006c80:	4b38      	ldr	r3, [pc, #224]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	0e1b      	lsrs	r3, r3, #24
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	e006      	b.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006c8c:	4b35      	ldr	r3, [pc, #212]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c92:	041b      	lsls	r3, r3, #16
 8006c94:	0e1b      	lsrs	r3, r3, #24
 8006c96:	f003 030f 	and.w	r3, r3, #15
 8006c9a:	4a33      	ldr	r2, [pc, #204]	@ (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca2:	e345      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca8:	e342      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006caa:	4b2e      	ldr	r3, [pc, #184]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cb8:	d112      	bne.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc0:	d10e      	bne.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006cc2:	4b28      	ldr	r3, [pc, #160]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ccc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cd0:	d102      	bne.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006cd2:	23fa      	movs	r3, #250	@ 0xfa
 8006cd4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006cd6:	e32b      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006cd8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006cdc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006cde:	e327      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006ce0:	4b20      	ldr	r3, [pc, #128]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ce8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cec:	d106      	bne.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cf4:	d102      	bne.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cfa:	e319      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006cfc:	4b19      	ldr	r3, [pc, #100]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d107      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d10:	d103      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d18:	e30a      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d1e:	e307      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d24:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	d16b      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d32:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006d36:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d127      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d3e:	4b09      	ldr	r3, [pc, #36]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d11e      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d4a:	4b06      	ldr	r3, [pc, #24]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00c      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006d56:	4b03      	ldr	r3, [pc, #12]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	0e1b      	lsrs	r3, r3, #24
 8006d5c:	f003 030f 	and.w	r3, r3, #15
 8006d60:	e00d      	b.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006d62:	bf00      	nop
 8006d64:	46020c00 	.word	0x46020c00
 8006d68:	0800add4 	.word	0x0800add4
 8006d6c:	00f42400 	.word	0x00f42400
 8006d70:	4b94      	ldr	r3, [pc, #592]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	0e1b      	lsrs	r3, r3, #24
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	4a92      	ldr	r2, [pc, #584]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d86:	e2d3      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d8c:	e2d0      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006d8e:	4b8d      	ldr	r3, [pc, #564]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d9c:	d112      	bne.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006da4:	d10e      	bne.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006da6:	4b87      	ldr	r3, [pc, #540]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006db0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006db4:	d102      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006db6:	23fa      	movs	r3, #250	@ 0xfa
 8006db8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dba:	e2b9      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006dbc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006dc0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dc2:	e2b5      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006dc4:	4b7f      	ldr	r3, [pc, #508]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dd0:	d106      	bne.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dd8:	d102      	bne.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8006dda:	4b7c      	ldr	r3, [pc, #496]	@ (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dde:	e2a7      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006de0:	4b78      	ldr	r3, [pc, #480]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d107      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8006dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006df4:	d103      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfc:	e298      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e02:	e295      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006e04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e08:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	d147      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006e10:	4b6c      	ldr	r3, [pc, #432]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e16:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006e1a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d103      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e22:	f7fd fe69 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 8006e26:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e28:	e282      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006e2a:	4b66      	ldr	r3, [pc, #408]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e38:	d112      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e40:	d10e      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e42:	4b60      	ldr	r3, [pc, #384]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e50:	d102      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006e52:	23fa      	movs	r3, #250	@ 0xfa
 8006e54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e56:	e26b      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006e58:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e5e:	e267      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006e60:	4b58      	ldr	r3, [pc, #352]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e6c:	d106      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e74:	d102      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006e76:	4b55      	ldr	r3, [pc, #340]	@ (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e7a:	e259      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006e7c:	4b51      	ldr	r3, [pc, #324]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d107      	bne.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006e90:	d103      	bne.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e98:	e24a      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9e:	e247      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006ea8:	430b      	orrs	r3, r1
 8006eaa:	d12d      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006eac:	4b45      	ldr	r3, [pc, #276]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eb2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006eb6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006eb8:	4b42      	ldr	r3, [pc, #264]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ec4:	d105      	bne.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed0:	e22e      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ed8:	d107      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe fc70 	bl	80057c4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ee8:	e222      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ef0:	d107      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ef2:	f107 0318 	add.w	r3, r7, #24
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe fdbe 	bl	8005a78 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f00:	e216      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f06:	e213      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f0c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006f10:	430b      	orrs	r3, r1
 8006f12:	d15d      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006f14:	4b2b      	ldr	r3, [pc, #172]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f1a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006f1e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f26:	d028      	beq.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8006f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f2e:	d845      	bhi.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f36:	d013      	beq.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f3e:	d83d      	bhi.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d004      	beq.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f4c:	d004      	beq.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8006f4e:	e035      	b.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006f50:	f7fd fde6 	bl	8004b20 <HAL_RCC_GetPCLK2Freq>
 8006f54:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f56:	e1eb      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006f58:	f7fd fcb2 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8006f5c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f5e:	e1e7      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f60:	4b18      	ldr	r3, [pc, #96]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f6c:	d102      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8006f6e:	4b17      	ldr	r3, [pc, #92]	@ (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006f70:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f72:	e1dd      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f78:	e1da      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f7a:	4b12      	ldr	r3, [pc, #72]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d117      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f86:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d005      	beq.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006f92:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	0e1b      	lsrs	r3, r3, #24
 8006f98:	f003 030f 	and.w	r3, r3, #15
 8006f9c:	e006      	b.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8006f9e:	4b09      	ldr	r3, [pc, #36]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006fa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fa4:	041b      	lsls	r3, r3, #16
 8006fa6:	0e1b      	lsrs	r3, r3, #24
 8006fa8:	f003 030f 	and.w	r3, r3, #15
 8006fac:	4a06      	ldr	r2, [pc, #24]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fb2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fb4:	e1bc      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fba:	e1b9      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fc0:	e1b6      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006fc2:	bf00      	nop
 8006fc4:	46020c00 	.word	0x46020c00
 8006fc8:	0800add4 	.word	0x0800add4
 8006fcc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fd4:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	d156      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006fdc:	4ba5      	ldr	r3, [pc, #660]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fe2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006fe6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006fee:	d028      	beq.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ff6:	d845      	bhi.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ffe:	d013      	beq.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8007000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007002:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007006:	d83d      	bhi.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8007008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007014:	d004      	beq.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8007016:	e035      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007018:	f7fd fd6e 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 800701c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800701e:	e187      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007020:	f7fd fc4e 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8007024:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007026:	e183      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007028:	4b92      	ldr	r3, [pc, #584]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007034:	d102      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8007036:	4b90      	ldr	r3, [pc, #576]	@ (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007038:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800703a:	e179      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007040:	e176      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007042:	4b8c      	ldr	r3, [pc, #560]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b20      	cmp	r3, #32
 800704c:	d117      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800704e:	4b89      	ldr	r3, [pc, #548]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d005      	beq.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800705a:	4b86      	ldr	r3, [pc, #536]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	0e1b      	lsrs	r3, r3, #24
 8007060:	f003 030f 	and.w	r3, r3, #15
 8007064:	e006      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8007066:	4b83      	ldr	r3, [pc, #524]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007068:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800706c:	041b      	lsls	r3, r3, #16
 800706e:	0e1b      	lsrs	r3, r3, #24
 8007070:	f003 030f 	and.w	r3, r3, #15
 8007074:	4a81      	ldr	r2, [pc, #516]	@ (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800707a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800707c:	e158      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007082:	e155      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007088:	e152      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800708a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800708e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007092:	430b      	orrs	r3, r1
 8007094:	d177      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007096:	4b77      	ldr	r3, [pc, #476]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800709c:	f003 0318 	and.w	r3, r3, #24
 80070a0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80070a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a4:	2b18      	cmp	r3, #24
 80070a6:	d86b      	bhi.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80070a8:	a201      	add	r2, pc, #4	@ (adr r2, 80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	08007115 	.word	0x08007115
 80070b4:	08007181 	.word	0x08007181
 80070b8:	08007181 	.word	0x08007181
 80070bc:	08007181 	.word	0x08007181
 80070c0:	08007181 	.word	0x08007181
 80070c4:	08007181 	.word	0x08007181
 80070c8:	08007181 	.word	0x08007181
 80070cc:	08007181 	.word	0x08007181
 80070d0:	0800711d 	.word	0x0800711d
 80070d4:	08007181 	.word	0x08007181
 80070d8:	08007181 	.word	0x08007181
 80070dc:	08007181 	.word	0x08007181
 80070e0:	08007181 	.word	0x08007181
 80070e4:	08007181 	.word	0x08007181
 80070e8:	08007181 	.word	0x08007181
 80070ec:	08007181 	.word	0x08007181
 80070f0:	08007125 	.word	0x08007125
 80070f4:	08007181 	.word	0x08007181
 80070f8:	08007181 	.word	0x08007181
 80070fc:	08007181 	.word	0x08007181
 8007100:	08007181 	.word	0x08007181
 8007104:	08007181 	.word	0x08007181
 8007108:	08007181 	.word	0x08007181
 800710c:	08007181 	.word	0x08007181
 8007110:	0800713f 	.word	0x0800713f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007114:	f7fd fd18 	bl	8004b48 <HAL_RCC_GetPCLK3Freq>
 8007118:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800711a:	e109      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800711c:	f7fd fbd0 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8007120:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007122:	e105      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007124:	4b53      	ldr	r3, [pc, #332]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800712c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007130:	d102      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8007132:	4b51      	ldr	r3, [pc, #324]	@ (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007134:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007136:	e0fb      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800713c:	e0f8      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800713e:	4b4d      	ldr	r3, [pc, #308]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b20      	cmp	r3, #32
 8007148:	d117      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800714a:	4b4a      	ldr	r3, [pc, #296]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8007156:	4b47      	ldr	r3, [pc, #284]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	0e1b      	lsrs	r3, r3, #24
 800715c:	f003 030f 	and.w	r3, r3, #15
 8007160:	e006      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8007162:	4b44      	ldr	r3, [pc, #272]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007164:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007168:	041b      	lsls	r3, r3, #16
 800716a:	0e1b      	lsrs	r3, r3, #24
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	4a42      	ldr	r2, [pc, #264]	@ (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007176:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007178:	e0da      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800717e:	e0d7      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007180:	2300      	movs	r3, #0
 8007182:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007184:	e0d4      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800718a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800718e:	430b      	orrs	r3, r1
 8007190:	d155      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007192:	4b38      	ldr	r3, [pc, #224]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007194:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007198:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800719c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800719e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071a4:	d013      	beq.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80071a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071ac:	d844      	bhi.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80071ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071b4:	d013      	beq.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071bc:	d83c      	bhi.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80071be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d014      	beq.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 80071c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071ca:	d014      	beq.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 80071cc:	e034      	b.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ce:	f107 0318 	add.w	r3, r7, #24
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe fc50 	bl	8005a78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071dc:	e0a8      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe faee 	bl	80057c4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80071e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071ec:	e0a0      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80071ee:	f7fd fb67 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 80071f2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80071f4:	e09c      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80071f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d117      	bne.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007202:	4b1c      	ldr	r3, [pc, #112]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d005      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800720e:	4b19      	ldr	r3, [pc, #100]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	0e1b      	lsrs	r3, r3, #24
 8007214:	f003 030f 	and.w	r3, r3, #15
 8007218:	e006      	b.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800721a:	4b16      	ldr	r3, [pc, #88]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800721c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007220:	041b      	lsls	r3, r3, #16
 8007222:	0e1b      	lsrs	r3, r3, #24
 8007224:	f003 030f 	and.w	r3, r3, #15
 8007228:	4a14      	ldr	r2, [pc, #80]	@ (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800722a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800722e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007230:	e07e      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007236:	e07b      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800723c:	e078      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800723e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007242:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007246:	430b      	orrs	r3, r1
 8007248:	d138      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800724a:	4b0a      	ldr	r3, [pc, #40]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800724c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007254:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007256:	4b07      	ldr	r3, [pc, #28]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b02      	cmp	r3, #2
 8007262:	d10d      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800726a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800726e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007270:	e05e      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007272:	bf00      	nop
 8007274:	46020c00 	.word	0x46020c00
 8007278:	00f42400 	.word	0x00f42400
 800727c:	0800add4 	.word	0x0800add4
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007280:	4b2e      	ldr	r3, [pc, #184]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007286:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800728a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800728e:	d112      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8007290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007292:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007296:	d10e      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007298:	4b28      	ldr	r3, [pc, #160]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800729a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800729e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072a6:	d102      	bne.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 80072a8:	23fa      	movs	r3, #250	@ 0xfa
 80072aa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072ac:	e040      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80072ae:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80072b2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072b4:	e03c      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ba:	e039      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80072bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072c0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80072c4:	430b      	orrs	r3, r1
 80072c6:	d131      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80072c8:	4b1c      	ldr	r3, [pc, #112]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80072ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80072ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80072d2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80072d4:	4b19      	ldr	r3, [pc, #100]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072e0:	d105      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d102      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 80072e8:	4b15      	ldr	r3, [pc, #84]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 80072ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ec:	e020      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80072ee:	4b13      	ldr	r3, [pc, #76]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072fa:	d106      	bne.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80072fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007302:	d102      	bne.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007304:	4b0f      	ldr	r3, [pc, #60]	@ (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8007306:	637b      	str	r3, [r7, #52]	@ 0x34
 8007308:	e012      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800730a:	4b0c      	ldr	r3, [pc, #48]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007316:	d106      	bne.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800731e:	d102      	bne.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8007320:	4b09      	ldr	r3, [pc, #36]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007322:	637b      	str	r3, [r7, #52]	@ 0x34
 8007324:	e004      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	637b      	str	r3, [r7, #52]	@ 0x34
 800732a:	e001      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007332:	4618      	mov	r0, r3
 8007334:	3738      	adds	r7, #56	@ 0x38
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	46020c00 	.word	0x46020c00
 8007340:	02dc6c00 	.word	0x02dc6c00
 8007344:	016e3600 	.word	0x016e3600
 8007348:	00f42400 	.word	0x00f42400

0800734c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007354:	4b47      	ldr	r3, [pc, #284]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a46      	ldr	r2, [pc, #280]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 800735a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800735e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007360:	f7fa f80a 	bl	8001378 <HAL_GetTick>
 8007364:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007366:	e008      	b.n	800737a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007368:	f7fa f806 	bl	8001378 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d901      	bls.n	800737a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e077      	b.n	800746a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800737a:	4b3e      	ldr	r3, [pc, #248]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1f0      	bne.n	8007368 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007386:	4b3b      	ldr	r3, [pc, #236]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 8007388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800738e:	f023 0303 	bic.w	r3, r3, #3
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	6811      	ldr	r1, [r2, #0]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	6852      	ldr	r2, [r2, #4]
 800739a:	3a01      	subs	r2, #1
 800739c:	0212      	lsls	r2, r2, #8
 800739e:	430a      	orrs	r2, r1
 80073a0:	4934      	ldr	r1, [pc, #208]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80073a6:	4b33      	ldr	r3, [pc, #204]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 80073a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073aa:	4b33      	ldr	r3, [pc, #204]	@ (8007478 <RCCEx_PLL2_Config+0x12c>)
 80073ac:	4013      	ands	r3, r2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6892      	ldr	r2, [r2, #8]
 80073b2:	3a01      	subs	r2, #1
 80073b4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	68d2      	ldr	r2, [r2, #12]
 80073bc:	3a01      	subs	r2, #1
 80073be:	0252      	lsls	r2, r2, #9
 80073c0:	b292      	uxth	r2, r2
 80073c2:	4311      	orrs	r1, r2
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6912      	ldr	r2, [r2, #16]
 80073c8:	3a01      	subs	r2, #1
 80073ca:	0412      	lsls	r2, r2, #16
 80073cc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80073d0:	4311      	orrs	r1, r2
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6952      	ldr	r2, [r2, #20]
 80073d6:	3a01      	subs	r2, #1
 80073d8:	0612      	lsls	r2, r2, #24
 80073da:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80073de:	430a      	orrs	r2, r1
 80073e0:	4924      	ldr	r1, [pc, #144]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80073e6:	4b23      	ldr	r3, [pc, #140]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 80073e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ea:	f023 020c 	bic.w	r2, r3, #12
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	4920      	ldr	r1, [pc, #128]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80073f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 80073fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	491c      	ldr	r1, [pc, #112]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 8007402:	4313      	orrs	r3, r2
 8007404:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007406:	4b1b      	ldr	r3, [pc, #108]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 8007408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740a:	4a1a      	ldr	r2, [pc, #104]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 800740c:	f023 0310 	bic.w	r3, r3, #16
 8007410:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007412:	4b18      	ldr	r3, [pc, #96]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800741a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	69d2      	ldr	r2, [r2, #28]
 8007422:	00d2      	lsls	r2, r2, #3
 8007424:	4913      	ldr	r1, [pc, #76]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 8007426:	4313      	orrs	r3, r2
 8007428:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800742a:	4b12      	ldr	r3, [pc, #72]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 800742c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742e:	4a11      	ldr	r2, [pc, #68]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 8007430:	f043 0310 	orr.w	r3, r3, #16
 8007434:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007436:	4b0f      	ldr	r3, [pc, #60]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a0e      	ldr	r2, [pc, #56]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 800743c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007440:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007442:	f7f9 ff99 	bl	8001378 <HAL_GetTick>
 8007446:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007448:	e008      	b.n	800745c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800744a:	f7f9 ff95 	bl	8001378 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d901      	bls.n	800745c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e006      	b.n	800746a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800745c:	4b05      	ldr	r3, [pc, #20]	@ (8007474 <RCCEx_PLL2_Config+0x128>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0f0      	beq.n	800744a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007468:	2300      	movs	r3, #0

}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	46020c00 	.word	0x46020c00
 8007478:	80800000 	.word	0x80800000

0800747c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007484:	4b47      	ldr	r3, [pc, #284]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a46      	ldr	r2, [pc, #280]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 800748a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800748e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007490:	f7f9 ff72 	bl	8001378 <HAL_GetTick>
 8007494:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007496:	e008      	b.n	80074aa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007498:	f7f9 ff6e 	bl	8001378 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d901      	bls.n	80074aa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e077      	b.n	800759a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074aa:	4b3e      	ldr	r3, [pc, #248]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1f0      	bne.n	8007498 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80074b6:	4b3b      	ldr	r3, [pc, #236]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 80074b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80074be:	f023 0303 	bic.w	r3, r3, #3
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6811      	ldr	r1, [r2, #0]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6852      	ldr	r2, [r2, #4]
 80074ca:	3a01      	subs	r2, #1
 80074cc:	0212      	lsls	r2, r2, #8
 80074ce:	430a      	orrs	r2, r1
 80074d0:	4934      	ldr	r1, [pc, #208]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	630b      	str	r3, [r1, #48]	@ 0x30
 80074d6:	4b33      	ldr	r3, [pc, #204]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 80074d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074da:	4b33      	ldr	r3, [pc, #204]	@ (80075a8 <RCCEx_PLL3_Config+0x12c>)
 80074dc:	4013      	ands	r3, r2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6892      	ldr	r2, [r2, #8]
 80074e2:	3a01      	subs	r2, #1
 80074e4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	68d2      	ldr	r2, [r2, #12]
 80074ec:	3a01      	subs	r2, #1
 80074ee:	0252      	lsls	r2, r2, #9
 80074f0:	b292      	uxth	r2, r2
 80074f2:	4311      	orrs	r1, r2
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6912      	ldr	r2, [r2, #16]
 80074f8:	3a01      	subs	r2, #1
 80074fa:	0412      	lsls	r2, r2, #16
 80074fc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007500:	4311      	orrs	r1, r2
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6952      	ldr	r2, [r2, #20]
 8007506:	3a01      	subs	r2, #1
 8007508:	0612      	lsls	r2, r2, #24
 800750a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800750e:	430a      	orrs	r2, r1
 8007510:	4924      	ldr	r1, [pc, #144]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 8007512:	4313      	orrs	r3, r2
 8007514:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007516:	4b23      	ldr	r3, [pc, #140]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 8007518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751a:	f023 020c 	bic.w	r2, r3, #12
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	4920      	ldr	r1, [pc, #128]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 8007524:	4313      	orrs	r3, r2
 8007526:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007528:	4b1e      	ldr	r3, [pc, #120]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 800752a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	491c      	ldr	r1, [pc, #112]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 8007532:	4313      	orrs	r3, r2
 8007534:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007536:	4b1b      	ldr	r3, [pc, #108]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 8007538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800753a:	4a1a      	ldr	r2, [pc, #104]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 800753c:	f023 0310 	bic.w	r3, r3, #16
 8007540:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007542:	4b18      	ldr	r3, [pc, #96]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 8007544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007546:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800754a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	69d2      	ldr	r2, [r2, #28]
 8007552:	00d2      	lsls	r2, r2, #3
 8007554:	4913      	ldr	r1, [pc, #76]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 8007556:	4313      	orrs	r3, r2
 8007558:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800755a:	4b12      	ldr	r3, [pc, #72]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 800755c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755e:	4a11      	ldr	r2, [pc, #68]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 8007560:	f043 0310 	orr.w	r3, r3, #16
 8007564:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007566:	4b0f      	ldr	r3, [pc, #60]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a0e      	ldr	r2, [pc, #56]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 800756c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007570:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007572:	f7f9 ff01 	bl	8001378 <HAL_GetTick>
 8007576:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007578:	e008      	b.n	800758c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800757a:	f7f9 fefd 	bl	8001378 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d901      	bls.n	800758c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e006      	b.n	800759a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800758c:	4b05      	ldr	r3, [pc, #20]	@ (80075a4 <RCCEx_PLL3_Config+0x128>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0f0      	beq.n	800757a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	46020c00 	.word	0x46020c00
 80075a8:	80800000 	.word	0x80800000

080075ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e042      	b.n	8007644 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d106      	bne.n	80075d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7f9 fbe9 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2224      	movs	r2, #36	@ 0x24
 80075da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0201 	bic.w	r2, r2, #1
 80075ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fdaa 	bl	8008150 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fc05 	bl	8007e0c <UART_SetConfig>
 8007602:	4603      	mov	r3, r0
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e01b      	b.n	8007644 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800761a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800762a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fe29 	bl	8008294 <UART_CheckIdleState>
 8007642:	4603      	mov	r3, r0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	@ 0x28
 8007650:	af02      	add	r7, sp, #8
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	4613      	mov	r3, r2
 800765a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007662:	2b20      	cmp	r3, #32
 8007664:	f040 808b 	bne.w	800777e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <HAL_UART_Transmit+0x28>
 800766e:	88fb      	ldrh	r3, [r7, #6]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e083      	b.n	8007780 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007682:	2b80      	cmp	r3, #128	@ 0x80
 8007684:	d107      	bne.n	8007696 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007694:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2221      	movs	r2, #33	@ 0x21
 80076a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076a6:	f7f9 fe67 	bl	8001378 <HAL_GetTick>
 80076aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	88fa      	ldrh	r2, [r7, #6]
 80076b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	88fa      	ldrh	r2, [r7, #6]
 80076b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076c4:	d108      	bne.n	80076d8 <HAL_UART_Transmit+0x8c>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d104      	bne.n	80076d8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	61bb      	str	r3, [r7, #24]
 80076d6:	e003      	b.n	80076e0 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076dc:	2300      	movs	r3, #0
 80076de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076e0:	e030      	b.n	8007744 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2200      	movs	r2, #0
 80076ea:	2180      	movs	r1, #128	@ 0x80
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 fe7b 	bl	80083e8 <UART_WaitOnFlagUntilTimeout>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e03d      	b.n	8007780 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10b      	bne.n	8007722 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007718:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	3302      	adds	r3, #2
 800771e:	61bb      	str	r3, [r7, #24]
 8007720:	e007      	b.n	8007732 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	781a      	ldrb	r2, [r3, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	3301      	adds	r3, #1
 8007730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007738:	b29b      	uxth	r3, r3
 800773a:	3b01      	subs	r3, #1
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800774a:	b29b      	uxth	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1c8      	bne.n	80076e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2200      	movs	r2, #0
 8007758:	2140      	movs	r1, #64	@ 0x40
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 fe44 	bl	80083e8 <UART_WaitOnFlagUntilTimeout>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d005      	beq.n	8007772 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2220      	movs	r2, #32
 800776a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e006      	b.n	8007780 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2220      	movs	r2, #32
 8007776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	e000      	b.n	8007780 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800777e:	2302      	movs	r3, #2
  }
}
 8007780:	4618      	mov	r0, r3
 8007782:	3720      	adds	r7, #32
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08a      	sub	sp, #40	@ 0x28
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	4613      	mov	r3, r2
 8007794:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800779c:	2b20      	cmp	r3, #32
 800779e:	d14b      	bne.n	8007838 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <HAL_UART_Receive_IT+0x24>
 80077a6:	88fb      	ldrh	r3, [r7, #6]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e044      	b.n	800783a <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c0:	2b40      	cmp	r3, #64	@ 0x40
 80077c2:	d107      	bne.n	80077d4 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077d2:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1a      	ldr	r2, [pc, #104]	@ (8007844 <HAL_UART_Receive_IT+0xbc>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d024      	beq.n	8007828 <HAL_UART_Receive_IT+0xa0>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a19      	ldr	r2, [pc, #100]	@ (8007848 <HAL_UART_Receive_IT+0xc0>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d01f      	beq.n	8007828 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d018      	beq.n	8007828 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	e853 3f00 	ldrex	r3, [r3]
 8007802:	613b      	str	r3, [r7, #16]
   return(result);
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800780a:	627b      	str	r3, [r7, #36]	@ 0x24
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007814:	623b      	str	r3, [r7, #32]
 8007816:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	69f9      	ldr	r1, [r7, #28]
 800781a:	6a3a      	ldr	r2, [r7, #32]
 800781c:	e841 2300 	strex	r3, r2, [r1]
 8007820:	61bb      	str	r3, [r7, #24]
   return(result);
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e6      	bne.n	80077f6 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007828:	88fb      	ldrh	r3, [r7, #6]
 800782a:	461a      	mov	r2, r3
 800782c:	68b9      	ldr	r1, [r7, #8]
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 fe48 	bl	80084c4 <UART_Start_Receive_IT>
 8007834:	4603      	mov	r3, r0
 8007836:	e000      	b.n	800783a <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007838:	2302      	movs	r3, #2
  }
}
 800783a:	4618      	mov	r0, r3
 800783c:	3728      	adds	r7, #40	@ 0x28
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	46002400 	.word	0x46002400
 8007848:	56002400 	.word	0x56002400

0800784c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b0ae      	sub	sp, #184	@ 0xb8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007876:	f640 030f 	movw	r3, #2063	@ 0x80f
 800787a:	4013      	ands	r3, r2
 800787c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8007880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007884:	2b00      	cmp	r3, #0
 8007886:	d11b      	bne.n	80078c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007888:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800788c:	f003 0320 	and.w	r3, r3, #32
 8007890:	2b00      	cmp	r3, #0
 8007892:	d015      	beq.n	80078c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b00      	cmp	r3, #0
 800789e:	d105      	bne.n	80078ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d009      	beq.n	80078c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 827e 	beq.w	8007db2 <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	4798      	blx	r3
      }
      return;
 80078be:	e278      	b.n	8007db2 <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 80fd 	beq.w	8007ac4 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80078ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80078ce:	4b7a      	ldr	r3, [pc, #488]	@ (8007ab8 <HAL_UART_IRQHandler+0x26c>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d106      	bne.n	80078e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80078d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80078da:	4b78      	ldr	r3, [pc, #480]	@ (8007abc <HAL_UART_IRQHandler+0x270>)
 80078dc:	4013      	ands	r3, r2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 80f0 	beq.w	8007ac4 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d011      	beq.n	8007914 <HAL_UART_IRQHandler+0xc8>
 80078f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80078f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00b      	beq.n	8007914 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2201      	movs	r2, #1
 8007902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790a:	f043 0201 	orr.w	r2, r3, #1
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007914:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007918:	f003 0302 	and.w	r3, r3, #2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d011      	beq.n	8007944 <HAL_UART_IRQHandler+0xf8>
 8007920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2202      	movs	r2, #2
 8007932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800793a:	f043 0204 	orr.w	r2, r3, #4
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007944:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007948:	f003 0304 	and.w	r3, r3, #4
 800794c:	2b00      	cmp	r3, #0
 800794e:	d011      	beq.n	8007974 <HAL_UART_IRQHandler+0x128>
 8007950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00b      	beq.n	8007974 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2204      	movs	r2, #4
 8007962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800796a:	f043 0202 	orr.w	r2, r3, #2
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007978:	f003 0308 	and.w	r3, r3, #8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d017      	beq.n	80079b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007980:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b00      	cmp	r3, #0
 800798a:	d105      	bne.n	8007998 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800798c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007990:	4b49      	ldr	r3, [pc, #292]	@ (8007ab8 <HAL_UART_IRQHandler+0x26c>)
 8007992:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00b      	beq.n	80079b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2208      	movs	r2, #8
 800799e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a6:	f043 0208 	orr.w	r2, r3, #8
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d012      	beq.n	80079e2 <HAL_UART_IRQHandler+0x196>
 80079bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80079c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00c      	beq.n	80079e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079d8:	f043 0220 	orr.w	r2, r3, #32
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 81e4 	beq.w	8007db6 <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d013      	beq.n	8007a22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d105      	bne.n	8007a12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d007      	beq.n	8007a22 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a36:	2b40      	cmp	r3, #64	@ 0x40
 8007a38:	d005      	beq.n	8007a46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d02e      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fe5e 	bl	8008708 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a56:	2b40      	cmp	r3, #64	@ 0x40
 8007a58:	d120      	bne.n	8007a9c <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d017      	beq.n	8007a94 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a6a:	4a15      	ldr	r2, [pc, #84]	@ (8007ac0 <HAL_UART_IRQHandler+0x274>)
 8007a6c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fa fa87 	bl	8001f88 <HAL_DMA_Abort_IT>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d019      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007a8e:	4610      	mov	r0, r2
 8007a90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a92:	e00f      	b.n	8007ab4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f9a3 	bl	8007de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a9a:	e00b      	b.n	8007ab4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f99f 	bl	8007de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa2:	e007      	b.n	8007ab4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f99b 	bl	8007de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007ab2:	e180      	b.n	8007db6 <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab4:	bf00      	nop
    return;
 8007ab6:	e17e      	b.n	8007db6 <HAL_UART_IRQHandler+0x56a>
 8007ab8:	10000001 	.word	0x10000001
 8007abc:	04000120 	.word	0x04000120
 8007ac0:	080087d5 	.word	0x080087d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	f040 8129 	bne.w	8007d20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ace:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ad2:	f003 0310 	and.w	r3, r3, #16
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 8122 	beq.w	8007d20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007adc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007ae0:	f003 0310 	and.w	r3, r3, #16
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 811b 	beq.w	8007d20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2210      	movs	r2, #16
 8007af0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007afc:	2b40      	cmp	r3, #64	@ 0x40
 8007afe:	f040 8091 	bne.w	8007c24 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b0c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8007b10:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 8150 	beq.w	8007dba <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b20:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007b24:	429a      	cmp	r2, r3
 8007b26:	f080 8148 	bcs.w	8007dba <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007b30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b3c:	2b81      	cmp	r3, #129	@ 0x81
 8007b3e:	d060      	beq.n	8007c02 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b66:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e2      	bne.n	8007b40 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b8c:	f023 0301 	bic.w	r3, r3, #1
 8007b90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3308      	adds	r3, #8
 8007b9a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007b9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ba4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007bac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e3      	bne.n	8007b7a <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bd0:	f023 0310 	bic.w	r3, r3, #16
 8007bd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007be2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007be4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007be8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e4      	bne.n	8007bc0 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fa f947 	bl	8001e90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2202      	movs	r2, #2
 8007c06:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f8e9 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c22:	e0ca      	b.n	8007dba <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 80bc 	beq.w	8007dbe <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 8007c46:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 80b7 	beq.w	8007dbe <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c72:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c74:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e4      	bne.n	8007c50 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3308      	adds	r3, #8
 8007c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	623b      	str	r3, [r7, #32]
   return(result);
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c9c:	f023 0301 	bic.w	r3, r3, #1
 8007ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3308      	adds	r3, #8
 8007caa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007cae:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e1      	bne.n	8007c86 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	e853 3f00 	ldrex	r3, [r3]
 8007ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 0310 	bic.w	r3, r3, #16
 8007cea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007cf8:	61fb      	str	r3, [r7, #28]
 8007cfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	69b9      	ldr	r1, [r7, #24]
 8007cfe:	69fa      	ldr	r2, [r7, #28]
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	617b      	str	r3, [r7, #20]
   return(result);
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e4      	bne.n	8007cd6 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d12:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f86b 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d1e:	e04e      	b.n	8007dbe <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d014      	beq.n	8007d56 <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d105      	bne.n	8007d44 <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d008      	beq.n	8007d56 <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d03a      	beq.n	8007dc2 <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	4798      	blx	r3
    }
    return;
 8007d54:	e035      	b.n	8007dc2 <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <HAL_UART_IRQHandler+0x52a>
 8007d62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fd46 	bl	8008800 <UART_EndTransmit_IT>
    return;
 8007d74:	e026      	b.n	8007dc4 <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d009      	beq.n	8007d96 <HAL_UART_IRQHandler+0x54a>
 8007d82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007d86:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f001 faa4 	bl	80092dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d94:	e016      	b.n	8007dc4 <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d010      	beq.n	8007dc4 <HAL_UART_IRQHandler+0x578>
 8007da2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	da0c      	bge.n	8007dc4 <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 fa8c 	bl	80092c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007db0:	e008      	b.n	8007dc4 <HAL_UART_IRQHandler+0x578>
      return;
 8007db2:	bf00      	nop
 8007db4:	e006      	b.n	8007dc4 <HAL_UART_IRQHandler+0x578>
    return;
 8007db6:	bf00      	nop
 8007db8:	e004      	b.n	8007dc4 <HAL_UART_IRQHandler+0x578>
      return;
 8007dba:	bf00      	nop
 8007dbc:	e002      	b.n	8007dc4 <HAL_UART_IRQHandler+0x578>
      return;
 8007dbe:	bf00      	nop
 8007dc0:	e000      	b.n	8007dc4 <HAL_UART_IRQHandler+0x578>
    return;
 8007dc2:	bf00      	nop
  }
}
 8007dc4:	37b8      	adds	r7, #184	@ 0xb8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop

08007dcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e10:	b094      	sub	sp, #80	@ 0x50
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	4b7e      	ldr	r3, [pc, #504]	@ (800801c <UART_SetConfig+0x210>)
 8007e22:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	431a      	orrs	r2, r3
 8007e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4977      	ldr	r1, [pc, #476]	@ (8008020 <UART_SetConfig+0x214>)
 8007e44:	4019      	ands	r1, r3
 8007e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5c:	68d9      	ldr	r1, [r3, #12]
 8007e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	ea40 0301 	orr.w	r3, r0, r1
 8007e66:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	4b6a      	ldr	r3, [pc, #424]	@ (800801c <UART_SetConfig+0x210>)
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d009      	beq.n	8007e8c <UART_SetConfig+0x80>
 8007e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	4b69      	ldr	r3, [pc, #420]	@ (8008024 <UART_SetConfig+0x218>)
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d004      	beq.n	8007e8c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e84:	6a1a      	ldr	r2, [r3, #32]
 8007e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007e96:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8007e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eaa:	f023 000f 	bic.w	r0, r3, #15
 8007eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	ea40 0301 	orr.w	r3, r0, r1
 8007eba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	4b59      	ldr	r3, [pc, #356]	@ (8008028 <UART_SetConfig+0x21c>)
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d102      	bne.n	8007ecc <UART_SetConfig+0xc0>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eca:	e029      	b.n	8007f20 <UART_SetConfig+0x114>
 8007ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	4b56      	ldr	r3, [pc, #344]	@ (800802c <UART_SetConfig+0x220>)
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d102      	bne.n	8007edc <UART_SetConfig+0xd0>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eda:	e021      	b.n	8007f20 <UART_SetConfig+0x114>
 8007edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	4b53      	ldr	r3, [pc, #332]	@ (8008030 <UART_SetConfig+0x224>)
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d102      	bne.n	8007eec <UART_SetConfig+0xe0>
 8007ee6:	2304      	movs	r3, #4
 8007ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eea:	e019      	b.n	8007f20 <UART_SetConfig+0x114>
 8007eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	4b50      	ldr	r3, [pc, #320]	@ (8008034 <UART_SetConfig+0x228>)
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d102      	bne.n	8007efc <UART_SetConfig+0xf0>
 8007ef6:	2308      	movs	r3, #8
 8007ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007efa:	e011      	b.n	8007f20 <UART_SetConfig+0x114>
 8007efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	4b4d      	ldr	r3, [pc, #308]	@ (8008038 <UART_SetConfig+0x22c>)
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d102      	bne.n	8007f0c <UART_SetConfig+0x100>
 8007f06:	2310      	movs	r3, #16
 8007f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f0a:	e009      	b.n	8007f20 <UART_SetConfig+0x114>
 8007f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	4b42      	ldr	r3, [pc, #264]	@ (800801c <UART_SetConfig+0x210>)
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d102      	bne.n	8007f1c <UART_SetConfig+0x110>
 8007f16:	2320      	movs	r3, #32
 8007f18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f1a:	e001      	b.n	8007f20 <UART_SetConfig+0x114>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	4b3d      	ldr	r3, [pc, #244]	@ (800801c <UART_SetConfig+0x210>)
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d005      	beq.n	8007f36 <UART_SetConfig+0x12a>
 8007f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8008024 <UART_SetConfig+0x218>)
 8007f30:	429a      	cmp	r2, r3
 8007f32:	f040 8085 	bne.w	8008040 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f38:	2200      	movs	r2, #0
 8007f3a:	623b      	str	r3, [r7, #32]
 8007f3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f42:	f7fe f84d 	bl	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f46:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 80e8 	beq.w	8008120 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f54:	4a39      	ldr	r2, [pc, #228]	@ (800803c <UART_SetConfig+0x230>)
 8007f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f62:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	005b      	lsls	r3, r3, #1
 8007f6c:	4413      	add	r3, r2
 8007f6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d305      	bcc.n	8007f80 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d903      	bls.n	8007f88 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007f86:	e048      	b.n	800801a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	61bb      	str	r3, [r7, #24]
 8007f8e:	61fa      	str	r2, [r7, #28]
 8007f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f94:	4a29      	ldr	r2, [pc, #164]	@ (800803c <UART_SetConfig+0x230>)
 8007f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	613b      	str	r3, [r7, #16]
 8007fa0:	617a      	str	r2, [r7, #20]
 8007fa2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007fa6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007faa:	f7f8 f96d 	bl	8000288 <__aeabi_uldivmod>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	f04f 0200 	mov.w	r2, #0
 8007fba:	f04f 0300 	mov.w	r3, #0
 8007fbe:	020b      	lsls	r3, r1, #8
 8007fc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fc4:	0202      	lsls	r2, r0, #8
 8007fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fc8:	6849      	ldr	r1, [r1, #4]
 8007fca:	0849      	lsrs	r1, r1, #1
 8007fcc:	2000      	movs	r0, #0
 8007fce:	460c      	mov	r4, r1
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	eb12 0804 	adds.w	r8, r2, r4
 8007fd6:	eb43 0905 	adc.w	r9, r3, r5
 8007fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	60bb      	str	r3, [r7, #8]
 8007fe2:	60fa      	str	r2, [r7, #12]
 8007fe4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fe8:	4640      	mov	r0, r8
 8007fea:	4649      	mov	r1, r9
 8007fec:	f7f8 f94c 	bl	8000288 <__aeabi_uldivmod>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ffa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ffe:	d308      	bcc.n	8008012 <UART_SetConfig+0x206>
 8008000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008006:	d204      	bcs.n	8008012 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800800e:	60da      	str	r2, [r3, #12]
 8008010:	e003      	b.n	800801a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008018:	e082      	b.n	8008120 <UART_SetConfig+0x314>
 800801a:	e081      	b.n	8008120 <UART_SetConfig+0x314>
 800801c:	46002400 	.word	0x46002400
 8008020:	cfff69f3 	.word	0xcfff69f3
 8008024:	56002400 	.word	0x56002400
 8008028:	40013800 	.word	0x40013800
 800802c:	40004400 	.word	0x40004400
 8008030:	40004800 	.word	0x40004800
 8008034:	40004c00 	.word	0x40004c00
 8008038:	40005000 	.word	0x40005000
 800803c:	0800ae94 	.word	0x0800ae94
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008048:	d13c      	bne.n	80080c4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800804a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800804c:	2200      	movs	r2, #0
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	607a      	str	r2, [r7, #4]
 8008052:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008056:	f7fd ffc3 	bl	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq>
 800805a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800805c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800805e:	2b00      	cmp	r3, #0
 8008060:	d05e      	beq.n	8008120 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008066:	4a39      	ldr	r2, [pc, #228]	@ (800814c <UART_SetConfig+0x340>)
 8008068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800806c:	461a      	mov	r2, r3
 800806e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008070:	fbb3 f3f2 	udiv	r3, r3, r2
 8008074:	005a      	lsls	r2, r3, #1
 8008076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	085b      	lsrs	r3, r3, #1
 800807c:	441a      	add	r2, r3
 800807e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	fbb2 f3f3 	udiv	r3, r2, r3
 8008086:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800808a:	2b0f      	cmp	r3, #15
 800808c:	d916      	bls.n	80080bc <UART_SetConfig+0x2b0>
 800808e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008094:	d212      	bcs.n	80080bc <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008098:	b29b      	uxth	r3, r3
 800809a:	f023 030f 	bic.w	r3, r3, #15
 800809e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a2:	085b      	lsrs	r3, r3, #1
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	f003 0307 	and.w	r3, r3, #7
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80080ae:	4313      	orrs	r3, r2
 80080b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80080b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80080b8:	60da      	str	r2, [r3, #12]
 80080ba:	e031      	b.n	8008120 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80080c2:	e02d      	b.n	8008120 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80080c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080c6:	2200      	movs	r2, #0
 80080c8:	469a      	mov	sl, r3
 80080ca:	4693      	mov	fp, r2
 80080cc:	4650      	mov	r0, sl
 80080ce:	4659      	mov	r1, fp
 80080d0:	f7fd ff86 	bl	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq>
 80080d4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80080d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d021      	beq.n	8008120 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e0:	4a1a      	ldr	r2, [pc, #104]	@ (800814c <UART_SetConfig+0x340>)
 80080e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080e6:	461a      	mov	r2, r3
 80080e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80080ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	085b      	lsrs	r3, r3, #1
 80080f4:	441a      	add	r2, r3
 80080f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008102:	2b0f      	cmp	r3, #15
 8008104:	d909      	bls.n	800811a <UART_SetConfig+0x30e>
 8008106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800810c:	d205      	bcs.n	800811a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800810e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008110:	b29a      	uxth	r2, r3
 8008112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	60da      	str	r2, [r3, #12]
 8008118:	e002      	b.n	8008120 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008122:	2201      	movs	r2, #1
 8008124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812a:	2201      	movs	r2, #1
 800812c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008132:	2200      	movs	r2, #0
 8008134:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008138:	2200      	movs	r2, #0
 800813a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800813c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008140:	4618      	mov	r0, r3
 8008142:	3750      	adds	r7, #80	@ 0x50
 8008144:	46bd      	mov	sp, r7
 8008146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800814a:	bf00      	nop
 800814c:	0800ae94 	.word	0x0800ae94

08008150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815c:	f003 0308 	and.w	r3, r3, #8
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00a      	beq.n	800817a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800817e:	f003 0301 	and.w	r3, r3, #1
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a0:	f003 0302 	and.w	r3, r3, #2
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00a      	beq.n	80081be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c2:	f003 0304 	and.w	r3, r3, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e4:	f003 0310 	and.w	r3, r3, #16
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00a      	beq.n	8008202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008206:	f003 0320 	and.w	r3, r3, #32
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	430a      	orrs	r2, r1
 8008222:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800822c:	2b00      	cmp	r3, #0
 800822e:	d01a      	beq.n	8008266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800824e:	d10a      	bne.n	8008266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	430a      	orrs	r2, r1
 8008264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00a      	beq.n	8008288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	430a      	orrs	r2, r1
 8008286:	605a      	str	r2, [r3, #4]
  }
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b098      	sub	sp, #96	@ 0x60
 8008298:	af02      	add	r7, sp, #8
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082a4:	f7f9 f868 	bl	8001378 <HAL_GetTick>
 80082a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0308 	and.w	r3, r3, #8
 80082b4:	2b08      	cmp	r3, #8
 80082b6:	d12f      	bne.n	8008318 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082c0:	2200      	movs	r2, #0
 80082c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f88e 	bl	80083e8 <UART_WaitOnFlagUntilTimeout>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d022      	beq.n	8008318 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	461a      	mov	r2, r3
 80082ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80082f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e6      	bne.n	80082d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2220      	movs	r2, #32
 8008308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e063      	b.n	80083e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0304 	and.w	r3, r3, #4
 8008322:	2b04      	cmp	r3, #4
 8008324:	d149      	bne.n	80083ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008326:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800832e:	2200      	movs	r2, #0
 8008330:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f857 	bl	80083e8 <UART_WaitOnFlagUntilTimeout>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d03c      	beq.n	80083ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	623b      	str	r3, [r7, #32]
   return(result);
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800835e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008360:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800836c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e6      	bne.n	8008340 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3308      	adds	r3, #8
 8008378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	e853 3f00 	ldrex	r3, [r3]
 8008380:	60fb      	str	r3, [r7, #12]
   return(result);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f023 0301 	bic.w	r3, r3, #1
 8008388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3308      	adds	r3, #8
 8008390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008392:	61fa      	str	r2, [r7, #28]
 8008394:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008396:	69b9      	ldr	r1, [r7, #24]
 8008398:	69fa      	ldr	r2, [r7, #28]
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	617b      	str	r3, [r7, #20]
   return(result);
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1e5      	bne.n	8008372 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2220      	movs	r2, #32
 80083aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e012      	b.n	80083e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3758      	adds	r7, #88	@ 0x58
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	603b      	str	r3, [r7, #0]
 80083f4:	4613      	mov	r3, r2
 80083f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083f8:	e04f      	b.n	800849a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008400:	d04b      	beq.n	800849a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008402:	f7f8 ffb9 	bl	8001378 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	429a      	cmp	r2, r3
 8008410:	d302      	bcc.n	8008418 <UART_WaitOnFlagUntilTimeout+0x30>
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e04e      	b.n	80084ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0304 	and.w	r3, r3, #4
 8008426:	2b00      	cmp	r3, #0
 8008428:	d037      	beq.n	800849a <UART_WaitOnFlagUntilTimeout+0xb2>
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b80      	cmp	r3, #128	@ 0x80
 800842e:	d034      	beq.n	800849a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b40      	cmp	r3, #64	@ 0x40
 8008434:	d031      	beq.n	800849a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	f003 0308 	and.w	r3, r3, #8
 8008440:	2b08      	cmp	r3, #8
 8008442:	d110      	bne.n	8008466 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2208      	movs	r2, #8
 800844a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 f95b 	bl	8008708 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2208      	movs	r2, #8
 8008456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e029      	b.n	80084ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008474:	d111      	bne.n	800849a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800847e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 f941 	bl	8008708 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2220      	movs	r2, #32
 800848a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e00f      	b.n	80084ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69da      	ldr	r2, [r3, #28]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	4013      	ands	r3, r2
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	bf0c      	ite	eq
 80084aa:	2301      	moveq	r3, #1
 80084ac:	2300      	movne	r3, #0
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	461a      	mov	r2, r3
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d0a0      	beq.n	80083fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
	...

080084c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b0a3      	sub	sp, #140	@ 0x8c
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	4613      	mov	r3, r2
 80084d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	88fa      	ldrh	r2, [r7, #6]
 80084dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	88fa      	ldrh	r2, [r7, #6]
 80084e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f6:	d10e      	bne.n	8008516 <UART_Start_Receive_IT+0x52>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d105      	bne.n	800850c <UART_Start_Receive_IT+0x48>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008506:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800850a:	e02d      	b.n	8008568 <UART_Start_Receive_IT+0xa4>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	22ff      	movs	r2, #255	@ 0xff
 8008510:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008514:	e028      	b.n	8008568 <UART_Start_Receive_IT+0xa4>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10d      	bne.n	800853a <UART_Start_Receive_IT+0x76>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d104      	bne.n	8008530 <UART_Start_Receive_IT+0x6c>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	22ff      	movs	r2, #255	@ 0xff
 800852a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800852e:	e01b      	b.n	8008568 <UART_Start_Receive_IT+0xa4>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	227f      	movs	r2, #127	@ 0x7f
 8008534:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008538:	e016      	b.n	8008568 <UART_Start_Receive_IT+0xa4>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008542:	d10d      	bne.n	8008560 <UART_Start_Receive_IT+0x9c>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d104      	bne.n	8008556 <UART_Start_Receive_IT+0x92>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	227f      	movs	r2, #127	@ 0x7f
 8008550:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008554:	e008      	b.n	8008568 <UART_Start_Receive_IT+0xa4>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	223f      	movs	r2, #63	@ 0x3f
 800855a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800855e:	e003      	b.n	8008568 <UART_Start_Receive_IT+0xa4>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2222      	movs	r2, #34	@ 0x22
 8008574:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3308      	adds	r3, #8
 800857e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008588:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800858a:	f043 0301 	orr.w	r3, r3, #1
 800858e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3308      	adds	r3, #8
 8008598:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800859c:	673a      	str	r2, [r7, #112]	@ 0x70
 800859e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80085a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80085a4:	e841 2300 	strex	r3, r2, [r1]
 80085a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80085aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e3      	bne.n	8008578 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085b8:	d14f      	bne.n	800865a <UART_Start_Receive_IT+0x196>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80085c0:	88fa      	ldrh	r2, [r7, #6]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d349      	bcc.n	800865a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ce:	d107      	bne.n	80085e0 <UART_Start_Receive_IT+0x11c>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d103      	bne.n	80085e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	4a47      	ldr	r2, [pc, #284]	@ (80086f8 <UART_Start_Receive_IT+0x234>)
 80085dc:	675a      	str	r2, [r3, #116]	@ 0x74
 80085de:	e002      	b.n	80085e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4a46      	ldr	r2, [pc, #280]	@ (80086fc <UART_Start_Receive_IT+0x238>)
 80085e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d01a      	beq.n	8008624 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085f6:	e853 3f00 	ldrex	r3, [r3]
 80085fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80085fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008602:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008610:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008612:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008616:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008618:	e841 2300 	strex	r3, r2, [r1]
 800861c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800861e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e4      	bne.n	80085ee <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3308      	adds	r3, #8
 800862a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800862e:	e853 3f00 	ldrex	r3, [r3]
 8008632:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800863a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3308      	adds	r3, #8
 8008642:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008644:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008646:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800864a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e5      	bne.n	8008624 <UART_Start_Receive_IT+0x160>
 8008658:	e046      	b.n	80086e8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008662:	d107      	bne.n	8008674 <UART_Start_Receive_IT+0x1b0>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d103      	bne.n	8008674 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4a24      	ldr	r2, [pc, #144]	@ (8008700 <UART_Start_Receive_IT+0x23c>)
 8008670:	675a      	str	r2, [r3, #116]	@ 0x74
 8008672:	e002      	b.n	800867a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	4a23      	ldr	r2, [pc, #140]	@ (8008704 <UART_Start_Receive_IT+0x240>)
 8008678:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d019      	beq.n	80086b6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868a:	e853 3f00 	ldrex	r3, [r3]
 800868e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008692:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008696:	677b      	str	r3, [r7, #116]	@ 0x74
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086a2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80086a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086a8:	e841 2300 	strex	r3, r2, [r1]
 80086ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80086ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e6      	bne.n	8008682 <UART_Start_Receive_IT+0x1be>
 80086b4:	e018      	b.n	80086e8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	e853 3f00 	ldrex	r3, [r3]
 80086c2:	613b      	str	r3, [r7, #16]
   return(result);
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	f043 0320 	orr.w	r3, r3, #32
 80086ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	461a      	mov	r2, r3
 80086d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086d4:	623b      	str	r3, [r7, #32]
 80086d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d8:	69f9      	ldr	r1, [r7, #28]
 80086da:	6a3a      	ldr	r2, [r7, #32]
 80086dc:	e841 2300 	strex	r3, r2, [r1]
 80086e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1e6      	bne.n	80086b6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	378c      	adds	r7, #140	@ 0x8c
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	08008f51 	.word	0x08008f51
 80086fc:	08008be1 	.word	0x08008be1
 8008700:	08008a1d 	.word	0x08008a1d
 8008704:	08008859 	.word	0x08008859

08008708 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008708:	b480      	push	{r7}
 800870a:	b095      	sub	sp, #84	@ 0x54
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800871e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800872e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008730:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008734:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800873c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e6      	bne.n	8008710 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3308      	adds	r3, #8
 8008748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	61fb      	str	r3, [r7, #28]
   return(result);
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008758:	f023 0301 	bic.w	r3, r3, #1
 800875c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3308      	adds	r3, #8
 8008764:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008768:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800876c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1e3      	bne.n	8008742 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800877e:	2b01      	cmp	r3, #1
 8008780:	d118      	bne.n	80087b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	e853 3f00 	ldrex	r3, [r3]
 800878e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f023 0310 	bic.w	r3, r3, #16
 8008796:	647b      	str	r3, [r7, #68]	@ 0x44
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	461a      	mov	r2, r3
 800879e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087a0:	61bb      	str	r3, [r7, #24]
 80087a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a4:	6979      	ldr	r1, [r7, #20]
 80087a6:	69ba      	ldr	r2, [r7, #24]
 80087a8:	e841 2300 	strex	r3, r2, [r1]
 80087ac:	613b      	str	r3, [r7, #16]
   return(result);
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1e6      	bne.n	8008782 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2220      	movs	r2, #32
 80087b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80087c8:	bf00      	nop
 80087ca:	3754      	adds	r7, #84	@ 0x54
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f7ff faf4 	bl	8007de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087f8:	bf00      	nop
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	60bb      	str	r3, [r7, #8]
   return(result);
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800881c:	61fb      	str	r3, [r7, #28]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	61bb      	str	r3, [r7, #24]
 8008828:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	6979      	ldr	r1, [r7, #20]
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	613b      	str	r3, [r7, #16]
   return(result);
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e6      	bne.n	8008808 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2220      	movs	r2, #32
 800883e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7ff fabf 	bl	8007dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800884e:	bf00      	nop
 8008850:	3720      	adds	r7, #32
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b09c      	sub	sp, #112	@ 0x70
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008866:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008870:	2b22      	cmp	r3, #34	@ 0x22
 8008872:	f040 80c3 	bne.w	80089fc <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800887c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008880:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008884:	b2d9      	uxtb	r1, r3
 8008886:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800888a:	b2da      	uxtb	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008890:	400a      	ands	r2, r1
 8008892:	b2d2      	uxtb	r2, r2
 8008894:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f040 80a6 	bne.w	8008a0c <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088c8:	e853 3f00 	ldrex	r3, [r3]
 80088cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088e6:	e841 2300 	strex	r3, r2, [r1]
 80088ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1e6      	bne.n	80088c0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3308      	adds	r3, #8
 80088f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fc:	e853 3f00 	ldrex	r3, [r3]
 8008900:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008904:	f023 0301 	bic.w	r3, r3, #1
 8008908:	667b      	str	r3, [r7, #100]	@ 0x64
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3308      	adds	r3, #8
 8008910:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008912:	647a      	str	r2, [r7, #68]	@ 0x44
 8008914:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008918:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e5      	bne.n	80088f2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2220      	movs	r2, #32
 800892a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a35      	ldr	r2, [pc, #212]	@ (8008a14 <UART_RxISR_8BIT+0x1bc>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d024      	beq.n	800898e <UART_RxISR_8BIT+0x136>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a33      	ldr	r2, [pc, #204]	@ (8008a18 <UART_RxISR_8BIT+0x1c0>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d01f      	beq.n	800898e <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d018      	beq.n	800898e <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	623b      	str	r3, [r7, #32]
   return(result);
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008970:	663b      	str	r3, [r7, #96]	@ 0x60
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800897a:	633b      	str	r3, [r7, #48]	@ 0x30
 800897c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e6      	bne.n	800895c <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008992:	2b01      	cmp	r3, #1
 8008994:	d12e      	bne.n	80089f4 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	e853 3f00 	ldrex	r3, [r3]
 80089a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f023 0310 	bic.w	r3, r3, #16
 80089b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089ba:	61fb      	str	r3, [r7, #28]
 80089bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089be:	69b9      	ldr	r1, [r7, #24]
 80089c0:	69fa      	ldr	r2, [r7, #28]
 80089c2:	e841 2300 	strex	r3, r2, [r1]
 80089c6:	617b      	str	r3, [r7, #20]
   return(result);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1e6      	bne.n	800899c <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	69db      	ldr	r3, [r3, #28]
 80089d4:	f003 0310 	and.w	r3, r3, #16
 80089d8:	2b10      	cmp	r3, #16
 80089da:	d103      	bne.n	80089e4 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2210      	movs	r2, #16
 80089e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7ff fa01 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089f2:	e00b      	b.n	8008a0c <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7f7 fe0b 	bl	8000610 <HAL_UART_RxCpltCallback>
}
 80089fa:	e007      	b.n	8008a0c <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	699a      	ldr	r2, [r3, #24]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f042 0208 	orr.w	r2, r2, #8
 8008a0a:	619a      	str	r2, [r3, #24]
}
 8008a0c:	bf00      	nop
 8008a0e:	3770      	adds	r7, #112	@ 0x70
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	46002400 	.word	0x46002400
 8008a18:	56002400 	.word	0x56002400

08008a1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b09c      	sub	sp, #112	@ 0x70
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a2a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a34:	2b22      	cmp	r3, #34	@ 0x22
 8008a36:	f040 80c3 	bne.w	8008bc0 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a40:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a48:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a4a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008a4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a52:	4013      	ands	r3, r2
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a5e:	1c9a      	adds	r2, r3, #2
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f040 80a6 	bne.w	8008bd0 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a98:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008aa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008aa4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008aa8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008aaa:	e841 2300 	strex	r3, r2, [r1]
 8008aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e6      	bne.n	8008a84 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3308      	adds	r3, #8
 8008abc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	f023 0301 	bic.w	r3, r3, #1
 8008acc:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ad6:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008adc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e5      	bne.n	8008ab6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a35      	ldr	r2, [pc, #212]	@ (8008bd8 <UART_RxISR_16BIT+0x1bc>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d024      	beq.n	8008b52 <UART_RxISR_16BIT+0x136>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a33      	ldr	r2, [pc, #204]	@ (8008bdc <UART_RxISR_16BIT+0x1c0>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d01f      	beq.n	8008b52 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d018      	beq.n	8008b52 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b40:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e6      	bne.n	8008b20 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d12e      	bne.n	8008bb8 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f023 0310 	bic.w	r3, r3, #16
 8008b74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b7e:	61bb      	str	r3, [r7, #24]
 8008b80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	6979      	ldr	r1, [r7, #20]
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e6      	bne.n	8008b60 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	f003 0310 	and.w	r3, r3, #16
 8008b9c:	2b10      	cmp	r3, #16
 8008b9e:	d103      	bne.n	8008ba8 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2210      	movs	r2, #16
 8008ba6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7ff f91f 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bb6:	e00b      	b.n	8008bd0 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7f7 fd29 	bl	8000610 <HAL_UART_RxCpltCallback>
}
 8008bbe:	e007      	b.n	8008bd0 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	699a      	ldr	r2, [r3, #24]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f042 0208 	orr.w	r2, r2, #8
 8008bce:	619a      	str	r2, [r3, #24]
}
 8008bd0:	bf00      	nop
 8008bd2:	3770      	adds	r7, #112	@ 0x70
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	46002400 	.word	0x46002400
 8008bdc:	56002400 	.word	0x56002400

08008be0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b0ac      	sub	sp, #176	@ 0xb0
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008bee:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c16:	2b22      	cmp	r3, #34	@ 0x22
 8008c18:	f040 8187 	bne.w	8008f2a <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c22:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c26:	e12a      	b.n	8008e7e <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c32:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008c36:	b2d9      	uxtb	r1, r3
 8008c38:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c42:	400a      	ands	r2, r1
 8008c44:	b2d2      	uxtb	r2, r2
 8008c46:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d053      	beq.n	8008d22 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d011      	beq.n	8008caa <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00b      	beq.n	8008caa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2201      	movs	r2, #1
 8008c98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ca0:	f043 0201 	orr.w	r2, r3, #1
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d011      	beq.n	8008cda <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00b      	beq.n	8008cda <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cd0:	f043 0204 	orr.w	r2, r3, #4
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cde:	f003 0304 	and.w	r3, r3, #4
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d011      	beq.n	8008d0a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00b      	beq.n	8008d0a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2204      	movs	r2, #4
 8008cf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d00:	f043 0202 	orr.w	r2, r3, #2
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d006      	beq.n	8008d22 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff f863 	bl	8007de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f040 80a7 	bne.w	8008e7e <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008d3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d54:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008d58:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008d60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e4      	bne.n	8008d30 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3308      	adds	r3, #8
 8008d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d70:	e853 3f00 	ldrex	r3, [r3]
 8008d74:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008d76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d7c:	f023 0301 	bic.w	r3, r3, #1
 8008d80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3308      	adds	r3, #8
 8008d8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d8e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008d90:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008d94:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008d9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e1      	bne.n	8008d66 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a62      	ldr	r2, [pc, #392]	@ (8008f44 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d026      	beq.n	8008e0e <UART_RxISR_8BIT_FIFOEN+0x22e>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a60      	ldr	r2, [pc, #384]	@ (8008f48 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d021      	beq.n	8008e0e <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d01a      	beq.n	8008e0e <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008de6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008de8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008dec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	461a      	mov	r2, r3
 8008df6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008dfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8008dfc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e4      	bne.n	8008dd8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d130      	bne.n	8008e78 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2c:	f023 0310 	bic.w	r3, r3, #16
 8008e30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e4      	bne.n	8008e1c <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	f003 0310 	and.w	r3, r3, #16
 8008e5c:	2b10      	cmp	r3, #16
 8008e5e:	d103      	bne.n	8008e68 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2210      	movs	r2, #16
 8008e66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f7fe ffbf 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
 8008e76:	e002      	b.n	8008e7e <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7f7 fbc9 	bl	8000610 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e7e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d006      	beq.n	8008e94 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 8008e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e8a:	f003 0320 	and.w	r3, r3, #32
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f47f aeca 	bne.w	8008c28 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e9a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e9e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d049      	beq.n	8008f3a <UART_RxISR_8BIT_FIFOEN+0x35a>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008eac:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d242      	bcs.n	8008f3a <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	3308      	adds	r3, #8
 8008eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	e853 3f00 	ldrex	r3, [r3]
 8008ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008eca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008ed8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008eda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ee0:	e841 2300 	strex	r3, r2, [r1]
 8008ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e3      	bne.n	8008eb4 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a17      	ldr	r2, [pc, #92]	@ (8008f4c <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8008ef0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	e853 3f00 	ldrex	r3, [r3]
 8008efe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f043 0320 	orr.w	r3, r3, #32
 8008f06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f14:	61bb      	str	r3, [r7, #24]
 8008f16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f18:	6979      	ldr	r1, [r7, #20]
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	e841 2300 	strex	r3, r2, [r1]
 8008f20:	613b      	str	r3, [r7, #16]
   return(result);
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1e4      	bne.n	8008ef2 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f28:	e007      	b.n	8008f3a <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	699a      	ldr	r2, [r3, #24]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f042 0208 	orr.w	r2, r2, #8
 8008f38:	619a      	str	r2, [r3, #24]
}
 8008f3a:	bf00      	nop
 8008f3c:	37b0      	adds	r7, #176	@ 0xb0
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	46002400 	.word	0x46002400
 8008f48:	56002400 	.word	0x56002400
 8008f4c:	08008859 	.word	0x08008859

08008f50 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b0ae      	sub	sp, #184	@ 0xb8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f5e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f86:	2b22      	cmp	r3, #34	@ 0x22
 8008f88:	f040 818b 	bne.w	80092a2 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f92:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f96:	e12e      	b.n	80091f6 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008faa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008fae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc0:	1c9a      	adds	r2, r3, #2
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d053      	beq.n	8009096 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d011      	beq.n	800901e <UART_RxISR_16BIT_FIFOEN+0xce>
 8008ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00b      	beq.n	800901e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2201      	movs	r2, #1
 800900c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009014:	f043 0201 	orr.w	r2, r3, #1
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800901e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009022:	f003 0302 	and.w	r3, r3, #2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d011      	beq.n	800904e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800902a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2202      	movs	r2, #2
 800903c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009044:	f043 0204 	orr.w	r2, r3, #4
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800904e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009052:	f003 0304 	and.w	r3, r3, #4
 8009056:	2b00      	cmp	r3, #0
 8009058:	d011      	beq.n	800907e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800905a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00b      	beq.n	800907e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2204      	movs	r2, #4
 800906c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009074:	f043 0202 	orr.w	r2, r3, #2
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009084:	2b00      	cmp	r3, #0
 8009086:	d006      	beq.n	8009096 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7fe fea9 	bl	8007de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800909c:	b29b      	uxth	r3, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f040 80a9 	bne.w	80091f6 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	461a      	mov	r2, r3
 80090c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80090ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090d2:	e841 2300 	strex	r3, r2, [r1]
 80090d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80090d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1e2      	bne.n	80090a4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3308      	adds	r3, #8
 80090e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090f4:	f023 0301 	bic.w	r3, r3, #1
 80090f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3308      	adds	r3, #8
 8009102:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009106:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009108:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800910c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800910e:	e841 2300 	strex	r3, r2, [r1]
 8009112:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1e1      	bne.n	80090de <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2220      	movs	r2, #32
 800911e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a62      	ldr	r2, [pc, #392]	@ (80092bc <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d026      	beq.n	8009186 <UART_RxISR_16BIT_FIFOEN+0x236>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a60      	ldr	r2, [pc, #384]	@ (80092c0 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d021      	beq.n	8009186 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d01a      	beq.n	8009186 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009158:	e853 3f00 	ldrex	r3, [r3]
 800915c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800915e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009160:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009164:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	461a      	mov	r2, r3
 800916e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009172:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009174:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009178:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800917a:	e841 2300 	strex	r3, r2, [r1]
 800917e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1e4      	bne.n	8009150 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800918a:	2b01      	cmp	r3, #1
 800918c:	d130      	bne.n	80091f0 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919c:	e853 3f00 	ldrex	r3, [r3]
 80091a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a4:	f023 0310 	bic.w	r3, r3, #16
 80091a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	461a      	mov	r2, r3
 80091b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80091b8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091be:	e841 2300 	strex	r3, r2, [r1]
 80091c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1e4      	bne.n	8009194 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	f003 0310 	and.w	r3, r3, #16
 80091d4:	2b10      	cmp	r3, #16
 80091d6:	d103      	bne.n	80091e0 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2210      	movs	r2, #16
 80091de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091e6:	4619      	mov	r1, r3
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f7fe fe03 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
 80091ee:	e002      	b.n	80091f6 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7f7 fa0d 	bl	8000610 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091f6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d006      	beq.n	800920c <UART_RxISR_16BIT_FIFOEN+0x2bc>
 80091fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009202:	f003 0320 	and.w	r3, r3, #32
 8009206:	2b00      	cmp	r3, #0
 8009208:	f47f aec6 	bne.w	8008f98 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009212:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009216:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800921a:	2b00      	cmp	r3, #0
 800921c:	d049      	beq.n	80092b2 <UART_RxISR_16BIT_FIFOEN+0x362>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009224:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009228:	429a      	cmp	r2, r3
 800922a:	d242      	bcs.n	80092b2 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3308      	adds	r3, #8
 8009232:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009236:	e853 3f00 	ldrex	r3, [r3]
 800923a:	623b      	str	r3, [r7, #32]
   return(result);
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009242:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3308      	adds	r3, #8
 800924c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009250:	633a      	str	r2, [r7, #48]	@ 0x30
 8009252:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800925e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e3      	bne.n	800922c <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a17      	ldr	r2, [pc, #92]	@ (80092c4 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8009268:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	60fb      	str	r3, [r7, #12]
   return(result);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f043 0320 	orr.w	r3, r3, #32
 800927e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800928c:	61fb      	str	r3, [r7, #28]
 800928e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	69b9      	ldr	r1, [r7, #24]
 8009292:	69fa      	ldr	r2, [r7, #28]
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	617b      	str	r3, [r7, #20]
   return(result);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e4      	bne.n	800926a <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092a0:	e007      	b.n	80092b2 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	699a      	ldr	r2, [r3, #24]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f042 0208 	orr.w	r2, r2, #8
 80092b0:	619a      	str	r2, [r3, #24]
}
 80092b2:	bf00      	nop
 80092b4:	37b8      	adds	r7, #184	@ 0xb8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	46002400 	.word	0x46002400
 80092c0:	56002400 	.word	0x56002400
 80092c4:	08008a1d 	.word	0x08008a1d

080092c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d101      	bne.n	8009306 <HAL_UARTEx_DisableFifoMode+0x16>
 8009302:	2302      	movs	r3, #2
 8009304:	e027      	b.n	8009356 <HAL_UARTEx_DisableFifoMode+0x66>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2224      	movs	r2, #36	@ 0x24
 8009312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 0201 	bic.w	r2, r2, #1
 800932c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009334:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2220      	movs	r2, #32
 8009348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009372:	2b01      	cmp	r3, #1
 8009374:	d101      	bne.n	800937a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009376:	2302      	movs	r3, #2
 8009378:	e02d      	b.n	80093d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2224      	movs	r2, #36	@ 0x24
 8009386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 0201 	bic.w	r2, r2, #1
 80093a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f850 	bl	800945c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2220      	movs	r2, #32
 80093c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d101      	bne.n	80093f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093f2:	2302      	movs	r3, #2
 80093f4:	e02d      	b.n	8009452 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2224      	movs	r2, #36	@ 0x24
 8009402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f022 0201 	bic.w	r2, r2, #1
 800941c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	430a      	orrs	r2, r1
 8009430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f812 	bl	800945c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2220      	movs	r2, #32
 8009444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
	...

0800945c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009468:	2b00      	cmp	r3, #0
 800946a:	d108      	bne.n	800947e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800947c:	e031      	b.n	80094e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800947e:	2308      	movs	r3, #8
 8009480:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009482:	2308      	movs	r3, #8
 8009484:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	0e5b      	lsrs	r3, r3, #25
 800948e:	b2db      	uxtb	r3, r3
 8009490:	f003 0307 	and.w	r3, r3, #7
 8009494:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	0f5b      	lsrs	r3, r3, #29
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	f003 0307 	and.w	r3, r3, #7
 80094a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
 80094a8:	7b3a      	ldrb	r2, [r7, #12]
 80094aa:	4911      	ldr	r1, [pc, #68]	@ (80094f0 <UARTEx_SetNbDataToProcess+0x94>)
 80094ac:	5c8a      	ldrb	r2, [r1, r2]
 80094ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80094b2:	7b3a      	ldrb	r2, [r7, #12]
 80094b4:	490f      	ldr	r1, [pc, #60]	@ (80094f4 <UARTEx_SetNbDataToProcess+0x98>)
 80094b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80094bc:	b29a      	uxth	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	7b7a      	ldrb	r2, [r7, #13]
 80094c8:	4909      	ldr	r1, [pc, #36]	@ (80094f0 <UARTEx_SetNbDataToProcess+0x94>)
 80094ca:	5c8a      	ldrb	r2, [r1, r2]
 80094cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094d0:	7b7a      	ldrb	r2, [r7, #13]
 80094d2:	4908      	ldr	r1, [pc, #32]	@ (80094f4 <UARTEx_SetNbDataToProcess+0x98>)
 80094d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80094da:	b29a      	uxth	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80094e2:	bf00      	nop
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	0800aeac 	.word	0x0800aeac
 80094f4:	0800aeb4 	.word	0x0800aeb4

080094f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b08b      	sub	sp, #44	@ 0x2c
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	fa93 f3a3 	rbit	r3, r3
 8009512:	613b      	str	r3, [r7, #16]
  return result;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800951e:	2320      	movs	r3, #32
 8009520:	e003      	b.n	800952a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	fab3 f383 	clz	r3, r3
 8009528:	b2db      	uxtb	r3, r3
 800952a:	005b      	lsls	r3, r3, #1
 800952c:	2103      	movs	r1, #3
 800952e:	fa01 f303 	lsl.w	r3, r1, r3
 8009532:	43db      	mvns	r3, r3
 8009534:	401a      	ands	r2, r3
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	fa93 f3a3 	rbit	r3, r3
 8009540:	61fb      	str	r3, [r7, #28]
  return result;
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800954c:	2320      	movs	r3, #32
 800954e:	e003      	b.n	8009558 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009552:	fab3 f383 	clz	r3, r3
 8009556:	b2db      	uxtb	r3, r3
 8009558:	005b      	lsls	r3, r3, #1
 800955a:	6879      	ldr	r1, [r7, #4]
 800955c:	fa01 f303 	lsl.w	r3, r1, r3
 8009560:	431a      	orrs	r2, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 8009566:	bf00      	nop
 8009568:	372c      	adds	r7, #44	@ 0x2c
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009572:	b480      	push	{r7}
 8009574:	b085      	sub	sp, #20
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	43db      	mvns	r3, r3
 8009586:	401a      	ands	r2, r3
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	fb01 f303 	mul.w	r3, r1, r3
 8009590:	431a      	orrs	r2, r3
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	605a      	str	r2, [r3, #4]
}
 8009596:	bf00      	nop
 8009598:	3714      	adds	r7, #20
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b08b      	sub	sp, #44	@ 0x2c
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	60f8      	str	r0, [r7, #12]
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	689a      	ldr	r2, [r3, #8]
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	fa93 f3a3 	rbit	r3, r3
 80095bc:	613b      	str	r3, [r7, #16]
  return result;
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80095c8:	2320      	movs	r3, #32
 80095ca:	e003      	b.n	80095d4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	fab3 f383 	clz	r3, r3
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	2103      	movs	r1, #3
 80095d8:	fa01 f303 	lsl.w	r3, r1, r3
 80095dc:	43db      	mvns	r3, r3
 80095de:	401a      	ands	r2, r3
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	fa93 f3a3 	rbit	r3, r3
 80095ea:	61fb      	str	r3, [r7, #28]
  return result;
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80095f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80095f6:	2320      	movs	r3, #32
 80095f8:	e003      	b.n	8009602 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80095fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fc:	fab3 f383 	clz	r3, r3
 8009600:	b2db      	uxtb	r3, r3
 8009602:	005b      	lsls	r3, r3, #1
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	fa01 f303 	lsl.w	r3, r1, r3
 800960a:	431a      	orrs	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 8009610:	bf00      	nop
 8009612:	372c      	adds	r7, #44	@ 0x2c
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800961c:	b480      	push	{r7}
 800961e:	b08b      	sub	sp, #44	@ 0x2c
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	fa93 f3a3 	rbit	r3, r3
 8009636:	613b      	str	r3, [r7, #16]
  return result;
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009642:	2320      	movs	r3, #32
 8009644:	e003      	b.n	800964e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	fab3 f383 	clz	r3, r3
 800964c:	b2db      	uxtb	r3, r3
 800964e:	005b      	lsls	r3, r3, #1
 8009650:	2103      	movs	r1, #3
 8009652:	fa01 f303 	lsl.w	r3, r1, r3
 8009656:	43db      	mvns	r3, r3
 8009658:	401a      	ands	r2, r3
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	fa93 f3a3 	rbit	r3, r3
 8009664:	61fb      	str	r3, [r7, #28]
  return result;
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009670:	2320      	movs	r3, #32
 8009672:	e003      	b.n	800967c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009676:	fab3 f383 	clz	r3, r3
 800967a:	b2db      	uxtb	r3, r3
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	fa01 f303 	lsl.w	r3, r1, r3
 8009684:	431a      	orrs	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 800968a:	bf00      	nop
 800968c:	372c      	adds	r7, #44	@ 0x2c
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009696:	b480      	push	{r7}
 8009698:	b08b      	sub	sp, #44	@ 0x2c
 800969a:	af00      	add	r7, sp, #0
 800969c:	60f8      	str	r0, [r7, #12]
 800969e:	60b9      	str	r1, [r7, #8]
 80096a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6a1a      	ldr	r2, [r3, #32]
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	fa93 f3a3 	rbit	r3, r3
 80096b0:	613b      	str	r3, [r7, #16]
  return result;
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80096bc:	2320      	movs	r3, #32
 80096be:	e003      	b.n	80096c8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	fab3 f383 	clz	r3, r3
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	210f      	movs	r1, #15
 80096cc:	fa01 f303 	lsl.w	r3, r1, r3
 80096d0:	43db      	mvns	r3, r3
 80096d2:	401a      	ands	r2, r3
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096d8:	6a3b      	ldr	r3, [r7, #32]
 80096da:	fa93 f3a3 	rbit	r3, r3
 80096de:	61fb      	str	r3, [r7, #28]
  return result;
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80096e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80096ea:	2320      	movs	r3, #32
 80096ec:	e003      	b.n	80096f6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80096ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f0:	fab3 f383 	clz	r3, r3
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	6879      	ldr	r1, [r7, #4]
 80096fa:	fa01 f303 	lsl.w	r3, r1, r3
 80096fe:	431a      	orrs	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 8009704:	bf00      	nop
 8009706:	372c      	adds	r7, #44	@ 0x2c
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009710:	b480      	push	{r7}
 8009712:	b08b      	sub	sp, #44	@ 0x2c
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	0a1b      	lsrs	r3, r3, #8
 8009724:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	fa93 f3a3 	rbit	r3, r3
 800972c:	613b      	str	r3, [r7, #16]
  return result;
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009738:	2320      	movs	r3, #32
 800973a:	e003      	b.n	8009744 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	fab3 f383 	clz	r3, r3
 8009742:	b2db      	uxtb	r3, r3
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	210f      	movs	r1, #15
 8009748:	fa01 f303 	lsl.w	r3, r1, r3
 800974c:	43db      	mvns	r3, r3
 800974e:	401a      	ands	r2, r3
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	0a1b      	lsrs	r3, r3, #8
 8009754:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009756:	6a3b      	ldr	r3, [r7, #32]
 8009758:	fa93 f3a3 	rbit	r3, r3
 800975c:	61fb      	str	r3, [r7, #28]
  return result;
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009768:	2320      	movs	r3, #32
 800976a:	e003      	b.n	8009774 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800976c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976e:	fab3 f383 	clz	r3, r3
 8009772:	b2db      	uxtb	r3, r3
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	6879      	ldr	r1, [r7, #4]
 8009778:	fa01 f303 	lsl.w	r3, r1, r3
 800977c:	431a      	orrs	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 8009782:	bf00      	nop
 8009784:	372c      	adds	r7, #44	@ 0x2c
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b08a      	sub	sp, #40	@ 0x28
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	fa93 f3a3 	rbit	r3, r3
 80097a4:	617b      	str	r3, [r7, #20]
  return result;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <LL_GPIO_Init+0x26>
    return 32U;
 80097b0:	2320      	movs	r3, #32
 80097b2:	e003      	b.n	80097bc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	fab3 f383 	clz	r3, r3
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80097be:	e058      	b.n	8009872 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	2101      	movs	r1, #1
 80097c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c8:	fa01 f303 	lsl.w	r3, r1, r3
 80097cc:	4013      	ands	r3, r2
 80097ce:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d04a      	beq.n	800986c <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d003      	beq.n	80097e6 <LL_GPIO_Init+0x58>
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d10e      	bne.n	8009804 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	461a      	mov	r2, r3
 80097ec:	6a39      	ldr	r1, [r7, #32]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff fed7 	bl	80095a2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	6819      	ldr	r1, [r3, #0]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	461a      	mov	r2, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7ff feb7 	bl	8009572 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	461a      	mov	r2, r3
 800980a:	6a39      	ldr	r1, [r7, #32]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff ff05 	bl	800961c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	2b02      	cmp	r3, #2
 8009818:	d121      	bne.n	800985e <LL_GPIO_Init+0xd0>
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	fa93 f3a3 	rbit	r3, r3
 8009824:	60bb      	str	r3, [r7, #8]
  return result;
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <LL_GPIO_Init+0xa6>
    return 32U;
 8009830:	2320      	movs	r3, #32
 8009832:	e003      	b.n	800983c <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	fab3 f383 	clz	r3, r3
 800983a:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800983c:	2b07      	cmp	r3, #7
 800983e:	d807      	bhi.n	8009850 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	461a      	mov	r2, r3
 8009846:	6a39      	ldr	r1, [r7, #32]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff ff24 	bl	8009696 <LL_GPIO_SetAFPin_0_7>
 800984e:	e006      	b.n	800985e <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	461a      	mov	r2, r3
 8009856:	6a39      	ldr	r1, [r7, #32]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7ff ff59 	bl	8009710 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	461a      	mov	r2, r3
 8009864:	6a39      	ldr	r1, [r7, #32]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7ff fe46 	bl	80094f8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800986c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986e:	3301      	adds	r3, #1
 8009870:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009878:	fa22 f303 	lsr.w	r3, r2, r3
 800987c:	2b00      	cmp	r3, #0
 800987e:	d19f      	bne.n	80097c0 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3728      	adds	r7, #40	@ 0x28
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800988a:	b084      	sub	sp, #16
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	f107 001c 	add.w	r0, r7, #28
 8009898:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fd89 	bl	800a3c0 <USB_CoreReset>
 80098ae:	4603      	mov	r3, r0
 80098b0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80098b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d106      	bne.n	80098c8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80098c6:	e005      	b.n	80098d4 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098e0:	b004      	add	sp, #16
 80098e2:	4770      	bx	lr

080098e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	4613      	mov	r3, r2
 80098f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d165      	bne.n	80099c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	4a41      	ldr	r2, [pc, #260]	@ (8009a00 <USB_SetTurnaroundTime+0x11c>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d906      	bls.n	800990e <USB_SetTurnaroundTime+0x2a>
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	4a40      	ldr	r2, [pc, #256]	@ (8009a04 <USB_SetTurnaroundTime+0x120>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d202      	bcs.n	800990e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009908:	230f      	movs	r3, #15
 800990a:	617b      	str	r3, [r7, #20]
 800990c:	e062      	b.n	80099d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	4a3c      	ldr	r2, [pc, #240]	@ (8009a04 <USB_SetTurnaroundTime+0x120>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d306      	bcc.n	8009924 <USB_SetTurnaroundTime+0x40>
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	4a3b      	ldr	r2, [pc, #236]	@ (8009a08 <USB_SetTurnaroundTime+0x124>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d202      	bcs.n	8009924 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800991e:	230e      	movs	r3, #14
 8009920:	617b      	str	r3, [r7, #20]
 8009922:	e057      	b.n	80099d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	4a38      	ldr	r2, [pc, #224]	@ (8009a08 <USB_SetTurnaroundTime+0x124>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d306      	bcc.n	800993a <USB_SetTurnaroundTime+0x56>
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	4a37      	ldr	r2, [pc, #220]	@ (8009a0c <USB_SetTurnaroundTime+0x128>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d202      	bcs.n	800993a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009934:	230d      	movs	r3, #13
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	e04c      	b.n	80099d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	4a33      	ldr	r2, [pc, #204]	@ (8009a0c <USB_SetTurnaroundTime+0x128>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d306      	bcc.n	8009950 <USB_SetTurnaroundTime+0x6c>
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	4a32      	ldr	r2, [pc, #200]	@ (8009a10 <USB_SetTurnaroundTime+0x12c>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d802      	bhi.n	8009950 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800994a:	230c      	movs	r3, #12
 800994c:	617b      	str	r3, [r7, #20]
 800994e:	e041      	b.n	80099d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	4a2f      	ldr	r2, [pc, #188]	@ (8009a10 <USB_SetTurnaroundTime+0x12c>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d906      	bls.n	8009966 <USB_SetTurnaroundTime+0x82>
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	4a2e      	ldr	r2, [pc, #184]	@ (8009a14 <USB_SetTurnaroundTime+0x130>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d802      	bhi.n	8009966 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009960:	230b      	movs	r3, #11
 8009962:	617b      	str	r3, [r7, #20]
 8009964:	e036      	b.n	80099d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	4a2a      	ldr	r2, [pc, #168]	@ (8009a14 <USB_SetTurnaroundTime+0x130>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d906      	bls.n	800997c <USB_SetTurnaroundTime+0x98>
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	4a29      	ldr	r2, [pc, #164]	@ (8009a18 <USB_SetTurnaroundTime+0x134>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d802      	bhi.n	800997c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009976:	230a      	movs	r3, #10
 8009978:	617b      	str	r3, [r7, #20]
 800997a:	e02b      	b.n	80099d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	4a26      	ldr	r2, [pc, #152]	@ (8009a18 <USB_SetTurnaroundTime+0x134>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d906      	bls.n	8009992 <USB_SetTurnaroundTime+0xae>
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	4a25      	ldr	r2, [pc, #148]	@ (8009a1c <USB_SetTurnaroundTime+0x138>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d202      	bcs.n	8009992 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800998c:	2309      	movs	r3, #9
 800998e:	617b      	str	r3, [r7, #20]
 8009990:	e020      	b.n	80099d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	4a21      	ldr	r2, [pc, #132]	@ (8009a1c <USB_SetTurnaroundTime+0x138>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d306      	bcc.n	80099a8 <USB_SetTurnaroundTime+0xc4>
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	4a20      	ldr	r2, [pc, #128]	@ (8009a20 <USB_SetTurnaroundTime+0x13c>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d802      	bhi.n	80099a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80099a2:	2308      	movs	r3, #8
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	e015      	b.n	80099d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	4a1d      	ldr	r2, [pc, #116]	@ (8009a20 <USB_SetTurnaroundTime+0x13c>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d906      	bls.n	80099be <USB_SetTurnaroundTime+0xda>
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009a24 <USB_SetTurnaroundTime+0x140>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d202      	bcs.n	80099be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80099b8:	2307      	movs	r3, #7
 80099ba:	617b      	str	r3, [r7, #20]
 80099bc:	e00a      	b.n	80099d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80099be:	2306      	movs	r3, #6
 80099c0:	617b      	str	r3, [r7, #20]
 80099c2:	e007      	b.n	80099d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80099c4:	79fb      	ldrb	r3, [r7, #7]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d102      	bne.n	80099d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80099ca:	2309      	movs	r3, #9
 80099cc:	617b      	str	r3, [r7, #20]
 80099ce:	e001      	b.n	80099d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80099d0:	2309      	movs	r3, #9
 80099d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	68da      	ldr	r2, [r3, #12]
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	029b      	lsls	r3, r3, #10
 80099e8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80099ec:	431a      	orrs	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	371c      	adds	r7, #28
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	00d8acbf 	.word	0x00d8acbf
 8009a04:	00e4e1c0 	.word	0x00e4e1c0
 8009a08:	00f42400 	.word	0x00f42400
 8009a0c:	01067380 	.word	0x01067380
 8009a10:	011a499f 	.word	0x011a499f
 8009a14:	01312cff 	.word	0x01312cff
 8009a18:	014ca43f 	.word	0x014ca43f
 8009a1c:	016e3600 	.word	0x016e3600
 8009a20:	01a6ab1f 	.word	0x01a6ab1f
 8009a24:	01e84800 	.word	0x01e84800

08009a28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f023 0201 	bic.w	r2, r3, #1
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	460b      	mov	r3, r1
 8009a54:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009a56:	2300      	movs	r3, #0
 8009a58:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a66:	78fb      	ldrb	r3, [r7, #3]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d115      	bne.n	8009a98 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009a78:	200a      	movs	r0, #10
 8009a7a:	f7f7 fc89 	bl	8001390 <HAL_Delay>
      ms += 10U;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	330a      	adds	r3, #10
 8009a82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fc0b 	bl	800a2a0 <USB_GetMode>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d01e      	beq.n	8009ace <USB_SetCurrentMode+0x84>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2bc7      	cmp	r3, #199	@ 0xc7
 8009a94:	d9f0      	bls.n	8009a78 <USB_SetCurrentMode+0x2e>
 8009a96:	e01a      	b.n	8009ace <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a98:	78fb      	ldrb	r3, [r7, #3]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d115      	bne.n	8009aca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009aaa:	200a      	movs	r0, #10
 8009aac:	f7f7 fc70 	bl	8001390 <HAL_Delay>
      ms += 10U;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	330a      	adds	r3, #10
 8009ab4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fbf2 	bl	800a2a0 <USB_GetMode>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d005      	beq.n	8009ace <USB_SetCurrentMode+0x84>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2bc7      	cmp	r3, #199	@ 0xc7
 8009ac6:	d9f0      	bls.n	8009aaa <USB_SetCurrentMode+0x60>
 8009ac8:	e001      	b.n	8009ace <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e005      	b.n	8009ada <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2bc8      	cmp	r3, #200	@ 0xc8
 8009ad2:	d101      	bne.n	8009ad8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e000      	b.n	8009ada <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
	...

08009ae4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b086      	sub	sp, #24
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009afe:	2300      	movs	r3, #0
 8009b00:	613b      	str	r3, [r7, #16]
 8009b02:	e009      	b.n	8009b18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	3340      	adds	r3, #64	@ 0x40
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4413      	add	r3, r2
 8009b0e:	2200      	movs	r2, #0
 8009b10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	3301      	adds	r3, #1
 8009b16:	613b      	str	r3, [r7, #16]
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	2b0e      	cmp	r3, #14
 8009b1c:	d9f2      	bls.n	8009b04 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d11c      	bne.n	8009b60 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b34:	f043 0302 	orr.w	r3, r3, #2
 8009b38:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b3e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	e005      	b.n	8009b6c <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b72:	461a      	mov	r2, r3
 8009b74:	2300      	movs	r3, #0
 8009b76:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b78:	2103      	movs	r1, #3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f95e 	bl	8009e3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b80:	2110      	movs	r1, #16
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f8fa 	bl	8009d7c <USB_FlushTxFifo>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f924 	bl	8009de0 <USB_FlushRxFifo>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ba8:	461a      	mov	r2, r3
 8009baa:	2300      	movs	r3, #0
 8009bac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	613b      	str	r3, [r7, #16]
 8009bca:	e043      	b.n	8009c54 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	015a      	lsls	r2, r3, #5
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009be2:	d118      	bne.n	8009c16 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10a      	bne.n	8009c00 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	015a      	lsls	r2, r3, #5
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009bfc:	6013      	str	r3, [r2, #0]
 8009bfe:	e013      	b.n	8009c28 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	015a      	lsls	r2, r3, #5
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4413      	add	r3, r2
 8009c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	e008      	b.n	8009c28 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c22:	461a      	mov	r2, r3
 8009c24:	2300      	movs	r3, #0
 8009c26:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c34:	461a      	mov	r2, r3
 8009c36:	2300      	movs	r3, #0
 8009c38:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	015a      	lsls	r2, r3, #5
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	4413      	add	r3, r2
 8009c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c46:	461a      	mov	r2, r3
 8009c48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009c4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	3301      	adds	r3, #1
 8009c52:	613b      	str	r3, [r7, #16]
 8009c54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c58:	461a      	mov	r2, r3
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d3b5      	bcc.n	8009bcc <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c60:	2300      	movs	r3, #0
 8009c62:	613b      	str	r3, [r7, #16]
 8009c64:	e043      	b.n	8009cee <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c7c:	d118      	bne.n	8009cb0 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10a      	bne.n	8009c9a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	015a      	lsls	r2, r3, #5
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c90:	461a      	mov	r2, r3
 8009c92:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	e013      	b.n	8009cc2 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	015a      	lsls	r2, r3, #5
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009cac:	6013      	str	r3, [r2, #0]
 8009cae:	e008      	b.n	8009cc2 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cce:	461a      	mov	r2, r3
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	015a      	lsls	r2, r3, #5
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	4413      	add	r3, r2
 8009cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009ce6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	3301      	adds	r3, #1
 8009cec:	613b      	str	r3, [r7, #16]
 8009cee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d3b5      	bcc.n	8009c66 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d0c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009d1a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d105      	bne.n	8009d30 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	699b      	ldr	r3, [r3, #24]
 8009d28:	f043 0210 	orr.w	r2, r3, #16
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	699a      	ldr	r2, [r3, #24]
 8009d34:	4b10      	ldr	r3, [pc, #64]	@ (8009d78 <USB_DevInit+0x294>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d005      	beq.n	8009d50 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	f043 0208 	orr.w	r2, r3, #8
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d50:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d107      	bne.n	8009d68 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	699b      	ldr	r3, [r3, #24]
 8009d5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d60:	f043 0304 	orr.w	r3, r3, #4
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d74:	b004      	add	sp, #16
 8009d76:	4770      	bx	lr
 8009d78:	803c3800 	.word	0x803c3800

08009d7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d86:	2300      	movs	r3, #0
 8009d88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d96:	d901      	bls.n	8009d9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e01b      	b.n	8009dd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	daf2      	bge.n	8009d8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009da4:	2300      	movs	r3, #0
 8009da6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	019b      	lsls	r3, r3, #6
 8009dac:	f043 0220 	orr.w	r2, r3, #32
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3301      	adds	r3, #1
 8009db8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009dc0:	d901      	bls.n	8009dc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e006      	b.n	8009dd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	f003 0320 	and.w	r3, r3, #32
 8009dce:	2b20      	cmp	r3, #32
 8009dd0:	d0f0      	beq.n	8009db4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009de8:	2300      	movs	r3, #0
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3301      	adds	r3, #1
 8009df0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009df8:	d901      	bls.n	8009dfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e018      	b.n	8009e30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	daf2      	bge.n	8009dec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2210      	movs	r2, #16
 8009e0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	3301      	adds	r3, #1
 8009e14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e1c:	d901      	bls.n	8009e22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	e006      	b.n	8009e30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	f003 0310 	and.w	r3, r3, #16
 8009e2a:	2b10      	cmp	r3, #16
 8009e2c:	d0f0      	beq.n	8009e10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	78fb      	ldrb	r3, [r7, #3]
 8009e56:	68f9      	ldr	r1, [r7, #12]
 8009e58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b087      	sub	sp, #28
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f003 0306 	and.w	r3, r3, #6
 8009e86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d102      	bne.n	8009e94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	75fb      	strb	r3, [r7, #23]
 8009e92:	e00a      	b.n	8009eaa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d002      	beq.n	8009ea0 <USB_GetDevSpeed+0x32>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2b06      	cmp	r3, #6
 8009e9e:	d102      	bne.n	8009ea6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	75fb      	strb	r3, [r7, #23]
 8009ea4:	e001      	b.n	8009eaa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009ea6:	230f      	movs	r3, #15
 8009ea8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	371c      	adds	r7, #28
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	785b      	ldrb	r3, [r3, #1]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d14a      	bne.n	8009f6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009eea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009eee:	f040 8086 	bne.w	8009ffe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	7812      	ldrb	r2, [r2, #0]
 8009f06:	0151      	lsls	r1, r2, #5
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	440a      	add	r2, r1
 8009f0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	7812      	ldrb	r2, [r2, #0]
 8009f2a:	0151      	lsls	r1, r2, #5
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	440a      	add	r2, r1
 8009f30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d902      	bls.n	8009f50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f4e:	e056      	b.n	8009ffe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f68:	d0e7      	beq.n	8009f3a <USB_EPStopXfer+0x82>
 8009f6a:	e048      	b.n	8009ffe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	015a      	lsls	r2, r3, #5
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	4413      	add	r3, r2
 8009f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f84:	d13b      	bne.n	8009ffe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	015a      	lsls	r2, r3, #5
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	7812      	ldrb	r2, [r2, #0]
 8009f9a:	0151      	lsls	r1, r2, #5
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	440a      	add	r2, r1
 8009fa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fa4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009fa8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	7812      	ldrb	r2, [r2, #0]
 8009fbe:	0151      	lsls	r1, r2, #5
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	440a      	add	r2, r1
 8009fc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009fcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d902      	bls.n	8009fe4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8009fe2:	e00c      	b.n	8009ffe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ffc:	d0e7      	beq.n	8009fce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a000:	4618      	mov	r0, r3
 800a002:	371c      	adds	r7, #28
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b089      	sub	sp, #36	@ 0x24
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	4611      	mov	r1, r2
 800a018:	461a      	mov	r2, r3
 800a01a:	460b      	mov	r3, r1
 800a01c:	71fb      	strb	r3, [r7, #7]
 800a01e:	4613      	mov	r3, r2
 800a020:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a02a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d123      	bne.n	800a07a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a032:	88bb      	ldrh	r3, [r7, #4]
 800a034:	3303      	adds	r3, #3
 800a036:	089b      	lsrs	r3, r3, #2
 800a038:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a03a:	2300      	movs	r3, #0
 800a03c:	61bb      	str	r3, [r7, #24]
 800a03e:	e018      	b.n	800a072 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	031a      	lsls	r2, r3, #12
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	4413      	add	r3, r2
 800a048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a04c:	461a      	mov	r2, r3
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	3301      	adds	r3, #1
 800a058:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	3301      	adds	r3, #1
 800a05e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	3301      	adds	r3, #1
 800a064:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	3301      	adds	r3, #1
 800a06a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	3301      	adds	r3, #1
 800a070:	61bb      	str	r3, [r7, #24]
 800a072:	69ba      	ldr	r2, [r7, #24]
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	429a      	cmp	r2, r3
 800a078:	d3e2      	bcc.n	800a040 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3724      	adds	r7, #36	@ 0x24
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a088:	b480      	push	{r7}
 800a08a:	b08b      	sub	sp, #44	@ 0x2c
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	4613      	mov	r3, r2
 800a094:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a09e:	88fb      	ldrh	r3, [r7, #6]
 800a0a0:	089b      	lsrs	r3, r3, #2
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a0a6:	88fb      	ldrh	r3, [r7, #6]
 800a0a8:	f003 0303 	and.w	r3, r3, #3
 800a0ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	623b      	str	r3, [r7, #32]
 800a0b2:	e014      	b.n	800a0de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	601a      	str	r2, [r3, #0]
    pDest++;
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	623b      	str	r3, [r7, #32]
 800a0de:	6a3a      	ldr	r2, [r7, #32]
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d3e6      	bcc.n	800a0b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a0e6:	8bfb      	ldrh	r3, [r7, #30]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d01e      	beq.n	800a12a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f107 0310 	add.w	r3, r7, #16
 800a0fc:	6812      	ldr	r2, [r2, #0]
 800a0fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a100:	693a      	ldr	r2, [r7, #16]
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	b2db      	uxtb	r3, r3
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	fa22 f303 	lsr.w	r3, r2, r3
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a110:	701a      	strb	r2, [r3, #0]
      i++;
 800a112:	6a3b      	ldr	r3, [r7, #32]
 800a114:	3301      	adds	r3, #1
 800a116:	623b      	str	r3, [r7, #32]
      pDest++;
 800a118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11a:	3301      	adds	r3, #1
 800a11c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a11e:	8bfb      	ldrh	r3, [r7, #30]
 800a120:	3b01      	subs	r3, #1
 800a122:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a124:	8bfb      	ldrh	r3, [r7, #30]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1ea      	bne.n	800a100 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	372c      	adds	r7, #44	@ 0x2c
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a152:	f023 0303 	bic.w	r3, r3, #3
 800a156:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a166:	f043 0302 	orr.w	r3, r3, #2
 800a16a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3714      	adds	r7, #20
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a17a:	b480      	push	{r7}
 800a17c:	b085      	sub	sp, #20
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	4013      	ands	r3, r2
 800a190:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a192:	68fb      	ldr	r3, [r7, #12]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1bc:	69db      	ldr	r3, [r3, #28]
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	0c1b      	lsrs	r3, r3, #16
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	b29b      	uxth	r3, r3
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	460b      	mov	r3, r1
 800a212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a218:	78fb      	ldrb	r3, [r7, #3]
 800a21a:	015a      	lsls	r2, r3, #5
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4413      	add	r3, r2
 800a220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	4013      	ands	r3, r2
 800a234:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a236:	68bb      	ldr	r3, [r7, #8]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a244:	b480      	push	{r7}
 800a246:	b087      	sub	sp, #28
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a266:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a268:	78fb      	ldrb	r3, [r7, #3]
 800a26a:	f003 030f 	and.w	r3, r3, #15
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	fa22 f303 	lsr.w	r3, r2, r3
 800a274:	01db      	lsls	r3, r3, #7
 800a276:	b2db      	uxtb	r3, r3
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a27e:	78fb      	ldrb	r3, [r7, #3]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	4013      	ands	r3, r2
 800a290:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a292:	68bb      	ldr	r3, [r7, #8]
}
 800a294:	4618      	mov	r0, r3
 800a296:	371c      	adds	r7, #28
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	695b      	ldr	r3, [r3, #20]
 800a2ac:	f003 0301 	and.w	r3, r3, #1
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a2da:	f023 0307 	bic.w	r3, r3, #7
 800a2de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
	...

0800a304 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	460b      	mov	r3, r1
 800a30e:	607a      	str	r2, [r7, #4]
 800a310:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	333c      	adds	r3, #60	@ 0x3c
 800a31a:	3304      	adds	r3, #4
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	4a26      	ldr	r2, [pc, #152]	@ (800a3bc <USB_EP0_OutStart+0xb8>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d90a      	bls.n	800a33e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a334:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a338:	d101      	bne.n	800a33e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	e037      	b.n	800a3ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a344:	461a      	mov	r2, r3
 800a346:	2300      	movs	r3, #0
 800a348:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a358:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a35c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a36c:	f043 0318 	orr.w	r3, r3, #24
 800a370:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a380:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a384:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a386:	7afb      	ldrb	r3, [r7, #11]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d10f      	bne.n	800a3ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a392:	461a      	mov	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	697a      	ldr	r2, [r7, #20]
 800a3a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3a6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a3aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	371c      	adds	r7, #28
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	4f54300a 	.word	0x4f54300a

0800a3c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3d8:	d901      	bls.n	800a3de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	e01b      	b.n	800a416 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	daf2      	bge.n	800a3cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	f043 0201 	orr.w	r2, r3, #1
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a402:	d901      	bls.n	800a408 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	e006      	b.n	800a416 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	f003 0301 	and.w	r3, r3, #1
 800a410:	2b01      	cmp	r3, #1
 800a412:	d0f0      	beq.n	800a3f6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
	...

0800a424 <siprintf>:
 800a424:	b40e      	push	{r1, r2, r3}
 800a426:	b500      	push	{lr}
 800a428:	b09c      	sub	sp, #112	@ 0x70
 800a42a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a42e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a430:	9002      	str	r0, [sp, #8]
 800a432:	9006      	str	r0, [sp, #24]
 800a434:	9107      	str	r1, [sp, #28]
 800a436:	9104      	str	r1, [sp, #16]
 800a438:	4808      	ldr	r0, [pc, #32]	@ (800a45c <siprintf+0x38>)
 800a43a:	4909      	ldr	r1, [pc, #36]	@ (800a460 <siprintf+0x3c>)
 800a43c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a440:	9105      	str	r1, [sp, #20]
 800a442:	a902      	add	r1, sp, #8
 800a444:	6800      	ldr	r0, [r0, #0]
 800a446:	9301      	str	r3, [sp, #4]
 800a448:	f000 f994 	bl	800a774 <_svfiprintf_r>
 800a44c:	9b02      	ldr	r3, [sp, #8]
 800a44e:	2200      	movs	r2, #0
 800a450:	701a      	strb	r2, [r3, #0]
 800a452:	b01c      	add	sp, #112	@ 0x70
 800a454:	f85d eb04 	ldr.w	lr, [sp], #4
 800a458:	b003      	add	sp, #12
 800a45a:	4770      	bx	lr
 800a45c:	2000000c 	.word	0x2000000c
 800a460:	ffff0208 	.word	0xffff0208

0800a464 <memset>:
 800a464:	4402      	add	r2, r0
 800a466:	4603      	mov	r3, r0
 800a468:	4293      	cmp	r3, r2
 800a46a:	d100      	bne.n	800a46e <memset+0xa>
 800a46c:	4770      	bx	lr
 800a46e:	f803 1b01 	strb.w	r1, [r3], #1
 800a472:	e7f9      	b.n	800a468 <memset+0x4>

0800a474 <__errno>:
 800a474:	4b01      	ldr	r3, [pc, #4]	@ (800a47c <__errno+0x8>)
 800a476:	6818      	ldr	r0, [r3, #0]
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	2000000c 	.word	0x2000000c

0800a480 <__libc_init_array>:
 800a480:	b570      	push	{r4, r5, r6, lr}
 800a482:	4d0d      	ldr	r5, [pc, #52]	@ (800a4b8 <__libc_init_array+0x38>)
 800a484:	2600      	movs	r6, #0
 800a486:	4c0d      	ldr	r4, [pc, #52]	@ (800a4bc <__libc_init_array+0x3c>)
 800a488:	1b64      	subs	r4, r4, r5
 800a48a:	10a4      	asrs	r4, r4, #2
 800a48c:	42a6      	cmp	r6, r4
 800a48e:	d109      	bne.n	800a4a4 <__libc_init_array+0x24>
 800a490:	4d0b      	ldr	r5, [pc, #44]	@ (800a4c0 <__libc_init_array+0x40>)
 800a492:	2600      	movs	r6, #0
 800a494:	4c0b      	ldr	r4, [pc, #44]	@ (800a4c4 <__libc_init_array+0x44>)
 800a496:	f000 fc77 	bl	800ad88 <_init>
 800a49a:	1b64      	subs	r4, r4, r5
 800a49c:	10a4      	asrs	r4, r4, #2
 800a49e:	42a6      	cmp	r6, r4
 800a4a0:	d105      	bne.n	800a4ae <__libc_init_array+0x2e>
 800a4a2:	bd70      	pop	{r4, r5, r6, pc}
 800a4a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4a8:	3601      	adds	r6, #1
 800a4aa:	4798      	blx	r3
 800a4ac:	e7ee      	b.n	800a48c <__libc_init_array+0xc>
 800a4ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4b2:	3601      	adds	r6, #1
 800a4b4:	4798      	blx	r3
 800a4b6:	e7f2      	b.n	800a49e <__libc_init_array+0x1e>
 800a4b8:	0800aef8 	.word	0x0800aef8
 800a4bc:	0800aef8 	.word	0x0800aef8
 800a4c0:	0800aef8 	.word	0x0800aef8
 800a4c4:	0800aefc 	.word	0x0800aefc

0800a4c8 <__retarget_lock_acquire_recursive>:
 800a4c8:	4770      	bx	lr

0800a4ca <__retarget_lock_release_recursive>:
 800a4ca:	4770      	bx	lr

0800a4cc <_free_r>:
 800a4cc:	b538      	push	{r3, r4, r5, lr}
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	2900      	cmp	r1, #0
 800a4d2:	d041      	beq.n	800a558 <_free_r+0x8c>
 800a4d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4d8:	1f0c      	subs	r4, r1, #4
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	bfb8      	it	lt
 800a4de:	18e4      	addlt	r4, r4, r3
 800a4e0:	f000 f8e0 	bl	800a6a4 <__malloc_lock>
 800a4e4:	4a1d      	ldr	r2, [pc, #116]	@ (800a55c <_free_r+0x90>)
 800a4e6:	6813      	ldr	r3, [r2, #0]
 800a4e8:	b933      	cbnz	r3, 800a4f8 <_free_r+0x2c>
 800a4ea:	6063      	str	r3, [r4, #4]
 800a4ec:	6014      	str	r4, [r2, #0]
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4f4:	f000 b8dc 	b.w	800a6b0 <__malloc_unlock>
 800a4f8:	42a3      	cmp	r3, r4
 800a4fa:	d908      	bls.n	800a50e <_free_r+0x42>
 800a4fc:	6820      	ldr	r0, [r4, #0]
 800a4fe:	1821      	adds	r1, r4, r0
 800a500:	428b      	cmp	r3, r1
 800a502:	bf01      	itttt	eq
 800a504:	6819      	ldreq	r1, [r3, #0]
 800a506:	685b      	ldreq	r3, [r3, #4]
 800a508:	1809      	addeq	r1, r1, r0
 800a50a:	6021      	streq	r1, [r4, #0]
 800a50c:	e7ed      	b.n	800a4ea <_free_r+0x1e>
 800a50e:	461a      	mov	r2, r3
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	b10b      	cbz	r3, 800a518 <_free_r+0x4c>
 800a514:	42a3      	cmp	r3, r4
 800a516:	d9fa      	bls.n	800a50e <_free_r+0x42>
 800a518:	6811      	ldr	r1, [r2, #0]
 800a51a:	1850      	adds	r0, r2, r1
 800a51c:	42a0      	cmp	r0, r4
 800a51e:	d10b      	bne.n	800a538 <_free_r+0x6c>
 800a520:	6820      	ldr	r0, [r4, #0]
 800a522:	4401      	add	r1, r0
 800a524:	1850      	adds	r0, r2, r1
 800a526:	6011      	str	r1, [r2, #0]
 800a528:	4283      	cmp	r3, r0
 800a52a:	d1e0      	bne.n	800a4ee <_free_r+0x22>
 800a52c:	6818      	ldr	r0, [r3, #0]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	4408      	add	r0, r1
 800a532:	6053      	str	r3, [r2, #4]
 800a534:	6010      	str	r0, [r2, #0]
 800a536:	e7da      	b.n	800a4ee <_free_r+0x22>
 800a538:	d902      	bls.n	800a540 <_free_r+0x74>
 800a53a:	230c      	movs	r3, #12
 800a53c:	602b      	str	r3, [r5, #0]
 800a53e:	e7d6      	b.n	800a4ee <_free_r+0x22>
 800a540:	6820      	ldr	r0, [r4, #0]
 800a542:	1821      	adds	r1, r4, r0
 800a544:	428b      	cmp	r3, r1
 800a546:	bf02      	ittt	eq
 800a548:	6819      	ldreq	r1, [r3, #0]
 800a54a:	685b      	ldreq	r3, [r3, #4]
 800a54c:	1809      	addeq	r1, r1, r0
 800a54e:	6063      	str	r3, [r4, #4]
 800a550:	bf08      	it	eq
 800a552:	6021      	streq	r1, [r4, #0]
 800a554:	6054      	str	r4, [r2, #4]
 800a556:	e7ca      	b.n	800a4ee <_free_r+0x22>
 800a558:	bd38      	pop	{r3, r4, r5, pc}
 800a55a:	bf00      	nop
 800a55c:	2000088c 	.word	0x2000088c

0800a560 <sbrk_aligned>:
 800a560:	b570      	push	{r4, r5, r6, lr}
 800a562:	4e0f      	ldr	r6, [pc, #60]	@ (800a5a0 <sbrk_aligned+0x40>)
 800a564:	460c      	mov	r4, r1
 800a566:	4605      	mov	r5, r0
 800a568:	6831      	ldr	r1, [r6, #0]
 800a56a:	b911      	cbnz	r1, 800a572 <sbrk_aligned+0x12>
 800a56c:	f000 fbaa 	bl	800acc4 <_sbrk_r>
 800a570:	6030      	str	r0, [r6, #0]
 800a572:	4621      	mov	r1, r4
 800a574:	4628      	mov	r0, r5
 800a576:	f000 fba5 	bl	800acc4 <_sbrk_r>
 800a57a:	1c43      	adds	r3, r0, #1
 800a57c:	d103      	bne.n	800a586 <sbrk_aligned+0x26>
 800a57e:	f04f 34ff 	mov.w	r4, #4294967295
 800a582:	4620      	mov	r0, r4
 800a584:	bd70      	pop	{r4, r5, r6, pc}
 800a586:	1cc4      	adds	r4, r0, #3
 800a588:	f024 0403 	bic.w	r4, r4, #3
 800a58c:	42a0      	cmp	r0, r4
 800a58e:	d0f8      	beq.n	800a582 <sbrk_aligned+0x22>
 800a590:	1a21      	subs	r1, r4, r0
 800a592:	4628      	mov	r0, r5
 800a594:	f000 fb96 	bl	800acc4 <_sbrk_r>
 800a598:	3001      	adds	r0, #1
 800a59a:	d1f2      	bne.n	800a582 <sbrk_aligned+0x22>
 800a59c:	e7ef      	b.n	800a57e <sbrk_aligned+0x1e>
 800a59e:	bf00      	nop
 800a5a0:	20000888 	.word	0x20000888

0800a5a4 <_malloc_r>:
 800a5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5a8:	1ccd      	adds	r5, r1, #3
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	f025 0503 	bic.w	r5, r5, #3
 800a5b0:	3508      	adds	r5, #8
 800a5b2:	2d0c      	cmp	r5, #12
 800a5b4:	bf38      	it	cc
 800a5b6:	250c      	movcc	r5, #12
 800a5b8:	2d00      	cmp	r5, #0
 800a5ba:	db01      	blt.n	800a5c0 <_malloc_r+0x1c>
 800a5bc:	42a9      	cmp	r1, r5
 800a5be:	d904      	bls.n	800a5ca <_malloc_r+0x26>
 800a5c0:	230c      	movs	r3, #12
 800a5c2:	6033      	str	r3, [r6, #0]
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a6a0 <_malloc_r+0xfc>
 800a5ce:	f000 f869 	bl	800a6a4 <__malloc_lock>
 800a5d2:	f8d8 3000 	ldr.w	r3, [r8]
 800a5d6:	461c      	mov	r4, r3
 800a5d8:	bb44      	cbnz	r4, 800a62c <_malloc_r+0x88>
 800a5da:	4629      	mov	r1, r5
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f7ff ffbf 	bl	800a560 <sbrk_aligned>
 800a5e2:	1c43      	adds	r3, r0, #1
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	d158      	bne.n	800a69a <_malloc_r+0xf6>
 800a5e8:	f8d8 4000 	ldr.w	r4, [r8]
 800a5ec:	4627      	mov	r7, r4
 800a5ee:	2f00      	cmp	r7, #0
 800a5f0:	d143      	bne.n	800a67a <_malloc_r+0xd6>
 800a5f2:	2c00      	cmp	r4, #0
 800a5f4:	d04b      	beq.n	800a68e <_malloc_r+0xea>
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	4639      	mov	r1, r7
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	eb04 0903 	add.w	r9, r4, r3
 800a600:	f000 fb60 	bl	800acc4 <_sbrk_r>
 800a604:	4581      	cmp	r9, r0
 800a606:	d142      	bne.n	800a68e <_malloc_r+0xea>
 800a608:	6821      	ldr	r1, [r4, #0]
 800a60a:	4630      	mov	r0, r6
 800a60c:	1a6d      	subs	r5, r5, r1
 800a60e:	4629      	mov	r1, r5
 800a610:	f7ff ffa6 	bl	800a560 <sbrk_aligned>
 800a614:	3001      	adds	r0, #1
 800a616:	d03a      	beq.n	800a68e <_malloc_r+0xea>
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	442b      	add	r3, r5
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	f8d8 3000 	ldr.w	r3, [r8]
 800a622:	685a      	ldr	r2, [r3, #4]
 800a624:	bb62      	cbnz	r2, 800a680 <_malloc_r+0xdc>
 800a626:	f8c8 7000 	str.w	r7, [r8]
 800a62a:	e00f      	b.n	800a64c <_malloc_r+0xa8>
 800a62c:	6822      	ldr	r2, [r4, #0]
 800a62e:	1b52      	subs	r2, r2, r5
 800a630:	d420      	bmi.n	800a674 <_malloc_r+0xd0>
 800a632:	2a0b      	cmp	r2, #11
 800a634:	d917      	bls.n	800a666 <_malloc_r+0xc2>
 800a636:	1961      	adds	r1, r4, r5
 800a638:	42a3      	cmp	r3, r4
 800a63a:	6025      	str	r5, [r4, #0]
 800a63c:	bf18      	it	ne
 800a63e:	6059      	strne	r1, [r3, #4]
 800a640:	6863      	ldr	r3, [r4, #4]
 800a642:	bf08      	it	eq
 800a644:	f8c8 1000 	streq.w	r1, [r8]
 800a648:	5162      	str	r2, [r4, r5]
 800a64a:	604b      	str	r3, [r1, #4]
 800a64c:	4630      	mov	r0, r6
 800a64e:	f000 f82f 	bl	800a6b0 <__malloc_unlock>
 800a652:	f104 000b 	add.w	r0, r4, #11
 800a656:	1d23      	adds	r3, r4, #4
 800a658:	f020 0007 	bic.w	r0, r0, #7
 800a65c:	1ac2      	subs	r2, r0, r3
 800a65e:	bf1c      	itt	ne
 800a660:	1a1b      	subne	r3, r3, r0
 800a662:	50a3      	strne	r3, [r4, r2]
 800a664:	e7af      	b.n	800a5c6 <_malloc_r+0x22>
 800a666:	6862      	ldr	r2, [r4, #4]
 800a668:	42a3      	cmp	r3, r4
 800a66a:	bf0c      	ite	eq
 800a66c:	f8c8 2000 	streq.w	r2, [r8]
 800a670:	605a      	strne	r2, [r3, #4]
 800a672:	e7eb      	b.n	800a64c <_malloc_r+0xa8>
 800a674:	4623      	mov	r3, r4
 800a676:	6864      	ldr	r4, [r4, #4]
 800a678:	e7ae      	b.n	800a5d8 <_malloc_r+0x34>
 800a67a:	463c      	mov	r4, r7
 800a67c:	687f      	ldr	r7, [r7, #4]
 800a67e:	e7b6      	b.n	800a5ee <_malloc_r+0x4a>
 800a680:	461a      	mov	r2, r3
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	42a3      	cmp	r3, r4
 800a686:	d1fb      	bne.n	800a680 <_malloc_r+0xdc>
 800a688:	2300      	movs	r3, #0
 800a68a:	6053      	str	r3, [r2, #4]
 800a68c:	e7de      	b.n	800a64c <_malloc_r+0xa8>
 800a68e:	230c      	movs	r3, #12
 800a690:	4630      	mov	r0, r6
 800a692:	6033      	str	r3, [r6, #0]
 800a694:	f000 f80c 	bl	800a6b0 <__malloc_unlock>
 800a698:	e794      	b.n	800a5c4 <_malloc_r+0x20>
 800a69a:	6005      	str	r5, [r0, #0]
 800a69c:	e7d6      	b.n	800a64c <_malloc_r+0xa8>
 800a69e:	bf00      	nop
 800a6a0:	2000088c 	.word	0x2000088c

0800a6a4 <__malloc_lock>:
 800a6a4:	4801      	ldr	r0, [pc, #4]	@ (800a6ac <__malloc_lock+0x8>)
 800a6a6:	f7ff bf0f 	b.w	800a4c8 <__retarget_lock_acquire_recursive>
 800a6aa:	bf00      	nop
 800a6ac:	20000884 	.word	0x20000884

0800a6b0 <__malloc_unlock>:
 800a6b0:	4801      	ldr	r0, [pc, #4]	@ (800a6b8 <__malloc_unlock+0x8>)
 800a6b2:	f7ff bf0a 	b.w	800a4ca <__retarget_lock_release_recursive>
 800a6b6:	bf00      	nop
 800a6b8:	20000884 	.word	0x20000884

0800a6bc <__ssputs_r>:
 800a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	461f      	mov	r7, r3
 800a6c2:	688e      	ldr	r6, [r1, #8]
 800a6c4:	4682      	mov	sl, r0
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	42be      	cmp	r6, r7
 800a6ca:	4690      	mov	r8, r2
 800a6cc:	680b      	ldr	r3, [r1, #0]
 800a6ce:	d82d      	bhi.n	800a72c <__ssputs_r+0x70>
 800a6d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a6d8:	d026      	beq.n	800a728 <__ssputs_r+0x6c>
 800a6da:	6965      	ldr	r5, [r4, #20]
 800a6dc:	6909      	ldr	r1, [r1, #16]
 800a6de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6e2:	eba3 0901 	sub.w	r9, r3, r1
 800a6e6:	1c7b      	adds	r3, r7, #1
 800a6e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6ec:	444b      	add	r3, r9
 800a6ee:	106d      	asrs	r5, r5, #1
 800a6f0:	429d      	cmp	r5, r3
 800a6f2:	bf38      	it	cc
 800a6f4:	461d      	movcc	r5, r3
 800a6f6:	0553      	lsls	r3, r2, #21
 800a6f8:	d527      	bpl.n	800a74a <__ssputs_r+0x8e>
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	f7ff ff52 	bl	800a5a4 <_malloc_r>
 800a700:	4606      	mov	r6, r0
 800a702:	b360      	cbz	r0, 800a75e <__ssputs_r+0xa2>
 800a704:	464a      	mov	r2, r9
 800a706:	6921      	ldr	r1, [r4, #16]
 800a708:	f000 fafa 	bl	800ad00 <memcpy>
 800a70c:	89a3      	ldrh	r3, [r4, #12]
 800a70e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a716:	81a3      	strh	r3, [r4, #12]
 800a718:	6126      	str	r6, [r4, #16]
 800a71a:	444e      	add	r6, r9
 800a71c:	6165      	str	r5, [r4, #20]
 800a71e:	eba5 0509 	sub.w	r5, r5, r9
 800a722:	6026      	str	r6, [r4, #0]
 800a724:	463e      	mov	r6, r7
 800a726:	60a5      	str	r5, [r4, #8]
 800a728:	42be      	cmp	r6, r7
 800a72a:	d900      	bls.n	800a72e <__ssputs_r+0x72>
 800a72c:	463e      	mov	r6, r7
 800a72e:	4632      	mov	r2, r6
 800a730:	4641      	mov	r1, r8
 800a732:	6820      	ldr	r0, [r4, #0]
 800a734:	f000 faac 	bl	800ac90 <memmove>
 800a738:	68a3      	ldr	r3, [r4, #8]
 800a73a:	2000      	movs	r0, #0
 800a73c:	1b9b      	subs	r3, r3, r6
 800a73e:	60a3      	str	r3, [r4, #8]
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	4433      	add	r3, r6
 800a744:	6023      	str	r3, [r4, #0]
 800a746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a74a:	462a      	mov	r2, r5
 800a74c:	f000 fae5 	bl	800ad1a <_realloc_r>
 800a750:	4606      	mov	r6, r0
 800a752:	2800      	cmp	r0, #0
 800a754:	d1e0      	bne.n	800a718 <__ssputs_r+0x5c>
 800a756:	6921      	ldr	r1, [r4, #16]
 800a758:	4650      	mov	r0, sl
 800a75a:	f7ff feb7 	bl	800a4cc <_free_r>
 800a75e:	230c      	movs	r3, #12
 800a760:	f04f 30ff 	mov.w	r0, #4294967295
 800a764:	f8ca 3000 	str.w	r3, [sl]
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a76e:	81a3      	strh	r3, [r4, #12]
 800a770:	e7e9      	b.n	800a746 <__ssputs_r+0x8a>
	...

0800a774 <_svfiprintf_r>:
 800a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a778:	4698      	mov	r8, r3
 800a77a:	898b      	ldrh	r3, [r1, #12]
 800a77c:	b09d      	sub	sp, #116	@ 0x74
 800a77e:	4607      	mov	r7, r0
 800a780:	061b      	lsls	r3, r3, #24
 800a782:	460d      	mov	r5, r1
 800a784:	4614      	mov	r4, r2
 800a786:	d510      	bpl.n	800a7aa <_svfiprintf_r+0x36>
 800a788:	690b      	ldr	r3, [r1, #16]
 800a78a:	b973      	cbnz	r3, 800a7aa <_svfiprintf_r+0x36>
 800a78c:	2140      	movs	r1, #64	@ 0x40
 800a78e:	f7ff ff09 	bl	800a5a4 <_malloc_r>
 800a792:	6028      	str	r0, [r5, #0]
 800a794:	6128      	str	r0, [r5, #16]
 800a796:	b930      	cbnz	r0, 800a7a6 <_svfiprintf_r+0x32>
 800a798:	230c      	movs	r3, #12
 800a79a:	603b      	str	r3, [r7, #0]
 800a79c:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a0:	b01d      	add	sp, #116	@ 0x74
 800a7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a6:	2340      	movs	r3, #64	@ 0x40
 800a7a8:	616b      	str	r3, [r5, #20]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b0:	f04f 0901 	mov.w	r9, #1
 800a7b4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800a958 <_svfiprintf_r+0x1e4>
 800a7b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ba:	2320      	movs	r3, #32
 800a7bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7c0:	2330      	movs	r3, #48	@ 0x30
 800a7c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7c6:	4623      	mov	r3, r4
 800a7c8:	469a      	mov	sl, r3
 800a7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ce:	b10a      	cbz	r2, 800a7d4 <_svfiprintf_r+0x60>
 800a7d0:	2a25      	cmp	r2, #37	@ 0x25
 800a7d2:	d1f9      	bne.n	800a7c8 <_svfiprintf_r+0x54>
 800a7d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d8:	d00b      	beq.n	800a7f2 <_svfiprintf_r+0x7e>
 800a7da:	465b      	mov	r3, fp
 800a7dc:	4622      	mov	r2, r4
 800a7de:	4629      	mov	r1, r5
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	f7ff ff6b 	bl	800a6bc <__ssputs_r>
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	f000 80a7 	beq.w	800a93a <_svfiprintf_r+0x1c6>
 800a7ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7ee:	445a      	add	r2, fp
 800a7f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 809f 	beq.w	800a93a <_svfiprintf_r+0x1c6>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a802:	f10a 0a01 	add.w	sl, sl, #1
 800a806:	9304      	str	r3, [sp, #16]
 800a808:	9307      	str	r3, [sp, #28]
 800a80a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a80e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a814:	4654      	mov	r4, sl
 800a816:	2205      	movs	r2, #5
 800a818:	484f      	ldr	r0, [pc, #316]	@ (800a958 <_svfiprintf_r+0x1e4>)
 800a81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81e:	f000 fa61 	bl	800ace4 <memchr>
 800a822:	9a04      	ldr	r2, [sp, #16]
 800a824:	b9d8      	cbnz	r0, 800a85e <_svfiprintf_r+0xea>
 800a826:	06d0      	lsls	r0, r2, #27
 800a828:	bf44      	itt	mi
 800a82a:	2320      	movmi	r3, #32
 800a82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a830:	0711      	lsls	r1, r2, #28
 800a832:	bf44      	itt	mi
 800a834:	232b      	movmi	r3, #43	@ 0x2b
 800a836:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a83a:	f89a 3000 	ldrb.w	r3, [sl]
 800a83e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a840:	d015      	beq.n	800a86e <_svfiprintf_r+0xfa>
 800a842:	9a07      	ldr	r2, [sp, #28]
 800a844:	4654      	mov	r4, sl
 800a846:	2000      	movs	r0, #0
 800a848:	f04f 0c0a 	mov.w	ip, #10
 800a84c:	4621      	mov	r1, r4
 800a84e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a852:	3b30      	subs	r3, #48	@ 0x30
 800a854:	2b09      	cmp	r3, #9
 800a856:	d94b      	bls.n	800a8f0 <_svfiprintf_r+0x17c>
 800a858:	b1b0      	cbz	r0, 800a888 <_svfiprintf_r+0x114>
 800a85a:	9207      	str	r2, [sp, #28]
 800a85c:	e014      	b.n	800a888 <_svfiprintf_r+0x114>
 800a85e:	eba0 0308 	sub.w	r3, r0, r8
 800a862:	46a2      	mov	sl, r4
 800a864:	fa09 f303 	lsl.w	r3, r9, r3
 800a868:	4313      	orrs	r3, r2
 800a86a:	9304      	str	r3, [sp, #16]
 800a86c:	e7d2      	b.n	800a814 <_svfiprintf_r+0xa0>
 800a86e:	9b03      	ldr	r3, [sp, #12]
 800a870:	1d19      	adds	r1, r3, #4
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	9103      	str	r1, [sp, #12]
 800a878:	bfbb      	ittet	lt
 800a87a:	425b      	neglt	r3, r3
 800a87c:	f042 0202 	orrlt.w	r2, r2, #2
 800a880:	9307      	strge	r3, [sp, #28]
 800a882:	9307      	strlt	r3, [sp, #28]
 800a884:	bfb8      	it	lt
 800a886:	9204      	strlt	r2, [sp, #16]
 800a888:	7823      	ldrb	r3, [r4, #0]
 800a88a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a88c:	d10a      	bne.n	800a8a4 <_svfiprintf_r+0x130>
 800a88e:	7863      	ldrb	r3, [r4, #1]
 800a890:	2b2a      	cmp	r3, #42	@ 0x2a
 800a892:	d132      	bne.n	800a8fa <_svfiprintf_r+0x186>
 800a894:	9b03      	ldr	r3, [sp, #12]
 800a896:	3402      	adds	r4, #2
 800a898:	1d1a      	adds	r2, r3, #4
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8a0:	9203      	str	r2, [sp, #12]
 800a8a2:	9305      	str	r3, [sp, #20]
 800a8a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a968 <_svfiprintf_r+0x1f4>
 800a8a8:	2203      	movs	r2, #3
 800a8aa:	7821      	ldrb	r1, [r4, #0]
 800a8ac:	4650      	mov	r0, sl
 800a8ae:	f000 fa19 	bl	800ace4 <memchr>
 800a8b2:	b138      	cbz	r0, 800a8c4 <_svfiprintf_r+0x150>
 800a8b4:	eba0 000a 	sub.w	r0, r0, sl
 800a8b8:	2240      	movs	r2, #64	@ 0x40
 800a8ba:	9b04      	ldr	r3, [sp, #16]
 800a8bc:	3401      	adds	r4, #1
 800a8be:	4082      	lsls	r2, r0
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	9304      	str	r3, [sp, #16]
 800a8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c8:	2206      	movs	r2, #6
 800a8ca:	4824      	ldr	r0, [pc, #144]	@ (800a95c <_svfiprintf_r+0x1e8>)
 800a8cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8d0:	f000 fa08 	bl	800ace4 <memchr>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d036      	beq.n	800a946 <_svfiprintf_r+0x1d2>
 800a8d8:	4b21      	ldr	r3, [pc, #132]	@ (800a960 <_svfiprintf_r+0x1ec>)
 800a8da:	bb1b      	cbnz	r3, 800a924 <_svfiprintf_r+0x1b0>
 800a8dc:	9b03      	ldr	r3, [sp, #12]
 800a8de:	3307      	adds	r3, #7
 800a8e0:	f023 0307 	bic.w	r3, r3, #7
 800a8e4:	3308      	adds	r3, #8
 800a8e6:	9303      	str	r3, [sp, #12]
 800a8e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ea:	4433      	add	r3, r6
 800a8ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8ee:	e76a      	b.n	800a7c6 <_svfiprintf_r+0x52>
 800a8f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	2001      	movs	r0, #1
 800a8f8:	e7a8      	b.n	800a84c <_svfiprintf_r+0xd8>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	3401      	adds	r4, #1
 800a8fe:	f04f 0c0a 	mov.w	ip, #10
 800a902:	4619      	mov	r1, r3
 800a904:	9305      	str	r3, [sp, #20]
 800a906:	4620      	mov	r0, r4
 800a908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a90c:	3a30      	subs	r2, #48	@ 0x30
 800a90e:	2a09      	cmp	r2, #9
 800a910:	d903      	bls.n	800a91a <_svfiprintf_r+0x1a6>
 800a912:	2b00      	cmp	r3, #0
 800a914:	d0c6      	beq.n	800a8a4 <_svfiprintf_r+0x130>
 800a916:	9105      	str	r1, [sp, #20]
 800a918:	e7c4      	b.n	800a8a4 <_svfiprintf_r+0x130>
 800a91a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a91e:	4604      	mov	r4, r0
 800a920:	2301      	movs	r3, #1
 800a922:	e7f0      	b.n	800a906 <_svfiprintf_r+0x192>
 800a924:	ab03      	add	r3, sp, #12
 800a926:	462a      	mov	r2, r5
 800a928:	a904      	add	r1, sp, #16
 800a92a:	4638      	mov	r0, r7
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	4b0d      	ldr	r3, [pc, #52]	@ (800a964 <_svfiprintf_r+0x1f0>)
 800a930:	f3af 8000 	nop.w
 800a934:	1c42      	adds	r2, r0, #1
 800a936:	4606      	mov	r6, r0
 800a938:	d1d6      	bne.n	800a8e8 <_svfiprintf_r+0x174>
 800a93a:	89ab      	ldrh	r3, [r5, #12]
 800a93c:	065b      	lsls	r3, r3, #25
 800a93e:	f53f af2d 	bmi.w	800a79c <_svfiprintf_r+0x28>
 800a942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a944:	e72c      	b.n	800a7a0 <_svfiprintf_r+0x2c>
 800a946:	ab03      	add	r3, sp, #12
 800a948:	462a      	mov	r2, r5
 800a94a:	a904      	add	r1, sp, #16
 800a94c:	4638      	mov	r0, r7
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	4b04      	ldr	r3, [pc, #16]	@ (800a964 <_svfiprintf_r+0x1f0>)
 800a952:	f000 f87d 	bl	800aa50 <_printf_i>
 800a956:	e7ed      	b.n	800a934 <_svfiprintf_r+0x1c0>
 800a958:	0800aebc 	.word	0x0800aebc
 800a95c:	0800aec6 	.word	0x0800aec6
 800a960:	00000000 	.word	0x00000000
 800a964:	0800a6bd 	.word	0x0800a6bd
 800a968:	0800aec2 	.word	0x0800aec2

0800a96c <_printf_common>:
 800a96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a970:	4616      	mov	r6, r2
 800a972:	4698      	mov	r8, r3
 800a974:	688a      	ldr	r2, [r1, #8]
 800a976:	4607      	mov	r7, r0
 800a978:	690b      	ldr	r3, [r1, #16]
 800a97a:	460c      	mov	r4, r1
 800a97c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a980:	4293      	cmp	r3, r2
 800a982:	bfb8      	it	lt
 800a984:	4613      	movlt	r3, r2
 800a986:	6033      	str	r3, [r6, #0]
 800a988:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a98c:	b10a      	cbz	r2, 800a992 <_printf_common+0x26>
 800a98e:	3301      	adds	r3, #1
 800a990:	6033      	str	r3, [r6, #0]
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	0699      	lsls	r1, r3, #26
 800a996:	bf42      	ittt	mi
 800a998:	6833      	ldrmi	r3, [r6, #0]
 800a99a:	3302      	addmi	r3, #2
 800a99c:	6033      	strmi	r3, [r6, #0]
 800a99e:	6825      	ldr	r5, [r4, #0]
 800a9a0:	f015 0506 	ands.w	r5, r5, #6
 800a9a4:	d106      	bne.n	800a9b4 <_printf_common+0x48>
 800a9a6:	f104 0a19 	add.w	sl, r4, #25
 800a9aa:	68e3      	ldr	r3, [r4, #12]
 800a9ac:	6832      	ldr	r2, [r6, #0]
 800a9ae:	1a9b      	subs	r3, r3, r2
 800a9b0:	42ab      	cmp	r3, r5
 800a9b2:	dc2b      	bgt.n	800aa0c <_printf_common+0xa0>
 800a9b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a9b8:	6822      	ldr	r2, [r4, #0]
 800a9ba:	3b00      	subs	r3, #0
 800a9bc:	bf18      	it	ne
 800a9be:	2301      	movne	r3, #1
 800a9c0:	0692      	lsls	r2, r2, #26
 800a9c2:	d430      	bmi.n	800aa26 <_printf_common+0xba>
 800a9c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a9c8:	4641      	mov	r1, r8
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	47c8      	blx	r9
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	d023      	beq.n	800aa1a <_printf_common+0xae>
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	341a      	adds	r4, #26
 800a9d6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a9da:	f003 0306 	and.w	r3, r3, #6
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	bf0a      	itet	eq
 800a9e2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a9e6:	2500      	movne	r5, #0
 800a9e8:	6833      	ldreq	r3, [r6, #0]
 800a9ea:	f04f 0600 	mov.w	r6, #0
 800a9ee:	bf08      	it	eq
 800a9f0:	1aed      	subeq	r5, r5, r3
 800a9f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a9f6:	bf08      	it	eq
 800a9f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	bfc4      	itt	gt
 800aa00:	1a9b      	subgt	r3, r3, r2
 800aa02:	18ed      	addgt	r5, r5, r3
 800aa04:	42b5      	cmp	r5, r6
 800aa06:	d11a      	bne.n	800aa3e <_printf_common+0xd2>
 800aa08:	2000      	movs	r0, #0
 800aa0a:	e008      	b.n	800aa1e <_printf_common+0xb2>
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	4652      	mov	r2, sl
 800aa10:	4641      	mov	r1, r8
 800aa12:	4638      	mov	r0, r7
 800aa14:	47c8      	blx	r9
 800aa16:	3001      	adds	r0, #1
 800aa18:	d103      	bne.n	800aa22 <_printf_common+0xb6>
 800aa1a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa22:	3501      	adds	r5, #1
 800aa24:	e7c1      	b.n	800a9aa <_printf_common+0x3e>
 800aa26:	18e1      	adds	r1, r4, r3
 800aa28:	1c5a      	adds	r2, r3, #1
 800aa2a:	2030      	movs	r0, #48	@ 0x30
 800aa2c:	3302      	adds	r3, #2
 800aa2e:	4422      	add	r2, r4
 800aa30:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa3c:	e7c2      	b.n	800a9c4 <_printf_common+0x58>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	4622      	mov	r2, r4
 800aa42:	4641      	mov	r1, r8
 800aa44:	4638      	mov	r0, r7
 800aa46:	47c8      	blx	r9
 800aa48:	3001      	adds	r0, #1
 800aa4a:	d0e6      	beq.n	800aa1a <_printf_common+0xae>
 800aa4c:	3601      	adds	r6, #1
 800aa4e:	e7d9      	b.n	800aa04 <_printf_common+0x98>

0800aa50 <_printf_i>:
 800aa50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa54:	7e0f      	ldrb	r7, [r1, #24]
 800aa56:	4691      	mov	r9, r2
 800aa58:	4680      	mov	r8, r0
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	2f78      	cmp	r7, #120	@ 0x78
 800aa5e:	469a      	mov	sl, r3
 800aa60:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa66:	d807      	bhi.n	800aa78 <_printf_i+0x28>
 800aa68:	2f62      	cmp	r7, #98	@ 0x62
 800aa6a:	d80a      	bhi.n	800aa82 <_printf_i+0x32>
 800aa6c:	2f00      	cmp	r7, #0
 800aa6e:	f000 80d2 	beq.w	800ac16 <_printf_i+0x1c6>
 800aa72:	2f58      	cmp	r7, #88	@ 0x58
 800aa74:	f000 80b9 	beq.w	800abea <_printf_i+0x19a>
 800aa78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa80:	e03a      	b.n	800aaf8 <_printf_i+0xa8>
 800aa82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa86:	2b15      	cmp	r3, #21
 800aa88:	d8f6      	bhi.n	800aa78 <_printf_i+0x28>
 800aa8a:	a101      	add	r1, pc, #4	@ (adr r1, 800aa90 <_printf_i+0x40>)
 800aa8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa90:	0800aae9 	.word	0x0800aae9
 800aa94:	0800aafd 	.word	0x0800aafd
 800aa98:	0800aa79 	.word	0x0800aa79
 800aa9c:	0800aa79 	.word	0x0800aa79
 800aaa0:	0800aa79 	.word	0x0800aa79
 800aaa4:	0800aa79 	.word	0x0800aa79
 800aaa8:	0800aafd 	.word	0x0800aafd
 800aaac:	0800aa79 	.word	0x0800aa79
 800aab0:	0800aa79 	.word	0x0800aa79
 800aab4:	0800aa79 	.word	0x0800aa79
 800aab8:	0800aa79 	.word	0x0800aa79
 800aabc:	0800abfd 	.word	0x0800abfd
 800aac0:	0800ab27 	.word	0x0800ab27
 800aac4:	0800abb7 	.word	0x0800abb7
 800aac8:	0800aa79 	.word	0x0800aa79
 800aacc:	0800aa79 	.word	0x0800aa79
 800aad0:	0800ac1f 	.word	0x0800ac1f
 800aad4:	0800aa79 	.word	0x0800aa79
 800aad8:	0800ab27 	.word	0x0800ab27
 800aadc:	0800aa79 	.word	0x0800aa79
 800aae0:	0800aa79 	.word	0x0800aa79
 800aae4:	0800abbf 	.word	0x0800abbf
 800aae8:	6833      	ldr	r3, [r6, #0]
 800aaea:	1d1a      	adds	r2, r3, #4
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6032      	str	r2, [r6, #0]
 800aaf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aaf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e09d      	b.n	800ac38 <_printf_i+0x1e8>
 800aafc:	6833      	ldr	r3, [r6, #0]
 800aafe:	6820      	ldr	r0, [r4, #0]
 800ab00:	1d19      	adds	r1, r3, #4
 800ab02:	6031      	str	r1, [r6, #0]
 800ab04:	0606      	lsls	r6, r0, #24
 800ab06:	d501      	bpl.n	800ab0c <_printf_i+0xbc>
 800ab08:	681d      	ldr	r5, [r3, #0]
 800ab0a:	e003      	b.n	800ab14 <_printf_i+0xc4>
 800ab0c:	0645      	lsls	r5, r0, #25
 800ab0e:	d5fb      	bpl.n	800ab08 <_printf_i+0xb8>
 800ab10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab14:	2d00      	cmp	r5, #0
 800ab16:	da03      	bge.n	800ab20 <_printf_i+0xd0>
 800ab18:	232d      	movs	r3, #45	@ 0x2d
 800ab1a:	426d      	negs	r5, r5
 800ab1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab20:	4859      	ldr	r0, [pc, #356]	@ (800ac88 <_printf_i+0x238>)
 800ab22:	230a      	movs	r3, #10
 800ab24:	e011      	b.n	800ab4a <_printf_i+0xfa>
 800ab26:	6821      	ldr	r1, [r4, #0]
 800ab28:	6833      	ldr	r3, [r6, #0]
 800ab2a:	0608      	lsls	r0, r1, #24
 800ab2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab30:	d402      	bmi.n	800ab38 <_printf_i+0xe8>
 800ab32:	0649      	lsls	r1, r1, #25
 800ab34:	bf48      	it	mi
 800ab36:	b2ad      	uxthmi	r5, r5
 800ab38:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab3a:	6033      	str	r3, [r6, #0]
 800ab3c:	4852      	ldr	r0, [pc, #328]	@ (800ac88 <_printf_i+0x238>)
 800ab3e:	bf14      	ite	ne
 800ab40:	230a      	movne	r3, #10
 800ab42:	2308      	moveq	r3, #8
 800ab44:	2100      	movs	r1, #0
 800ab46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab4a:	6866      	ldr	r6, [r4, #4]
 800ab4c:	2e00      	cmp	r6, #0
 800ab4e:	60a6      	str	r6, [r4, #8]
 800ab50:	bfa2      	ittt	ge
 800ab52:	6821      	ldrge	r1, [r4, #0]
 800ab54:	f021 0104 	bicge.w	r1, r1, #4
 800ab58:	6021      	strge	r1, [r4, #0]
 800ab5a:	b90d      	cbnz	r5, 800ab60 <_printf_i+0x110>
 800ab5c:	2e00      	cmp	r6, #0
 800ab5e:	d04b      	beq.n	800abf8 <_printf_i+0x1a8>
 800ab60:	4616      	mov	r6, r2
 800ab62:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab66:	fb03 5711 	mls	r7, r3, r1, r5
 800ab6a:	5dc7      	ldrb	r7, [r0, r7]
 800ab6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab70:	462f      	mov	r7, r5
 800ab72:	460d      	mov	r5, r1
 800ab74:	42bb      	cmp	r3, r7
 800ab76:	d9f4      	bls.n	800ab62 <_printf_i+0x112>
 800ab78:	2b08      	cmp	r3, #8
 800ab7a:	d10b      	bne.n	800ab94 <_printf_i+0x144>
 800ab7c:	6823      	ldr	r3, [r4, #0]
 800ab7e:	07df      	lsls	r7, r3, #31
 800ab80:	d508      	bpl.n	800ab94 <_printf_i+0x144>
 800ab82:	6923      	ldr	r3, [r4, #16]
 800ab84:	6861      	ldr	r1, [r4, #4]
 800ab86:	4299      	cmp	r1, r3
 800ab88:	bfde      	ittt	le
 800ab8a:	2330      	movle	r3, #48	@ 0x30
 800ab8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab90:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab94:	1b92      	subs	r2, r2, r6
 800ab96:	6122      	str	r2, [r4, #16]
 800ab98:	464b      	mov	r3, r9
 800ab9a:	aa03      	add	r2, sp, #12
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	4640      	mov	r0, r8
 800aba0:	f8cd a000 	str.w	sl, [sp]
 800aba4:	f7ff fee2 	bl	800a96c <_printf_common>
 800aba8:	3001      	adds	r0, #1
 800abaa:	d14a      	bne.n	800ac42 <_printf_i+0x1f2>
 800abac:	f04f 30ff 	mov.w	r0, #4294967295
 800abb0:	b004      	add	sp, #16
 800abb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	f043 0320 	orr.w	r3, r3, #32
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	2778      	movs	r7, #120	@ 0x78
 800abc0:	4832      	ldr	r0, [pc, #200]	@ (800ac8c <_printf_i+0x23c>)
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800abc8:	061f      	lsls	r7, r3, #24
 800abca:	6831      	ldr	r1, [r6, #0]
 800abcc:	f851 5b04 	ldr.w	r5, [r1], #4
 800abd0:	d402      	bmi.n	800abd8 <_printf_i+0x188>
 800abd2:	065f      	lsls	r7, r3, #25
 800abd4:	bf48      	it	mi
 800abd6:	b2ad      	uxthmi	r5, r5
 800abd8:	6031      	str	r1, [r6, #0]
 800abda:	07d9      	lsls	r1, r3, #31
 800abdc:	bf44      	itt	mi
 800abde:	f043 0320 	orrmi.w	r3, r3, #32
 800abe2:	6023      	strmi	r3, [r4, #0]
 800abe4:	b11d      	cbz	r5, 800abee <_printf_i+0x19e>
 800abe6:	2310      	movs	r3, #16
 800abe8:	e7ac      	b.n	800ab44 <_printf_i+0xf4>
 800abea:	4827      	ldr	r0, [pc, #156]	@ (800ac88 <_printf_i+0x238>)
 800abec:	e7e9      	b.n	800abc2 <_printf_i+0x172>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	f023 0320 	bic.w	r3, r3, #32
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	e7f6      	b.n	800abe6 <_printf_i+0x196>
 800abf8:	4616      	mov	r6, r2
 800abfa:	e7bd      	b.n	800ab78 <_printf_i+0x128>
 800abfc:	6833      	ldr	r3, [r6, #0]
 800abfe:	6825      	ldr	r5, [r4, #0]
 800ac00:	1d18      	adds	r0, r3, #4
 800ac02:	6961      	ldr	r1, [r4, #20]
 800ac04:	6030      	str	r0, [r6, #0]
 800ac06:	062e      	lsls	r6, r5, #24
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	d501      	bpl.n	800ac10 <_printf_i+0x1c0>
 800ac0c:	6019      	str	r1, [r3, #0]
 800ac0e:	e002      	b.n	800ac16 <_printf_i+0x1c6>
 800ac10:	0668      	lsls	r0, r5, #25
 800ac12:	d5fb      	bpl.n	800ac0c <_printf_i+0x1bc>
 800ac14:	8019      	strh	r1, [r3, #0]
 800ac16:	2300      	movs	r3, #0
 800ac18:	4616      	mov	r6, r2
 800ac1a:	6123      	str	r3, [r4, #16]
 800ac1c:	e7bc      	b.n	800ab98 <_printf_i+0x148>
 800ac1e:	6833      	ldr	r3, [r6, #0]
 800ac20:	2100      	movs	r1, #0
 800ac22:	1d1a      	adds	r2, r3, #4
 800ac24:	6032      	str	r2, [r6, #0]
 800ac26:	681e      	ldr	r6, [r3, #0]
 800ac28:	6862      	ldr	r2, [r4, #4]
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f000 f85a 	bl	800ace4 <memchr>
 800ac30:	b108      	cbz	r0, 800ac36 <_printf_i+0x1e6>
 800ac32:	1b80      	subs	r0, r0, r6
 800ac34:	6060      	str	r0, [r4, #4]
 800ac36:	6863      	ldr	r3, [r4, #4]
 800ac38:	6123      	str	r3, [r4, #16]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac40:	e7aa      	b.n	800ab98 <_printf_i+0x148>
 800ac42:	6923      	ldr	r3, [r4, #16]
 800ac44:	4632      	mov	r2, r6
 800ac46:	4649      	mov	r1, r9
 800ac48:	4640      	mov	r0, r8
 800ac4a:	47d0      	blx	sl
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	d0ad      	beq.n	800abac <_printf_i+0x15c>
 800ac50:	6823      	ldr	r3, [r4, #0]
 800ac52:	079b      	lsls	r3, r3, #30
 800ac54:	d413      	bmi.n	800ac7e <_printf_i+0x22e>
 800ac56:	68e0      	ldr	r0, [r4, #12]
 800ac58:	9b03      	ldr	r3, [sp, #12]
 800ac5a:	4298      	cmp	r0, r3
 800ac5c:	bfb8      	it	lt
 800ac5e:	4618      	movlt	r0, r3
 800ac60:	e7a6      	b.n	800abb0 <_printf_i+0x160>
 800ac62:	2301      	movs	r3, #1
 800ac64:	4632      	mov	r2, r6
 800ac66:	4649      	mov	r1, r9
 800ac68:	4640      	mov	r0, r8
 800ac6a:	47d0      	blx	sl
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	d09d      	beq.n	800abac <_printf_i+0x15c>
 800ac70:	3501      	adds	r5, #1
 800ac72:	68e3      	ldr	r3, [r4, #12]
 800ac74:	9903      	ldr	r1, [sp, #12]
 800ac76:	1a5b      	subs	r3, r3, r1
 800ac78:	42ab      	cmp	r3, r5
 800ac7a:	dcf2      	bgt.n	800ac62 <_printf_i+0x212>
 800ac7c:	e7eb      	b.n	800ac56 <_printf_i+0x206>
 800ac7e:	2500      	movs	r5, #0
 800ac80:	f104 0619 	add.w	r6, r4, #25
 800ac84:	e7f5      	b.n	800ac72 <_printf_i+0x222>
 800ac86:	bf00      	nop
 800ac88:	0800aecd 	.word	0x0800aecd
 800ac8c:	0800aede 	.word	0x0800aede

0800ac90 <memmove>:
 800ac90:	4288      	cmp	r0, r1
 800ac92:	b510      	push	{r4, lr}
 800ac94:	eb01 0402 	add.w	r4, r1, r2
 800ac98:	d902      	bls.n	800aca0 <memmove+0x10>
 800ac9a:	4284      	cmp	r4, r0
 800ac9c:	4623      	mov	r3, r4
 800ac9e:	d807      	bhi.n	800acb0 <memmove+0x20>
 800aca0:	1e43      	subs	r3, r0, #1
 800aca2:	42a1      	cmp	r1, r4
 800aca4:	d008      	beq.n	800acb8 <memmove+0x28>
 800aca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acae:	e7f8      	b.n	800aca2 <memmove+0x12>
 800acb0:	4402      	add	r2, r0
 800acb2:	4601      	mov	r1, r0
 800acb4:	428a      	cmp	r2, r1
 800acb6:	d100      	bne.n	800acba <memmove+0x2a>
 800acb8:	bd10      	pop	{r4, pc}
 800acba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acc2:	e7f7      	b.n	800acb4 <memmove+0x24>

0800acc4 <_sbrk_r>:
 800acc4:	b538      	push	{r3, r4, r5, lr}
 800acc6:	2300      	movs	r3, #0
 800acc8:	4d05      	ldr	r5, [pc, #20]	@ (800ace0 <_sbrk_r+0x1c>)
 800acca:	4604      	mov	r4, r0
 800accc:	4608      	mov	r0, r1
 800acce:	602b      	str	r3, [r5, #0]
 800acd0:	f7f6 fa00 	bl	80010d4 <_sbrk>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	d102      	bne.n	800acde <_sbrk_r+0x1a>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	b103      	cbz	r3, 800acde <_sbrk_r+0x1a>
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	20000880 	.word	0x20000880

0800ace4 <memchr>:
 800ace4:	b2c9      	uxtb	r1, r1
 800ace6:	4603      	mov	r3, r0
 800ace8:	4402      	add	r2, r0
 800acea:	b510      	push	{r4, lr}
 800acec:	4293      	cmp	r3, r2
 800acee:	4618      	mov	r0, r3
 800acf0:	d101      	bne.n	800acf6 <memchr+0x12>
 800acf2:	2000      	movs	r0, #0
 800acf4:	e003      	b.n	800acfe <memchr+0x1a>
 800acf6:	7804      	ldrb	r4, [r0, #0]
 800acf8:	3301      	adds	r3, #1
 800acfa:	428c      	cmp	r4, r1
 800acfc:	d1f6      	bne.n	800acec <memchr+0x8>
 800acfe:	bd10      	pop	{r4, pc}

0800ad00 <memcpy>:
 800ad00:	440a      	add	r2, r1
 800ad02:	1e43      	subs	r3, r0, #1
 800ad04:	4291      	cmp	r1, r2
 800ad06:	d100      	bne.n	800ad0a <memcpy+0xa>
 800ad08:	4770      	bx	lr
 800ad0a:	b510      	push	{r4, lr}
 800ad0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad10:	4291      	cmp	r1, r2
 800ad12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad16:	d1f9      	bne.n	800ad0c <memcpy+0xc>
 800ad18:	bd10      	pop	{r4, pc}

0800ad1a <_realloc_r>:
 800ad1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1e:	4680      	mov	r8, r0
 800ad20:	4615      	mov	r5, r2
 800ad22:	460c      	mov	r4, r1
 800ad24:	b921      	cbnz	r1, 800ad30 <_realloc_r+0x16>
 800ad26:	4611      	mov	r1, r2
 800ad28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2c:	f7ff bc3a 	b.w	800a5a4 <_malloc_r>
 800ad30:	b92a      	cbnz	r2, 800ad3e <_realloc_r+0x24>
 800ad32:	f7ff fbcb 	bl	800a4cc <_free_r>
 800ad36:	2400      	movs	r4, #0
 800ad38:	4620      	mov	r0, r4
 800ad3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad3e:	f000 f81a 	bl	800ad76 <_malloc_usable_size_r>
 800ad42:	4285      	cmp	r5, r0
 800ad44:	4606      	mov	r6, r0
 800ad46:	d802      	bhi.n	800ad4e <_realloc_r+0x34>
 800ad48:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad4c:	d8f4      	bhi.n	800ad38 <_realloc_r+0x1e>
 800ad4e:	4629      	mov	r1, r5
 800ad50:	4640      	mov	r0, r8
 800ad52:	f7ff fc27 	bl	800a5a4 <_malloc_r>
 800ad56:	4607      	mov	r7, r0
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d0ec      	beq.n	800ad36 <_realloc_r+0x1c>
 800ad5c:	42b5      	cmp	r5, r6
 800ad5e:	462a      	mov	r2, r5
 800ad60:	4621      	mov	r1, r4
 800ad62:	bf28      	it	cs
 800ad64:	4632      	movcs	r2, r6
 800ad66:	f7ff ffcb 	bl	800ad00 <memcpy>
 800ad6a:	4621      	mov	r1, r4
 800ad6c:	4640      	mov	r0, r8
 800ad6e:	463c      	mov	r4, r7
 800ad70:	f7ff fbac 	bl	800a4cc <_free_r>
 800ad74:	e7e0      	b.n	800ad38 <_realloc_r+0x1e>

0800ad76 <_malloc_usable_size_r>:
 800ad76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad7a:	1f18      	subs	r0, r3, #4
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	bfbc      	itt	lt
 800ad80:	580b      	ldrlt	r3, [r1, r0]
 800ad82:	18c0      	addlt	r0, r0, r3
 800ad84:	4770      	bx	lr
	...

0800ad88 <_init>:
 800ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8a:	bf00      	nop
 800ad8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad8e:	bc08      	pop	{r3}
 800ad90:	469e      	mov	lr, r3
 800ad92:	4770      	bx	lr

0800ad94 <_fini>:
 800ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad96:	bf00      	nop
 800ad98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad9a:	bc08      	pop	{r3}
 800ad9c:	469e      	mov	lr, r3
 800ad9e:	4770      	bx	lr
