
RIDE_Drone_Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b588  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000173  0800b7c0  0800b7c0  0000c7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b934  0800b934  0000c934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b93c  0800b93c  0000c93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b940  0800b940  0000c940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000000  0800b944  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000830  20000068  0800b9ac  0000d068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000898  0800b9ac  0000d898  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 10 .debug_info   000193ae  00000000  00000000  0000d09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000031ca  00000000  00000000  0002644c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013d0  00000000  00000000  00029618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f31  00000000  00000000  0002a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003790d  00000000  00000000  0002b919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000195bb  00000000  00000000  00063226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c85f  00000000  00000000  0007c7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d9040  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d64  00000000  00000000  001d9084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000089  00000000  00000000  001dede8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000068 	.word	0x20000068
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b7a8 	.word	0x0800b7a8

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000006c 	.word	0x2000006c
 8000274:	0800b7a8 	.word	0x0800b7a8

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b97e 	b.w	800059c <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	460c      	mov	r4, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14d      	bne.n	8000360 <__udivmoddi4+0xa8>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	460f      	mov	r7, r1
 80002c8:	4684      	mov	ip, r0
 80002ca:	4696      	mov	lr, r2
 80002cc:	fab2 f382 	clz	r3, r2
 80002d0:	d960      	bls.n	8000394 <__udivmoddi4+0xdc>
 80002d2:	b14b      	cbz	r3, 80002e8 <__udivmoddi4+0x30>
 80002d4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002d8:	f1c3 0220 	rsb	r2, r3, #32
 80002dc:	409f      	lsls	r7, r3
 80002de:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e2:	fa20 f202 	lsr.w	r2, r0, r2
 80002e6:	4317      	orrs	r7, r2
 80002e8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002ec:	fa1f f48e 	uxth.w	r4, lr
 80002f0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002f8:	fb06 7711 	mls	r7, r6, r1, r7
 80002fc:	fb01 f004 	mul.w	r0, r1, r4
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x62>
 8000308:	eb1e 0202 	adds.w	r2, lr, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x60>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 812d 	bhi.w	8000572 <__udivmoddi4+0x2ba>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fa1f fc8c 	uxth.w	ip, ip
 8000320:	fbb2 f0f6 	udiv	r0, r2, r6
 8000324:	fb06 2210 	mls	r2, r6, r0, r2
 8000328:	fb00 f404 	mul.w	r4, r0, r4
 800032c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000330:	4564      	cmp	r4, ip
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x8e>
 8000334:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x8c>
 800033e:	4564      	cmp	r4, ip
 8000340:	f200 811a 	bhi.w	8000578 <__udivmoddi4+0x2c0>
 8000344:	4610      	mov	r0, r2
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	ebac 0c04 	sub.w	ip, ip, r4
 800034e:	2100      	movs	r1, #0
 8000350:	b125      	cbz	r5, 800035c <__udivmoddi4+0xa4>
 8000352:	fa2c f303 	lsr.w	r3, ip, r3
 8000356:	2200      	movs	r2, #0
 8000358:	e9c5 3200 	strd	r3, r2, [r5]
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	428b      	cmp	r3, r1
 8000362:	d905      	bls.n	8000370 <__udivmoddi4+0xb8>
 8000364:	b10d      	cbz	r5, 800036a <__udivmoddi4+0xb2>
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	2100      	movs	r1, #0
 800036c:	4608      	mov	r0, r1
 800036e:	e7f5      	b.n	800035c <__udivmoddi4+0xa4>
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14d      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000378:	42a3      	cmp	r3, r4
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2aa>
 800037e:	4290      	cmp	r0, r2
 8000380:	f080 80ef 	bcs.w	8000562 <__udivmoddi4+0x2aa>
 8000384:	4606      	mov	r6, r0
 8000386:	4623      	mov	r3, r4
 8000388:	4608      	mov	r0, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0e6      	beq.n	800035c <__udivmoddi4+0xa4>
 800038e:	e9c5 6300 	strd	r6, r3, [r5]
 8000392:	e7e3      	b.n	800035c <__udivmoddi4+0xa4>
 8000394:	2b00      	cmp	r3, #0
 8000396:	f040 80a2 	bne.w	80004de <__udivmoddi4+0x226>
 800039a:	1a8a      	subs	r2, r1, r2
 800039c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a0:	fa1f f68e 	uxth.w	r6, lr
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003aa:	fb07 2014 	mls	r0, r7, r4, r2
 80003ae:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b6:	fb06 f004 	mul.w	r0, r6, r4
 80003ba:	4290      	cmp	r0, r2
 80003bc:	d90f      	bls.n	80003de <__udivmoddi4+0x126>
 80003be:	eb1e 0202 	adds.w	r2, lr, r2
 80003c2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	4290      	cmp	r0, r2
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80c8 	beq.w	800056c <__udivmoddi4+0x2b4>
 80003dc:	4644      	mov	r4, r8
 80003de:	1a12      	subs	r2, r2, r0
 80003e0:	fa1f fc8c 	uxth.w	ip, ip
 80003e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e8:	fb07 2210 	mls	r2, r7, r0, r2
 80003ec:	fb00 f606 	mul.w	r6, r0, r6
 80003f0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f4:	4566      	cmp	r6, ip
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x152>
 80003f8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x150>
 8000402:	4566      	cmp	r6, ip
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2c6>
 8000408:	4610      	mov	r0, r2
 800040a:	ebac 0c06 	sub.w	ip, ip, r6
 800040e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa04 fe01 	lsl.w	lr, r4, r1
 800041e:	fa22 f706 	lsr.w	r7, r2, r6
 8000422:	fa20 fc06 	lsr.w	ip, r0, r6
 8000426:	40f4      	lsrs	r4, r6
 8000428:	408a      	lsls	r2, r1
 800042a:	431f      	orrs	r7, r3
 800042c:	ea4e 030c 	orr.w	r3, lr, ip
 8000430:	fa00 fe01 	lsl.w	lr, r0, r1
 8000434:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fa1f fc87 	uxth.w	ip, r7
 8000440:	fbb4 f0f8 	udiv	r0, r4, r8
 8000444:	fb08 4410 	mls	r4, r8, r0, r4
 8000448:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044c:	fb00 f90c 	mul.w	r9, r0, ip
 8000450:	45a1      	cmp	r9, r4
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1ba>
 8000454:	193c      	adds	r4, r7, r4
 8000456:	f100 3aff 	add.w	sl, r0, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a1      	cmp	r9, r4
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b8>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 8093 	beq.w	8000596 <__udivmoddi4+0x2de>
 8000470:	4650      	mov	r0, sl
 8000472:	eba4 0409 	sub.w	r4, r4, r9
 8000476:	fa1f f983 	uxth.w	r9, r3
 800047a:	fbb4 f3f8 	udiv	r3, r4, r8
 800047e:	fb08 4413 	mls	r4, r8, r3, r4
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	45a4      	cmp	ip, r4
 800048c:	d906      	bls.n	800049c <__udivmoddi4+0x1e4>
 800048e:	193c      	adds	r4, r7, r4
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295
 8000494:	d201      	bcs.n	800049a <__udivmoddi4+0x1e2>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d87a      	bhi.n	8000590 <__udivmoddi4+0x2d8>
 800049a:	4643      	mov	r3, r8
 800049c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a0:	eba4 040c 	sub.w	r4, r4, ip
 80004a4:	fba0 9802 	umull	r9, r8, r0, r2
 80004a8:	4544      	cmp	r4, r8
 80004aa:	46cc      	mov	ip, r9
 80004ac:	4643      	mov	r3, r8
 80004ae:	d302      	bcc.n	80004b6 <__udivmoddi4+0x1fe>
 80004b0:	d106      	bne.n	80004c0 <__udivmoddi4+0x208>
 80004b2:	45ce      	cmp	lr, r9
 80004b4:	d204      	bcs.n	80004c0 <__udivmoddi4+0x208>
 80004b6:	3801      	subs	r0, #1
 80004b8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004bc:	eb68 0307 	sbc.w	r3, r8, r7
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x222>
 80004c2:	ebbe 020c 	subs.w	r2, lr, ip
 80004c6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ca:	fa04 f606 	lsl.w	r6, r4, r6
 80004ce:	fa22 f301 	lsr.w	r3, r2, r1
 80004d2:	40cc      	lsrs	r4, r1
 80004d4:	431e      	orrs	r6, r3
 80004d6:	e9c5 6400 	strd	r6, r4, [r5]
 80004da:	2100      	movs	r1, #0
 80004dc:	e73e      	b.n	800035c <__udivmoddi4+0xa4>
 80004de:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e2:	f1c3 0120 	rsb	r1, r3, #32
 80004e6:	fa04 f203 	lsl.w	r2, r4, r3
 80004ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ee:	40cc      	lsrs	r4, r1
 80004f0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f4:	fa20 f101 	lsr.w	r1, r0, r1
 80004f8:	fa1f f68e 	uxth.w	r6, lr
 80004fc:	fbb4 f0f7 	udiv	r0, r4, r7
 8000500:	430a      	orrs	r2, r1
 8000502:	fb07 4410 	mls	r4, r7, r0, r4
 8000506:	0c11      	lsrs	r1, r2, #16
 8000508:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800050c:	fb00 f406 	mul.w	r4, r0, r6
 8000510:	428c      	cmp	r4, r1
 8000512:	d90e      	bls.n	8000532 <__udivmoddi4+0x27a>
 8000514:	eb1e 0101 	adds.w	r1, lr, r1
 8000518:	f100 38ff 	add.w	r8, r0, #4294967295
 800051c:	bf2c      	ite	cs
 800051e:	f04f 0901 	movcs.w	r9, #1
 8000522:	f04f 0900 	movcc.w	r9, #0
 8000526:	428c      	cmp	r4, r1
 8000528:	d902      	bls.n	8000530 <__udivmoddi4+0x278>
 800052a:	f1b9 0f00 	cmp.w	r9, #0
 800052e:	d02c      	beq.n	800058a <__udivmoddi4+0x2d2>
 8000530:	4640      	mov	r0, r8
 8000532:	1b09      	subs	r1, r1, r4
 8000534:	b292      	uxth	r2, r2
 8000536:	fbb1 f4f7 	udiv	r4, r1, r7
 800053a:	fb07 1114 	mls	r1, r7, r4, r1
 800053e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000542:	fb04 f106 	mul.w	r1, r4, r6
 8000546:	4291      	cmp	r1, r2
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x2a2>
 800054a:	eb1e 0202 	adds.w	r2, lr, r2
 800054e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000552:	d201      	bcs.n	8000558 <__udivmoddi4+0x2a0>
 8000554:	4291      	cmp	r1, r2
 8000556:	d815      	bhi.n	8000584 <__udivmoddi4+0x2cc>
 8000558:	4644      	mov	r4, r8
 800055a:	1a52      	subs	r2, r2, r1
 800055c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000560:	e721      	b.n	80003a6 <__udivmoddi4+0xee>
 8000562:	1a86      	subs	r6, r0, r2
 8000564:	eb64 0303 	sbc.w	r3, r4, r3
 8000568:	2001      	movs	r0, #1
 800056a:	e70e      	b.n	800038a <__udivmoddi4+0xd2>
 800056c:	3c02      	subs	r4, #2
 800056e:	4472      	add	r2, lr
 8000570:	e735      	b.n	80003de <__udivmoddi4+0x126>
 8000572:	3902      	subs	r1, #2
 8000574:	4472      	add	r2, lr
 8000576:	e6d0      	b.n	800031a <__udivmoddi4+0x62>
 8000578:	44f4      	add	ip, lr
 800057a:	3802      	subs	r0, #2
 800057c:	e6e3      	b.n	8000346 <__udivmoddi4+0x8e>
 800057e:	44f4      	add	ip, lr
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x152>
 8000584:	3c02      	subs	r4, #2
 8000586:	4472      	add	r2, lr
 8000588:	e7e7      	b.n	800055a <__udivmoddi4+0x2a2>
 800058a:	3802      	subs	r0, #2
 800058c:	4471      	add	r1, lr
 800058e:	e7d0      	b.n	8000532 <__udivmoddi4+0x27a>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e782      	b.n	800049c <__udivmoddi4+0x1e4>
 8000596:	3802      	subs	r0, #2
 8000598:	443c      	add	r4, r7
 800059a:	e76a      	b.n	8000472 <__udivmoddi4+0x1ba>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80005a8:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80005ae:	4909      	ldr	r1, [pc, #36]	@ (80005d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c4:	68fb      	ldr	r3, [r7, #12]
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	46020c00 	.word	0x46020c00

080005d8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005e0:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <LL_APB1_GRP2_EnableClock+0x34>)
 80005e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005e6:	4909      	ldr	r1, [pc, #36]	@ (800060c <LL_APB1_GRP2_EnableClock+0x34>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <LL_APB1_GRP2_EnableClock+0x34>)
 80005f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4013      	ands	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fc:	68fb      	ldr	r3, [r7, #12]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	46020c00 	.word	0x46020c00

08000610 <HAL_UART_RxCpltCallback>:
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* Callback for when data is received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000614:	b089      	sub	sp, #36	@ 0x24
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]

	// Expecting Receive Packet 0x90 of size 16 Bytes + size of data field in transmit packet
	// Size of test packet is 16 + 6 = 22 bytes

	if (huart->Instance == USART2) {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a60      	ldr	r2, [pc, #384]	@ (80007a0 <HAL_UART_RxCpltCallback+0x190>)
 8000620:	4293      	cmp	r3, r2
 8000622:	f040 80b7 	bne.w	8000794 <HAL_UART_RxCpltCallback+0x184>
        /*for(int i = 0; i<sizeof(newRxData); i++){
        	rxData[i] = newRxData[i];
        }*/

		// check for 0x7E to mark the start of a packet
		if(newRxData[0] == 0x7E) packetIncoming = true;
 8000626:	4b5f      	ldr	r3, [pc, #380]	@ (80007a4 <HAL_UART_RxCpltCallback+0x194>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b7e      	cmp	r3, #126	@ 0x7e
 800062c:	d102      	bne.n	8000634 <HAL_UART_RxCpltCallback+0x24>
 800062e:	4b5e      	ldr	r3, [pc, #376]	@ (80007a8 <HAL_UART_RxCpltCallback+0x198>)
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]

		if(packetIncoming && &rxData[w_idx-3] >= rxData && rxData[w_idx-3] == 0x7E){
 8000634:	4b5c      	ldr	r3, [pc, #368]	@ (80007a8 <HAL_UART_RxCpltCallback+0x198>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d022      	beq.n	8000682 <HAL_UART_RxCpltCallback+0x72>
 800063c:	4b5b      	ldr	r3, [pc, #364]	@ (80007ac <HAL_UART_RxCpltCallback+0x19c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b02      	cmp	r3, #2
 8000642:	dd1e      	ble.n	8000682 <HAL_UART_RxCpltCallback+0x72>
 8000644:	4b59      	ldr	r3, [pc, #356]	@ (80007ac <HAL_UART_RxCpltCallback+0x19c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	3b03      	subs	r3, #3
 800064a:	4a59      	ldr	r2, [pc, #356]	@ (80007b0 <HAL_UART_RxCpltCallback+0x1a0>)
 800064c:	5cd3      	ldrb	r3, [r2, r3]
 800064e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000650:	d117      	bne.n	8000682 <HAL_UART_RxCpltCallback+0x72>
			// if incoming packet type is "Receive"
			if(newRxData[0] == 0x90){
 8000652:	4b54      	ldr	r3, [pc, #336]	@ (80007a4 <HAL_UART_RxCpltCallback+0x194>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b90      	cmp	r3, #144	@ 0x90
 8000658:	d113      	bne.n	8000682 <HAL_UART_RxCpltCallback+0x72>
				dataSize = dataSize | (rxData[w_idx-2] << 8) | rxData[w_idx-1];
 800065a:	4b54      	ldr	r3, [pc, #336]	@ (80007ac <HAL_UART_RxCpltCallback+0x19c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3b02      	subs	r3, #2
 8000660:	4a53      	ldr	r2, [pc, #332]	@ (80007b0 <HAL_UART_RxCpltCallback+0x1a0>)
 8000662:	5cd3      	ldrb	r3, [r2, r3]
 8000664:	021a      	lsls	r2, r3, #8
 8000666:	4b53      	ldr	r3, [pc, #332]	@ (80007b4 <HAL_UART_RxCpltCallback+0x1a4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4313      	orrs	r3, r2
 800066c:	4a4f      	ldr	r2, [pc, #316]	@ (80007ac <HAL_UART_RxCpltCallback+0x19c>)
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	3a01      	subs	r2, #1
 8000672:	494f      	ldr	r1, [pc, #316]	@ (80007b0 <HAL_UART_RxCpltCallback+0x1a0>)
 8000674:	5c8a      	ldrb	r2, [r1, r2]
 8000676:	4313      	orrs	r3, r2
 8000678:	4a4e      	ldr	r2, [pc, #312]	@ (80007b4 <HAL_UART_RxCpltCallback+0x1a4>)
 800067a:	6013      	str	r3, [r2, #0]
				printf("packet size calculation complete");
 800067c:	484e      	ldr	r0, [pc, #312]	@ (80007b8 <HAL_UART_RxCpltCallback+0x1a8>)
 800067e:	f00a f83f 	bl	800a700 <iprintf>
			}
		}

		rxData[w_idx] = newRxData[0];
 8000682:	4b4a      	ldr	r3, [pc, #296]	@ (80007ac <HAL_UART_RxCpltCallback+0x19c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a47      	ldr	r2, [pc, #284]	@ (80007a4 <HAL_UART_RxCpltCallback+0x194>)
 8000688:	7811      	ldrb	r1, [r2, #0]
 800068a:	4a49      	ldr	r2, [pc, #292]	@ (80007b0 <HAL_UART_RxCpltCallback+0x1a0>)
 800068c:	54d1      	strb	r1, [r2, r3]

        // if just wrote to rxData index 22
		if(w_idx >= 22){
 800068e:	4b47      	ldr	r3, [pc, #284]	@ (80007ac <HAL_UART_RxCpltCallback+0x19c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b15      	cmp	r3, #21
 8000694:	dd74      	ble.n	8000780 <HAL_UART_RxCpltCallback+0x170>
 8000696:	466b      	mov	r3, sp
 8000698:	461e      	mov	r6, r3
        	const char *output = "Received Data: ";
 800069a:	4b48      	ldr	r3, [pc, #288]	@ (80007bc <HAL_UART_RxCpltCallback+0x1ac>)
 800069c:	61bb      	str	r3, [r7, #24]
        	HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), 1000);
 800069e:	69b8      	ldr	r0, [r7, #24]
 80006a0:	f7ff fdea 	bl	8000278 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ac:	69b9      	ldr	r1, [r7, #24]
 80006ae:	4844      	ldr	r0, [pc, #272]	@ (80007c0 <HAL_UART_RxCpltCallback+0x1b0>)
 80006b0:	f007 f878 	bl	80077a4 <HAL_UART_Transmit>

			size_t msgLength = sizeof(rxData) / sizeof(rxData[0]);
 80006b4:	2318      	movs	r3, #24
 80006b6:	617b      	str	r3, [r7, #20]
			char msg[msgLength * 2 + 1];
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	1c59      	adds	r1, r3, #1
 80006be:	460b      	mov	r3, r1
 80006c0:	3b01      	subs	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	2300      	movs	r3, #0
 80006c6:	4688      	mov	r8, r1
 80006c8:	4699      	mov	r9, r3
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006de:	2300      	movs	r3, #0
 80006e0:	460c      	mov	r4, r1
 80006e2:	461d      	mov	r5, r3
 80006e4:	f04f 0200 	mov.w	r2, #0
 80006e8:	f04f 0300 	mov.w	r3, #0
 80006ec:	00eb      	lsls	r3, r5, #3
 80006ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006f2:	00e2      	lsls	r2, r4, #3
 80006f4:	1dcb      	adds	r3, r1, #7
 80006f6:	08db      	lsrs	r3, r3, #3
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	ebad 0d03 	sub.w	sp, sp, r3
 80006fe:	466b      	mov	r3, sp
 8000700:	3300      	adds	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]

			for(size_t i = 0; i<msgLength; i++){
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
 8000708:	e00e      	b.n	8000728 <HAL_UART_RxCpltCallback+0x118>
				sprintf(msg + (i*2), "%02X", rxData[i]);
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	18d0      	adds	r0, r2, r3
 8000712:	4a27      	ldr	r2, [pc, #156]	@ (80007b0 <HAL_UART_RxCpltCallback+0x1a0>)
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	461a      	mov	r2, r3
 800071c:	4929      	ldr	r1, [pc, #164]	@ (80007c4 <HAL_UART_RxCpltCallback+0x1b4>)
 800071e:	f00a f801 	bl	800a724 <siprintf>
			for(size_t i = 0; i<msgLength; i++){
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3301      	adds	r3, #1
 8000726:	61fb      	str	r3, [r7, #28]
 8000728:	69fa      	ldr	r2, [r7, #28]
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	429a      	cmp	r2, r3
 800072e:	d3ec      	bcc.n	800070a <HAL_UART_RxCpltCallback+0xfa>
			}
			msg[msgLength*2] = '\0';
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	2100      	movs	r1, #0
 8000738:	54d1      	strb	r1, [r2, r3]

			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f7ff fd9c 	bl	8000278 <strlen>
 8000740:	4603      	mov	r3, r0
 8000742:	b29a      	uxth	r2, r3
 8000744:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000748:	68f9      	ldr	r1, [r7, #12]
 800074a:	481d      	ldr	r0, [pc, #116]	@ (80007c0 <HAL_UART_RxCpltCallback+0x1b0>)
 800074c:	f007 f82a 	bl	80077a4 <HAL_UART_Transmit>

			output = "\r\n";
 8000750:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <HAL_UART_RxCpltCallback+0x1b8>)
 8000752:	61bb      	str	r3, [r7, #24]
			HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), 1000);
 8000754:	69b8      	ldr	r0, [r7, #24]
 8000756:	f7ff fd8f 	bl	8000278 <strlen>
 800075a:	4603      	mov	r3, r0
 800075c:	b29a      	uxth	r2, r3
 800075e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000762:	69b9      	ldr	r1, [r7, #24]
 8000764:	4816      	ldr	r0, [pc, #88]	@ (80007c0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000766:	f007 f81d 	bl	80077a4 <HAL_UART_Transmit>

			w_idx = 0;
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <HAL_UART_RxCpltCallback+0x19c>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
			packetIncoming = false;
 8000770:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <HAL_UART_RxCpltCallback+0x198>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
			dataSize = 0x0000;
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_UART_RxCpltCallback+0x1a4>)
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	46b5      	mov	sp, r6
 800077e:	e004      	b.n	800078a <HAL_UART_RxCpltCallback+0x17a>
        }else{
        	w_idx++;
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <HAL_UART_RxCpltCallback+0x19c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	4a09      	ldr	r2, [pc, #36]	@ (80007ac <HAL_UART_RxCpltCallback+0x19c>)
 8000788:	6013      	str	r3, [r2, #0]
        }

        // expecting packet that is 23 bytes long during test
        HAL_UART_Receive_IT(&huart2, newRxData, 1);
 800078a:	2201      	movs	r2, #1
 800078c:	4905      	ldr	r1, [pc, #20]	@ (80007a4 <HAL_UART_RxCpltCallback+0x194>)
 800078e:	480f      	ldr	r0, [pc, #60]	@ (80007cc <HAL_UART_RxCpltCallback+0x1bc>)
 8000790:	f007 f8a6 	bl	80078e0 <HAL_UART_Receive_IT>
    }
}
 8000794:	bf00      	nop
 8000796:	3724      	adds	r7, #36	@ 0x24
 8000798:	46bd      	mov	sp, r7
 800079a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800079e:	bf00      	nop
 80007a0:	40004400 	.word	0x40004400
 80007a4:	20000734 	.word	0x20000734
 80007a8:	2000073c 	.word	0x2000073c
 80007ac:	20000738 	.word	0x20000738
 80007b0:	2000071c 	.word	0x2000071c
 80007b4:	20000740 	.word	0x20000740
 80007b8:	0800b7c0 	.word	0x0800b7c0
 80007bc:	0800b7e4 	.word	0x0800b7e4
 80007c0:	20000110 	.word	0x20000110
 80007c4:	0800b7f4 	.word	0x0800b7f4
 80007c8:	0800b7fc 	.word	0x0800b7fc
 80007cc:	200001a4 	.word	0x200001a4

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f000 fdc2 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f81c 	bl	8000814 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80007dc:	f000 f87e 	bl	80008dc <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e0:	f000 f9e2 	bl	8000ba8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007e4:	f000 f888 	bl	80008f8 <MX_ADC1_Init>
  MX_ICACHE_Init();
 80007e8:	f000 f8ca 	bl	8000980 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 80007ec:	f000 f8dc 	bl	80009a8 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 80007f0:	f000 f910 	bl	8000a14 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007f4:	f000 f9a6 	bl	8000b44 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80007f8:	f000 f958 	bl	8000aac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // During test, expecting packet that is 23 bytes long
  HAL_UART_Receive_IT(&huart2, newRxData, 1);
 80007fc:	2201      	movs	r2, #1
 80007fe:	4903      	ldr	r1, [pc, #12]	@ (800080c <main+0x3c>)
 8000800:	4803      	ldr	r0, [pc, #12]	@ (8000810 <main+0x40>)
 8000802:	f007 f86d 	bl	80078e0 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000806:	bf00      	nop
 8000808:	e7fd      	b.n	8000806 <main+0x36>
 800080a:	bf00      	nop
 800080c:	20000734 	.word	0x20000734
 8000810:	200001a4 	.word	0x200001a4

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09e      	sub	sp, #120	@ 0x78
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	2260      	movs	r2, #96	@ 0x60
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f009 ffe1 	bl	800a7ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000838:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800083c:	f002 ff12 	bl	8003664 <HAL_PWREx_ControlVoltageScaling>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000846:	f000 fa65 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800084a:	2332      	movs	r3, #50	@ 0x32
 800084c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000854:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000858:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085a:	2310      	movs	r3, #16
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800085e:	2301      	movs	r3, #1
 8000860:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000862:	2310      	movs	r3, #16
 8000864:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000866:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086c:	2302      	movs	r3, #2
 800086e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000870:	2301      	movs	r3, #1
 8000872:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800087c:	2350      	movs	r3, #80	@ 0x50
 800087e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000880:	2302      	movs	r3, #2
 8000882:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000884:	2302      	movs	r3, #2
 8000886:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 800088c:	2300      	movs	r3, #0
 800088e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0318 	add.w	r3, r7, #24
 8000898:	4618      	mov	r0, r3
 800089a:	f002 ffef 	bl	800387c <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a4:	f000 fa36 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	231f      	movs	r3, #31
 80008aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2303      	movs	r3, #3
 80008ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c0:	463b      	mov	r3, r7
 80008c2:	2104      	movs	r1, #4
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 feb5 	bl	8004634 <HAL_RCC_ClockConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008d0:	f000 fa20 	bl	8000d14 <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3778      	adds	r7, #120	@ 0x78
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80008e0:	f002 ffac 	bl	800383c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80008e4:	2002      	movs	r0, #2
 80008e6:	f002 ff49 	bl	800377c <HAL_PWREx_ConfigSupply>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80008f0:	f000 fa10 	bl	8000d14 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <MX_ADC1_Init+0x80>)
 80008fe:	4a1f      	ldr	r2, [pc, #124]	@ (800097c <MX_ADC1_Init+0x84>)
 8000900:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000902:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_ADC1_Init+0x80>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_ADC1_Init+0x80>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_ADC1_Init+0x80>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_ADC1_Init+0x80>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_ADC1_Init+0x80>)
 800091c:	2204      	movs	r2, #4
 800091e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_ADC1_Init+0x80>)
 8000922:	2200      	movs	r2, #0
 8000924:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_ADC1_Init+0x80>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 800092e:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_ADC1_Init+0x80>)
 8000930:	2201      	movs	r2, #1
 8000932:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000934:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <MX_ADC1_Init+0x80>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800093c:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_ADC1_Init+0x80>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_ADC1_Init+0x80>)
 8000946:	2200      	movs	r2, #0
 8000948:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_ADC1_Init+0x80>)
 800094c:	2200      	movs	r2, #0
 800094e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_ADC1_Init+0x80>)
 8000952:	2200      	movs	r2, #0
 8000954:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <MX_ADC1_Init+0x80>)
 8000958:	2200      	movs	r2, #0
 800095a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_ADC1_Init+0x80>)
 800095e:	2200      	movs	r2, #0
 8000960:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_ADC1_Init+0x80>)
 8000966:	f000 fee1 	bl	800172c <HAL_ADC_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000970:	f000 f9d0 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000084 	.word	0x20000084
 800097c:	42028000 	.word	0x42028000

08000980 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000984:	2000      	movs	r0, #0
 8000986:	f001 fdc5 	bl	8002514 <HAL_ICACHE_ConfigAssociativityMode>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000990:	f000 f9c0 	bl	8000d14 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000994:	f001 fdde 	bl	8002554 <HAL_ICACHE_Enable>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800099e:	f000 f9b9 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	463b      	mov	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
 80009bc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80009be:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80009c2:	f7ff fe09 	bl	80005d8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80009c6:	2002      	movs	r0, #2
 80009c8:	f7ff fdea 	bl	80005a0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff fde7 	bl	80005a0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009d6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009d8:	2303      	movs	r3, #3
 80009da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	463b      	mov	r3, r7
 80009e2:	4619      	mov	r1, r3
 80009e4:	4809      	ldr	r0, [pc, #36]	@ (8000a0c <MX_UCPD1_Init+0x64>)
 80009e6:	f008 ff7e 	bl	80098e6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009f0:	2303      	movs	r3, #3
 80009f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	463b      	mov	r3, r7
 80009fa:	4619      	mov	r1, r3
 80009fc:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <MX_UCPD1_Init+0x68>)
 80009fe:	f008 ff72 	bl	80098e6 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	42020400 	.word	0x42020400
 8000a10:	42020000 	.word	0x42020000

08000a14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a18:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a1a:	4a23      	ldr	r2, [pc, #140]	@ (8000aa8 <MX_USART1_UART_Init+0x94>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a50:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a56:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5c:	4811      	ldr	r0, [pc, #68]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a5e:	f006 fe51 	bl	8007704 <HAL_UART_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 f954 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a70:	f008 fd23 	bl	80094ba <HAL_UARTEx_SetTxFifoThreshold>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7a:	f000 f94b 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4808      	ldr	r0, [pc, #32]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a82:	f008 fd58 	bl	8009536 <HAL_UARTEx_SetRxFifoThreshold>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a8c:	f000 f942 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a92:	f008 fcd9 	bl	8009448 <HAL_UARTEx_DisableFifoMode>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 f93a 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000110 	.word	0x20000110
 8000aa8:	40013800 	.word	0x40013800

08000aac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ab2:	4a23      	ldr	r2, [pc, #140]	@ (8000b40 <MX_USART2_UART_Init+0x94>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af4:	4811      	ldr	r0, [pc, #68]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000af6:	f006 fe05 	bl	8007704 <HAL_UART_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b00:	f000 f908 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	480d      	ldr	r0, [pc, #52]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000b08:	f008 fcd7 	bl	80094ba <HAL_UARTEx_SetTxFifoThreshold>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b12:	f000 f8ff 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4808      	ldr	r0, [pc, #32]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000b1a:	f008 fd0c 	bl	8009536 <HAL_UARTEx_SetRxFifoThreshold>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b24:	f000 f8f6 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_USART2_UART_Init+0x90>)
 8000b2a:	f008 fc8d 	bl	8009448 <HAL_UARTEx_DisableFifoMode>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f000 f8ee 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200001a4 	.word	0x200001a4
 8000b40:	40004400 	.word	0x40004400

08000b44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b48:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4a:	4a16      	ldr	r2, [pc, #88]	@ (8000ba4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b50:	2206      	movs	r2, #6
 8000b52:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b54:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b56:	2202      	movs	r2, #2
 8000b58:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8c:	f001 fcf2 	bl	8002574 <HAL_PCD_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b96:	f000 f8bd 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000238 	.word	0x20000238
 8000ba4:	42040000 	.word	0x42040000

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	@ 0x28
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b50      	ldr	r3, [pc, #320]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc4:	4a4e      	ldr	r2, [pc, #312]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bce:	4b4c      	ldr	r3, [pc, #304]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b48      	ldr	r3, [pc, #288]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000be2:	4a47      	ldr	r2, [pc, #284]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bec:	4b44      	ldr	r3, [pc, #272]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	4b41      	ldr	r3, [pc, #260]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c00:	4a3f      	ldr	r2, [pc, #252]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c02:	f043 0302 	orr.w	r3, r3, #2
 8000c06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c18:	4b39      	ldr	r3, [pc, #228]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c1e:	4a38      	ldr	r2, [pc, #224]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c24:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c28:	4b35      	ldr	r3, [pc, #212]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2104      	movs	r1, #4
 8000c3a:	4832      	ldr	r0, [pc, #200]	@ (8000d04 <MX_GPIO_Init+0x15c>)
 8000c3c:	f001 fc52 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2180      	movs	r1, #128	@ 0x80
 8000c44:	4830      	ldr	r0, [pc, #192]	@ (8000d08 <MX_GPIO_Init+0x160>)
 8000c46:	f001 fc4d 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	21a0      	movs	r1, #160	@ 0xa0
 8000c4e:	482f      	ldr	r0, [pc, #188]	@ (8000d0c <MX_GPIO_Init+0x164>)
 8000c50:	f001 fc48 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000c54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d10 <MX_GPIO_Init+0x168>)
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4827      	ldr	r0, [pc, #156]	@ (8000d08 <MX_GPIO_Init+0x160>)
 8000c6a:	f001 fa63 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000c6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4822      	ldr	r0, [pc, #136]	@ (8000d0c <MX_GPIO_Init+0x164>)
 8000c84:	f001 fa56 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c94:	2302      	movs	r3, #2
 8000c96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4819      	ldr	r0, [pc, #100]	@ (8000d04 <MX_GPIO_Init+0x15c>)
 8000ca0:	f001 fa48 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ca4:	2380      	movs	r3, #128	@ 0x80
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4813      	ldr	r0, [pc, #76]	@ (8000d08 <MX_GPIO_Init+0x160>)
 8000cbc:	f001 fa3a 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000cc0:	2320      	movs	r3, #32
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <MX_GPIO_Init+0x164>)
 8000cd8:	f001 fa2c 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000cdc:	2380      	movs	r3, #128	@ 0x80
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	@ (8000d0c <MX_GPIO_Init+0x164>)
 8000cf4:	f001 fa1e 	bl	8002134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	@ 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	46020c00 	.word	0x46020c00
 8000d04:	42021800 	.word	0x42021800
 8000d08:	42020800 	.word	0x42020800
 8000d0c:	42020400 	.word	0x42020400
 8000d10:	10210000 	.word	0x10210000

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <HAL_MspInit+0x38>)
 8000d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <HAL_MspInit+0x38>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000d36:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <HAL_MspInit+0x38>)
 8000d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000d44:	f002 fd8a 	bl	800385c <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000d48:	2004      	movs	r0, #4
 8000d4a:	f001 f866 	bl	8001e1a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	46020c00 	.word	0x46020c00

08000d5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0ba      	sub	sp, #232	@ 0xe8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	22c0      	movs	r2, #192	@ 0xc0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f009 fd34 	bl	800a7ea <memset>
  if(hadc->Instance==ADC1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a24      	ldr	r2, [pc, #144]	@ (8000e18 <HAL_ADC_MspInit+0xbc>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d140      	bne.n	8000e0e <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000d8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000d98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 f815 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000db0:	f7ff ffb0 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000db4:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <HAL_ADC_MspInit+0xc0>)
 8000db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dba:	4a18      	ldr	r2, [pc, #96]	@ (8000e1c <HAL_ADC_MspInit+0xc0>)
 8000dbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dc4:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <HAL_ADC_MspInit+0xc0>)
 8000dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_ADC_MspInit+0xc0>)
 8000dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dd8:	4a10      	ldr	r2, [pc, #64]	@ (8000e1c <HAL_ADC_MspInit+0xc0>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000de2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <HAL_ADC_MspInit+0xc0>)
 8000de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000df0:	2304      	movs	r3, #4
 8000df2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df6:	2303      	movs	r3, #3
 8000df8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <HAL_ADC_MspInit+0xc4>)
 8000e0a:	f001 f993 	bl	8002134 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e0e:	bf00      	nop
 8000e10:	37e8      	adds	r7, #232	@ 0xe8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	42028000 	.word	0x42028000
 8000e1c:	46020c00 	.word	0x46020c00
 8000e20:	42020800 	.word	0x42020800

08000e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0bc      	sub	sp, #240	@ 0xf0
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e3c:	f107 0318 	add.w	r3, r7, #24
 8000e40:	22c0      	movs	r2, #192	@ 0xc0
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f009 fcd0 	bl	800a7ea <memset>
  if(huart->Instance==USART1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a50      	ldr	r2, [pc, #320]	@ (8000f90 <HAL_UART_MspInit+0x16c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d146      	bne.n	8000ee2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e54:	f04f 0201 	mov.w	r2, #1
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e60:	2300      	movs	r3, #0
 8000e62:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e64:	f107 0318 	add.w	r3, r7, #24
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 ffb3 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000e74:	f7ff ff4e 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e78:	4b46      	ldr	r3, [pc, #280]	@ (8000f94 <HAL_UART_MspInit+0x170>)
 8000e7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e7e:	4a45      	ldr	r2, [pc, #276]	@ (8000f94 <HAL_UART_MspInit+0x170>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e84:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000e88:	4b42      	ldr	r3, [pc, #264]	@ (8000f94 <HAL_UART_MspInit+0x170>)
 8000e8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b3f      	ldr	r3, [pc, #252]	@ (8000f94 <HAL_UART_MspInit+0x170>)
 8000e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e9c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f94 <HAL_UART_MspInit+0x170>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8000f94 <HAL_UART_MspInit+0x170>)
 8000ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000eb4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000eb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ed8:	4619      	mov	r1, r3
 8000eda:	482f      	ldr	r0, [pc, #188]	@ (8000f98 <HAL_UART_MspInit+0x174>)
 8000edc:	f001 f92a 	bl	8002134 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ee0:	e051      	b.n	8000f86 <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART2)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f9c <HAL_UART_MspInit+0x178>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d14c      	bne.n	8000f86 <HAL_UART_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eec:	f04f 0202 	mov.w	r2, #2
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efc:	f107 0318 	add.w	r3, r7, #24
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 ff67 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8000f0c:	f7ff ff02 	bl	8000d14 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f10:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <HAL_UART_MspInit+0x170>)
 8000f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f16:	4a1f      	ldr	r2, [pc, #124]	@ (8000f94 <HAL_UART_MspInit+0x170>)
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f20:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <HAL_UART_MspInit+0x170>)
 8000f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <HAL_UART_MspInit+0x170>)
 8000f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f34:	4a17      	ldr	r2, [pc, #92]	@ (8000f94 <HAL_UART_MspInit+0x170>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <HAL_UART_MspInit+0x170>)
 8000f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f64:	2307      	movs	r3, #7
 8000f66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <HAL_UART_MspInit+0x174>)
 8000f72:	f001 f8df 	bl	8002134 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	203e      	movs	r0, #62	@ 0x3e
 8000f7c:	f000 ff58 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f80:	203e      	movs	r0, #62	@ 0x3e
 8000f82:	f000 ff6f 	bl	8001e64 <HAL_NVIC_EnableIRQ>
}
 8000f86:	bf00      	nop
 8000f88:	37f0      	adds	r7, #240	@ 0xf0
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40013800 	.word	0x40013800
 8000f94:	46020c00 	.word	0x46020c00
 8000f98:	42020000 	.word	0x42020000
 8000f9c:	40004400 	.word	0x40004400

08000fa0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b0bc      	sub	sp, #240	@ 0xf0
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb8:	f107 0318 	add.w	r3, r7, #24
 8000fbc:	22c0      	movs	r2, #192	@ 0xc0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f009 fc12 	bl	800a7ea <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a3c      	ldr	r2, [pc, #240]	@ (80010bc <HAL_PCD_MspInit+0x11c>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d171      	bne.n	80010b4 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000fd0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 fef4 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000ff2:	f7ff fe8f 	bl	8000d14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b32      	ldr	r3, [pc, #200]	@ (80010c0 <HAL_PCD_MspInit+0x120>)
 8000ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ffc:	4a30      	ldr	r2, [pc, #192]	@ (80010c0 <HAL_PCD_MspInit+0x120>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001006:	4b2e      	ldr	r3, [pc, #184]	@ (80010c0 <HAL_PCD_MspInit+0x120>)
 8001008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001014:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001018:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800102e:	230a      	movs	r3, #10
 8001030:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001038:	4619      	mov	r1, r3
 800103a:	4822      	ldr	r0, [pc, #136]	@ (80010c4 <HAL_PCD_MspInit+0x124>)
 800103c:	f001 f87a 	bl	8002134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001040:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <HAL_PCD_MspInit+0x120>)
 8001042:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001046:	4a1e      	ldr	r2, [pc, #120]	@ (80010c0 <HAL_PCD_MspInit+0x120>)
 8001048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800104c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001050:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <HAL_PCD_MspInit+0x120>)
 8001052:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <HAL_PCD_MspInit+0x120>)
 8001060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d119      	bne.n	80010a0 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <HAL_PCD_MspInit+0x120>)
 800106e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001072:	4a13      	ldr	r2, [pc, #76]	@ (80010c0 <HAL_PCD_MspInit+0x120>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800107c:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <HAL_PCD_MspInit+0x120>)
 800107e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800108a:	f002 fbc7 	bl	800381c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800108e:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <HAL_PCD_MspInit+0x120>)
 8001090:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001094:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <HAL_PCD_MspInit+0x120>)
 8001096:	f023 0304 	bic.w	r3, r3, #4
 800109a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800109e:	e001      	b.n	80010a4 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80010a0:	f002 fbbc 	bl	800381c <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2049      	movs	r0, #73	@ 0x49
 80010aa:	f000 fec1 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80010ae:	2049      	movs	r0, #73	@ 0x49
 80010b0:	f000 fed8 	bl	8001e64 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80010b4:	bf00      	nop
 80010b6:	37f0      	adds	r7, #240	@ 0xf0
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	42040000 	.word	0x42040000
 80010c0:	46020c00 	.word	0x46020c00
 80010c4:	42020000 	.word	0x42020000

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <NMI_Handler+0x4>

080010d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <MemManage_Handler+0x4>

080010e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <UsageFault_Handler+0x4>

080010f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111e:	f000 f9c3 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <USART2_IRQHandler+0x10>)
 800112e:	f006 fc39 	bl	80079a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200001a4 	.word	0x200001a4

0800113c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001140:	4802      	ldr	r0, [pc, #8]	@ (800114c <OTG_FS_IRQHandler+0x10>)
 8001142:	f001 fb2f 	bl	80027a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000238 	.word	0x20000238

08001150 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e00a      	b.n	8001178 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001162:	f3af 8000 	nop.w
 8001166:	4601      	mov	r1, r0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	60ba      	str	r2, [r7, #8]
 800116e:	b2ca      	uxtb	r2, r1
 8001170:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	dbf0      	blt.n	8001162 <_read+0x12>
  }

  return len;
 8001180:	687b      	ldr	r3, [r7, #4]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	e009      	b.n	80011b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	60ba      	str	r2, [r7, #8]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dbf1      	blt.n	800119c <_write+0x12>
  }
  return len;
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_close>:

int _close(int file)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011ea:	605a      	str	r2, [r3, #4]
  return 0;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_isatty>:

int _isatty(int file)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001234:	4a14      	ldr	r2, [pc, #80]	@ (8001288 <_sbrk+0x5c>)
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <_sbrk+0x60>)
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001240:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001248:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <_sbrk+0x64>)
 800124a:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <_sbrk+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	429a      	cmp	r2, r3
 800125a:	d207      	bcs.n	800126c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800125c:	f009 fb14 	bl	800a888 <__errno>
 8001260:	4603      	mov	r3, r0
 8001262:	220c      	movs	r2, #12
 8001264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	e009      	b.n	8001280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800126c:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001272:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4a05      	ldr	r2, [pc, #20]	@ (8001290 <_sbrk+0x64>)
 800127c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200c0000 	.word	0x200c0000
 800128c:	00000400 	.word	0x00000400
 8001290:	20000744 	.word	0x20000744
 8001294:	20000898 	.word	0x20000898

08001298 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800129c:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <SystemInit+0x68>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012a2:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <SystemInit+0x68>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80012ac:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <SystemInit+0x6c>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80012b2:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <SystemInit+0x6c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80012b8:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <SystemInit+0x6c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <SystemInit+0x6c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <SystemInit+0x6c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001304 <SystemInit+0x6c>)
 80012ca:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80012ce:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80012d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80012d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <SystemInit+0x6c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <SystemInit+0x6c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a09      	ldr	r2, [pc, #36]	@ (8001304 <SystemInit+0x6c>)
 80012e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <SystemInit+0x6c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <SystemInit+0x68>)
 80012ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012f2:	609a      	str	r2, [r3, #8]
  #endif
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00
 8001304:	46020c00 	.word	0x46020c00

08001308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001340 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800130c:	f7ff ffc4 	bl	8001298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001310:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001312:	e003      	b.n	800131c <LoopCopyDataInit>

08001314 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001316:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001318:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800131a:	3104      	adds	r1, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800131c:	480a      	ldr	r0, [pc, #40]	@ (8001348 <LoopForever+0xa>)
	ldr	r3, =_edata
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001320:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001322:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001324:	d3f6      	bcc.n	8001314 <CopyDataInit>
	ldr	r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001328:	e002      	b.n	8001330 <LoopFillZerobss>

0800132a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800132a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800132c:	f842 3b04 	str.w	r3, [r2], #4

08001330 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <LoopForever+0x16>)
	cmp	r2, r3
 8001332:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001334:	d3f9      	bcc.n	800132a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001336:	f009 faad 	bl	800a894 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133a:	f7ff fa49 	bl	80007d0 <main>

0800133e <LoopForever>:

LoopForever:
    b LoopForever
 800133e:	e7fe      	b.n	800133e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001340:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001344:	0800b944 	.word	0x0800b944
	ldr	r0, =_sdata
 8001348:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800134c:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8001350:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001354:	20000898 	.word	0x20000898

08001358 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC1_IRQHandler>
	...

0800135c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_Init+0x50>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a11      	ldr	r2, [pc, #68]	@ (80013ac <HAL_Init+0x50>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136c:	2003      	movs	r0, #3
 800136e:	f000 fd54 	bl	8001e1a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001372:	f003 fb51 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8001376:	4602      	mov	r2, r0
 8001378:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <HAL_Init+0x54>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	f003 030f 	and.w	r3, r3, #15
 8001380:	490c      	ldr	r1, [pc, #48]	@ (80013b4 <HAL_Init+0x58>)
 8001382:	5ccb      	ldrb	r3, [r1, r3]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	4a0b      	ldr	r2, [pc, #44]	@ (80013b8 <HAL_Init+0x5c>)
 800138a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800138c:	2004      	movs	r0, #4
 800138e:	f000 fd99 	bl	8001ec4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001392:	2000      	movs	r0, #0
 8001394:	f000 f812 	bl	80013bc <HAL_InitTick>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e002      	b.n	80013a8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013a2:	f7ff fcbd 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40022000 	.word	0x40022000
 80013b0:	46020c00 	.word	0x46020c00
 80013b4:	0800b800 	.word	0x0800b800
 80013b8:	20000000 	.word	0x20000000

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80013c8:	4b33      	ldr	r3, [pc, #204]	@ (8001498 <HAL_InitTick+0xdc>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e05c      	b.n	800148e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80013d4:	4b31      	ldr	r3, [pc, #196]	@ (800149c <HAL_InitTick+0xe0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d10c      	bne.n	80013fa <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80013e0:	4b2f      	ldr	r3, [pc, #188]	@ (80014a0 <HAL_InitTick+0xe4>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001498 <HAL_InitTick+0xdc>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e037      	b.n	800146a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80013fa:	f000 fdbb 	bl	8001f74 <HAL_SYSTICK_GetCLKSourceConfig>
 80013fe:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d023      	beq.n	800144e <HAL_InitTick+0x92>
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d82d      	bhi.n	8001468 <HAL_InitTick+0xac>
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_InitTick+0x5e>
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d00d      	beq.n	8001434 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001418:	e026      	b.n	8001468 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800141a:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <HAL_InitTick+0xe4>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <HAL_InitTick+0xdc>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001428:	fbb3 f3f1 	udiv	r3, r3, r1
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	60fb      	str	r3, [r7, #12]
        break;
 8001432:	e01a      	b.n	800146a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001434:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <HAL_InitTick+0xdc>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800143e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001442:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	60fb      	str	r3, [r7, #12]
        break;
 800144c:	e00d      	b.n	800146a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800144e:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_InitTick+0xdc>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001458:	fbb3 f3f2 	udiv	r3, r3, r2
 800145c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001460:	fbb2 f3f3 	udiv	r3, r2, r3
 8001464:	60fb      	str	r3, [r7, #12]
        break;
 8001466:	e000      	b.n	800146a <HAL_InitTick+0xae>
        break;
 8001468:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 fd08 	bl	8001e80 <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e009      	b.n	800148e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147a:	2200      	movs	r2, #0
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	f04f 30ff 	mov.w	r0, #4294967295
 8001482:	f000 fcd5 	bl	8001e30 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001486:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <HAL_InitTick+0xe8>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008
 800149c:	e000e010 	.word	0xe000e010
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000004 	.word	0x20000004

080014a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000748 	.word	0x20000748

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000748 	.word	0x20000748

080014e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff ffee 	bl	80014d0 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffde 	bl	80014d0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000008 	.word	0x20000008

08001530 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <LL_ADC_SetResolution+0x3c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d104      	bne.n	8001578 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3b01      	subs	r3, #1
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f023 020c 	bic.w	r2, r3, #12
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	60da      	str	r2, [r3, #12]
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	46021000 	.word	0x46021000

08001598 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80015aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	2a00      	cmp	r2, #0
 80015c2:	d002      	beq.n	80015ca <LL_ADC_SetGainCompensation+0x32>
 80015c4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80015c8:	e000      	b.n	80015cc <LL_ADC_SetGainCompensation+0x34>
 80015ca:	2200      	movs	r2, #0
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80015de:	b480      	push	{r7}
 80015e0:	b085      	sub	sp, #20
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2107      	movs	r1, #7
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	401a      	ands	r2, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	431a      	orrs	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800162c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6093      	str	r3, [r2, #8]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001654:	d101      	bne.n	800165a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001678:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800167c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	609a      	str	r2, [r3, #8]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016a4:	d101      	bne.n	80016aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <LL_ADC_IsEnabled+0x18>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <LL_ADC_IsEnabled+0x1a>
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d101      	bne.n	80016f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b08      	cmp	r3, #8
 8001716:	d101      	bne.n	800171c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e2b3      	b.n	8001cb4 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a8b      	ldr	r2, [pc, #556]	@ (8001988 <HAL_ADC_Init+0x25c>)
 800175a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001760:	2b00      	cmp	r3, #0
 8001762:	d109      	bne.n	8001778 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff faf9 	bl	8000d5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5f 	bl	8001640 <LL_ADC_IsDeepPowerDownEnabled>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff45 	bl	800161c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff7a 	bl	8001690 <LL_ADC_IsInternalRegulatorEnabled>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d115      	bne.n	80017ce <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff5e 	bl	8001668 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017ac:	4b77      	ldr	r3, [pc, #476]	@ (800198c <HAL_ADC_Init+0x260>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	099b      	lsrs	r3, r3, #6
 80017b2:	4a77      	ldr	r2, [pc, #476]	@ (8001990 <HAL_ADC_Init+0x264>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	099b      	lsrs	r3, r3, #6
 80017ba:	3301      	adds	r3, #1
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f9      	bne.n	80017c2 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff5c 	bl	8001690 <LL_ADC_IsInternalRegulatorEnabled>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10e      	bne.n	80017fc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80017e2:	f043 0210 	orr.w	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff6c 	bl	80016de <LL_ADC_REG_IsConversionOngoing>
 8001806:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	f040 8244 	bne.w	8001c9e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2b00      	cmp	r3, #0
 800181a:	f040 8240 	bne.w	8001c9e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001822:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001826:	f043 0202 	orr.w	r2, r3, #2
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ff40 	bl	80016b8 <LL_ADC_IsEnabled>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d140      	bne.n	80018c0 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a51      	ldr	r2, [pc, #324]	@ (8001988 <HAL_ADC_Init+0x25c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d028      	beq.n	800189a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a51      	ldr	r2, [pc, #324]	@ (8001994 <HAL_ADC_Init+0x268>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d109      	bne.n	8001866 <HAL_ADC_Init+0x13a>
 8001852:	4850      	ldr	r0, [pc, #320]	@ (8001994 <HAL_ADC_Init+0x268>)
 8001854:	f7ff ff30 	bl	80016b8 <LL_ADC_IsEnabled>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf0c      	ite	eq
 800185e:	2301      	moveq	r3, #1
 8001860:	2300      	movne	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	e008      	b.n	8001878 <HAL_ADC_Init+0x14c>
 8001866:	4848      	ldr	r0, [pc, #288]	@ (8001988 <HAL_ADC_Init+0x25c>)
 8001868:	f7ff ff26 	bl	80016b8 <LL_ADC_IsEnabled>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf0c      	ite	eq
 8001872:	2301      	moveq	r3, #1
 8001874:	2300      	movne	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d021      	beq.n	80018c0 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a44      	ldr	r2, [pc, #272]	@ (8001994 <HAL_ADC_Init+0x268>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_ADC_Init+0x15e>
 8001886:	4a44      	ldr	r2, [pc, #272]	@ (8001998 <HAL_ADC_Init+0x26c>)
 8001888:	e000      	b.n	800188c <HAL_ADC_Init+0x160>
 800188a:	4a44      	ldr	r2, [pc, #272]	@ (800199c <HAL_ADC_Init+0x270>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f7ff fe4c 	bl	8001530 <LL_ADC_SetCommonClock>
 8001898:	e012      	b.n	80018c0 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4610      	mov	r0, r2
 80018a6:	f7ff fe57 	bl	8001558 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80018aa:	4b3c      	ldr	r3, [pc, #240]	@ (800199c <HAL_ADC_Init+0x270>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80018ba:	4938      	ldr	r1, [pc, #224]	@ (800199c <HAL_ADC_Init+0x270>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a30      	ldr	r2, [pc, #192]	@ (8001988 <HAL_ADC_Init+0x25c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d010      	beq.n	80018ec <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018d0:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80018d6:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80018dc:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018e4:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80018e6:	4313      	orrs	r3, r2
 80018e8:	623b      	str	r3, [r7, #32]
 80018ea:	e030      	b.n	800194e <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7f1b      	ldrb	r3, [r3, #28]
 80018f0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018f8:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018fa:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001900:	2a00      	cmp	r2, #0
 8001902:	d002      	beq.n	800190a <HAL_ADC_Init+0x1de>
 8001904:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001908:	e000      	b.n	800190c <HAL_ADC_Init+0x1e0>
 800190a:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800190c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001912:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	da04      	bge.n	8001926 <HAL_ADC_Init+0x1fa>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001924:	e001      	b.n	800192a <HAL_ADC_Init+0x1fe>
 8001926:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 800192a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4918      	ldr	r1, [pc, #96]	@ (8001994 <HAL_ADC_Init+0x268>)
 8001932:	428b      	cmp	r3, r1
 8001934:	d103      	bne.n	800193e <HAL_ADC_Init+0x212>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800193c:	e003      	b.n	8001946 <HAL_ADC_Init+0x21a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001944:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001946:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001948:	6a3a      	ldr	r2, [r7, #32]
 800194a:	4313      	orrs	r3, r2
 800194c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001954:	2b01      	cmp	r3, #1
 8001956:	d12f      	bne.n	80019b8 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <HAL_ADC_Init+0x25c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	3b01      	subs	r3, #1
 8001968:	045b      	lsls	r3, r3, #17
 800196a:	6a3a      	ldr	r2, [r7, #32]
 800196c:	4313      	orrs	r3, r2
 800196e:	623b      	str	r3, [r7, #32]
 8001970:	e022      	b.n	80019b8 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001978:	2b00      	cmp	r3, #0
 800197a:	d111      	bne.n	80019a0 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001982:	623b      	str	r3, [r7, #32]
 8001984:	e018      	b.n	80019b8 <HAL_ADC_Init+0x28c>
 8001986:	bf00      	nop
 8001988:	46021000 	.word	0x46021000
 800198c:	20000000 	.word	0x20000000
 8001990:	053e2d63 	.word	0x053e2d63
 8001994:	42028000 	.word	0x42028000
 8001998:	42028308 	.word	0x42028308
 800199c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80019a4:	f043 0220 	orr.w	r2, r3, #32
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a92      	ldr	r2, [pc, #584]	@ (8001c08 <HAL_ADC_Init+0x4dc>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d018      	beq.n	80019f4 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ce:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d6:	4313      	orrs	r3, r2
 80019d8:	6a3a      	ldr	r2, [r7, #32]
 80019da:	4313      	orrs	r3, r2
 80019dc:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	4b89      	ldr	r3, [pc, #548]	@ (8001c0c <HAL_ADC_Init+0x4e0>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	6a39      	ldr	r1, [r7, #32]
 80019ee:	430b      	orrs	r3, r1
 80019f0:	60d3      	str	r3, [r2, #12]
 80019f2:	e031      	b.n	8001a58 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d009      	beq.n	8001a10 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a00:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	6a3a      	ldr	r2, [r7, #32]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	4b7e      	ldr	r3, [pc, #504]	@ (8001c10 <HAL_ADC_Init+0x4e4>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	6a39      	ldr	r1, [r7, #32]
 8001a20:	430b      	orrs	r3, r1
 8001a22:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1a      	ldr	r2, [r3, #32]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d008      	beq.n	8001a58 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6a      	ldr	r2, [pc, #424]	@ (8001c08 <HAL_ADC_Init+0x4dc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	f000 8093 	beq.w	8001b8a <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fe38 	bl	80016de <LL_ADC_REG_IsConversionOngoing>
 8001a6e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fe45 	bl	8001704 <LL_ADC_INJ_IsConversionOngoing>
 8001a7a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d161      	bne.n	8001b46 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d15e      	bne.n	8001b46 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7f1b      	ldrb	r3, [r3, #28]
 8001a8c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4960      	ldr	r1, [pc, #384]	@ (8001c14 <HAL_ADC_Init+0x4e8>)
 8001a94:	428b      	cmp	r3, r1
 8001a96:	d102      	bne.n	8001a9e <HAL_ADC_Init+0x372>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a9c:	e002      	b.n	8001aa4 <HAL_ADC_Init+0x378>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa2:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ab2:	f023 0303 	bic.w	r3, r3, #3
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	6a39      	ldr	r1, [r7, #32]
 8001abc:	430b      	orrs	r3, r1
 8001abe:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d007      	beq.n	8001ad8 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f7ff fd60 	bl	8001598 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d11e      	bne.n	8001b20 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae6:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	4b4a      	ldr	r3, [pc, #296]	@ (8001c18 <HAL_ADC_Init+0x4ec>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001af6:	0411      	lsls	r1, r2, #16
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001afc:	4311      	orrs	r1, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8001b02:	4311      	orrs	r1, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8001b08:	4311      	orrs	r1, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001b0e:	0892      	lsrs	r2, r2, #2
 8001b10:	430a      	orrs	r2, r1
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0201 	orr.w	r2, r2, #1
 8001b1c:	611a      	str	r2, [r3, #16]
 8001b1e:	e007      	b.n	8001b30 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d10c      	bne.n	8001b68 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b54:	f023 010f 	bic.w	r1, r3, #15
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b66:	e007      	b.n	8001b78 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 020f 	bic.w	r2, r2, #15
 8001b76:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b7c:	f023 0303 	bic.w	r3, r3, #3
 8001b80:	f043 0201 	orr.w	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001b88:	e092      	b.n	8001cb0 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d111      	bne.n	8001bb8 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001b9c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8001ba2:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8001ba8:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <HAL_ADC_Init+0x4f0>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	69f9      	ldr	r1, [r7, #28]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	f7ff fd01 	bl	80015de <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be4:	461a      	mov	r2, r3
 8001be6:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8001bea:	f7ff fcf8 	bl	80015de <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d114      	bne.n	8001c20 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f062 020f 	orn	r2, r2, #15
 8001c04:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c06:	e024      	b.n	8001c52 <HAL_ADC_Init+0x526>
 8001c08:	46021000 	.word	0x46021000
 8001c0c:	fff0c013 	.word	0xfff0c013
 8001c10:	ffde800d 	.word	0xffde800d
 8001c14:	42028000 	.word	0x42028000
 8001c18:	fc00f81e 	.word	0xfc00f81e
 8001c1c:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c28:	d113      	bne.n	8001c52 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c34:	3b01      	subs	r3, #1
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	f003 031c 	and.w	r3, r3, #28
 8001c3c:	f06f 020f 	mvn.w	r2, #15
 8001c40:	fa02 f103 	lsl.w	r1, r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <HAL_ADC_Init+0x590>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	6a3a      	ldr	r2, [r7, #32]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d10b      	bne.n	8001c7a <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001c6c:	f023 0303 	bic.w	r3, r3, #3
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c78:	e01a      	b.n	8001cb0 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001c7e:	f023 0312 	bic.w	r3, r3, #18
 8001c82:	f043 0210 	orr.w	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c8e:	f043 0201 	orr.w	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c9c:	e008      	b.n	8001cb0 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001ca2:	f043 0210 	orr.w	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8001cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3728      	adds	r7, #40	@ 0x28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	833ffff3 	.word	0x833ffff3

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	@ (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	@ (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4907      	ldr	r1, [pc, #28]	@ (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	@ (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	@ (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	@ 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	@ 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ff4c 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3e:	f7ff ff63 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68b9      	ldr	r1, [r7, #8]
 8001e48:	6978      	ldr	r0, [r7, #20]
 8001e4a:	f7ff ffb3 	bl	8001db4 <NVIC_EncodePriority>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff82 	bl	8001d60 <__NVIC_SetPriority>
}
 8001e5c:	bf00      	nop
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff56 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00d      	b.n	8001eb2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001e96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <HAL_SYSTICK_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <HAL_SYSTICK_Config+0x40>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <HAL_SYSTICK_Config+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a05      	ldr	r2, [pc, #20]	@ (8001ec0 <HAL_SYSTICK_Config+0x40>)
 8001eaa:	f043 0303 	orr.w	r3, r3, #3
 8001eae:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d844      	bhi.n	8001f5c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001efb 	.word	0x08001efb
 8001edc:	08001f19 	.word	0x08001f19
 8001ee0:	08001f3b 	.word	0x08001f3b
 8001ee4:	08001f5d 	.word	0x08001f5d
 8001ee8:	08001eed 	.word	0x08001eed
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001eec:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	6013      	str	r3, [r2, #0]
      break;
 8001ef8:	e031      	b.n	8001f5e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001efa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1b      	ldr	r2, [pc, #108]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0c:	4a18      	ldr	r2, [pc, #96]	@ (8001f70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f0e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f16:	e022      	b.n	8001f5e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f18:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a13      	ldr	r2, [pc, #76]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f1e:	f023 0304 	bic.w	r3, r3, #4
 8001f22:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f2e:	4a10      	ldr	r2, [pc, #64]	@ (8001f70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f38:	e011      	b.n	8001f5e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f40:	f023 0304 	bic.w	r3, r3, #4
 8001f44:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f4c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f50:	4a07      	ldr	r2, [pc, #28]	@ (8001f70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f5a:	e000      	b.n	8001f5e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001f5c:	bf00      	nop
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e010 	.word	0xe000e010
 8001f70:	46020c00 	.word	0x46020c00

08001f74 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001f7a:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001f86:	2304      	movs	r3, #4
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	e021      	b.n	8001fd0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001f8c:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f92:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001f96:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f9e:	d011      	beq.n	8001fc4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fa6:	d810      	bhi.n	8001fca <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fb4:	d003      	beq.n	8001fbe <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001fb6:	e008      	b.n	8001fca <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
        break;
 8001fbc:	e008      	b.n	8001fd0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	607b      	str	r3, [r7, #4]
        break;
 8001fc2:	e005      	b.n	8001fd0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	607b      	str	r3, [r7, #4]
        break;
 8001fc8:	e002      	b.n	8001fd0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
        break;
 8001fce:	bf00      	nop
    }
  }
  return systick_source;
 8001fd0:	687b      	ldr	r3, [r7, #4]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e010 	.word	0xe000e010
 8001fe4:	46020c00 	.word	0x46020c00

08001fe8 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001ff0:	f7ff fa6e 	bl	80014d0 <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e06b      	b.n	80020d8 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d008      	beq.n	800201e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2220      	movs	r2, #32
 8002010:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e05c      	b.n	80020d8 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0204 	orr.w	r2, r2, #4
 800202c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2205      	movs	r2, #5
 8002032:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002036:	e020      	b.n	800207a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002038:	f7ff fa4a 	bl	80014d0 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b05      	cmp	r3, #5
 8002044:	d919      	bls.n	800207a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204a:	f043 0210 	orr.w	r2, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2203      	movs	r2, #3
 8002056:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800205e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800206a:	2201      	movs	r2, #1
 800206c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e02e      	b.n	80020d8 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0d7      	beq.n	8002038 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0202 	orr.w	r2, r2, #2
 8002096:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2204      	movs	r2, #4
 800209c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80020a8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c2:	2201      	movs	r2, #1
 80020c4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2200      	movs	r2, #0
 80020cc:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e019      	b.n	8002126 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d004      	beq.n	8002108 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2220      	movs	r2, #32
 8002102:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e00e      	b.n	8002126 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2204      	movs	r2, #4
 800210c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	@ 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002146:	e1ba      	b.n	80024be <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2101      	movs	r1, #1
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	4013      	ands	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 81aa 	beq.w	80024b8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a55      	ldr	r2, [pc, #340]	@ (80022bc <HAL_GPIO_Init+0x188>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d15d      	bne.n	8002228 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002172:	2201      	movs	r2, #1
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	4013      	ands	r3, r2
 8002180:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0201 	and.w	r2, r3, #1
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	4313      	orrs	r3, r2
 8002194:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800219c:	4a48      	ldr	r2, [pc, #288]	@ (80022c0 <HAL_GPIO_Init+0x18c>)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80021a4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80021a6:	4a46      	ldr	r2, [pc, #280]	@ (80022c0 <HAL_GPIO_Init+0x18c>)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	08da      	lsrs	r2, r3, #3
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	3208      	adds	r2, #8
 80021ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021be:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	220f      	movs	r2, #15
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	220b      	movs	r2, #11
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	3208      	adds	r2, #8
 80021f2:	69f9      	ldr	r1, [r7, #28]
 80021f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	4013      	ands	r3, r2
 800220e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2202      	movs	r2, #2
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	4313      	orrs	r3, r2
 800221e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e067      	b.n	80022f8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x104>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b12      	cmp	r3, #18
 8002236:	d145      	bne.n	80022c4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	08da      	lsrs	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3208      	adds	r2, #8
 8002240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002244:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	220f      	movs	r2, #15
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	4013      	ands	r3, r2
 800225a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f003 020f 	and.w	r2, r3, #15
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69fa      	ldr	r2, [r7, #28]
 8002272:	4313      	orrs	r3, r2
 8002274:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	69f9      	ldr	r1, [r7, #28]
 8002280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69fa      	ldr	r2, [r7, #28]
 8002298:	4013      	ands	r3, r2
 800229a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	e01e      	b.n	80022f8 <HAL_GPIO_Init+0x1c4>
 80022ba:	bf00      	nop
 80022bc:	46020000 	.word	0x46020000
 80022c0:	0800b858 	.word	0x0800b858
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	2203      	movs	r2, #3
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	4013      	ands	r3, r2
 80022da:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0203 	and.w	r2, r3, #3
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d00b      	beq.n	8002318 <HAL_GPIO_Init+0x1e4>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d007      	beq.n	8002318 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800230c:	2b11      	cmp	r3, #17
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b12      	cmp	r3, #18
 8002316:	d130      	bne.n	800237a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	4013      	ands	r3, r2
 800232e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	4313      	orrs	r3, r2
 8002340:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800234e:	2201      	movs	r2, #1
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	4013      	ands	r3, r2
 800235c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	f003 0201 	and.w	r2, r3, #1
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	4313      	orrs	r3, r2
 8002372:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d017      	beq.n	80023b2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	2203      	movs	r2, #3
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	4013      	ands	r3, r2
 8002398:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d07c      	beq.n	80024b8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80023be:	4a47      	ldr	r2, [pc, #284]	@ (80024dc <HAL_GPIO_Init+0x3a8>)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3318      	adds	r3, #24
 80023c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	220f      	movs	r2, #15
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	4013      	ands	r3, r2
 80023e0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0a9a      	lsrs	r2, r3, #10
 80023e6:	4b3e      	ldr	r3, [pc, #248]	@ (80024e0 <HAL_GPIO_Init+0x3ac>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	f002 0203 	and.w	r2, r2, #3
 80023f0:	00d2      	lsls	r2, r2, #3
 80023f2:	4093      	lsls	r3, r2
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80023fa:	4938      	ldr	r1, [pc, #224]	@ (80024dc <HAL_GPIO_Init+0x3a8>)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3318      	adds	r3, #24
 8002402:	69fa      	ldr	r2, [r7, #28]
 8002404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002408:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <HAL_GPIO_Init+0x3a8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43db      	mvns	r3, r3
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	4013      	ands	r3, r2
 8002416:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800242c:	4a2b      	ldr	r2, [pc, #172]	@ (80024dc <HAL_GPIO_Init+0x3a8>)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002432:	4b2a      	ldr	r3, [pc, #168]	@ (80024dc <HAL_GPIO_Init+0x3a8>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43db      	mvns	r3, r3
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	4013      	ands	r3, r2
 8002440:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002456:	4a21      	ldr	r2, [pc, #132]	@ (80024dc <HAL_GPIO_Init+0x3a8>)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800245c:	4b1f      	ldr	r3, [pc, #124]	@ (80024dc <HAL_GPIO_Init+0x3a8>)
 800245e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002462:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43db      	mvns	r3, r3
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	4013      	ands	r3, r2
 800246c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002482:	4a16      	ldr	r2, [pc, #88]	@ (80024dc <HAL_GPIO_Init+0x3a8>)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800248a:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <HAL_GPIO_Init+0x3a8>)
 800248c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002490:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	43db      	mvns	r3, r3
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	4013      	ands	r3, r2
 800249a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80024b0:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <HAL_GPIO_Init+0x3a8>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3301      	adds	r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f47f ae3d 	bne.w	8002148 <HAL_GPIO_Init+0x14>
  }
}
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	3724      	adds	r7, #36	@ 0x24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	46022000 	.word	0x46022000
 80024e0:	002f7f7f 	.word	0x002f7f7f

080024e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
 80024f0:	4613      	mov	r3, r2
 80024f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024f4:	787b      	ldrb	r3, [r7, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002500:	e002      	b.n	8002508 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002520:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	e007      	b.n	8002542 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002532:	4b07      	ldr	r3, [pc, #28]	@ (8002550 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 0204 	bic.w	r2, r3, #4
 800253a:	4905      	ldr	r1, [pc, #20]	@ (8002550 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40030400 	.word	0x40030400

08002554 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002558:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_ICACHE_Enable+0x1c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a04      	ldr	r2, [pc, #16]	@ (8002570 <HAL_ICACHE_Enable+0x1c>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	40030400 	.word	0x40030400

08002574 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af02      	add	r7, sp, #8
 800257a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e108      	b.n	8002798 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d106      	bne.n	80025a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7fe fcfd 	bl	8000fa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2203      	movs	r2, #3
 80025aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4a7b      	ldr	r2, [pc, #492]	@ (80027a0 <HAL_PCD_Init+0x22c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d102      	bne.n	80025bc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f007 fadd 	bl	8009b80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7c1a      	ldrb	r2, [r3, #16]
 80025ce:	f88d 2000 	strb.w	r2, [sp]
 80025d2:	3304      	adds	r3, #4
 80025d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d6:	f007 fa04 	bl	80099e2 <USB_CoreInit>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0d5      	b.n	8002798 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f007 fad5 	bl	8009ba2 <USB_SetCurrentMode>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2202      	movs	r2, #2
 8002602:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0c6      	b.n	8002798 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	e04a      	b.n	80026a6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	3315      	adds	r3, #21
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	3314      	adds	r3, #20
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	b298      	uxth	r0, r3
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	332e      	adds	r3, #46	@ 0x2e
 800264c:	4602      	mov	r2, r0
 800264e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3318      	adds	r3, #24
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	331c      	adds	r3, #28
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	3320      	adds	r3, #32
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3324      	adds	r3, #36	@ 0x24
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	3301      	adds	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	791b      	ldrb	r3, [r3, #4]
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d3af      	bcc.n	8002610 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
 80026b4:	e044      	b.n	8002740 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	3301      	adds	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	791b      	ldrb	r3, [r3, #4]
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	429a      	cmp	r2, r3
 8002748:	d3b5      	bcc.n	80026b6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	7c1a      	ldrb	r2, [r3, #16]
 8002752:	f88d 2000 	strb.w	r2, [sp]
 8002756:	3304      	adds	r3, #4
 8002758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800275a:	f007 fa6f 	bl	8009c3c <USB_DevInit>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e013      	b.n	8002798 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	7b1b      	ldrb	r3, [r3, #12]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d102      	bne.n	800278c <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 ff3c 	bl	8003604 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f007 fd7d 	bl	800a290 <USB_DevDisconnect>

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	42040000 	.word	0x42040000

080027a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b08d      	sub	sp, #52	@ 0x34
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f007 fe1c 	bl	800a3f8 <USB_GetMode>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 84b9 	bne.w	800313a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f007 fd80 	bl	800a2d2 <USB_ReadInterrupts>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 84af 	beq.w	8003138 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f007 fd6d 	bl	800a2d2 <USB_ReadInterrupts>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d107      	bne.n	8002812 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f002 0202 	and.w	r2, r2, #2
 8002810:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f007 fd5b 	bl	800a2d2 <USB_ReadInterrupts>
 800281c:	4603      	mov	r3, r0
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b10      	cmp	r3, #16
 8002824:	d161      	bne.n	80028ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0210 	bic.w	r2, r2, #16
 8002834:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	f003 020f 	and.w	r2, r3, #15
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	3304      	adds	r3, #4
 8002854:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	0c5b      	lsrs	r3, r3, #17
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	2b02      	cmp	r3, #2
 8002860:	d124      	bne.n	80028ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d035      	beq.n	80028da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002878:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800287c:	b29b      	uxth	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	6a38      	ldr	r0, [r7, #32]
 8002882:	f007 fcad 	bl	800a1e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002892:	441a      	add	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a4:	441a      	add	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	615a      	str	r2, [r3, #20]
 80028aa:	e016      	b.n	80028da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	0c5b      	lsrs	r3, r3, #17
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	2b06      	cmp	r3, #6
 80028b6:	d110      	bne.n	80028da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028be:	2208      	movs	r2, #8
 80028c0:	4619      	mov	r1, r3
 80028c2:	6a38      	ldr	r0, [r7, #32]
 80028c4:	f007 fc8c 	bl	800a1e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028d4:	441a      	add	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0210 	orr.w	r2, r2, #16
 80028e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f007 fcef 	bl	800a2d2 <USB_ReadInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028fe:	f040 80a7 	bne.w	8002a50 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f007 fcf4 	bl	800a2f8 <USB_ReadDevAllOutEpInterrupt>
 8002910:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002912:	e099      	b.n	8002a48 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 808e 	beq.w	8002a3c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f007 fd18 	bl	800a360 <USB_ReadDevOutEPInterrupt>
 8002930:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00c      	beq.n	8002956 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002948:	461a      	mov	r2, r3
 800294a:	2301      	movs	r3, #1
 800294c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800294e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fd29 	bl	80033a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00c      	beq.n	800297a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	4413      	add	r3, r2
 8002968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800296c:	461a      	mov	r2, r3
 800296e:	2308      	movs	r3, #8
 8002970:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002972:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fdff 	bl	8003578 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002990:	461a      	mov	r2, r3
 8002992:	2310      	movs	r3, #16
 8002994:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d030      	beq.n	8002a02 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a8:	2b80      	cmp	r3, #128	@ 0x80
 80029aa:	d109      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	3304      	adds	r3, #4
 80029d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	78db      	ldrb	r3, [r3, #3]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d108      	bne.n	80029f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2200      	movs	r2, #0
 80029e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	4619      	mov	r1, r3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fbf2 	bl	80031d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029fc:	461a      	mov	r2, r3
 80029fe:	2302      	movs	r3, #2
 8002a00:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a34:	461a      	mov	r2, r3
 8002a36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a3a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	3301      	adds	r3, #1
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f47f af62 	bne.w	8002914 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f007 fc3c 	bl	800a2d2 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a64:	f040 80db 	bne.w	8002c1e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f007 fc5d 	bl	800a32c <USB_ReadDevAllInEpInterrupt>
 8002a72:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a78:	e0cd      	b.n	8002c16 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80c2 	beq.w	8002c0a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f007 fc83 	bl	800a39c <USB_ReadDevInEPInterrupt>
 8002a96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d057      	beq.n	8002b52 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69f9      	ldr	r1, [r7, #28]
 8002abe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	799b      	ldrb	r3, [r3, #6]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d132      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3320      	adds	r3, #32
 8002af0:	6819      	ldr	r1, [r3, #0]
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4403      	add	r3, r0
 8002b00:	331c      	adds	r3, #28
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4419      	add	r1, r3
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4403      	add	r3, r0
 8002b14:	3320      	adds	r3, #32
 8002b16:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d113      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x3a2>
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3324      	adds	r3, #36	@ 0x24
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d108      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b3e:	461a      	mov	r2, r3
 8002b40:	2101      	movs	r1, #1
 8002b42:	f007 fc8b 	bl	800a45c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fb03 	bl	8003158 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b84:	461a      	mov	r2, r3
 8002b86:	2310      	movs	r3, #16
 8002b88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2340      	movs	r3, #64	@ 0x40
 8002ba4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d023      	beq.n	8002bf8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002bb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bb2:	6a38      	ldr	r0, [r7, #32]
 8002bb4:	f007 f98e 	bl	8009ed4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	3310      	adds	r3, #16
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	78db      	ldrb	r3, [r3, #3]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d108      	bne.n	8002be6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fb03 	bl	80031ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fb42 	bl	800328e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c12:	085b      	lsrs	r3, r3, #1
 8002c14:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f47f af2e 	bne.w	8002a7a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f007 fb55 	bl	800a2d2 <USB_ReadInterrupts>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c32:	d122      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c42:	f023 0301 	bic.w	r3, r3, #1
 8002c46:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d108      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fcf5 	bl	800364c <HAL_PCDEx_LPM_Callback>
 8002c62:	e002      	b.n	8002c6a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 faab 	bl	80031c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f007 fb27 	bl	800a2d2 <USB_ReadInterrupts>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c8e:	d112      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d102      	bne.n	8002ca6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fa83 	bl	80031ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f007 fb09 	bl	800a2d2 <USB_ReadInterrupts>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cca:	d121      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002cda:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d111      	bne.n	8002d0a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002d00:	2101      	movs	r1, #1
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fca2 	bl	800364c <HAL_PCDEx_LPM_Callback>
 8002d08:	e002      	b.n	8002d10 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fa4e 	bl	80031ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f007 fadc 	bl	800a2d2 <USB_ReadInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d24:	f040 80b7 	bne.w	8002e96 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2110      	movs	r1, #16
 8002d42:	4618      	mov	r0, r3
 8002d44:	f007 f8c6 	bl	8009ed4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d4c:	e046      	b.n	8002ddc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d60:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d72:	0151      	lsls	r1, r2, #5
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	440a      	add	r2, r1
 8002d78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002d7c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d94:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002da6:	0151      	lsls	r1, r2, #5
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	440a      	add	r2, r1
 8002dac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002db0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002db4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dc6:	0151      	lsls	r1, r2, #5
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	440a      	add	r2, r1
 8002dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002dd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002dd4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd8:	3301      	adds	r3, #1
 8002dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	791b      	ldrb	r3, [r3, #4]
 8002de0:	461a      	mov	r2, r3
 8002de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d3b2      	bcc.n	8002d4e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002df6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002dfa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7bdb      	ldrb	r3, [r3, #15]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d016      	beq.n	8002e32 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e14:	f043 030b 	orr.w	r3, r3, #11
 8002e18:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e2a:	f043 030b 	orr.w	r3, r3, #11
 8002e2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e30:	e015      	b.n	8002e5e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e44:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002e48:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e58:	f043 030b 	orr.w	r3, r3, #11
 8002e5c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e6c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e70:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e80:	461a      	mov	r2, r3
 8002e82:	f007 faeb 	bl	800a45c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f007 fa19 	bl	800a2d2 <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eaa:	d123      	bne.n	8002ef4 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f007 faaf 	bl	800a414 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f007 f883 	bl	8009fc6 <USB_GetDevSpeed>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681c      	ldr	r4, [r3, #0]
 8002ecc:	f001 fea6 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8002ed0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f006 fdaf 	bl	8009a3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f95a 	bl	8003198 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002ef2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f007 f9ea 	bl	800a2d2 <USB_ReadInterrupts>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d10a      	bne.n	8002f1e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f93b 	bl	8003184 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f002 0208 	and.w	r2, r2, #8
 8002f1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f007 f9d5 	bl	800a2d2 <USB_ReadInterrupts>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2e:	2b80      	cmp	r3, #128	@ 0x80
 8002f30:	d123      	bne.n	8002f7a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f3e:	2301      	movs	r3, #1
 8002f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f42:	e014      	b.n	8002f6e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d105      	bne.n	8002f68 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	4619      	mov	r1, r3
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f962 	bl	800322c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	791b      	ldrb	r3, [r3, #4]
 8002f72:	461a      	mov	r2, r3
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d3e4      	bcc.n	8002f44 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f007 f9a7 	bl	800a2d2 <USB_ReadInterrupts>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f8e:	d13c      	bne.n	800300a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f90:	2301      	movs	r3, #1
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f94:	e02b      	b.n	8002fee <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	3318      	adds	r3, #24
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d115      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002fbc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	da12      	bge.n	8002fe8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	3317      	adds	r3, #23
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f922 	bl	800322c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fea:	3301      	adds	r3, #1
 8002fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	791b      	ldrb	r3, [r3, #4]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d3cd      	bcc.n	8002f96 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f007 f95f 	bl	800a2d2 <USB_ReadInterrupts>
 8003014:	4603      	mov	r3, r0
 8003016:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800301a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800301e:	d156      	bne.n	80030ce <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003020:	2301      	movs	r3, #1
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
 8003024:	e045      	b.n	80030b2 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d12e      	bne.n	80030ac <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800304e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003050:	2b00      	cmp	r3, #0
 8003052:	da2b      	bge.n	80030ac <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003060:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003064:	429a      	cmp	r2, r3
 8003066:	d121      	bne.n	80030ac <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030a8:	6053      	str	r3, [r2, #4]
            break;
 80030aa:	e008      	b.n	80030be <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	3301      	adds	r3, #1
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	791b      	ldrb	r3, [r3, #4]
 80030b6:	461a      	mov	r2, r3
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d3b3      	bcc.n	8003026 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80030cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f007 f8fd 	bl	800a2d2 <USB_ReadInterrupts>
 80030d8:	4603      	mov	r3, r0
 80030da:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80030de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030e2:	d10a      	bne.n	80030fa <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f88d 	bl	8003204 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80030f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f007 f8e7 	bl	800a2d2 <USB_ReadInterrupts>
 8003104:	4603      	mov	r3, r0
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b04      	cmp	r3, #4
 800310c:	d115      	bne.n	800313a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f879 	bl	8003218 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	e000      	b.n	800313a <HAL_PCD_IRQHandler+0x996>
      return;
 8003138:	bf00      	nop
    }
  }
}
 800313a:	3734      	adds	r7, #52	@ 0x34
 800313c:	46bd      	mov	sp, r7
 800313e:	bd90      	pop	{r4, r7, pc}

08003140 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323c:	2b00      	cmp	r3, #0
 800323e:	da0c      	bge.n	800325a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	f003 020f 	and.w	r2, r3, #15
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	3310      	adds	r3, #16
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	3304      	adds	r3, #4
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	e00c      	b.n	8003274 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	f003 020f 	and.w	r2, r3, #15
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	3304      	adds	r3, #4
 8003272:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68f9      	ldr	r1, [r7, #12]
 800327a:	4618      	mov	r0, r3
 800327c:	f006 fec8 	bl	800a010 <USB_EPStopXfer>
 8003280:	4603      	mov	r3, r0
 8003282:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003284:	7afb      	ldrb	r3, [r7, #11]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b08a      	sub	sp, #40	@ 0x28
 8003292:	af02      	add	r7, sp, #8
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	3310      	adds	r3, #16
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	3304      	adds	r3, #4
 80032b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d901      	bls.n	80032c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06b      	b.n	800339e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d902      	bls.n	80032e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3303      	adds	r3, #3
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032ea:	e02a      	b.n	8003342 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d902      	bls.n	8003308 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	3303      	adds	r3, #3
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	68d9      	ldr	r1, [r3, #12]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	4603      	mov	r3, r0
 8003324:	6978      	ldr	r0, [r7, #20]
 8003326:	f006 ff1d 	bl	800a164 <USB_WritePacket>

    ep->xfer_buff  += len;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	441a      	add	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	441a      	add	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	429a      	cmp	r2, r3
 8003356:	d809      	bhi.n	800336c <PCD_WriteEmptyTxFifo+0xde>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003360:	429a      	cmp	r2, r3
 8003362:	d203      	bcs.n	800336c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1bf      	bne.n	80032ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	429a      	cmp	r2, r3
 8003376:	d811      	bhi.n	800339c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	2201      	movs	r2, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800338c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	43db      	mvns	r3, r3
 8003392:	6939      	ldr	r1, [r7, #16]
 8003394:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003398:	4013      	ands	r3, r2
 800339a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	333c      	adds	r3, #60	@ 0x3c
 80033c0:	3304      	adds	r3, #4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	799b      	ldrb	r3, [r3, #6]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d17b      	bne.n	80034d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d015      	beq.n	8003414 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	4a61      	ldr	r2, [pc, #388]	@ (8003570 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	f240 80b9 	bls.w	8003564 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80b3 	beq.w	8003564 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800340a:	461a      	mov	r2, r3
 800340c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003410:	6093      	str	r3, [r2, #8]
 8003412:	e0a7      	b.n	8003564 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800342a:	461a      	mov	r2, r3
 800342c:	2320      	movs	r3, #32
 800342e:	6093      	str	r3, [r2, #8]
 8003430:	e098      	b.n	8003564 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	f040 8093 	bne.w	8003564 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	4a4b      	ldr	r2, [pc, #300]	@ (8003570 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d90f      	bls.n	8003466 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800345c:	461a      	mov	r2, r3
 800345e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003462:	6093      	str	r3, [r2, #8]
 8003464:	e07e      	b.n	8003564 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	4413      	add	r3, r2
 8003478:	3304      	adds	r3, #4
 800347a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1a      	ldr	r2, [r3, #32]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	0159      	lsls	r1, r3, #5
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	440b      	add	r3, r1
 8003488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003492:	1ad2      	subs	r2, r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d114      	bne.n	80034c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034b0:	461a      	mov	r2, r3
 80034b2:	2101      	movs	r1, #1
 80034b4:	f006 ffd2 	bl	800a45c <USB_EP0_OutStart>
 80034b8:	e006      	b.n	80034c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	441a      	add	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	4619      	mov	r1, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff fe36 	bl	8003140 <HAL_PCD_DataOutStageCallback>
 80034d4:	e046      	b.n	8003564 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	4a26      	ldr	r2, [pc, #152]	@ (8003574 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d124      	bne.n	8003528 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f4:	461a      	mov	r2, r3
 80034f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034fa:	6093      	str	r3, [r2, #8]
 80034fc:	e032      	b.n	8003564 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003514:	461a      	mov	r2, r3
 8003516:	2320      	movs	r3, #32
 8003518:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	4619      	mov	r1, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff fe0d 	bl	8003140 <HAL_PCD_DataOutStageCallback>
 8003526:	e01d      	b.n	8003564 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d114      	bne.n	8003558 <PCD_EP_OutXfrComplete_int+0x1b0>
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d108      	bne.n	8003558 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003550:	461a      	mov	r2, r3
 8003552:	2100      	movs	r1, #0
 8003554:	f006 ff82 	bl	800a45c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	4619      	mov	r1, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff fdee 	bl	8003140 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3720      	adds	r7, #32
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	4f54300a 	.word	0x4f54300a
 8003574:	4f54310a 	.word	0x4f54310a

08003578 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	333c      	adds	r3, #60	@ 0x3c
 8003590:	3304      	adds	r3, #4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4a15      	ldr	r2, [pc, #84]	@ (8003600 <PCD_EP_OutSetupPacket_int+0x88>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d90e      	bls.n	80035cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d009      	beq.n	80035cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c4:	461a      	mov	r2, r3
 80035c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff fdcf 	bl	8003170 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003600 <PCD_EP_OutSetupPacket_int+0x88>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d90c      	bls.n	80035f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	799b      	ldrb	r3, [r3, #6]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d108      	bne.n	80035f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035ec:	461a      	mov	r2, r3
 80035ee:	2101      	movs	r1, #1
 80035f0:	f006 ff34 	bl	800a45c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	4f54300a 	.word	0x4f54300a

08003604 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003636:	f043 0303 	orr.w	r3, r3, #3
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800366c:	4b39      	ldr	r3, [pc, #228]	@ (8003754 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800366e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003670:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003674:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	429a      	cmp	r2, r3
 800367c:	d10b      	bne.n	8003696 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003684:	d905      	bls.n	8003692 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003686:	4b33      	ldr	r3, [pc, #204]	@ (8003754 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	4a32      	ldr	r2, [pc, #200]	@ (8003754 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800368c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003690:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e057      	b.n	8003746 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800369c:	d90a      	bls.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800369e:	4b2d      	ldr	r3, [pc, #180]	@ (8003754 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003754 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036b0:	60d3      	str	r3, [r2, #12]
 80036b2:	e007      	b.n	80036c4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80036b4:	4b27      	ldr	r3, [pc, #156]	@ (8003754 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80036bc:	4925      	ldr	r1, [pc, #148]	@ (8003754 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80036c4:	4b24      	ldr	r3, [pc, #144]	@ (8003758 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a24      	ldr	r2, [pc, #144]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	099b      	lsrs	r3, r3, #6
 80036d0:	2232      	movs	r2, #50	@ 0x32
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	4a21      	ldr	r2, [pc, #132]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	099b      	lsrs	r3, r3, #6
 80036de:	3301      	adds	r3, #1
 80036e0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80036e2:	e002      	b.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80036ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003754 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <HAL_PWREx_ControlVoltageScaling+0x98>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f3      	bne.n	80036e4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d01b      	beq.n	800373a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a15      	ldr	r2, [pc, #84]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	099b      	lsrs	r3, r3, #6
 800370e:	2232      	movs	r2, #50	@ 0x32
 8003710:	fb02 f303 	mul.w	r3, r2, r3
 8003714:	4a11      	ldr	r2, [pc, #68]	@ (800375c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	099b      	lsrs	r3, r3, #6
 800371c:	3301      	adds	r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003720:	e002      	b.n	8003728 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3b01      	subs	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003728:	4b0a      	ldr	r3, [pc, #40]	@ (8003754 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800372a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d102      	bne.n	800373a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f3      	bne.n	8003722 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e000      	b.n	8003746 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	46020800 	.word	0x46020800
 8003758:	20000000 	.word	0x20000000
 800375c:	10624dd3 	.word	0x10624dd3

08003760 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003764:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <HAL_PWREx_GetVoltageRange+0x18>)
 8003766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003768:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	46020800 	.word	0x46020800

0800377c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003784:	4b22      	ldr	r3, [pc, #136]	@ (8003810 <HAL_PWREx_ConfigSupply+0x94>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a22      	ldr	r2, [pc, #136]	@ (8003814 <HAL_PWREx_ConfigSupply+0x98>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	099b      	lsrs	r3, r3, #6
 8003790:	2232      	movs	r2, #50	@ 0x32
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	4a1f      	ldr	r2, [pc, #124]	@ (8003814 <HAL_PWREx_ConfigSupply+0x98>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	3301      	adds	r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d113      	bne.n	80037d0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80037a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <HAL_PWREx_ConfigSupply+0x9c>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003818 <HAL_PWREx_ConfigSupply+0x9c>)
 80037ae:	f023 0302 	bic.w	r3, r3, #2
 80037b2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80037b4:	e002      	b.n	80037bc <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80037bc:	4b16      	ldr	r3, [pc, #88]	@ (8003818 <HAL_PWREx_ConfigSupply+0x9c>)
 80037be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d116      	bne.n	80037f6 <HAL_PWREx_ConfigSupply+0x7a>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f3      	bne.n	80037b6 <HAL_PWREx_ConfigSupply+0x3a>
 80037ce:	e012      	b.n	80037f6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80037d0:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <HAL_PWREx_ConfigSupply+0x9c>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4a10      	ldr	r2, [pc, #64]	@ (8003818 <HAL_PWREx_ConfigSupply+0x9c>)
 80037d6:	f043 0302 	orr.w	r3, r3, #2
 80037da:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80037dc:	e002      	b.n	80037e4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80037e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <HAL_PWREx_ConfigSupply+0x9c>)
 80037e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <HAL_PWREx_ConfigSupply+0x7a>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f3      	bne.n	80037de <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e000      	b.n	8003802 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000000 	.word	0x20000000
 8003814:	10624dd3 	.word	0x10624dd3
 8003818:	46020800 	.word	0x46020800

0800381c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003820:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	4a04      	ldr	r2, [pc, #16]	@ (8003838 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800382a:	6113      	str	r3, [r2, #16]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	46020800 	.word	0x46020800

0800383c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003840:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	4a04      	ldr	r2, [pc, #16]	@ (8003858 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003846:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800384a:	6113      	str	r3, [r2, #16]
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	46020800 	.word	0x46020800

0800385c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003860:	4b05      	ldr	r3, [pc, #20]	@ (8003878 <HAL_PWREx_EnableVddA+0x1c>)
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	4a04      	ldr	r2, [pc, #16]	@ (8003878 <HAL_PWREx_EnableVddA+0x1c>)
 8003866:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800386a:	6113      	str	r3, [r2, #16]
}
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	46020800 	.word	0x46020800

0800387c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08e      	sub	sp, #56	@ 0x38
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003884:	2300      	movs	r3, #0
 8003886:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d102      	bne.n	8003896 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	f000 bec8 	b.w	8004626 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003896:	4b99      	ldr	r3, [pc, #612]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a0:	4b96      	ldr	r3, [pc, #600]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 80038a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 816c 	beq.w	8003b90 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80038b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_RCC_OscConfig+0x52>
 80038be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c0:	2b0c      	cmp	r3, #12
 80038c2:	f040 80de 	bne.w	8003a82 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	f040 80da 	bne.w	8003a82 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f000 bea5 	b.w	8004626 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038e0:	4b86      	ldr	r3, [pc, #536]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d004      	beq.n	80038f6 <HAL_RCC_OscConfig+0x7a>
 80038ec:	4b83      	ldr	r3, [pc, #524]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80038f4:	e005      	b.n	8003902 <HAL_RCC_OscConfig+0x86>
 80038f6:	4b81      	ldr	r3, [pc, #516]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 80038f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038fc:	041b      	lsls	r3, r3, #16
 80038fe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003902:	4293      	cmp	r3, r2
 8003904:	d255      	bcs.n	80039b2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	4618      	mov	r0, r3
 8003912:	f001 f9d9 	bl	8004cc8 <RCC_SetFlashLatencyFromMSIRange>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	f000 be82 	b.w	8004626 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003922:	4b76      	ldr	r3, [pc, #472]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	4a75      	ldr	r2, [pc, #468]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003928:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800392c:	6093      	str	r3, [r2, #8]
 800392e:	4b73      	ldr	r3, [pc, #460]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393a:	4970      	ldr	r1, [pc, #448]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 800393c:	4313      	orrs	r3, r2
 800393e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003944:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003948:	d309      	bcc.n	800395e <HAL_RCC_OscConfig+0xe2>
 800394a:	4b6c      	ldr	r3, [pc, #432]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f023 021f 	bic.w	r2, r3, #31
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	4969      	ldr	r1, [pc, #420]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003958:	4313      	orrs	r3, r2
 800395a:	60cb      	str	r3, [r1, #12]
 800395c:	e07e      	b.n	8003a5c <HAL_RCC_OscConfig+0x1e0>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	da0a      	bge.n	800397c <HAL_RCC_OscConfig+0x100>
 8003966:	4b65      	ldr	r3, [pc, #404]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	015b      	lsls	r3, r3, #5
 8003974:	4961      	ldr	r1, [pc, #388]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003976:	4313      	orrs	r3, r2
 8003978:	60cb      	str	r3, [r1, #12]
 800397a:	e06f      	b.n	8003a5c <HAL_RCC_OscConfig+0x1e0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003984:	d30a      	bcc.n	800399c <HAL_RCC_OscConfig+0x120>
 8003986:	4b5d      	ldr	r3, [pc, #372]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	029b      	lsls	r3, r3, #10
 8003994:	4959      	ldr	r1, [pc, #356]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003996:	4313      	orrs	r3, r2
 8003998:	60cb      	str	r3, [r1, #12]
 800399a:	e05f      	b.n	8003a5c <HAL_RCC_OscConfig+0x1e0>
 800399c:	4b57      	ldr	r3, [pc, #348]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	03db      	lsls	r3, r3, #15
 80039aa:	4954      	ldr	r1, [pc, #336]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60cb      	str	r3, [r1, #12]
 80039b0:	e054      	b.n	8003a5c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80039b2:	4b52      	ldr	r3, [pc, #328]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	4a51      	ldr	r2, [pc, #324]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 80039b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039bc:	6093      	str	r3, [r2, #8]
 80039be:	4b4f      	ldr	r3, [pc, #316]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	494c      	ldr	r1, [pc, #304]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80039d8:	d309      	bcc.n	80039ee <HAL_RCC_OscConfig+0x172>
 80039da:	4b48      	ldr	r3, [pc, #288]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f023 021f 	bic.w	r2, r3, #31
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4945      	ldr	r1, [pc, #276]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60cb      	str	r3, [r1, #12]
 80039ec:	e028      	b.n	8003a40 <HAL_RCC_OscConfig+0x1c4>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	da0a      	bge.n	8003a0c <HAL_RCC_OscConfig+0x190>
 80039f6:	4b41      	ldr	r3, [pc, #260]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	015b      	lsls	r3, r3, #5
 8003a04:	493d      	ldr	r1, [pc, #244]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60cb      	str	r3, [r1, #12]
 8003a0a:	e019      	b.n	8003a40 <HAL_RCC_OscConfig+0x1c4>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a14:	d30a      	bcc.n	8003a2c <HAL_RCC_OscConfig+0x1b0>
 8003a16:	4b39      	ldr	r3, [pc, #228]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	029b      	lsls	r3, r3, #10
 8003a24:	4935      	ldr	r1, [pc, #212]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60cb      	str	r3, [r1, #12]
 8003a2a:	e009      	b.n	8003a40 <HAL_RCC_OscConfig+0x1c4>
 8003a2c:	4b33      	ldr	r3, [pc, #204]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	03db      	lsls	r3, r3, #15
 8003a3a:	4930      	ldr	r1, [pc, #192]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 f93c 	bl	8004cc8 <RCC_SetFlashLatencyFromMSIRange>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f000 bde5 	b.w	8004626 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003a5c:	f001 f8de 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a60:	4b27      	ldr	r3, [pc, #156]	@ (8003b00 <HAL_RCC_OscConfig+0x284>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fd fca9 	bl	80013bc <HAL_InitTick>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 808a 	beq.w	8003b8e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a7e:	f000 bdd2 	b.w	8004626 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d066      	beq.n	8003b58 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a96:	f7fd fd1b 	bl	80014d0 <HAL_GetTick>
 8003a9a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003a9c:	e009      	b.n	8003ab2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a9e:	f7fd fd17 	bl	80014d0 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d902      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	f000 bdba 	b.w	8004626 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003ab2:	4b12      	ldr	r3, [pc, #72]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0ef      	beq.n	8003a9e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003abe:	4b0f      	ldr	r3, [pc, #60]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003ac4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ac8:	6093      	str	r3, [r2, #8]
 8003aca:	4b0c      	ldr	r3, [pc, #48]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	4909      	ldr	r1, [pc, #36]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003ae4:	d30e      	bcc.n	8003b04 <HAL_RCC_OscConfig+0x288>
 8003ae6:	4b05      	ldr	r3, [pc, #20]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f023 021f 	bic.w	r2, r3, #31
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	4902      	ldr	r1, [pc, #8]	@ (8003afc <HAL_RCC_OscConfig+0x280>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60cb      	str	r3, [r1, #12]
 8003af8:	e04a      	b.n	8003b90 <HAL_RCC_OscConfig+0x314>
 8003afa:	bf00      	nop
 8003afc:	46020c00 	.word	0x46020c00
 8003b00:	20000004 	.word	0x20000004
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	da0a      	bge.n	8003b22 <HAL_RCC_OscConfig+0x2a6>
 8003b0c:	4b98      	ldr	r3, [pc, #608]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	015b      	lsls	r3, r3, #5
 8003b1a:	4995      	ldr	r1, [pc, #596]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60cb      	str	r3, [r1, #12]
 8003b20:	e036      	b.n	8003b90 <HAL_RCC_OscConfig+0x314>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b2a:	d30a      	bcc.n	8003b42 <HAL_RCC_OscConfig+0x2c6>
 8003b2c:	4b90      	ldr	r3, [pc, #576]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	029b      	lsls	r3, r3, #10
 8003b3a:	498d      	ldr	r1, [pc, #564]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60cb      	str	r3, [r1, #12]
 8003b40:	e026      	b.n	8003b90 <HAL_RCC_OscConfig+0x314>
 8003b42:	4b8b      	ldr	r3, [pc, #556]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	03db      	lsls	r3, r3, #15
 8003b50:	4987      	ldr	r1, [pc, #540]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60cb      	str	r3, [r1, #12]
 8003b56:	e01b      	b.n	8003b90 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003b58:	4b85      	ldr	r3, [pc, #532]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a84      	ldr	r2, [pc, #528]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b64:	f7fd fcb4 	bl	80014d0 <HAL_GetTick>
 8003b68:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003b6a:	e009      	b.n	8003b80 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b6c:	f7fd fcb0 	bl	80014d0 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d902      	bls.n	8003b80 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	f000 bd53 	b.w	8004626 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003b80:	4b7b      	ldr	r3, [pc, #492]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ef      	bne.n	8003b6c <HAL_RCC_OscConfig+0x2f0>
 8003b8c:	e000      	b.n	8003b90 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003b8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 808b 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x334>
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	2b0c      	cmp	r3, #12
 8003ba8:	d109      	bne.n	8003bbe <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d106      	bne.n	8003bbe <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d17d      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f000 bd34 	b.w	8004626 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x35a>
 8003bc8:	4b69      	ldr	r3, [pc, #420]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a68      	ldr	r2, [pc, #416]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	e041      	b.n	8003c5a <HAL_RCC_OscConfig+0x3de>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bde:	d112      	bne.n	8003c06 <HAL_RCC_OscConfig+0x38a>
 8003be0:	4b63      	ldr	r3, [pc, #396]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a62      	ldr	r2, [pc, #392]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003be6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	4b60      	ldr	r3, [pc, #384]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a5f      	ldr	r2, [pc, #380]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003bf2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	4b5d      	ldr	r3, [pc, #372]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a5c      	ldr	r2, [pc, #368]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	e029      	b.n	8003c5a <HAL_RCC_OscConfig+0x3de>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003c0e:	d112      	bne.n	8003c36 <HAL_RCC_OscConfig+0x3ba>
 8003c10:	4b57      	ldr	r3, [pc, #348]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a56      	ldr	r2, [pc, #344]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003c16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	4b54      	ldr	r3, [pc, #336]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a53      	ldr	r2, [pc, #332]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003c22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b51      	ldr	r3, [pc, #324]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a50      	ldr	r2, [pc, #320]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	e011      	b.n	8003c5a <HAL_RCC_OscConfig+0x3de>
 8003c36:	4b4e      	ldr	r3, [pc, #312]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a4d      	ldr	r2, [pc, #308]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4b4b      	ldr	r3, [pc, #300]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a4a      	ldr	r2, [pc, #296]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003c48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	4b48      	ldr	r3, [pc, #288]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a47      	ldr	r2, [pc, #284]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003c54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d014      	beq.n	8003c8c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003c62:	f7fd fc35 	bl	80014d0 <HAL_GetTick>
 8003c66:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c68:	e009      	b.n	8003c7e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6a:	f7fd fc31 	bl	80014d0 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b64      	cmp	r3, #100	@ 0x64
 8003c76:	d902      	bls.n	8003c7e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	f000 bcd4 	b.w	8004626 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c7e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0ef      	beq.n	8003c6a <HAL_RCC_OscConfig+0x3ee>
 8003c8a:	e013      	b.n	8003cb4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003c8c:	f7fd fc20 	bl	80014d0 <HAL_GetTick>
 8003c90:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c92:	e009      	b.n	8003ca8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c94:	f7fd fc1c 	bl	80014d0 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ca0:	d902      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	f000 bcbf 	b.w	8004626 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ca8:	4b31      	ldr	r3, [pc, #196]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1ef      	bne.n	8003c94 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d05f      	beq.n	8003d80 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d005      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x456>
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	d114      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d111      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f000 bca3 	b.w	8004626 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003ce0:	4b23      	ldr	r3, [pc, #140]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	4920      	ldr	r1, [pc, #128]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003cf4:	e044      	b.n	8003d80 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d024      	beq.n	8003d48 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1b      	ldr	r2, [pc, #108]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d08:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003d0a:	f7fd fbe1 	bl	80014d0 <HAL_GetTick>
 8003d0e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d10:	e009      	b.n	8003d26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fd fbdd 	bl	80014d0 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d902      	bls.n	8003d26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	f000 bc80 	b.w	8004626 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d26:	4b12      	ldr	r3, [pc, #72]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0ef      	beq.n	8003d12 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003d32:	4b0f      	ldr	r3, [pc, #60]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	041b      	lsls	r3, r3, #16
 8003d40:	490b      	ldr	r1, [pc, #44]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	610b      	str	r3, [r1, #16]
 8003d46:	e01b      	b.n	8003d80 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003d48:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a08      	ldr	r2, [pc, #32]	@ (8003d70 <HAL_RCC_OscConfig+0x4f4>)
 8003d4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003d54:	f7fd fbbc 	bl	80014d0 <HAL_GetTick>
 8003d58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5c:	f7fd fbb8 	bl	80014d0 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d904      	bls.n	8003d74 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	f000 bc5b 	b.w	8004626 <HAL_RCC_OscConfig+0xdaa>
 8003d70:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d74:	4baf      	ldr	r3, [pc, #700]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ed      	bne.n	8003d5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80c8 	beq.w	8003f1e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d94:	4ba7      	ldr	r3, [pc, #668]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d111      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da2:	4ba4      	ldr	r3, [pc, #656]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da8:	4aa2      	ldr	r2, [pc, #648]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003daa:	f043 0304 	orr.w	r3, r3, #4
 8003dae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003db2:	4ba0      	ldr	r3, [pc, #640]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003dc6:	4b9c      	ldr	r3, [pc, #624]	@ (8004038 <HAL_RCC_OscConfig+0x7bc>)
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d119      	bne.n	8003e06 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003dd2:	4b99      	ldr	r3, [pc, #612]	@ (8004038 <HAL_RCC_OscConfig+0x7bc>)
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd6:	4a98      	ldr	r2, [pc, #608]	@ (8004038 <HAL_RCC_OscConfig+0x7bc>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dde:	f7fd fb77 	bl	80014d0 <HAL_GetTick>
 8003de2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003de4:	e009      	b.n	8003dfa <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de6:	f7fd fb73 	bl	80014d0 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d902      	bls.n	8003dfa <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	f000 bc16 	b.w	8004626 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003dfa:	4b8f      	ldr	r3, [pc, #572]	@ (8004038 <HAL_RCC_OscConfig+0x7bc>)
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0ef      	beq.n	8003de6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d05f      	beq.n	8003ece <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003e0e:	4b89      	ldr	r3, [pc, #548]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e14:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d037      	beq.n	8003e94 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d006      	beq.n	8003e3c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e3f4      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01b      	beq.n	8003e7e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003e46:	4b7b      	ldr	r3, [pc, #492]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e4c:	4a79      	ldr	r2, [pc, #484]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003e4e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003e52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003e56:	f7fd fb3b 	bl	80014d0 <HAL_GetTick>
 8003e5a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e5e:	f7fd fb37 	bl	80014d0 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b05      	cmp	r3, #5
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e3da      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e70:	4b70      	ldr	r3, [pc, #448]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003e72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1ef      	bne.n	8003e5e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e84:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4969      	ldr	r1, [pc, #420]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003e94:	4b67      	ldr	r3, [pc, #412]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003e96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e9a:	4a66      	ldr	r2, [pc, #408]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003e9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ea0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003ea4:	f7fd fb14 	bl	80014d0 <HAL_GetTick>
 8003ea8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eac:	f7fd fb10 	bl	80014d0 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e3b3      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0ef      	beq.n	8003eac <HAL_RCC_OscConfig+0x630>
 8003ecc:	e01b      	b.n	8003f06 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003ece:	4b59      	ldr	r3, [pc, #356]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ed4:	4a57      	ldr	r2, [pc, #348]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003ed6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003eda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003ede:	f7fd faf7 	bl	80014d0 <HAL_GetTick>
 8003ee2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee6:	f7fd faf3 	bl	80014d0 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b05      	cmp	r3, #5
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e396      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ef8:	4b4e      	ldr	r3, [pc, #312]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003efe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1ef      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f06:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0e:	4b49      	ldr	r3, [pc, #292]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f14:	4a47      	ldr	r2, [pc, #284]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003f16:	f023 0304 	bic.w	r3, r3, #4
 8003f1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 8111 	beq.w	800414e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f32:	4b40      	ldr	r3, [pc, #256]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d111      	bne.n	8003f64 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f40:	4b3c      	ldr	r3, [pc, #240]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f46:	4a3b      	ldr	r2, [pc, #236]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003f48:	f043 0304 	orr.w	r3, r3, #4
 8003f4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003f50:	4b38      	ldr	r3, [pc, #224]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003f64:	4b34      	ldr	r3, [pc, #208]	@ (8004038 <HAL_RCC_OscConfig+0x7bc>)
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d118      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003f70:	4b31      	ldr	r3, [pc, #196]	@ (8004038 <HAL_RCC_OscConfig+0x7bc>)
 8003f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f74:	4a30      	ldr	r2, [pc, #192]	@ (8004038 <HAL_RCC_OscConfig+0x7bc>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f7c:	f7fd faa8 	bl	80014d0 <HAL_GetTick>
 8003f80:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f84:	f7fd faa4 	bl	80014d0 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e347      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003f96:	4b28      	ldr	r3, [pc, #160]	@ (8004038 <HAL_RCC_OscConfig+0x7bc>)
 8003f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01f      	beq.n	8003fee <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d010      	beq.n	8003fdc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003fba:	4b1e      	ldr	r3, [pc, #120]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003fc2:	f043 0304 	orr.w	r3, r3, #4
 8003fc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fca:	4b1a      	ldr	r3, [pc, #104]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fd0:	4a18      	ldr	r2, [pc, #96]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fda:	e018      	b.n	800400e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fdc:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fe2:	4a14      	ldr	r2, [pc, #80]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fec:	e00f      	b.n	800400e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fee:	4b11      	ldr	r3, [pc, #68]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8004000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004004:	4a0b      	ldr	r2, [pc, #44]	@ (8004034 <HAL_RCC_OscConfig+0x7b8>)
 8004006:	f023 0304 	bic.w	r3, r3, #4
 800400a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d057      	beq.n	80040c6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004016:	f7fd fa5b 	bl	80014d0 <HAL_GetTick>
 800401a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401c:	e00e      	b.n	800403c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fd fa57 	bl	80014d0 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402c:	4293      	cmp	r3, r2
 800402e:	d905      	bls.n	800403c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e2f8      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
 8004034:	46020c00 	.word	0x46020c00
 8004038:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800403c:	4b9c      	ldr	r3, [pc, #624]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 800403e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0e9      	beq.n	800401e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01b      	beq.n	800408e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004056:	4b96      	ldr	r3, [pc, #600]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800405c:	4a94      	ldr	r2, [pc, #592]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 800405e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004062:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004066:	e00a      	b.n	800407e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004068:	f7fd fa32 	bl	80014d0 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e2d3      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800407e:	4b8c      	ldr	r3, [pc, #560]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004080:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0ed      	beq.n	8004068 <HAL_RCC_OscConfig+0x7ec>
 800408c:	e053      	b.n	8004136 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800408e:	4b88      	ldr	r3, [pc, #544]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004094:	4a86      	ldr	r2, [pc, #536]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800409a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800409e:	e00a      	b.n	80040b6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a0:	f7fd fa16 	bl	80014d0 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e2b7      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80040b6:	4b7e      	ldr	r3, [pc, #504]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 80040b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1ed      	bne.n	80040a0 <HAL_RCC_OscConfig+0x824>
 80040c4:	e037      	b.n	8004136 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80040c6:	f7fd fa03 	bl	80014d0 <HAL_GetTick>
 80040ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ce:	f7fd f9ff 	bl	80014d0 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e2a0      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040e4:	4b72      	ldr	r3, [pc, #456]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 80040e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1ed      	bne.n	80040ce <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80040f2:	4b6f      	ldr	r3, [pc, #444]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 80040f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01a      	beq.n	8004136 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004100:	4b6b      	ldr	r3, [pc, #428]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004106:	4a6a      	ldr	r2, [pc, #424]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004108:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800410c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004110:	e00a      	b.n	8004128 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004112:	f7fd f9dd 	bl	80014d0 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004120:	4293      	cmp	r3, r2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e27e      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004128:	4b61      	ldr	r3, [pc, #388]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 800412a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800412e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ed      	bne.n	8004112 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004136:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800413a:	2b01      	cmp	r3, #1
 800413c:	d107      	bne.n	800414e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4b5c      	ldr	r3, [pc, #368]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004144:	4a5a      	ldr	r2, [pc, #360]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004146:	f023 0304 	bic.w	r3, r3, #4
 800414a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d036      	beq.n	80041c8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d019      	beq.n	8004196 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004162:	4b53      	ldr	r3, [pc, #332]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a52      	ldr	r2, [pc, #328]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004168:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800416c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800416e:	f7fd f9af 	bl	80014d0 <HAL_GetTick>
 8004172:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004176:	f7fd f9ab 	bl	80014d0 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e24e      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004188:	4b49      	ldr	r3, [pc, #292]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x8fa>
 8004194:	e018      	b.n	80041c8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004196:	4b46      	ldr	r3, [pc, #280]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a45      	ldr	r2, [pc, #276]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 800419c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041a0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80041a2:	f7fd f995 	bl	80014d0 <HAL_GetTick>
 80041a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041aa:	f7fd f991 	bl	80014d0 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e234      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80041bc:	4b3c      	ldr	r3, [pc, #240]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f0      	bne.n	80041aa <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d036      	beq.n	8004242 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d019      	beq.n	8004210 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80041dc:	4b34      	ldr	r3, [pc, #208]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a33      	ldr	r2, [pc, #204]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 80041e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041e6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80041e8:	f7fd f972 	bl	80014d0 <HAL_GetTick>
 80041ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80041f0:	f7fd f96e 	bl	80014d0 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e211      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004202:	4b2b      	ldr	r3, [pc, #172]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0x974>
 800420e:	e018      	b.n	8004242 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004210:	4b27      	ldr	r3, [pc, #156]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a26      	ldr	r2, [pc, #152]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004216:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800421a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800421c:	f7fd f958 	bl	80014d0 <HAL_GetTick>
 8004220:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004224:	f7fd f954 	bl	80014d0 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e1f7      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004236:	4b1e      	ldr	r3, [pc, #120]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d07f      	beq.n	800434e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004252:	2b00      	cmp	r3, #0
 8004254:	d062      	beq.n	800431c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004256:	4b16      	ldr	r3, [pc, #88]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	4a15      	ldr	r2, [pc, #84]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 800425c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004260:	6093      	str	r3, [r2, #8]
 8004262:	4b13      	ldr	r3, [pc, #76]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426e:	4910      	ldr	r1, [pc, #64]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004270:	4313      	orrs	r3, r2
 8004272:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800427c:	d309      	bcc.n	8004292 <HAL_RCC_OscConfig+0xa16>
 800427e:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f023 021f 	bic.w	r2, r3, #31
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	4909      	ldr	r1, [pc, #36]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 800428c:	4313      	orrs	r3, r2
 800428e:	60cb      	str	r3, [r1, #12]
 8004290:	e02a      	b.n	80042e8 <HAL_RCC_OscConfig+0xa6c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004296:	2b00      	cmp	r3, #0
 8004298:	da0c      	bge.n	80042b4 <HAL_RCC_OscConfig+0xa38>
 800429a:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	015b      	lsls	r3, r3, #5
 80042a8:	4901      	ldr	r1, [pc, #4]	@ (80042b0 <HAL_RCC_OscConfig+0xa34>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60cb      	str	r3, [r1, #12]
 80042ae:	e01b      	b.n	80042e8 <HAL_RCC_OscConfig+0xa6c>
 80042b0:	46020c00 	.word	0x46020c00
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042bc:	d30a      	bcc.n	80042d4 <HAL_RCC_OscConfig+0xa58>
 80042be:	4ba1      	ldr	r3, [pc, #644]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	029b      	lsls	r3, r3, #10
 80042cc:	499d      	ldr	r1, [pc, #628]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60cb      	str	r3, [r1, #12]
 80042d2:	e009      	b.n	80042e8 <HAL_RCC_OscConfig+0xa6c>
 80042d4:	4b9b      	ldr	r3, [pc, #620]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	03db      	lsls	r3, r3, #15
 80042e2:	4998      	ldr	r1, [pc, #608]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80042e8:	4b96      	ldr	r3, [pc, #600]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a95      	ldr	r2, [pc, #596]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80042ee:	f043 0310 	orr.w	r3, r3, #16
 80042f2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80042f4:	f7fd f8ec 	bl	80014d0 <HAL_GetTick>
 80042f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80042fc:	f7fd f8e8 	bl	80014d0 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e18b      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800430e:	4b8d      	ldr	r3, [pc, #564]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCC_OscConfig+0xa80>
 800431a:	e018      	b.n	800434e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800431c:	4b89      	ldr	r3, [pc, #548]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a88      	ldr	r2, [pc, #544]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004322:	f023 0310 	bic.w	r3, r3, #16
 8004326:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004328:	f7fd f8d2 	bl	80014d0 <HAL_GetTick>
 800432c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004330:	f7fd f8ce 	bl	80014d0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e171      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004342:	4b80      	ldr	r3, [pc, #512]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8166 	beq.w	8004624 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004358:	2300      	movs	r3, #0
 800435a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800435e:	4b79      	ldr	r3, [pc, #484]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	2b0c      	cmp	r3, #12
 8004368:	f000 80f2 	beq.w	8004550 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004370:	2b02      	cmp	r3, #2
 8004372:	f040 80c5 	bne.w	8004500 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004376:	4b73      	ldr	r3, [pc, #460]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a72      	ldr	r2, [pc, #456]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 800437c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004380:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004382:	f7fd f8a5 	bl	80014d0 <HAL_GetTick>
 8004386:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438a:	f7fd f8a1 	bl	80014d0 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e144      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800439c:	4b69      	ldr	r3, [pc, #420]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f0      	bne.n	800438a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a8:	4b66      	ldr	r3, [pc, #408]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80043aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d111      	bne.n	80043da <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80043b6:	4b63      	ldr	r3, [pc, #396]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80043b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043bc:	4a61      	ldr	r2, [pc, #388]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80043be:	f043 0304 	orr.w	r3, r3, #4
 80043c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80043c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80043c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80043da:	4b5b      	ldr	r3, [pc, #364]	@ (8004548 <HAL_RCC_OscConfig+0xccc>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043e6:	d102      	bne.n	80043ee <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80043ee:	4b56      	ldr	r3, [pc, #344]	@ (8004548 <HAL_RCC_OscConfig+0xccc>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	4a55      	ldr	r2, [pc, #340]	@ (8004548 <HAL_RCC_OscConfig+0xccc>)
 80043f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043f8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80043fa:	4b52      	ldr	r3, [pc, #328]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80043fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004402:	f023 0303 	bic.w	r3, r3, #3
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800440e:	3a01      	subs	r2, #1
 8004410:	0212      	lsls	r2, r2, #8
 8004412:	4311      	orrs	r1, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004418:	430a      	orrs	r2, r1
 800441a:	494a      	ldr	r1, [pc, #296]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 800441c:	4313      	orrs	r3, r2
 800441e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004420:	4b48      	ldr	r3, [pc, #288]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004422:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004424:	4b49      	ldr	r3, [pc, #292]	@ (800454c <HAL_RCC_OscConfig+0xcd0>)
 8004426:	4013      	ands	r3, r2
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800442c:	3a01      	subs	r2, #1
 800442e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004436:	3a01      	subs	r2, #1
 8004438:	0252      	lsls	r2, r2, #9
 800443a:	b292      	uxth	r2, r2
 800443c:	4311      	orrs	r1, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004442:	3a01      	subs	r2, #1
 8004444:	0412      	lsls	r2, r2, #16
 8004446:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800444a:	4311      	orrs	r1, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004450:	3a01      	subs	r2, #1
 8004452:	0612      	lsls	r2, r2, #24
 8004454:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004458:	430a      	orrs	r2, r1
 800445a:	493a      	ldr	r1, [pc, #232]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 800445c:	4313      	orrs	r3, r2
 800445e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004460:	4b38      	ldr	r3, [pc, #224]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	4a37      	ldr	r2, [pc, #220]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004466:	f023 0310 	bic.w	r3, r3, #16
 800446a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004470:	4a34      	ldr	r2, [pc, #208]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004476:	4b33      	ldr	r3, [pc, #204]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447a:	4a32      	ldr	r2, [pc, #200]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 800447c:	f043 0310 	orr.w	r3, r3, #16
 8004480:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004482:	4b30      	ldr	r3, [pc, #192]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004486:	f023 020c 	bic.w	r2, r3, #12
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448e:	492d      	ldr	r1, [pc, #180]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004490:	4313      	orrs	r3, r2
 8004492:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004494:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004498:	2b01      	cmp	r3, #1
 800449a:	d105      	bne.n	80044a8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800449c:	4b2a      	ldr	r3, [pc, #168]	@ (8004548 <HAL_RCC_OscConfig+0xccc>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4a29      	ldr	r2, [pc, #164]	@ (8004548 <HAL_RCC_OscConfig+0xccc>)
 80044a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044a6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80044a8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80044b0:	4b24      	ldr	r3, [pc, #144]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80044b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044b6:	4a23      	ldr	r2, [pc, #140]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80044b8:	f023 0304 	bic.w	r3, r3, #4
 80044bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80044c0:	4b20      	ldr	r3, [pc, #128]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80044c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044ca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80044cc:	f7fd f800 	bl	80014d0 <HAL_GetTick>
 80044d0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d4:	f7fc fffc 	bl	80014d0 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e09f      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80044e6:	4b17      	ldr	r3, [pc, #92]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80044f2:	4b14      	ldr	r3, [pc, #80]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80044f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f6:	4a13      	ldr	r2, [pc, #76]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 80044f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044fc:	6293      	str	r3, [r2, #40]	@ 0x28
 80044fe:	e091      	b.n	8004624 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004500:	4b10      	ldr	r3, [pc, #64]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0f      	ldr	r2, [pc, #60]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004506:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800450a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800450c:	f7fc ffe0 	bl	80014d0 <HAL_GetTick>
 8004510:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004514:	f7fc ffdc 	bl	80014d0 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e07f      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004526:	4b07      	ldr	r3, [pc, #28]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004532:	4b04      	ldr	r3, [pc, #16]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004536:	4a03      	ldr	r2, [pc, #12]	@ (8004544 <HAL_RCC_OscConfig+0xcc8>)
 8004538:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800453c:	f023 0303 	bic.w	r3, r3, #3
 8004540:	6293      	str	r3, [r2, #40]	@ 0x28
 8004542:	e06f      	b.n	8004624 <HAL_RCC_OscConfig+0xda8>
 8004544:	46020c00 	.word	0x46020c00
 8004548:	46020800 	.word	0x46020800
 800454c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004550:	4b37      	ldr	r3, [pc, #220]	@ (8004630 <HAL_RCC_OscConfig+0xdb4>)
 8004552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004554:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004556:	4b36      	ldr	r3, [pc, #216]	@ (8004630 <HAL_RCC_OscConfig+0xdb4>)
 8004558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004560:	2b01      	cmp	r3, #1
 8004562:	d039      	beq.n	80045d8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f003 0203 	and.w	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d132      	bne.n	80045d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	0a1b      	lsrs	r3, r3, #8
 8004576:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004580:	429a      	cmp	r2, r3
 8004582:	d129      	bne.n	80045d8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800458e:	429a      	cmp	r2, r3
 8004590:	d122      	bne.n	80045d8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800459c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800459e:	429a      	cmp	r2, r3
 80045a0:	d11a      	bne.n	80045d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	0a5b      	lsrs	r3, r3, #9
 80045a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d111      	bne.n	80045d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	0c1b      	lsrs	r3, r3, #16
 80045b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d108      	bne.n	80045d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	0e1b      	lsrs	r3, r3, #24
 80045ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e024      	b.n	8004626 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80045dc:	4b14      	ldr	r3, [pc, #80]	@ (8004630 <HAL_RCC_OscConfig+0xdb4>)
 80045de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e0:	08db      	lsrs	r3, r3, #3
 80045e2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d01a      	beq.n	8004624 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80045ee:	4b10      	ldr	r3, [pc, #64]	@ (8004630 <HAL_RCC_OscConfig+0xdb4>)
 80045f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f2:	4a0f      	ldr	r2, [pc, #60]	@ (8004630 <HAL_RCC_OscConfig+0xdb4>)
 80045f4:	f023 0310 	bic.w	r3, r3, #16
 80045f8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fa:	f7fc ff69 	bl	80014d0 <HAL_GetTick>
 80045fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004600:	bf00      	nop
 8004602:	f7fc ff65 	bl	80014d0 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460a:	4293      	cmp	r3, r2
 800460c:	d0f9      	beq.n	8004602 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004612:	4a07      	ldr	r2, [pc, #28]	@ (8004630 <HAL_RCC_OscConfig+0xdb4>)
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <HAL_RCC_OscConfig+0xdb4>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	4a04      	ldr	r2, [pc, #16]	@ (8004630 <HAL_RCC_OscConfig+0xdb4>)
 800461e:	f043 0310 	orr.w	r3, r3, #16
 8004622:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3738      	adds	r7, #56	@ 0x38
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	46020c00 	.word	0x46020c00

08004634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e1d9      	b.n	80049fc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004648:	4b9b      	ldr	r3, [pc, #620]	@ (80048b8 <HAL_RCC_ClockConfig+0x284>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d910      	bls.n	8004678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004656:	4b98      	ldr	r3, [pc, #608]	@ (80048b8 <HAL_RCC_ClockConfig+0x284>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f023 020f 	bic.w	r2, r3, #15
 800465e:	4996      	ldr	r1, [pc, #600]	@ (80048b8 <HAL_RCC_ClockConfig+0x284>)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	4313      	orrs	r3, r2
 8004664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004666:	4b94      	ldr	r3, [pc, #592]	@ (80048b8 <HAL_RCC_ClockConfig+0x284>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d001      	beq.n	8004678 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e1c1      	b.n	80049fc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	d010      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695a      	ldr	r2, [r3, #20]
 8004688:	4b8c      	ldr	r3, [pc, #560]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004690:	429a      	cmp	r2, r3
 8004692:	d908      	bls.n	80046a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004694:	4b89      	ldr	r3, [pc, #548]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 8004696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004698:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	4986      	ldr	r1, [pc, #536]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d012      	beq.n	80046d8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	4b81      	ldr	r3, [pc, #516]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d909      	bls.n	80046d8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80046c4:	4b7d      	ldr	r3, [pc, #500]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	497a      	ldr	r1, [pc, #488]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d010      	beq.n	8004706 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	4b74      	ldr	r3, [pc, #464]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d908      	bls.n	8004706 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80046f4:	4b71      	ldr	r3, [pc, #452]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	496e      	ldr	r1, [pc, #440]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 8004702:	4313      	orrs	r3, r2
 8004704:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d010      	beq.n	8004734 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	4b69      	ldr	r3, [pc, #420]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	429a      	cmp	r2, r3
 8004720:	d908      	bls.n	8004734 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004722:	4b66      	ldr	r3, [pc, #408]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	f023 020f 	bic.w	r2, r3, #15
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	4963      	ldr	r1, [pc, #396]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 8004730:	4313      	orrs	r3, r2
 8004732:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80d2 	beq.w	80048e6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b03      	cmp	r3, #3
 800474c:	d143      	bne.n	80047d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800474e:	4b5b      	ldr	r3, [pc, #364]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 8004750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d110      	bne.n	800477e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800475c:	4b57      	ldr	r3, [pc, #348]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 800475e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004762:	4a56      	ldr	r2, [pc, #344]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 8004764:	f043 0304 	orr.w	r3, r3, #4
 8004768:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800476c:	4b53      	ldr	r3, [pc, #332]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 800476e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800477a:	2301      	movs	r3, #1
 800477c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800477e:	f7fc fea7 	bl	80014d0 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004784:	4b4e      	ldr	r3, [pc, #312]	@ (80048c0 <HAL_RCC_ClockConfig+0x28c>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00f      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004792:	f7fc fe9d 	bl	80014d0 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e12b      	b.n	80049fc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80047a4:	4b46      	ldr	r3, [pc, #280]	@ (80048c0 <HAL_RCC_ClockConfig+0x28c>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80047b0:	7dfb      	ldrb	r3, [r7, #23]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80047b6:	4b41      	ldr	r3, [pc, #260]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 80047b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047bc:	4a3f      	ldr	r2, [pc, #252]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 80047be:	f023 0304 	bic.w	r3, r3, #4
 80047c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80047c6:	4b3d      	ldr	r3, [pc, #244]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d121      	bne.n	8004816 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e112      	b.n	80049fc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047de:	4b37      	ldr	r3, [pc, #220]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d115      	bne.n	8004816 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e106      	b.n	80049fc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80047f6:	4b31      	ldr	r3, [pc, #196]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e0fa      	b.n	80049fc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004806:	4b2d      	ldr	r3, [pc, #180]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e0f2      	b.n	80049fc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004816:	4b29      	ldr	r3, [pc, #164]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f023 0203 	bic.w	r2, r3, #3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4926      	ldr	r1, [pc, #152]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 8004824:	4313      	orrs	r3, r2
 8004826:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004828:	f7fc fe52 	bl	80014d0 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b03      	cmp	r3, #3
 8004834:	d112      	bne.n	800485c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004836:	e00a      	b.n	800484e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004838:	f7fc fe4a 	bl	80014d0 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0d6      	b.n	80049fc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800484e:	4b1b      	ldr	r3, [pc, #108]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b0c      	cmp	r3, #12
 8004858:	d1ee      	bne.n	8004838 <HAL_RCC_ClockConfig+0x204>
 800485a:	e044      	b.n	80048e6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d112      	bne.n	800488a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004864:	e00a      	b.n	800487c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004866:	f7fc fe33 	bl	80014d0 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d901      	bls.n	800487c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e0bf      	b.n	80049fc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800487c:	4b0f      	ldr	r3, [pc, #60]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b08      	cmp	r3, #8
 8004886:	d1ee      	bne.n	8004866 <HAL_RCC_ClockConfig+0x232>
 8004888:	e02d      	b.n	80048e6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d123      	bne.n	80048da <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004892:	e00a      	b.n	80048aa <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004894:	f7fc fe1c 	bl	80014d0 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e0a8      	b.n	80049fc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80048aa:	4b04      	ldr	r3, [pc, #16]	@ (80048bc <HAL_RCC_ClockConfig+0x288>)
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1ee      	bne.n	8004894 <HAL_RCC_ClockConfig+0x260>
 80048b6:	e016      	b.n	80048e6 <HAL_RCC_ClockConfig+0x2b2>
 80048b8:	40022000 	.word	0x40022000
 80048bc:	46020c00 	.word	0x46020c00
 80048c0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c4:	f7fc fe04 	bl	80014d0 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e090      	b.n	80049fc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80048da:	4b4a      	ldr	r3, [pc, #296]	@ (8004a04 <HAL_RCC_ClockConfig+0x3d0>)
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d1ee      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d010      	beq.n	8004914 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	4b43      	ldr	r3, [pc, #268]	@ (8004a04 <HAL_RCC_ClockConfig+0x3d0>)
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	429a      	cmp	r2, r3
 8004900:	d208      	bcs.n	8004914 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004902:	4b40      	ldr	r3, [pc, #256]	@ (8004a04 <HAL_RCC_ClockConfig+0x3d0>)
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f023 020f 	bic.w	r2, r3, #15
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	493d      	ldr	r1, [pc, #244]	@ (8004a04 <HAL_RCC_ClockConfig+0x3d0>)
 8004910:	4313      	orrs	r3, r2
 8004912:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004914:	4b3c      	ldr	r3, [pc, #240]	@ (8004a08 <HAL_RCC_ClockConfig+0x3d4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d210      	bcs.n	8004944 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b39      	ldr	r3, [pc, #228]	@ (8004a08 <HAL_RCC_ClockConfig+0x3d4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 020f 	bic.w	r2, r3, #15
 800492a:	4937      	ldr	r1, [pc, #220]	@ (8004a08 <HAL_RCC_ClockConfig+0x3d4>)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	4313      	orrs	r3, r2
 8004930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b35      	ldr	r3, [pc, #212]	@ (8004a08 <HAL_RCC_ClockConfig+0x3d4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e05b      	b.n	80049fc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d010      	beq.n	8004972 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	4b2b      	ldr	r3, [pc, #172]	@ (8004a04 <HAL_RCC_ClockConfig+0x3d0>)
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800495c:	429a      	cmp	r2, r3
 800495e:	d208      	bcs.n	8004972 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004960:	4b28      	ldr	r3, [pc, #160]	@ (8004a04 <HAL_RCC_ClockConfig+0x3d0>)
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4925      	ldr	r1, [pc, #148]	@ (8004a04 <HAL_RCC_ClockConfig+0x3d0>)
 800496e:	4313      	orrs	r3, r2
 8004970:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d012      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	4b20      	ldr	r3, [pc, #128]	@ (8004a04 <HAL_RCC_ClockConfig+0x3d0>)
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	091b      	lsrs	r3, r3, #4
 8004988:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800498c:	429a      	cmp	r2, r3
 800498e:	d209      	bcs.n	80049a4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004990:	4b1c      	ldr	r3, [pc, #112]	@ (8004a04 <HAL_RCC_ClockConfig+0x3d0>)
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	4919      	ldr	r1, [pc, #100]	@ (8004a04 <HAL_RCC_ClockConfig+0x3d0>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d010      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	4b13      	ldr	r3, [pc, #76]	@ (8004a04 <HAL_RCC_ClockConfig+0x3d0>)
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049bc:	429a      	cmp	r2, r3
 80049be:	d208      	bcs.n	80049d2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80049c0:	4b10      	ldr	r3, [pc, #64]	@ (8004a04 <HAL_RCC_ClockConfig+0x3d0>)
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	490d      	ldr	r1, [pc, #52]	@ (8004a04 <HAL_RCC_ClockConfig+0x3d0>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80049d2:	f000 f821 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80049d6:	4602      	mov	r2, r0
 80049d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a04 <HAL_RCC_ClockConfig+0x3d0>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	490a      	ldr	r1, [pc, #40]	@ (8004a0c <HAL_RCC_ClockConfig+0x3d8>)
 80049e2:	5ccb      	ldrb	r3, [r1, r3]
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
 80049e8:	4a09      	ldr	r2, [pc, #36]	@ (8004a10 <HAL_RCC_ClockConfig+0x3dc>)
 80049ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049ec:	4b09      	ldr	r3, [pc, #36]	@ (8004a14 <HAL_RCC_ClockConfig+0x3e0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fc fce3 	bl	80013bc <HAL_InitTick>
 80049f6:	4603      	mov	r3, r0
 80049f8:	73fb      	strb	r3, [r7, #15]

  return status;
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	46020c00 	.word	0x46020c00
 8004a08:	40022000 	.word	0x40022000
 8004a0c:	0800b800 	.word	0x0800b800
 8004a10:	20000000 	.word	0x20000000
 8004a14:	20000004 	.word	0x20000004

08004a18 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b08b      	sub	sp, #44	@ 0x2c
 8004a1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a26:	4b78      	ldr	r3, [pc, #480]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a30:	4b75      	ldr	r3, [pc, #468]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x34>
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d121      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d11e      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004a4c:	4b6e      	ldr	r3, [pc, #440]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004a58:	4b6b      	ldr	r3, [pc, #428]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a5e:	0b1b      	lsrs	r3, r3, #12
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a66:	e005      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004a68:	4b67      	ldr	r3, [pc, #412]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	0f1b      	lsrs	r3, r3, #28
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a74:	4a65      	ldr	r2, [pc, #404]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d110      	bne.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a88:	e00d      	b.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d102      	bne.n	8004a9c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a96:	4b5e      	ldr	r3, [pc, #376]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004a98:	623b      	str	r3, [r7, #32]
 8004a9a:	e004      	b.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004aa4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b0c      	cmp	r3, #12
 8004aaa:	f040 80a5 	bne.w	8004bf8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004aae:	4b56      	ldr	r3, [pc, #344]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004ab8:	4b53      	ldr	r3, [pc, #332]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abc:	0a1b      	lsrs	r3, r3, #8
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004ac6:	4b50      	ldr	r3, [pc, #320]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	091b      	lsrs	r3, r3, #4
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004ad2:	4b4d      	ldr	r3, [pc, #308]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad6:	08db      	lsrs	r3, r3, #3
 8004ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d003      	beq.n	8004afc <HAL_RCC_GetSysClockFreq+0xe4>
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d022      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0x128>
 8004afa:	e043      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b06:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004c14 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b1e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004b22:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004c18 <HAL_RCC_GetSysClockFreq+0x200>
 8004b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b3e:	e046      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004c14 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b52:	4b2d      	ldr	r3, [pc, #180]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b62:	ed97 6a01 	vldr	s12, [r7, #4]
 8004b66:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004c18 <HAL_RCC_GetSysClockFreq+0x200>
 8004b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b82:	e024      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	ee07 3a90 	vmov	s15, r3
 8004b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba4:	ee07 3a90 	vmov	s15, r3
 8004ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004bac:	ed97 6a01 	vldr	s12, [r7, #4]
 8004bb0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004c18 <HAL_RCC_GetSysClockFreq+0x200>
 8004bb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004bbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bcc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004bce:	4b0e      	ldr	r3, [pc, #56]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd2:	0e1b      	lsrs	r3, r3, #24
 8004bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd8:	3301      	adds	r3, #1
 8004bda:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004be6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf2:	ee17 3a90 	vmov	r3, s15
 8004bf6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	372c      	adds	r7, #44	@ 0x2c
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	46020c00 	.word	0x46020c00
 8004c0c:	0800b818 	.word	0x0800b818
 8004c10:	00f42400 	.word	0x00f42400
 8004c14:	4b742400 	.word	0x4b742400
 8004c18:	46000000 	.word	0x46000000

08004c1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004c20:	f7ff fefa 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b07      	ldr	r3, [pc, #28]	@ (8004c44 <HAL_RCC_GetHCLKFreq+0x28>)
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	4906      	ldr	r1, [pc, #24]	@ (8004c48 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004c30:	5ccb      	ldrb	r3, [r1, r3]
 8004c32:	fa22 f303 	lsr.w	r3, r2, r3
 8004c36:	4a05      	ldr	r2, [pc, #20]	@ (8004c4c <HAL_RCC_GetHCLKFreq+0x30>)
 8004c38:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004c3a:	4b04      	ldr	r3, [pc, #16]	@ (8004c4c <HAL_RCC_GetHCLKFreq+0x30>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	46020c00 	.word	0x46020c00
 8004c48:	0800b800 	.word	0x0800b800
 8004c4c:	20000000 	.word	0x20000000

08004c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004c54:	f7ff ffe2 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	091b      	lsrs	r3, r3, #4
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	4903      	ldr	r1, [pc, #12]	@ (8004c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c66:	5ccb      	ldrb	r3, [r1, r3]
 8004c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	46020c00 	.word	0x46020c00
 8004c74:	0800b810 	.word	0x0800b810

08004c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004c7c:	f7ff ffce 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004c80:	4602      	mov	r2, r0
 8004c82:	4b05      	ldr	r3, [pc, #20]	@ (8004c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	4903      	ldr	r1, [pc, #12]	@ (8004c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c8e:	5ccb      	ldrb	r3, [r1, r3]
 8004c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	46020c00 	.word	0x46020c00
 8004c9c:	0800b810 	.word	0x0800b810

08004ca0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004ca4:	f7ff ffba 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	4903      	ldr	r1, [pc, #12]	@ (8004cc4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004cb6:	5ccb      	ldrb	r3, [r1, r3]
 8004cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	46020c00 	.word	0x46020c00
 8004cc4:	0800b810 	.word	0x0800b810

08004cc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004cd0:	4b3e      	ldr	r3, [pc, #248]	@ (8004dcc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cde:	f7fe fd3f 	bl	8003760 <HAL_PWREx_GetVoltageRange>
 8004ce2:	6178      	str	r0, [r7, #20]
 8004ce4:	e019      	b.n	8004d1a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	4b39      	ldr	r3, [pc, #228]	@ (8004dcc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cec:	4a37      	ldr	r2, [pc, #220]	@ (8004dcc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004cee:	f043 0304 	orr.w	r3, r3, #4
 8004cf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004cf6:	4b35      	ldr	r3, [pc, #212]	@ (8004dcc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d04:	f7fe fd2c 	bl	8003760 <HAL_PWREx_GetVoltageRange>
 8004d08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d0a:	4b30      	ldr	r3, [pc, #192]	@ (8004dcc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d10:	4a2e      	ldr	r2, [pc, #184]	@ (8004dcc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d12:	f023 0304 	bic.w	r3, r3, #4
 8004d16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d20:	d003      	beq.n	8004d2a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d28:	d109      	bne.n	8004d3e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d30:	d202      	bcs.n	8004d38 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004d32:	2301      	movs	r3, #1
 8004d34:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004d36:	e033      	b.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004d3c:	e030      	b.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d44:	d208      	bcs.n	8004d58 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d4c:	d102      	bne.n	8004d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004d4e:	2303      	movs	r3, #3
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	e025      	b.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e035      	b.n	8004dc4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d5e:	d90f      	bls.n	8004d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d6c:	d902      	bls.n	8004d74 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	e015      	b.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004d74:	2301      	movs	r3, #1
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	e012      	b.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	e00f      	b.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d86:	d109      	bne.n	8004d9c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d8e:	d102      	bne.n	8004d96 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004d90:	2301      	movs	r3, #1
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	e004      	b.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004d96:	2302      	movs	r3, #2
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	e001      	b.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004da0:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 020f 	bic.w	r2, r3, #15
 8004da8:	4909      	ldr	r1, [pc, #36]	@ (8004dd0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004db0:	4b07      	ldr	r3, [pc, #28]	@ (8004dd0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d001      	beq.n	8004dc2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	46020c00 	.word	0x46020c00
 8004dd0:	40022000 	.word	0x40022000

08004dd4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd8:	b0b8      	sub	sp, #224	@ 0xe0
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004de0:	2300      	movs	r3, #0
 8004de2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004de6:	2300      	movs	r3, #0
 8004de8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f002 0401 	and.w	r4, r2, #1
 8004df8:	2500      	movs	r5, #0
 8004dfa:	ea54 0305 	orrs.w	r3, r4, r5
 8004dfe:	d00b      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004e00:	4bca      	ldr	r3, [pc, #808]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e06:	f023 0103 	bic.w	r1, r3, #3
 8004e0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e10:	4ac6      	ldr	r2, [pc, #792]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e12:	430b      	orrs	r3, r1
 8004e14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f002 0802 	and.w	r8, r2, #2
 8004e24:	f04f 0900 	mov.w	r9, #0
 8004e28:	ea58 0309 	orrs.w	r3, r8, r9
 8004e2c:	d00b      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004e2e:	4bbf      	ldr	r3, [pc, #764]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e34:	f023 010c 	bic.w	r1, r3, #12
 8004e38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e3e:	4abb      	ldr	r2, [pc, #748]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e40:	430b      	orrs	r3, r1
 8004e42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4e:	f002 0a04 	and.w	sl, r2, #4
 8004e52:	f04f 0b00 	mov.w	fp, #0
 8004e56:	ea5a 030b 	orrs.w	r3, sl, fp
 8004e5a:	d00b      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004e5c:	4bb3      	ldr	r3, [pc, #716]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e62:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004e66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6c:	4aaf      	ldr	r2, [pc, #700]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	f002 0308 	and.w	r3, r2, #8
 8004e80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e84:	2300      	movs	r3, #0
 8004e86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4313      	orrs	r3, r2
 8004e92:	d00b      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004e94:	4ba5      	ldr	r3, [pc, #660]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea4:	4aa1      	ldr	r2, [pc, #644]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	f002 0310 	and.w	r3, r2, #16
 8004eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004ec2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	d00b      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004ecc:	4b97      	ldr	r3, [pc, #604]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ed2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ed6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004edc:	4a93      	ldr	r2, [pc, #588]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ee4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f002 0320 	and.w	r3, r2, #32
 8004ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004efa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4313      	orrs	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004f04:	4b89      	ldr	r3, [pc, #548]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f0a:	f023 0107 	bic.w	r1, r3, #7
 8004f0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f14:	4a85      	ldr	r2, [pc, #532]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f16:	430b      	orrs	r3, r1
 8004f18:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004f28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f32:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f36:	460b      	mov	r3, r1
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004f3c:	4b7b      	ldr	r3, [pc, #492]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f42:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004f46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f4c:	4a77      	ldr	r2, [pc, #476]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004f60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f64:	2300      	movs	r3, #0
 8004f66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f6a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4313      	orrs	r3, r2
 8004f72:	d00b      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004f74:	4b6d      	ldr	r3, [pc, #436]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f84:	4a69      	ldr	r2, [pc, #420]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f86:	430b      	orrs	r3, r1
 8004f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fa2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	d00b      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004fac:	4b5f      	ldr	r3, [pc, #380]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004fb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fbc:	4a5b      	ldr	r2, [pc, #364]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fbe:	430b      	orrs	r3, r1
 8004fc0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004fd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004fda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004fe4:	4b51      	ldr	r3, [pc, #324]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fea:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004fee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff4:	4a4d      	ldr	r2, [pc, #308]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ffc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005004:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800500c:	2300      	movs	r3, #0
 800500e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005012:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005016:	460b      	mov	r3, r1
 8005018:	4313      	orrs	r3, r2
 800501a:	d00b      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800501c:	4b43      	ldr	r3, [pc, #268]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800501e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005022:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005026:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800502a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800502c:	4a3f      	ldr	r2, [pc, #252]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800502e:	430b      	orrs	r3, r1
 8005030:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005040:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005044:	2300      	movs	r3, #0
 8005046:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800504a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800504e:	460b      	mov	r3, r1
 8005050:	4313      	orrs	r3, r2
 8005052:	d00b      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005054:	4b35      	ldr	r3, [pc, #212]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800505a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800505e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005062:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005064:	4a31      	ldr	r2, [pc, #196]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005066:	430b      	orrs	r3, r1
 8005068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800506c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005078:	67bb      	str	r3, [r7, #120]	@ 0x78
 800507a:	2300      	movs	r3, #0
 800507c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800507e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005082:	460b      	mov	r3, r1
 8005084:	4313      	orrs	r3, r2
 8005086:	d00c      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005088:	4b28      	ldr	r3, [pc, #160]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800508a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800508e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005092:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800509a:	4a24      	ldr	r2, [pc, #144]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800509c:	430b      	orrs	r3, r1
 800509e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80050ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80050b0:	2300      	movs	r3, #0
 80050b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80050b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80050b8:	460b      	mov	r3, r1
 80050ba:	4313      	orrs	r3, r2
 80050bc:	d04f      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80050be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c6:	2b80      	cmp	r3, #128	@ 0x80
 80050c8:	d02d      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80050ca:	2b80      	cmp	r3, #128	@ 0x80
 80050cc:	d827      	bhi.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80050ce:	2b60      	cmp	r3, #96	@ 0x60
 80050d0:	d02e      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80050d2:	2b60      	cmp	r3, #96	@ 0x60
 80050d4:	d823      	bhi.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80050d6:	2b40      	cmp	r3, #64	@ 0x40
 80050d8:	d006      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80050da:	2b40      	cmp	r3, #64	@ 0x40
 80050dc:	d81f      	bhi.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d009      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	d011      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x336>
 80050e6:	e01a      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050e8:	4b10      	ldr	r3, [pc, #64]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80050ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ec:	4a0f      	ldr	r2, [pc, #60]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80050ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050f2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80050f4:	e01d      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050fa:	3308      	adds	r3, #8
 80050fc:	4618      	mov	r0, r3
 80050fe:	f002 f9d1 	bl	80074a4 <RCCEx_PLL2_Config>
 8005102:	4603      	mov	r3, r0
 8005104:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005108:	e013      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800510a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800510e:	332c      	adds	r3, #44	@ 0x2c
 8005110:	4618      	mov	r0, r3
 8005112:	f002 fa5f 	bl	80075d4 <RCCEx_PLL3_Config>
 8005116:	4603      	mov	r3, r0
 8005118:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800511c:	e009      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005124:	e005      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8005126:	bf00      	nop
 8005128:	e003      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800512a:	bf00      	nop
 800512c:	46020c00 	.word	0x46020c00
        break;
 8005130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005132:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10d      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800513a:	4bb6      	ldr	r3, [pc, #728]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800513c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005140:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005144:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514c:	4ab1      	ldr	r2, [pc, #708]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800514e:	430b      	orrs	r3, r1
 8005150:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005154:	e003      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005156:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800515a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800515e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800516a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800516c:	2300      	movs	r3, #0
 800516e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005170:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005174:	460b      	mov	r3, r1
 8005176:	4313      	orrs	r3, r2
 8005178:	d053      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800517a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800517e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005186:	d033      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518c:	d82c      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800518e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005192:	d02f      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005198:	d826      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800519a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800519e:	d008      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80051a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051a4:	d820      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80051aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ae:	d011      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80051b0:	e01a      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051b2:	4b98      	ldr	r3, [pc, #608]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b6:	4a97      	ldr	r2, [pc, #604]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051bc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80051be:	e01a      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051c4:	3308      	adds	r3, #8
 80051c6:	4618      	mov	r0, r3
 80051c8:	f002 f96c 	bl	80074a4 <RCCEx_PLL2_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80051d2:	e010      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051d8:	332c      	adds	r3, #44	@ 0x2c
 80051da:	4618      	mov	r0, r3
 80051dc:	f002 f9fa 	bl	80075d4 <RCCEx_PLL3_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80051e6:	e006      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80051ee:	e002      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80051f0:	bf00      	nop
 80051f2:	e000      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80051f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10d      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80051fe:	4b85      	ldr	r3, [pc, #532]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005200:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005204:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005208:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800520c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005210:	4a80      	ldr	r2, [pc, #512]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005212:	430b      	orrs	r3, r1
 8005214:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005218:	e003      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800521e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005222:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800522e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005230:	2300      	movs	r3, #0
 8005232:	667b      	str	r3, [r7, #100]	@ 0x64
 8005234:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005238:	460b      	mov	r3, r1
 800523a:	4313      	orrs	r3, r2
 800523c:	d046      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800523e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005242:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005246:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800524a:	d028      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800524c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005250:	d821      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005252:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005256:	d022      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005258:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800525c:	d81b      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800525e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005262:	d01c      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005264:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005268:	d815      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800526a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800526e:	d008      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005274:	d80f      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d011      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800527e:	d00e      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005280:	e009      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005282:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005286:	3308      	adds	r3, #8
 8005288:	4618      	mov	r0, r3
 800528a:	f002 f90b 	bl	80074a4 <RCCEx_PLL2_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005294:	e004      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800529c:	e000      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800529e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10d      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80052a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052ae:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80052b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052ba:	4a56      	ldr	r2, [pc, #344]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052bc:	430b      	orrs	r3, r1
 80052be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80052c2:	e003      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052c8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80052cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80052d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052da:	2300      	movs	r3, #0
 80052dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80052e2:	460b      	mov	r3, r1
 80052e4:	4313      	orrs	r3, r2
 80052e6:	d03f      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80052e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d81e      	bhi.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80052f4:	a201      	add	r2, pc, #4	@ (adr r2, 80052fc <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	0800533b 	.word	0x0800533b
 8005300:	08005311 	.word	0x08005311
 8005304:	0800531f 	.word	0x0800531f
 8005308:	0800533b 	.word	0x0800533b
 800530c:	0800533b 	.word	0x0800533b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005310:	4b40      	ldr	r3, [pc, #256]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005314:	4a3f      	ldr	r2, [pc, #252]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800531a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800531c:	e00e      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800531e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005322:	332c      	adds	r3, #44	@ 0x2c
 8005324:	4618      	mov	r0, r3
 8005326:	f002 f955 	bl	80075d4 <RCCEx_PLL3_Config>
 800532a:	4603      	mov	r3, r0
 800532c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005330:	e004      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005338:	e000      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800533a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800533c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10d      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005344:	4b33      	ldr	r3, [pc, #204]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005346:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800534a:	f023 0107 	bic.w	r1, r3, #7
 800534e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005356:	4a2f      	ldr	r2, [pc, #188]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005358:	430b      	orrs	r3, r1
 800535a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800535e:	e003      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005360:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005364:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005374:	653b      	str	r3, [r7, #80]	@ 0x50
 8005376:	2300      	movs	r3, #0
 8005378:	657b      	str	r3, [r7, #84]	@ 0x54
 800537a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800537e:	460b      	mov	r3, r1
 8005380:	4313      	orrs	r3, r2
 8005382:	d04d      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800538c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005390:	d028      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8005392:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005396:	d821      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005398:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800539c:	d024      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800539e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053a2:	d81b      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80053a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053a8:	d00e      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80053aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053ae:	d815      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01b      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x618>
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b8:	d110      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053ba:	4b16      	ldr	r3, [pc, #88]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80053bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053be:	4a15      	ldr	r2, [pc, #84]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80053c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053c4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80053c6:	e012      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053cc:	332c      	adds	r3, #44	@ 0x2c
 80053ce:	4618      	mov	r0, r3
 80053d0:	f002 f900 	bl	80075d4 <RCCEx_PLL3_Config>
 80053d4:	4603      	mov	r3, r0
 80053d6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80053da:	e008      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80053e2:	e004      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80053e4:	bf00      	nop
 80053e6:	e002      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80053e8:	bf00      	nop
 80053ea:	e000      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80053ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 80053ee:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d110      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80053f6:	4b07      	ldr	r3, [pc, #28]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80053f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005408:	4a02      	ldr	r2, [pc, #8]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800540a:	430b      	orrs	r3, r1
 800540c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005410:	e006      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005412:	bf00      	nop
 8005414:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005418:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800541c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005420:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005428:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800542c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800542e:	2300      	movs	r3, #0
 8005430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005432:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005436:	460b      	mov	r3, r1
 8005438:	4313      	orrs	r3, r2
 800543a:	f000 80b5 	beq.w	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800543e:	2300      	movs	r3, #0
 8005440:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005444:	4b9d      	ldr	r3, [pc, #628]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	d113      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005452:	4b9a      	ldr	r3, [pc, #616]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005454:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005458:	4a98      	ldr	r2, [pc, #608]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800545a:	f043 0304 	orr.w	r3, r3, #4
 800545e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005462:	4b96      	ldr	r3, [pc, #600]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005464:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005470:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800547a:	4b91      	ldr	r3, [pc, #580]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	4a90      	ldr	r2, [pc, #576]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005486:	f7fc f823 	bl	80014d0 <HAL_GetTick>
 800548a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800548e:	e00b      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005490:	f7fc f81e 	bl	80014d0 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d903      	bls.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80054a6:	e005      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80054a8:	4b85      	ldr	r3, [pc, #532]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0ed      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 80054b4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d165      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054bc:	4b7f      	ldr	r3, [pc, #508]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80054ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d023      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x746>
 80054d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054d6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80054da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01b      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054e2:	4b76      	ldr	r3, [pc, #472]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054f0:	4b72      	ldr	r3, [pc, #456]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054f6:	4a71      	ldr	r2, [pc, #452]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005500:	4b6e      	ldr	r3, [pc, #440]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005506:	4a6d      	ldr	r2, [pc, #436]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800550c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005510:	4a6a      	ldr	r2, [pc, #424]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005516:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800551a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d019      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005526:	f7fb ffd3 	bl	80014d0 <HAL_GetTick>
 800552a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800552e:	e00d      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005530:	f7fb ffce 	bl	80014d0 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800553a:	1ad2      	subs	r2, r2, r3
 800553c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005540:	429a      	cmp	r2, r3
 8005542:	d903      	bls.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 800554a:	e006      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800554c:	4b5b      	ldr	r3, [pc, #364]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800554e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0ea      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 800555a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10d      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005562:	4b56      	ldr	r3, [pc, #344]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005568:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800556c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005570:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005574:	4a51      	ldr	r2, [pc, #324]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005576:	430b      	orrs	r3, r1
 8005578:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800557c:	e008      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800557e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005582:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8005586:	e003      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005588:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800558c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005590:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8005594:	2b01      	cmp	r3, #1
 8005596:	d107      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005598:	4b48      	ldr	r3, [pc, #288]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800559a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800559e:	4a47      	ldr	r2, [pc, #284]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80055a0:	f023 0304 	bic.w	r3, r3, #4
 80055a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80055a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80055b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055b6:	2300      	movs	r3, #0
 80055b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80055be:	460b      	mov	r3, r1
 80055c0:	4313      	orrs	r3, r2
 80055c2:	d042      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80055c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055cc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80055d0:	d022      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80055d2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80055d6:	d81b      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80055d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055dc:	d011      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80055de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055e2:	d815      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d019      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x848>
 80055e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055ec:	d110      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055f2:	3308      	adds	r3, #8
 80055f4:	4618      	mov	r0, r3
 80055f6:	f001 ff55 	bl	80074a4 <RCCEx_PLL2_Config>
 80055fa:	4603      	mov	r3, r0
 80055fc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005600:	e00d      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005602:	4b2e      	ldr	r3, [pc, #184]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005606:	4a2d      	ldr	r2, [pc, #180]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800560c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800560e:	e006      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005616:	e002      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005618:	bf00      	nop
 800561a:	e000      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800561c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800561e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10d      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005626:	4b25      	ldr	r3, [pc, #148]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800562c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005630:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005634:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005638:	4a20      	ldr	r2, [pc, #128]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800563a:	430b      	orrs	r3, r1
 800563c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005640:	e003      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005642:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005646:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800564a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005656:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005658:	2300      	movs	r3, #0
 800565a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800565c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005660:	460b      	mov	r3, r1
 8005662:	4313      	orrs	r3, r2
 8005664:	d032      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005666:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800566a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800566e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005672:	d00b      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005678:	d804      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800567e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005682:	d007      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800568a:	e004      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800568c:	bf00      	nop
 800568e:	e002      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005690:	bf00      	nop
 8005692:	e000      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005694:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005696:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800569a:	2b00      	cmp	r3, #0
 800569c:	d112      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800569e:	4b07      	ldr	r3, [pc, #28]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80056a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056b0:	4a02      	ldr	r2, [pc, #8]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80056b2:	430b      	orrs	r3, r1
 80056b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056b8:	e008      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80056ba:	bf00      	nop
 80056bc:	46020c00 	.word	0x46020c00
 80056c0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056c8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80056cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80056d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80056da:	2300      	movs	r3, #0
 80056dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80056de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80056e2:	460b      	mov	r3, r1
 80056e4:	4313      	orrs	r3, r2
 80056e6:	d019      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80056e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056f4:	d105      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056f6:	4b88      	ldr	r3, [pc, #544]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fa:	4a87      	ldr	r2, [pc, #540]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005700:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005702:	4b85      	ldr	r3, [pc, #532]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005704:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005708:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800570c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005710:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005714:	4a80      	ldr	r2, [pc, #512]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005716:	430b      	orrs	r3, r1
 8005718:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800571c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800572a:	2300      	movs	r3, #0
 800572c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800572e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005732:	460b      	mov	r3, r1
 8005734:	4313      	orrs	r3, r2
 8005736:	d00c      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005738:	4b77      	ldr	r3, [pc, #476]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800573a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800573e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005742:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005746:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800574a:	4973      	ldr	r1, [pc, #460]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005752:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800575e:	623b      	str	r3, [r7, #32]
 8005760:	2300      	movs	r3, #0
 8005762:	627b      	str	r3, [r7, #36]	@ 0x24
 8005764:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005768:	460b      	mov	r3, r1
 800576a:	4313      	orrs	r3, r2
 800576c:	d00c      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800576e:	4b6a      	ldr	r3, [pc, #424]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005774:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005778:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800577c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005780:	4965      	ldr	r1, [pc, #404]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005790:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	2300      	movs	r3, #0
 8005798:	61fb      	str	r3, [r7, #28]
 800579a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800579e:	460b      	mov	r3, r1
 80057a0:	4313      	orrs	r3, r2
 80057a2:	d00c      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80057a4:	4b5c      	ldr	r3, [pc, #368]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057aa:	f023 0218 	bic.w	r2, r3, #24
 80057ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80057b6:	4958      	ldr	r1, [pc, #352]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80057be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80057d4:	460b      	mov	r3, r1
 80057d6:	4313      	orrs	r3, r2
 80057d8:	d032      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80057da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057e6:	d105      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ec:	4a4a      	ldr	r2, [pc, #296]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057f2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80057f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005800:	d108      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005802:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005806:	3308      	adds	r3, #8
 8005808:	4618      	mov	r0, r3
 800580a:	f001 fe4b 	bl	80074a4 <RCCEx_PLL2_Config>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8005814:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10d      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800581c:	4b3e      	ldr	r3, [pc, #248]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800581e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005822:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005826:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800582a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800582e:	493a      	ldr	r1, [pc, #232]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005836:	e003      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800583c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005840:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005856:	460b      	mov	r3, r1
 8005858:	4313      	orrs	r3, r2
 800585a:	d03a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800585c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005864:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005868:	d00e      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800586a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800586e:	d815      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d017      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8005874:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005878:	d110      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800587a:	4b27      	ldr	r3, [pc, #156]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800587c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587e:	4a26      	ldr	r2, [pc, #152]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005884:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005886:	e00e      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005888:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800588c:	3308      	adds	r3, #8
 800588e:	4618      	mov	r0, r3
 8005890:	f001 fe08 	bl	80074a4 <RCCEx_PLL2_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800589a:	e004      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80058a2:	e000      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80058a4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80058a6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10d      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80058ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80058b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058b4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80058b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058c0:	4915      	ldr	r1, [pc, #84]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80058c8:	e003      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80058ce:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80058d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	2300      	movs	r3, #0
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80058e8:	460b      	mov	r3, r1
 80058ea:	4313      	orrs	r3, r2
 80058ec:	d00c      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80058ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80058f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058f4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80058f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005900:	4905      	ldr	r1, [pc, #20]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005908:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 800590c:	4618      	mov	r0, r3
 800590e:	37e0      	adds	r7, #224	@ 0xe0
 8005910:	46bd      	mov	sp, r7
 8005912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005916:	bf00      	nop
 8005918:	46020c00 	.word	0x46020c00

0800591c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800591c:	b480      	push	{r7}
 800591e:	b089      	sub	sp, #36	@ 0x24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005924:	4ba6      	ldr	r3, [pc, #664]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800592e:	4ba4      	ldr	r3, [pc, #656]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005938:	4ba1      	ldr	r3, [pc, #644]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800593a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593c:	0a1b      	lsrs	r3, r3, #8
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	3301      	adds	r3, #1
 8005944:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005946:	4b9e      	ldr	r3, [pc, #632]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594a:	091b      	lsrs	r3, r3, #4
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005952:	4b9b      	ldr	r3, [pc, #620]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005956:	08db      	lsrs	r3, r3, #3
 8005958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	fb02 f303 	mul.w	r3, r2, r3
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b03      	cmp	r3, #3
 8005972:	d062      	beq.n	8005a3a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b03      	cmp	r3, #3
 8005978:	f200 8081 	bhi.w	8005a7e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d024      	beq.n	80059cc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2b02      	cmp	r3, #2
 8005986:	d17a      	bne.n	8005a7e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005992:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599a:	4b89      	ldr	r3, [pc, #548]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800599c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800599e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80059aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ae:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80059b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80059b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80059ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059be:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80059c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059ca:	e08f      	b.n	8005aec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80059cc:	4b7c      	ldr	r3, [pc, #496]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80059d8:	4b79      	ldr	r3, [pc, #484]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	0f1b      	lsrs	r3, r3, #28
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	e006      	b.n	80059f2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80059e4:	4b76      	ldr	r3, [pc, #472]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059ea:	041b      	lsls	r3, r3, #16
 80059ec:	0f1b      	lsrs	r3, r3, #28
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	4a76      	ldr	r2, [pc, #472]	@ (8005bcc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80059f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f8:	ee07 3a90 	vmov	s15, r3
 80059fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	ee07 3a90 	vmov	s15, r3
 8005a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a18:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a1c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a38:	e058      	b.n	8005aec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	ee07 3a90 	vmov	s15, r3
 8005a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a44:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005a48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a54:	ee07 3a90 	vmov	s15, r3
 8005a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a60:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005a64:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a68:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a70:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a7c:	e036      	b.n	8005aec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005a7e:	4b50      	ldr	r3, [pc, #320]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005a8a:	4b4d      	ldr	r3, [pc, #308]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	0f1b      	lsrs	r3, r3, #28
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	e006      	b.n	8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005a96:	4b4a      	ldr	r3, [pc, #296]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a9c:	041b      	lsls	r3, r3, #16
 8005a9e:	0f1b      	lsrs	r3, r3, #28
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	4a49      	ldr	r2, [pc, #292]	@ (8005bcc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	ee07 3a90 	vmov	s15, r3
 8005ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ace:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aea:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005aec:	4b34      	ldr	r3, [pc, #208]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d017      	beq.n	8005b28 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005af8:	4b31      	ldr	r3, [pc, #196]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005afc:	0a5b      	lsrs	r3, r3, #9
 8005afe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005b0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b1e:	ee17 2a90 	vmov	r2, s15
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	e002      	b.n	8005b2e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005b2e:	4b24      	ldr	r3, [pc, #144]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d017      	beq.n	8005b6a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b3a:	4b21      	ldr	r3, [pc, #132]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b3e:	0c1b      	lsrs	r3, r3, #16
 8005b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b44:	ee07 3a90 	vmov	s15, r3
 8005b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005b4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b50:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b54:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b60:	ee17 2a90 	vmov	r2, s15
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	605a      	str	r2, [r3, #4]
 8005b68:	e002      	b.n	8005b70 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005b70:	4b13      	ldr	r3, [pc, #76]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d017      	beq.n	8005bac <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b7c:	4b10      	ldr	r3, [pc, #64]	@ (8005bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b80:	0e1b      	lsrs	r3, r3, #24
 8005b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005b8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b92:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ba2:	ee17 2a90 	vmov	r2, s15
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005baa:	e002      	b.n	8005bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	609a      	str	r2, [r3, #8]
}
 8005bb2:	bf00      	nop
 8005bb4:	3724      	adds	r7, #36	@ 0x24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	46020c00 	.word	0x46020c00
 8005bc4:	4b742400 	.word	0x4b742400
 8005bc8:	46000000 	.word	0x46000000
 8005bcc:	0800b818 	.word	0x0800b818

08005bd0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b089      	sub	sp, #36	@ 0x24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005bd8:	4ba6      	ldr	r3, [pc, #664]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005be2:	4ba4      	ldr	r3, [pc, #656]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005bec:	4ba1      	ldr	r3, [pc, #644]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf0:	0a1b      	lsrs	r3, r3, #8
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005bfa:	4b9e      	ldr	r3, [pc, #632]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfe:	091b      	lsrs	r3, r3, #4
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005c06:	4b9b      	ldr	r3, [pc, #620]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	08db      	lsrs	r3, r3, #3
 8005c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	fb02 f303 	mul.w	r3, r2, r3
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d062      	beq.n	8005cee <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	f200 8081 	bhi.w	8005d32 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d024      	beq.n	8005c80 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d17a      	bne.n	8005d32 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4e:	4b89      	ldr	r3, [pc, #548]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c62:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c7e:	e08f      	b.n	8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005c80:	4b7c      	ldr	r3, [pc, #496]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005c8c:	4b79      	ldr	r3, [pc, #484]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	0f1b      	lsrs	r3, r3, #28
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	e006      	b.n	8005ca6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005c98:	4b76      	ldr	r3, [pc, #472]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c9e:	041b      	lsls	r3, r3, #16
 8005ca0:	0f1b      	lsrs	r3, r3, #28
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	4a76      	ldr	r2, [pc, #472]	@ (8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cac:	ee07 3a90 	vmov	s15, r3
 8005cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	ee07 3a90 	vmov	s15, r3
 8005cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ccc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cd0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cec:	e058      	b.n	8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	ee07 3a90 	vmov	s15, r3
 8005cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d00:	4b5c      	ldr	r3, [pc, #368]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d08:	ee07 3a90 	vmov	s15, r3
 8005d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d10:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d14:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d30:	e036      	b.n	8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005d32:	4b50      	ldr	r3, [pc, #320]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d005      	beq.n	8005d4a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005d3e:	4b4d      	ldr	r3, [pc, #308]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	0f1b      	lsrs	r3, r3, #28
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	e006      	b.n	8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d50:	041b      	lsls	r3, r3, #16
 8005d52:	0f1b      	lsrs	r3, r3, #28
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	4a49      	ldr	r2, [pc, #292]	@ (8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	ee07 3a90 	vmov	s15, r3
 8005d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d82:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d9e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005da0:	4b34      	ldr	r3, [pc, #208]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d017      	beq.n	8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005dac:	4b31      	ldr	r3, [pc, #196]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db0:	0a5b      	lsrs	r3, r3, #9
 8005db2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005dbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dc2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005dc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd2:	ee17 2a90 	vmov	r2, s15
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e002      	b.n	8005de2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005de2:	4b24      	ldr	r3, [pc, #144]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d017      	beq.n	8005e1e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005dee:	4b21      	ldr	r3, [pc, #132]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df2:	0c1b      	lsrs	r3, r3, #16
 8005df4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005e00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e04:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e14:	ee17 2a90 	vmov	r2, s15
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	605a      	str	r2, [r3, #4]
 8005e1c:	e002      	b.n	8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005e24:	4b13      	ldr	r3, [pc, #76]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d017      	beq.n	8005e60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e30:	4b10      	ldr	r3, [pc, #64]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e34:	0e1b      	lsrs	r3, r3, #24
 8005e36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005e42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e46:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e56:	ee17 2a90 	vmov	r2, s15
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e5e:	e002      	b.n	8005e66 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	609a      	str	r2, [r3, #8]
}
 8005e66:	bf00      	nop
 8005e68:	3724      	adds	r7, #36	@ 0x24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	46020c00 	.word	0x46020c00
 8005e78:	4b742400 	.word	0x4b742400
 8005e7c:	46000000 	.word	0x46000000
 8005e80:	0800b818 	.word	0x0800b818

08005e84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b089      	sub	sp, #36	@ 0x24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005e8c:	4ba6      	ldr	r3, [pc, #664]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e94:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005e96:	4ba4      	ldr	r3, [pc, #656]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005ea0:	4ba1      	ldr	r3, [pc, #644]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea4:	0a1b      	lsrs	r3, r3, #8
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	3301      	adds	r3, #1
 8005eac:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005eae:	4b9e      	ldr	r3, [pc, #632]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb2:	091b      	lsrs	r3, r3, #4
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005eba:	4b9b      	ldr	r3, [pc, #620]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ebe:	08db      	lsrs	r3, r3, #3
 8005ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	fb02 f303 	mul.w	r3, r2, r3
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d062      	beq.n	8005fa2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	f200 8081 	bhi.w	8005fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d024      	beq.n	8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d17a      	bne.n	8005fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f02:	4b89      	ldr	r3, [pc, #548]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f16:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006130 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005f32:	e08f      	b.n	8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005f34:	4b7c      	ldr	r3, [pc, #496]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005f40:	4b79      	ldr	r3, [pc, #484]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	0f1b      	lsrs	r3, r3, #28
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	e006      	b.n	8005f5a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005f4c:	4b76      	ldr	r3, [pc, #472]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f52:	041b      	lsls	r3, r3, #16
 8005f54:	0f1b      	lsrs	r3, r3, #28
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	4a76      	ldr	r2, [pc, #472]	@ (8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f60:	ee07 3a90 	vmov	s15, r3
 8005f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	ee07 3a90 	vmov	s15, r3
 8005f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f80:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f84:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006130 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fa0:	e058      	b.n	8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	ee07 3a90 	vmov	s15, r3
 8005fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fac:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb4:	4b5c      	ldr	r3, [pc, #368]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fc8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006130 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005fcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fe4:	e036      	b.n	8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005fe6:	4b50      	ldr	r3, [pc, #320]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	0f1b      	lsrs	r3, r3, #28
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	e006      	b.n	800600c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006004:	041b      	lsls	r3, r3, #16
 8006006:	0f1b      	lsrs	r3, r3, #28
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	4a49      	ldr	r2, [pc, #292]	@ (8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800600e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	ee07 3a90 	vmov	s15, r3
 8006020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006032:	ed97 6a02 	vldr	s12, [r7, #8]
 8006036:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006130 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800603a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006046:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800604a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006052:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006054:	4b34      	ldr	r3, [pc, #208]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d017      	beq.n	8006090 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006060:	4b31      	ldr	r3, [pc, #196]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006064:	0a5b      	lsrs	r3, r3, #9
 8006066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800606a:	ee07 3a90 	vmov	s15, r3
 800606e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006072:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006076:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800607a:	edd7 6a07 	vldr	s13, [r7, #28]
 800607e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006086:	ee17 2a90 	vmov	r2, s15
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	e002      	b.n	8006096 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006096:	4b24      	ldr	r3, [pc, #144]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d017      	beq.n	80060d2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80060a2:	4b21      	ldr	r3, [pc, #132]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a6:	0c1b      	lsrs	r3, r3, #16
 80060a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ac:	ee07 3a90 	vmov	s15, r3
 80060b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80060b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060b8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80060bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80060c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c8:	ee17 2a90 	vmov	r2, s15
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	605a      	str	r2, [r3, #4]
 80060d0:	e002      	b.n	80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80060d8:	4b13      	ldr	r3, [pc, #76]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d017      	beq.n	8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80060e4:	4b10      	ldr	r3, [pc, #64]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e8:	0e1b      	lsrs	r3, r3, #24
 80060ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80060f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80060fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800610a:	ee17 2a90 	vmov	r2, s15
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006112:	e002      	b.n	800611a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	609a      	str	r2, [r3, #8]
}
 800611a:	bf00      	nop
 800611c:	3724      	adds	r7, #36	@ 0x24
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	46020c00 	.word	0x46020c00
 800612c:	4b742400 	.word	0x4b742400
 8006130:	46000000 	.word	0x46000000
 8006134:	0800b818 	.word	0x0800b818

08006138 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08e      	sub	sp, #56	@ 0x38
 800613c:	af00      	add	r7, sp, #0
 800613e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006146:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800614a:	430b      	orrs	r3, r1
 800614c:	d145      	bne.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800614e:	4baa      	ldr	r3, [pc, #680]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006154:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006158:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800615a:	4ba7      	ldr	r3, [pc, #668]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800615c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b02      	cmp	r3, #2
 8006166:	d108      	bne.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800616e:	d104      	bne.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006170:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006174:	637b      	str	r3, [r7, #52]	@ 0x34
 8006176:	f001 b987 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800617a:	4b9f      	ldr	r3, [pc, #636]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800617c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006180:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006184:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006188:	d114      	bne.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006190:	d110      	bne.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006192:	4b99      	ldr	r3, [pc, #612]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800619c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061a0:	d103      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80061a2:	23fa      	movs	r3, #250	@ 0xfa
 80061a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80061a6:	f001 b96f 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80061aa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80061ae:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80061b0:	f001 b96a 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80061b4:	4b90      	ldr	r3, [pc, #576]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061c0:	d107      	bne.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061c8:	d103      	bne.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80061ca:	4b8c      	ldr	r3, [pc, #560]	@ (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80061cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ce:	f001 b95b 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061d6:	f001 b957 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80061da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061de:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80061e2:	430b      	orrs	r3, r1
 80061e4:	d151      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80061e6:	4b84      	ldr	r3, [pc, #528]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80061e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061ec:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80061f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	2b80      	cmp	r3, #128	@ 0x80
 80061f6:	d035      	beq.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80061f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fa:	2b80      	cmp	r3, #128	@ 0x80
 80061fc:	d841      	bhi.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	2b60      	cmp	r3, #96	@ 0x60
 8006202:	d02a      	beq.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006206:	2b60      	cmp	r3, #96	@ 0x60
 8006208:	d83b      	bhi.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800620a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620c:	2b40      	cmp	r3, #64	@ 0x40
 800620e:	d009      	beq.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006212:	2b40      	cmp	r3, #64	@ 0x40
 8006214:	d835      	bhi.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00c      	beq.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800621c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621e:	2b20      	cmp	r3, #32
 8006220:	d012      	beq.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006222:	e02e      	b.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff fb77 	bl	800591c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006232:	f001 b929 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006236:	f107 0318 	add.w	r3, r7, #24
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff fcc8 	bl	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006244:	f001 b920 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006248:	f107 030c 	add.w	r3, r7, #12
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff fe19 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006256:	f001 b917 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800625a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800625e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006260:	f001 b912 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006264:	4b64      	ldr	r3, [pc, #400]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006270:	d103      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006272:	4b63      	ldr	r3, [pc, #396]	@ (8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006274:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006276:	f001 b907 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800627e:	f001 b903 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006286:	f001 b8ff 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800628a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800628e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006292:	430b      	orrs	r3, r1
 8006294:	d158      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006296:	4b58      	ldr	r3, [pc, #352]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006298:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800629c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062a8:	d03b      	beq.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80062aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062b0:	d846      	bhi.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062b8:	d02e      	beq.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062c0:	d83e      	bhi.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80062c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062c8:	d00b      	beq.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80062ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062d0:	d836      	bhi.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00d      	beq.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80062d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062de:	d012      	beq.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80062e0:	e02e      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff fb18 	bl	800591c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062f0:	f001 b8ca 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062f4:	f107 0318 	add.w	r3, r7, #24
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff fc69 	bl	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006302:	f001 b8c1 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006306:	f107 030c 	add.w	r3, r7, #12
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff fdba 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006314:	f001 b8b8 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006318:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800631c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800631e:	f001 b8b3 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006322:	4b35      	ldr	r3, [pc, #212]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800632a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800632e:	d103      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006330:	4b33      	ldr	r3, [pc, #204]	@ (8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006332:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006334:	f001 b8a8 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800633c:	f001 b8a4 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006344:	f001 b8a0 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800634c:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006350:	430b      	orrs	r3, r1
 8006352:	d16e      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006354:	4b28      	ldr	r3, [pc, #160]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800635a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800635e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006366:	d034      	beq.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8006368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800636e:	d85c      	bhi.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006372:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006376:	d00b      	beq.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800637e:	d854      	bhi.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006382:	2b00      	cmp	r3, #0
 8006384:	d016      	beq.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006388:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800638c:	d009      	beq.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800638e:	e04c      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff fac1 	bl	800591c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800639a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800639e:	f001 b873 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063a2:	f107 0318 	add.w	r3, r7, #24
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fc12 	bl	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063b0:	f001 b86a 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80063b4:	4b10      	ldr	r3, [pc, #64]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c0:	d103      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 80063c2:	4b10      	ldr	r3, [pc, #64]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80063c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80063c6:	f001 b85f 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063ce:	f001 b85b 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80063d2:	4b09      	ldr	r3, [pc, #36]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0320 	and.w	r3, r3, #32
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d121      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80063de:	4b06      	ldr	r3, [pc, #24]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00e      	beq.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80063ea:	4b03      	ldr	r3, [pc, #12]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	0e1b      	lsrs	r3, r3, #24
 80063f0:	f003 030f 	and.w	r3, r3, #15
 80063f4:	e00f      	b.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80063f6:	bf00      	nop
 80063f8:	46020c00 	.word	0x46020c00
 80063fc:	0007a120 	.word	0x0007a120
 8006400:	00f42400 	.word	0x00f42400
 8006404:	02dc6c00 	.word	0x02dc6c00
 8006408:	4ba7      	ldr	r3, [pc, #668]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800640a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800640e:	041b      	lsls	r3, r3, #16
 8006410:	0e1b      	lsrs	r3, r3, #24
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	4aa5      	ldr	r2, [pc, #660]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800641c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800641e:	f001 b833 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006426:	f001 b82f 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800642e:	f001 b82b 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006432:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006436:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800643a:	430b      	orrs	r3, r1
 800643c:	d17f      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800643e:	4b9a      	ldr	r3, [pc, #616]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006440:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006448:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	2b00      	cmp	r3, #0
 800644e:	d165      	bne.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006450:	4b95      	ldr	r3, [pc, #596]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006456:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800645a:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800645c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006462:	d034      	beq.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800646a:	d853      	bhi.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800646c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006472:	d00b      	beq.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006476:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800647a:	d84b      	bhi.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800647c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647e:	2b00      	cmp	r3, #0
 8006480:	d016      	beq.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006488:	d009      	beq.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800648a:	e043      	b.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800648c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff fa43 	bl	800591c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006498:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800649a:	f000 bff5 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800649e:	f107 0318 	add.w	r3, r7, #24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff fb94 	bl	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80064ac:	f000 bfec 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80064b0:	4b7d      	ldr	r3, [pc, #500]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064bc:	d103      	bne.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 80064be:	4b7c      	ldr	r3, [pc, #496]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80064c0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80064c2:	f000 bfe1 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80064ca:	f000 bfdd 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80064ce:	4b76      	ldr	r3, [pc, #472]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	d118      	bne.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064da:	4b73      	ldr	r3, [pc, #460]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80064e6:	4b70      	ldr	r3, [pc, #448]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	0e1b      	lsrs	r3, r3, #24
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	e006      	b.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80064f2:	4b6d      	ldr	r3, [pc, #436]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064f8:	041b      	lsls	r3, r3, #16
 80064fa:	0e1b      	lsrs	r3, r3, #24
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	4a6a      	ldr	r2, [pc, #424]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006506:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006508:	f000 bfbe 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006510:	f000 bfba 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006518:	f000 bfb6 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006522:	d108      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff f9f7 	bl	800591c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	637b      	str	r3, [r7, #52]	@ 0x34
 8006532:	f000 bfa9 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8006536:	2300      	movs	r3, #0
 8006538:	637b      	str	r3, [r7, #52]	@ 0x34
 800653a:	f000 bfa5 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800653e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006542:	1e51      	subs	r1, r2, #1
 8006544:	430b      	orrs	r3, r1
 8006546:	d136      	bne.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006548:	4b57      	ldr	r3, [pc, #348]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800654a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	2b00      	cmp	r3, #0
 8006558:	d104      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800655a:	f7fe fb8d 	bl	8004c78 <HAL_RCC_GetPCLK2Freq>
 800655e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006560:	f000 bf92 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006566:	2b01      	cmp	r3, #1
 8006568:	d104      	bne.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800656a:	f7fe fa55 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800656e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006570:	f000 bf8a 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006574:	4b4c      	ldr	r3, [pc, #304]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800657c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006580:	d106      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	2b02      	cmp	r3, #2
 8006586:	d103      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8006588:	4b4a      	ldr	r3, [pc, #296]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800658a:	637b      	str	r3, [r7, #52]	@ 0x34
 800658c:	f000 bf7c 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006590:	4b45      	ldr	r3, [pc, #276]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b02      	cmp	r3, #2
 800659c:	d107      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800659e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d104      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 80065a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065aa:	f000 bf6d 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b2:	f000 bf69 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80065b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ba:	1e91      	subs	r1, r2, #2
 80065bc:	430b      	orrs	r3, r1
 80065be:	d136      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80065c0:	4b39      	ldr	r3, [pc, #228]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80065c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065c6:	f003 030c 	and.w	r3, r3, #12
 80065ca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80065cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d104      	bne.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80065d2:	f7fe fb3d 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 80065d6:	6378      	str	r0, [r7, #52]	@ 0x34
 80065d8:	f000 bf56 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80065dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d104      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80065e2:	f7fe fa19 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80065e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80065e8:	f000 bf4e 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80065ec:	4b2e      	ldr	r3, [pc, #184]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065f8:	d106      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80065fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d103      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006600:	4b2c      	ldr	r3, [pc, #176]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006602:	637b      	str	r3, [r7, #52]	@ 0x34
 8006604:	f000 bf40 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006608:	4b27      	ldr	r3, [pc, #156]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800660a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b02      	cmp	r3, #2
 8006614:	d107      	bne.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8006616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006618:	2b0c      	cmp	r3, #12
 800661a:	d104      	bne.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 800661c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006620:	637b      	str	r3, [r7, #52]	@ 0x34
 8006622:	f000 bf31 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	637b      	str	r3, [r7, #52]	@ 0x34
 800662a:	f000 bf2d 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800662e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006632:	1f11      	subs	r1, r2, #4
 8006634:	430b      	orrs	r3, r1
 8006636:	d13f      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006638:	4b1b      	ldr	r3, [pc, #108]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800663a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800663e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006642:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006646:	2b00      	cmp	r3, #0
 8006648:	d104      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800664a:	f7fe fb01 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 800664e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006650:	f000 bf1a 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006656:	2b10      	cmp	r3, #16
 8006658:	d104      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800665a:	f7fe f9dd 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800665e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006660:	f000 bf12 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006664:	4b10      	ldr	r3, [pc, #64]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800666c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006670:	d106      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006674:	2b20      	cmp	r3, #32
 8006676:	d103      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8006678:	4b0e      	ldr	r3, [pc, #56]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800667a:	637b      	str	r3, [r7, #52]	@ 0x34
 800667c:	f000 bf04 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006680:	4b09      	ldr	r3, [pc, #36]	@ (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b02      	cmp	r3, #2
 800668c:	d107      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800668e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006690:	2b30      	cmp	r3, #48	@ 0x30
 8006692:	d104      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8006694:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006698:	637b      	str	r3, [r7, #52]	@ 0x34
 800669a:	f000 bef5 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066a2:	f000 bef1 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80066a6:	bf00      	nop
 80066a8:	46020c00 	.word	0x46020c00
 80066ac:	0800b818 	.word	0x0800b818
 80066b0:	02dc6c00 	.word	0x02dc6c00
 80066b4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80066b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066bc:	f1a2 0108 	sub.w	r1, r2, #8
 80066c0:	430b      	orrs	r3, r1
 80066c2:	d136      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80066c4:	4ba4      	ldr	r3, [pc, #656]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80066d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80066d6:	f7fe fabb 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 80066da:	6378      	str	r0, [r7, #52]	@ 0x34
 80066dc:	f000 bed4 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80066e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e2:	2b40      	cmp	r3, #64	@ 0x40
 80066e4:	d104      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80066e6:	f7fe f997 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80066ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80066ec:	f000 becc 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80066f0:	4b99      	ldr	r3, [pc, #612]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066fc:	d106      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	2b80      	cmp	r3, #128	@ 0x80
 8006702:	d103      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8006704:	4b95      	ldr	r3, [pc, #596]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006706:	637b      	str	r3, [r7, #52]	@ 0x34
 8006708:	f000 bebe 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800670c:	4b92      	ldr	r3, [pc, #584]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800670e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b02      	cmp	r3, #2
 8006718:	d107      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 800671a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671c:	2bc0      	cmp	r3, #192	@ 0xc0
 800671e:	d104      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006720:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006724:	637b      	str	r3, [r7, #52]	@ 0x34
 8006726:	f000 beaf 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	637b      	str	r3, [r7, #52]	@ 0x34
 800672e:	f000 beab 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006736:	f1a2 0110 	sub.w	r1, r2, #16
 800673a:	430b      	orrs	r3, r1
 800673c:	d139      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800673e:	4b86      	ldr	r3, [pc, #536]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006744:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006748:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006750:	f7fe fa7e 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8006754:	6378      	str	r0, [r7, #52]	@ 0x34
 8006756:	f000 be97 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006760:	d104      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006762:	f7fe f959 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8006766:	6378      	str	r0, [r7, #52]	@ 0x34
 8006768:	f000 be8e 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800676c:	4b7a      	ldr	r3, [pc, #488]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006778:	d107      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 800677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006780:	d103      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8006782:	4b76      	ldr	r3, [pc, #472]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006784:	637b      	str	r3, [r7, #52]	@ 0x34
 8006786:	f000 be7f 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800678a:	4b73      	ldr	r3, [pc, #460]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800678c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b02      	cmp	r3, #2
 8006796:	d108      	bne.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8006798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800679e:	d104      	bne.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 80067a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a6:	f000 be6f 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ae:	f000 be6b 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80067b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067b6:	f1a2 0120 	sub.w	r1, r2, #32
 80067ba:	430b      	orrs	r3, r1
 80067bc:	d158      	bne.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80067be:	4b66      	ldr	r3, [pc, #408]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80067ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d104      	bne.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80067d0:	f7fe fa66 	bl	8004ca0 <HAL_RCC_GetPCLK3Freq>
 80067d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80067d6:	f000 be57 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80067da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d104      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067e0:	f7fe f91a 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80067e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80067e6:	f000 be4f 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80067ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067f6:	d106      	bne.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d103      	bne.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 80067fe:	4b57      	ldr	r3, [pc, #348]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006800:	637b      	str	r3, [r7, #52]	@ 0x34
 8006802:	f000 be41 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006806:	4b54      	ldr	r3, [pc, #336]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b02      	cmp	r3, #2
 8006812:	d107      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8006814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006816:	2b03      	cmp	r3, #3
 8006818:	d104      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 800681a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800681e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006820:	f000 be32 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006824:	4b4c      	ldr	r3, [pc, #304]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b20      	cmp	r3, #32
 800682e:	d11b      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	2b04      	cmp	r3, #4
 8006834:	d118      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006836:	4b48      	ldr	r3, [pc, #288]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8006842:	4b45      	ldr	r3, [pc, #276]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	0e1b      	lsrs	r3, r3, #24
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	e006      	b.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800684e:	4b42      	ldr	r3, [pc, #264]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006850:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006854:	041b      	lsls	r3, r3, #16
 8006856:	0e1b      	lsrs	r3, r3, #24
 8006858:	f003 030f 	and.w	r3, r3, #15
 800685c:	4a40      	ldr	r2, [pc, #256]	@ (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800685e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006862:	637b      	str	r3, [r7, #52]	@ 0x34
 8006864:	f000 be10 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	637b      	str	r3, [r7, #52]	@ 0x34
 800686c:	f000 be0c 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006874:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006878:	430b      	orrs	r3, r1
 800687a:	d173      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800687c:	4b36      	ldr	r3, [pc, #216]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800687e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006882:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006886:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800688e:	d104      	bne.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006890:	f7fe f8c2 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8006894:	6378      	str	r0, [r7, #52]	@ 0x34
 8006896:	f000 bdf7 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068a0:	d108      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068a2:	f107 0318 	add.w	r3, r7, #24
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff f992 	bl	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80068b0:	f000 bdea 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80068b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d104      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80068ba:	f7fe f9af 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 80068be:	6378      	str	r0, [r7, #52]	@ 0x34
 80068c0:	f000 bde2 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80068c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80068ca:	d122      	bne.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068cc:	4b22      	ldr	r3, [pc, #136]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0320 	and.w	r3, r3, #32
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d118      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80068e4:	4b1c      	ldr	r3, [pc, #112]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	0e1b      	lsrs	r3, r3, #24
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	e006      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80068f0:	4b19      	ldr	r3, [pc, #100]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80068f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068f6:	041b      	lsls	r3, r3, #16
 80068f8:	0e1b      	lsrs	r3, r3, #24
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	4a18      	ldr	r2, [pc, #96]	@ (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006904:	637b      	str	r3, [r7, #52]	@ 0x34
 8006906:	f000 bdbf 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	637b      	str	r3, [r7, #52]	@ 0x34
 800690e:	f000 bdbb 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006912:	4b11      	ldr	r3, [pc, #68]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800691a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800691e:	d107      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006922:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006926:	d103      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006928:	4b0c      	ldr	r3, [pc, #48]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800692a:	637b      	str	r3, [r7, #52]	@ 0x34
 800692c:	f000 bdac 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006930:	4b09      	ldr	r3, [pc, #36]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800693c:	d107      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006944:	d103      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8006946:	4b05      	ldr	r3, [pc, #20]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006948:	637b      	str	r3, [r7, #52]	@ 0x34
 800694a:	f000 bd9d 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	637b      	str	r3, [r7, #52]	@ 0x34
 8006952:	f000 bd99 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006956:	bf00      	nop
 8006958:	46020c00 	.word	0x46020c00
 800695c:	00f42400 	.word	0x00f42400
 8006960:	0800b818 	.word	0x0800b818
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006968:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800696c:	430b      	orrs	r3, r1
 800696e:	d158      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006970:	4bad      	ldr	r3, [pc, #692]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006972:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	2b04      	cmp	r3, #4
 8006980:	d84b      	bhi.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006982:	a201      	add	r2, pc, #4	@ (adr r2, 8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006988:	080069c1 	.word	0x080069c1
 800698c:	0800699d 	.word	0x0800699d
 8006990:	080069af 	.word	0x080069af
 8006994:	080069cb 	.word	0x080069cb
 8006998:	080069d5 	.word	0x080069d5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800699c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe ffbb 	bl	800591c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069aa:	f000 bd6d 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ae:	f107 030c 	add.w	r3, r7, #12
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff fa66 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069bc:	f000 bd64 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80069c0:	f7fe f92c 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 80069c4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80069c6:	f000 bd5f 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80069ca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80069ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069d0:	f000 bd5a 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069d4:	4b94      	ldr	r3, [pc, #592]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0320 	and.w	r3, r3, #32
 80069dc:	2b20      	cmp	r3, #32
 80069de:	d118      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069e0:	4b91      	ldr	r3, [pc, #580]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 80069ec:	4b8e      	ldr	r3, [pc, #568]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	0e1b      	lsrs	r3, r3, #24
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	e006      	b.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80069f8:	4b8b      	ldr	r3, [pc, #556]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069fe:	041b      	lsls	r3, r3, #16
 8006a00:	0e1b      	lsrs	r3, r3, #24
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	4a89      	ldr	r2, [pc, #548]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a0c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a0e:	f000 bd3b 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a16:	f000 bd37 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a1e:	f000 bd33 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a26:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006a2a:	430b      	orrs	r3, r1
 8006a2c:	d167      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006a2e:	4b7e      	ldr	r3, [pc, #504]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a34:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006a38:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a40:	d036      	beq.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8006a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a48:	d855      	bhi.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a50:	d029      	beq.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a58:	d84d      	bhi.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a60:	d013      	beq.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a68:	d845      	bhi.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d015      	beq.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a76:	d13e      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fe ff4d 	bl	800591c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a86:	f000 bcff 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a8a:	f107 030c 	add.w	r3, r7, #12
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff f9f8 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a98:	f000 bcf6 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006a9c:	f7fe f8be 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8006aa0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006aa2:	f000 bcf1 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006aa6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006aaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aac:	f000 bcec 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ab0:	4b5d      	ldr	r3, [pc, #372]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0320 	and.w	r3, r3, #32
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d118      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006abc:	4b5a      	ldr	r3, [pc, #360]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8006ac8:	4b57      	ldr	r3, [pc, #348]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	0e1b      	lsrs	r3, r3, #24
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	e006      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8006ad4:	4b54      	ldr	r3, [pc, #336]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006ad6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ada:	041b      	lsls	r3, r3, #16
 8006adc:	0e1b      	lsrs	r3, r3, #24
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	4a52      	ldr	r2, [pc, #328]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006aea:	f000 bccd 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006af2:	f000 bcc9 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006afa:	f000 bcc5 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b02:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006b06:	430b      	orrs	r3, r1
 8006b08:	d14c      	bne.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006b0a:	4b47      	ldr	r3, [pc, #284]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b14:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d104      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b1c:	f7fe f898 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8006b20:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b22:	f000 bcb1 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b2c:	d104      	bne.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b2e:	f7fd ff73 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8006b32:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b34:	f000 bca8 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006b38:	4b3b      	ldr	r3, [pc, #236]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b44:	d107      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b4c:	d103      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8006b4e:	4b38      	ldr	r3, [pc, #224]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b52:	f000 bc99 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006b56:	4b34      	ldr	r3, [pc, #208]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d11c      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b68:	d118      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006b76:	4b2c      	ldr	r3, [pc, #176]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	0e1b      	lsrs	r3, r3, #24
 8006b7c:	f003 030f 	and.w	r3, r3, #15
 8006b80:	e006      	b.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8006b82:	4b29      	ldr	r3, [pc, #164]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006b84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b88:	041b      	lsls	r3, r3, #16
 8006b8a:	0e1b      	lsrs	r3, r3, #24
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	4a26      	ldr	r2, [pc, #152]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b98:	f000 bc76 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba0:	f000 bc72 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006bac:	430b      	orrs	r3, r1
 8006bae:	d152      	bne.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bb6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006bba:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d104      	bne.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006bc2:	f7fe f845 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8006bc6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bc8:	f000 bc5e 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bd2:	d104      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006bd4:	f7fd ff20 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8006bd8:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bda:	f000 bc55 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006bde:	4b12      	ldr	r3, [pc, #72]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bea:	d107      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bf2:	d103      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8006bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf8:	f000 bc46 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d122      	bne.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c0e:	d11e      	bne.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c10:	4b05      	ldr	r3, [pc, #20]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00b      	beq.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006c1c:	4b02      	ldr	r3, [pc, #8]	@ (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	0e1b      	lsrs	r3, r3, #24
 8006c22:	f003 030f 	and.w	r3, r3, #15
 8006c26:	e00c      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006c28:	46020c00 	.word	0x46020c00
 8006c2c:	0800b818 	.word	0x0800b818
 8006c30:	00f42400 	.word	0x00f42400
 8006c34:	4ba1      	ldr	r3, [pc, #644]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c3a:	041b      	lsls	r3, r3, #16
 8006c3c:	0e1b      	lsrs	r3, r3, #24
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	4a9f      	ldr	r2, [pc, #636]	@ (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c4a:	f000 bc1d 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c52:	f000 bc19 	b.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c5a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006c5e:	430b      	orrs	r3, r1
 8006c60:	d151      	bne.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006c62:	4b96      	ldr	r3, [pc, #600]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c68:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006c6c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c72:	d024      	beq.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c76:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c78:	d842      	bhi.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	2b80      	cmp	r3, #128	@ 0x80
 8006c7e:	d00d      	beq.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c82:	2b80      	cmp	r3, #128	@ 0x80
 8006c84:	d83c      	bhi.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8e:	2b40      	cmp	r3, #64	@ 0x40
 8006c90:	d011      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8006c92:	e035      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006c94:	f7fe f804 	bl	8004ca0 <HAL_RCC_GetPCLK3Freq>
 8006c98:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006c9a:	e3f5      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c9c:	4b87      	ldr	r3, [pc, #540]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca8:	d102      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8006caa:	4b86      	ldr	r3, [pc, #536]	@ (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006cac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cae:	e3eb      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cb4:	e3e8      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006cb6:	f7fd feaf 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8006cba:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006cbc:	e3e4      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006cbe:	4b7f      	ldr	r3, [pc, #508]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0320 	and.w	r3, r3, #32
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	d117      	bne.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cca:	4b7c      	ldr	r3, [pc, #496]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d005      	beq.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8006cd6:	4b79      	ldr	r3, [pc, #484]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	0e1b      	lsrs	r3, r3, #24
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	e006      	b.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006ce2:	4b76      	ldr	r3, [pc, #472]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ce8:	041b      	lsls	r3, r3, #16
 8006cea:	0e1b      	lsrs	r3, r3, #24
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	4a73      	ldr	r2, [pc, #460]	@ (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cf8:	e3c6      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cfe:	e3c3      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d04:	e3c0      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006d06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d0a:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006d0e:	430b      	orrs	r3, r1
 8006d10:	d147      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006d12:	4b6a      	ldr	r3, [pc, #424]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006d1c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d103      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d24:	f7fd ff94 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8006d28:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d2a:	e3ad      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d32:	d103      	bne.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d34:	f7fd fe70 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8006d38:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d3a:	e3a5      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006d3c:	4b5f      	ldr	r3, [pc, #380]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d48:	d106      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d50:	d102      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8006d52:	4b5c      	ldr	r3, [pc, #368]	@ (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d56:	e397      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006d58:	4b58      	ldr	r3, [pc, #352]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0320 	and.w	r3, r3, #32
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	d11b      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d66:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006d6a:	d117      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d6c:	4b53      	ldr	r3, [pc, #332]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d005      	beq.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8006d78:	4b50      	ldr	r3, [pc, #320]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	0e1b      	lsrs	r3, r3, #24
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	e006      	b.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006d84:	4b4d      	ldr	r3, [pc, #308]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d8a:	041b      	lsls	r3, r3, #16
 8006d8c:	0e1b      	lsrs	r3, r3, #24
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	4a4b      	ldr	r2, [pc, #300]	@ (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9a:	e375      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da0:	e372      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006daa:	430b      	orrs	r3, r1
 8006dac:	d164      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006dae:	4b43      	ldr	r3, [pc, #268]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006db4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006db8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d120      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d117      	bne.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d005      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006dd8:	4b38      	ldr	r3, [pc, #224]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	0e1b      	lsrs	r3, r3, #24
 8006dde:	f003 030f 	and.w	r3, r3, #15
 8006de2:	e006      	b.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006de4:	4b35      	ldr	r3, [pc, #212]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006de6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006dea:	041b      	lsls	r3, r3, #16
 8006dec:	0e1b      	lsrs	r3, r3, #24
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	4a33      	ldr	r2, [pc, #204]	@ (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfa:	e345      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e00:	e342      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006e02:	4b2e      	ldr	r3, [pc, #184]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e10:	d112      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e18:	d10e      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e1a:	4b28      	ldr	r3, [pc, #160]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e28:	d102      	bne.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006e2a:	23fa      	movs	r3, #250	@ 0xfa
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e2e:	e32b      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006e30:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e36:	e327      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006e38:	4b20      	ldr	r3, [pc, #128]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e44:	d106      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e4c:	d102      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e52:	e319      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006e54:	4b19      	ldr	r3, [pc, #100]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d107      	bne.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e68:	d103      	bne.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e70:	e30a      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e76:	e307      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e7c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006e80:	430b      	orrs	r3, r1
 8006e82:	d16b      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006e84:	4b0d      	ldr	r3, [pc, #52]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e8a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e8e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d127      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e96:	4b09      	ldr	r3, [pc, #36]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b20      	cmp	r3, #32
 8006ea0:	d11e      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ea2:	4b06      	ldr	r3, [pc, #24]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00c      	beq.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006eae:	4b03      	ldr	r3, [pc, #12]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	0e1b      	lsrs	r3, r3, #24
 8006eb4:	f003 030f 	and.w	r3, r3, #15
 8006eb8:	e00d      	b.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006eba:	bf00      	nop
 8006ebc:	46020c00 	.word	0x46020c00
 8006ec0:	0800b818 	.word	0x0800b818
 8006ec4:	00f42400 	.word	0x00f42400
 8006ec8:	4b94      	ldr	r3, [pc, #592]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ece:	041b      	lsls	r3, r3, #16
 8006ed0:	0e1b      	lsrs	r3, r3, #24
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	4a92      	ldr	r2, [pc, #584]	@ (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ede:	e2d3      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ee4:	e2d0      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006ee6:	4b8d      	ldr	r3, [pc, #564]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ef0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ef4:	d112      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006efc:	d10e      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006efe:	4b87      	ldr	r3, [pc, #540]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f0c:	d102      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006f0e:	23fa      	movs	r3, #250	@ 0xfa
 8006f10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f12:	e2b9      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006f14:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006f18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f1a:	e2b5      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006f1c:	4b7f      	ldr	r3, [pc, #508]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f28:	d106      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f30:	d102      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8006f32:	4b7c      	ldr	r3, [pc, #496]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f36:	e2a7      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006f38:	4b78      	ldr	r3, [pc, #480]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d107      	bne.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f4c:	d103      	bne.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f54:	e298      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f5a:	e295      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f60:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006f64:	430b      	orrs	r3, r1
 8006f66:	d147      	bne.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006f68:	4b6c      	ldr	r3, [pc, #432]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f6e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006f72:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d103      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f7a:	f7fd fe69 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8006f7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f80:	e282      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006f82:	4b66      	ldr	r3, [pc, #408]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f90:	d112      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8006f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f98:	d10e      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f9a:	4b60      	ldr	r3, [pc, #384]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fa8:	d102      	bne.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006faa:	23fa      	movs	r3, #250	@ 0xfa
 8006fac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006fae:	e26b      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006fb0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006fb4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006fb6:	e267      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006fb8:	4b58      	ldr	r3, [pc, #352]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fc4:	d106      	bne.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006fcc:	d102      	bne.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006fce:	4b55      	ldr	r3, [pc, #340]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd2:	e259      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006fd4:	4b51      	ldr	r3, [pc, #324]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d107      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006fe8:	d103      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff0:	e24a      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff6:	e247      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ffc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007000:	430b      	orrs	r3, r1
 8007002:	d12d      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007004:	4b45      	ldr	r3, [pc, #276]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800700a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800700e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007010:	4b42      	ldr	r3, [pc, #264]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007018:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800701c:	d105      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	2b00      	cmp	r3, #0
 8007022:	d102      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8007024:	4b3f      	ldr	r3, [pc, #252]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007026:	637b      	str	r3, [r7, #52]	@ 0x34
 8007028:	e22e      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007030:	d107      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fc70 	bl	800591c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800703c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007040:	e222      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007048:	d107      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800704a:	f107 0318 	add.w	r3, r7, #24
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fdbe 	bl	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	637b      	str	r3, [r7, #52]	@ 0x34
 8007058:	e216      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	637b      	str	r3, [r7, #52]	@ 0x34
 800705e:	e213      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007064:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007068:	430b      	orrs	r3, r1
 800706a:	d15d      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800706c:	4b2b      	ldr	r3, [pc, #172]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800706e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007072:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007076:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800707e:	d028      	beq.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007086:	d845      	bhi.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800708e:	d013      	beq.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8007090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007092:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007096:	d83d      	bhi.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	2b00      	cmp	r3, #0
 800709c:	d004      	beq.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070a4:	d004      	beq.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 80070a6:	e035      	b.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80070a8:	f7fd fde6 	bl	8004c78 <HAL_RCC_GetPCLK2Freq>
 80070ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80070ae:	e1eb      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80070b0:	f7fd fcb2 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80070b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80070b6:	e1e7      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070b8:	4b18      	ldr	r3, [pc, #96]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070c4:	d102      	bne.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 80070c6:	4b17      	ldr	r3, [pc, #92]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80070c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070ca:	e1dd      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070d0:	e1da      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070d2:	4b12      	ldr	r3, [pc, #72]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d117      	bne.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070de:	4b0f      	ldr	r3, [pc, #60]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80070ea:	4b0c      	ldr	r3, [pc, #48]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	0e1b      	lsrs	r3, r3, #24
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	e006      	b.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 80070f6:	4b09      	ldr	r3, [pc, #36]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80070f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070fc:	041b      	lsls	r3, r3, #16
 80070fe:	0e1b      	lsrs	r3, r3, #24
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	4a06      	ldr	r2, [pc, #24]	@ (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800710a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800710c:	e1bc      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007112:	e1b9      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007118:	e1b6      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800711a:	bf00      	nop
 800711c:	46020c00 	.word	0x46020c00
 8007120:	0800b818 	.word	0x0800b818
 8007124:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800712c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007130:	430b      	orrs	r3, r1
 8007132:	d156      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007134:	4ba5      	ldr	r3, [pc, #660]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800713a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800713e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007142:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007146:	d028      	beq.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8007148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800714e:	d845      	bhi.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8007150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007152:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007156:	d013      	beq.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8007158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800715e:	d83d      	bhi.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8007160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007162:	2b00      	cmp	r3, #0
 8007164:	d004      	beq.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8007166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800716c:	d004      	beq.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800716e:	e035      	b.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007170:	f7fd fd6e 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8007174:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007176:	e187      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007178:	f7fd fc4e 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800717c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800717e:	e183      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007180:	4b92      	ldr	r3, [pc, #584]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800718c:	d102      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800718e:	4b90      	ldr	r3, [pc, #576]	@ (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007190:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007192:	e179      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007198:	e176      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800719a:	4b8c      	ldr	r3, [pc, #560]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0320 	and.w	r3, r3, #32
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d117      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071a6:	4b89      	ldr	r3, [pc, #548]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 80071b2:	4b86      	ldr	r3, [pc, #536]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	0e1b      	lsrs	r3, r3, #24
 80071b8:	f003 030f 	and.w	r3, r3, #15
 80071bc:	e006      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 80071be:	4b83      	ldr	r3, [pc, #524]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071c4:	041b      	lsls	r3, r3, #16
 80071c6:	0e1b      	lsrs	r3, r3, #24
 80071c8:	f003 030f 	and.w	r3, r3, #15
 80071cc:	4a81      	ldr	r2, [pc, #516]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80071ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071d4:	e158      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071da:	e155      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071e0:	e152      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80071e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e6:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80071ea:	430b      	orrs	r3, r1
 80071ec:	d177      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80071ee:	4b77      	ldr	r3, [pc, #476]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071f4:	f003 0318 	and.w	r3, r3, #24
 80071f8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	2b18      	cmp	r3, #24
 80071fe:	d86b      	bhi.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8007200:	a201      	add	r2, pc, #4	@ (adr r2, 8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	0800726d 	.word	0x0800726d
 800720c:	080072d9 	.word	0x080072d9
 8007210:	080072d9 	.word	0x080072d9
 8007214:	080072d9 	.word	0x080072d9
 8007218:	080072d9 	.word	0x080072d9
 800721c:	080072d9 	.word	0x080072d9
 8007220:	080072d9 	.word	0x080072d9
 8007224:	080072d9 	.word	0x080072d9
 8007228:	08007275 	.word	0x08007275
 800722c:	080072d9 	.word	0x080072d9
 8007230:	080072d9 	.word	0x080072d9
 8007234:	080072d9 	.word	0x080072d9
 8007238:	080072d9 	.word	0x080072d9
 800723c:	080072d9 	.word	0x080072d9
 8007240:	080072d9 	.word	0x080072d9
 8007244:	080072d9 	.word	0x080072d9
 8007248:	0800727d 	.word	0x0800727d
 800724c:	080072d9 	.word	0x080072d9
 8007250:	080072d9 	.word	0x080072d9
 8007254:	080072d9 	.word	0x080072d9
 8007258:	080072d9 	.word	0x080072d9
 800725c:	080072d9 	.word	0x080072d9
 8007260:	080072d9 	.word	0x080072d9
 8007264:	080072d9 	.word	0x080072d9
 8007268:	08007297 	.word	0x08007297
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800726c:	f7fd fd18 	bl	8004ca0 <HAL_RCC_GetPCLK3Freq>
 8007270:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007272:	e109      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007274:	f7fd fbd0 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8007278:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800727a:	e105      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800727c:	4b53      	ldr	r3, [pc, #332]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007288:	d102      	bne.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800728a:	4b51      	ldr	r3, [pc, #324]	@ (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800728c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800728e:	e0fb      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007294:	e0f8      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007296:	4b4d      	ldr	r3, [pc, #308]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b20      	cmp	r3, #32
 80072a0:	d117      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072a2:	4b4a      	ldr	r3, [pc, #296]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 80072ae:	4b47      	ldr	r3, [pc, #284]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	0e1b      	lsrs	r3, r3, #24
 80072b4:	f003 030f 	and.w	r3, r3, #15
 80072b8:	e006      	b.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80072ba:	4b44      	ldr	r3, [pc, #272]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80072bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072c0:	041b      	lsls	r3, r3, #16
 80072c2:	0e1b      	lsrs	r3, r3, #24
 80072c4:	f003 030f 	and.w	r3, r3, #15
 80072c8:	4a42      	ldr	r2, [pc, #264]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80072ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072d0:	e0da      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072d6:	e0d7      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072dc:	e0d4      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80072de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072e2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80072e6:	430b      	orrs	r3, r1
 80072e8:	d155      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80072ea:	4b38      	ldr	r3, [pc, #224]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80072ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80072f0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80072f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80072f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072fc:	d013      	beq.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80072fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007300:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007304:	d844      	bhi.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800730c:	d013      	beq.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007314:	d83c      	bhi.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	2b00      	cmp	r3, #0
 800731a:	d014      	beq.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 800731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007322:	d014      	beq.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8007324:	e034      	b.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007326:	f107 0318 	add.w	r3, r7, #24
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe fc50 	bl	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007334:	e0a8      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe faee 	bl	800591c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007342:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007344:	e0a0      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007346:	f7fd fb67 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800734a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800734c:	e09c      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800734e:	4b1f      	ldr	r3, [pc, #124]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b20      	cmp	r3, #32
 8007358:	d117      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800735a:	4b1c      	ldr	r3, [pc, #112]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d005      	beq.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007366:	4b19      	ldr	r3, [pc, #100]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	0e1b      	lsrs	r3, r3, #24
 800736c:	f003 030f 	and.w	r3, r3, #15
 8007370:	e006      	b.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8007372:	4b16      	ldr	r3, [pc, #88]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007374:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007378:	041b      	lsls	r3, r3, #16
 800737a:	0e1b      	lsrs	r3, r3, #24
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	4a14      	ldr	r2, [pc, #80]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007386:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007388:	e07e      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800738e:	e07b      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007394:	e078      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800739a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800739e:	430b      	orrs	r3, r1
 80073a0:	d138      	bne.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80073a2:	4b0a      	ldr	r3, [pc, #40]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80073a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073ac:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80073ae:	4b07      	ldr	r3, [pc, #28]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80073b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d10d      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80073bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 80073c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c8:	e05e      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80073ca:	bf00      	nop
 80073cc:	46020c00 	.word	0x46020c00
 80073d0:	00f42400 	.word	0x00f42400
 80073d4:	0800b818 	.word	0x0800b818
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80073d8:	4b2e      	ldr	r3, [pc, #184]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80073da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073e6:	d112      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 80073e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073ee:	d10e      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073f0:	4b28      	ldr	r3, [pc, #160]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80073f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073fe:	d102      	bne.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8007400:	23fa      	movs	r3, #250	@ 0xfa
 8007402:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007404:	e040      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007406:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800740a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800740c:	e03c      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	637b      	str	r3, [r7, #52]	@ 0x34
 8007412:	e039      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007414:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007418:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800741c:	430b      	orrs	r3, r1
 800741e:	d131      	bne.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007420:	4b1c      	ldr	r3, [pc, #112]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007422:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007426:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800742a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800742c:	4b19      	ldr	r3, [pc, #100]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007438:	d105      	bne.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800743a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743c:	2b00      	cmp	r3, #0
 800743e:	d102      	bne.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8007440:	4b15      	ldr	r3, [pc, #84]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8007442:	637b      	str	r3, [r7, #52]	@ 0x34
 8007444:	e020      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007446:	4b13      	ldr	r3, [pc, #76]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800744e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007452:	d106      	bne.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800745a:	d102      	bne.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 800745c:	4b0f      	ldr	r3, [pc, #60]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800745e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007460:	e012      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007462:	4b0c      	ldr	r3, [pc, #48]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800746a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800746e:	d106      	bne.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007476:	d102      	bne.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8007478:	4b09      	ldr	r3, [pc, #36]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800747a:	637b      	str	r3, [r7, #52]	@ 0x34
 800747c:	e004      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	637b      	str	r3, [r7, #52]	@ 0x34
 8007482:	e001      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800748a:	4618      	mov	r0, r3
 800748c:	3738      	adds	r7, #56	@ 0x38
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	46020c00 	.word	0x46020c00
 8007498:	02dc6c00 	.word	0x02dc6c00
 800749c:	016e3600 	.word	0x016e3600
 80074a0:	00f42400 	.word	0x00f42400

080074a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80074ac:	4b47      	ldr	r3, [pc, #284]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a46      	ldr	r2, [pc, #280]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 80074b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074b8:	f7fa f80a 	bl	80014d0 <HAL_GetTick>
 80074bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074be:	e008      	b.n	80074d2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074c0:	f7fa f806 	bl	80014d0 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d901      	bls.n	80074d2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e077      	b.n	80075c2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074d2:	4b3e      	ldr	r3, [pc, #248]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1f0      	bne.n	80074c0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80074de:	4b3b      	ldr	r3, [pc, #236]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 80074e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6811      	ldr	r1, [r2, #0]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6852      	ldr	r2, [r2, #4]
 80074f2:	3a01      	subs	r2, #1
 80074f4:	0212      	lsls	r2, r2, #8
 80074f6:	430a      	orrs	r2, r1
 80074f8:	4934      	ldr	r1, [pc, #208]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80074fe:	4b33      	ldr	r3, [pc, #204]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 8007500:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007502:	4b33      	ldr	r3, [pc, #204]	@ (80075d0 <RCCEx_PLL2_Config+0x12c>)
 8007504:	4013      	ands	r3, r2
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6892      	ldr	r2, [r2, #8]
 800750a:	3a01      	subs	r2, #1
 800750c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	68d2      	ldr	r2, [r2, #12]
 8007514:	3a01      	subs	r2, #1
 8007516:	0252      	lsls	r2, r2, #9
 8007518:	b292      	uxth	r2, r2
 800751a:	4311      	orrs	r1, r2
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6912      	ldr	r2, [r2, #16]
 8007520:	3a01      	subs	r2, #1
 8007522:	0412      	lsls	r2, r2, #16
 8007524:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007528:	4311      	orrs	r1, r2
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6952      	ldr	r2, [r2, #20]
 800752e:	3a01      	subs	r2, #1
 8007530:	0612      	lsls	r2, r2, #24
 8007532:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007536:	430a      	orrs	r2, r1
 8007538:	4924      	ldr	r1, [pc, #144]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 800753a:	4313      	orrs	r3, r2
 800753c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800753e:	4b23      	ldr	r3, [pc, #140]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 8007540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007542:	f023 020c 	bic.w	r2, r3, #12
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	4920      	ldr	r1, [pc, #128]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 800754c:	4313      	orrs	r3, r2
 800754e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007550:	4b1e      	ldr	r3, [pc, #120]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 8007552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	491c      	ldr	r1, [pc, #112]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 800755a:	4313      	orrs	r3, r2
 800755c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800755e:	4b1b      	ldr	r3, [pc, #108]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 8007560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007562:	4a1a      	ldr	r2, [pc, #104]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 8007564:	f023 0310 	bic.w	r3, r3, #16
 8007568:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800756a:	4b18      	ldr	r3, [pc, #96]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 800756c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007572:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	69d2      	ldr	r2, [r2, #28]
 800757a:	00d2      	lsls	r2, r2, #3
 800757c:	4913      	ldr	r1, [pc, #76]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 800757e:	4313      	orrs	r3, r2
 8007580:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007582:	4b12      	ldr	r3, [pc, #72]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 8007584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007586:	4a11      	ldr	r2, [pc, #68]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 8007588:	f043 0310 	orr.w	r3, r3, #16
 800758c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800758e:	4b0f      	ldr	r3, [pc, #60]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a0e      	ldr	r2, [pc, #56]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 8007594:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007598:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800759a:	f7f9 ff99 	bl	80014d0 <HAL_GetTick>
 800759e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075a0:	e008      	b.n	80075b4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075a2:	f7f9 ff95 	bl	80014d0 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d901      	bls.n	80075b4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e006      	b.n	80075c2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075b4:	4b05      	ldr	r3, [pc, #20]	@ (80075cc <RCCEx_PLL2_Config+0x128>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0f0      	beq.n	80075a2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80075c0:	2300      	movs	r3, #0

}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	46020c00 	.word	0x46020c00
 80075d0:	80800000 	.word	0x80800000

080075d4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80075dc:	4b47      	ldr	r3, [pc, #284]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a46      	ldr	r2, [pc, #280]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 80075e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075e8:	f7f9 ff72 	bl	80014d0 <HAL_GetTick>
 80075ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075ee:	e008      	b.n	8007602 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075f0:	f7f9 ff6e 	bl	80014d0 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d901      	bls.n	8007602 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e077      	b.n	80076f2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007602:	4b3e      	ldr	r3, [pc, #248]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1f0      	bne.n	80075f0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800760e:	4b3b      	ldr	r3, [pc, #236]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 8007610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007612:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007616:	f023 0303 	bic.w	r3, r3, #3
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6811      	ldr	r1, [r2, #0]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6852      	ldr	r2, [r2, #4]
 8007622:	3a01      	subs	r2, #1
 8007624:	0212      	lsls	r2, r2, #8
 8007626:	430a      	orrs	r2, r1
 8007628:	4934      	ldr	r1, [pc, #208]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 800762a:	4313      	orrs	r3, r2
 800762c:	630b      	str	r3, [r1, #48]	@ 0x30
 800762e:	4b33      	ldr	r3, [pc, #204]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 8007630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007632:	4b33      	ldr	r3, [pc, #204]	@ (8007700 <RCCEx_PLL3_Config+0x12c>)
 8007634:	4013      	ands	r3, r2
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	6892      	ldr	r2, [r2, #8]
 800763a:	3a01      	subs	r2, #1
 800763c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	68d2      	ldr	r2, [r2, #12]
 8007644:	3a01      	subs	r2, #1
 8007646:	0252      	lsls	r2, r2, #9
 8007648:	b292      	uxth	r2, r2
 800764a:	4311      	orrs	r1, r2
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6912      	ldr	r2, [r2, #16]
 8007650:	3a01      	subs	r2, #1
 8007652:	0412      	lsls	r2, r2, #16
 8007654:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007658:	4311      	orrs	r1, r2
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6952      	ldr	r2, [r2, #20]
 800765e:	3a01      	subs	r2, #1
 8007660:	0612      	lsls	r2, r2, #24
 8007662:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007666:	430a      	orrs	r2, r1
 8007668:	4924      	ldr	r1, [pc, #144]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 800766a:	4313      	orrs	r3, r2
 800766c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800766e:	4b23      	ldr	r3, [pc, #140]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 8007670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007672:	f023 020c 	bic.w	r2, r3, #12
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	4920      	ldr	r1, [pc, #128]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 800767c:	4313      	orrs	r3, r2
 800767e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007680:	4b1e      	ldr	r3, [pc, #120]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 8007682:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	491c      	ldr	r1, [pc, #112]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 800768a:	4313      	orrs	r3, r2
 800768c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800768e:	4b1b      	ldr	r3, [pc, #108]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 8007690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007692:	4a1a      	ldr	r2, [pc, #104]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 8007694:	f023 0310 	bic.w	r3, r3, #16
 8007698:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800769a:	4b18      	ldr	r3, [pc, #96]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 800769c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800769e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076a2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	69d2      	ldr	r2, [r2, #28]
 80076aa:	00d2      	lsls	r2, r2, #3
 80076ac:	4913      	ldr	r1, [pc, #76]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80076b2:	4b12      	ldr	r3, [pc, #72]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 80076b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b6:	4a11      	ldr	r2, [pc, #68]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 80076b8:	f043 0310 	orr.w	r3, r3, #16
 80076bc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80076be:	4b0f      	ldr	r3, [pc, #60]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a0e      	ldr	r2, [pc, #56]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 80076c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076c8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076ca:	f7f9 ff01 	bl	80014d0 <HAL_GetTick>
 80076ce:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076d0:	e008      	b.n	80076e4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076d2:	f7f9 fefd 	bl	80014d0 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d901      	bls.n	80076e4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e006      	b.n	80076f2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076e4:	4b05      	ldr	r3, [pc, #20]	@ (80076fc <RCCEx_PLL3_Config+0x128>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0f0      	beq.n	80076d2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	46020c00 	.word	0x46020c00
 8007700:	80800000 	.word	0x80800000

08007704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e042      	b.n	800779c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800771c:	2b00      	cmp	r3, #0
 800771e:	d106      	bne.n	800772e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7f9 fb7b 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2224      	movs	r2, #36	@ 0x24
 8007732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0201 	bic.w	r2, r2, #1
 8007744:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fdaa 	bl	80082a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fc05 	bl	8007f64 <UART_SetConfig>
 800775a:	4603      	mov	r3, r0
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e01b      	b.n	800779c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0201 	orr.w	r2, r2, #1
 8007792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fe29 	bl	80083ec <UART_CheckIdleState>
 800779a:	4603      	mov	r3, r0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08a      	sub	sp, #40	@ 0x28
 80077a8:	af02      	add	r7, sp, #8
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	4613      	mov	r3, r2
 80077b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	f040 808b 	bne.w	80078d6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <HAL_UART_Transmit+0x28>
 80077c6:	88fb      	ldrh	r3, [r7, #6]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e083      	b.n	80078d8 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077da:	2b80      	cmp	r3, #128	@ 0x80
 80077dc:	d107      	bne.n	80077ee <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077ec:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2221      	movs	r2, #33	@ 0x21
 80077fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077fe:	f7f9 fe67 	bl	80014d0 <HAL_GetTick>
 8007802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	88fa      	ldrh	r2, [r7, #6]
 8007808:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	88fa      	ldrh	r2, [r7, #6]
 8007810:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800781c:	d108      	bne.n	8007830 <HAL_UART_Transmit+0x8c>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d104      	bne.n	8007830 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	61bb      	str	r3, [r7, #24]
 800782e:	e003      	b.n	8007838 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007834:	2300      	movs	r3, #0
 8007836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007838:	e030      	b.n	800789c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2200      	movs	r2, #0
 8007842:	2180      	movs	r1, #128	@ 0x80
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 fe7b 	bl	8008540 <UART_WaitOnFlagUntilTimeout>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d005      	beq.n	800785c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2220      	movs	r2, #32
 8007854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e03d      	b.n	80078d8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10b      	bne.n	800787a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007870:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	3302      	adds	r3, #2
 8007876:	61bb      	str	r3, [r7, #24]
 8007878:	e007      	b.n	800788a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	781a      	ldrb	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	3301      	adds	r3, #1
 8007888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1c8      	bne.n	800783a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2200      	movs	r2, #0
 80078b0:	2140      	movs	r1, #64	@ 0x40
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 fe44 	bl	8008540 <UART_WaitOnFlagUntilTimeout>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d005      	beq.n	80078ca <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e006      	b.n	80078d8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	e000      	b.n	80078d8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80078d6:	2302      	movs	r3, #2
  }
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3720      	adds	r7, #32
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	@ 0x28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4613      	mov	r3, r2
 80078ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	d14b      	bne.n	8007990 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <HAL_UART_Receive_IT+0x24>
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e044      	b.n	8007992 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007918:	2b40      	cmp	r3, #64	@ 0x40
 800791a:	d107      	bne.n	800792c <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800792a:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a1a      	ldr	r2, [pc, #104]	@ (800799c <HAL_UART_Receive_IT+0xbc>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d024      	beq.n	8007980 <HAL_UART_Receive_IT+0xa0>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a19      	ldr	r2, [pc, #100]	@ (80079a0 <HAL_UART_Receive_IT+0xc0>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d01f      	beq.n	8007980 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d018      	beq.n	8007980 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	e853 3f00 	ldrex	r3, [r3]
 800795a:	613b      	str	r3, [r7, #16]
   return(result);
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007962:	627b      	str	r3, [r7, #36]	@ 0x24
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796c:	623b      	str	r3, [r7, #32]
 800796e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	69f9      	ldr	r1, [r7, #28]
 8007972:	6a3a      	ldr	r2, [r7, #32]
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	61bb      	str	r3, [r7, #24]
   return(result);
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e6      	bne.n	800794e <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007980:	88fb      	ldrh	r3, [r7, #6]
 8007982:	461a      	mov	r2, r3
 8007984:	68b9      	ldr	r1, [r7, #8]
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 fe48 	bl	800861c <UART_Start_Receive_IT>
 800798c:	4603      	mov	r3, r0
 800798e:	e000      	b.n	8007992 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007990:	2302      	movs	r3, #2
  }
}
 8007992:	4618      	mov	r0, r3
 8007994:	3728      	adds	r7, #40	@ 0x28
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	46002400 	.word	0x46002400
 80079a0:	56002400 	.word	0x56002400

080079a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b0ae      	sub	sp, #184	@ 0xb8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80079d2:	4013      	ands	r3, r2
 80079d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 80079d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d11b      	bne.n	8007a18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079e4:	f003 0320 	and.w	r3, r3, #32
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d015      	beq.n	8007a18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80079f0:	f003 0320 	and.w	r3, r3, #32
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d105      	bne.n	8007a04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d009      	beq.n	8007a18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 827e 	beq.w	8007f0a <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	4798      	blx	r3
      }
      return;
 8007a16:	e278      	b.n	8007f0a <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 80fd 	beq.w	8007c1c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a22:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007a26:	4b7a      	ldr	r3, [pc, #488]	@ (8007c10 <HAL_UART_IRQHandler+0x26c>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d106      	bne.n	8007a3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a32:	4b78      	ldr	r3, [pc, #480]	@ (8007c14 <HAL_UART_IRQHandler+0x270>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 80f0 	beq.w	8007c1c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d011      	beq.n	8007a6c <HAL_UART_IRQHandler+0xc8>
 8007a48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00b      	beq.n	8007a6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a62:	f043 0201 	orr.w	r2, r3, #1
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d011      	beq.n	8007a9c <HAL_UART_IRQHandler+0xf8>
 8007a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a92:	f043 0204 	orr.w	r2, r3, #4
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d011      	beq.n	8007acc <HAL_UART_IRQHandler+0x128>
 8007aa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2204      	movs	r2, #4
 8007aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ac2:	f043 0202 	orr.w	r2, r3, #2
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007acc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ad0:	f003 0308 	and.w	r3, r3, #8
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d017      	beq.n	8007b08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ad8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007adc:	f003 0320 	and.w	r3, r3, #32
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d105      	bne.n	8007af0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ae4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007ae8:	4b49      	ldr	r3, [pc, #292]	@ (8007c10 <HAL_UART_IRQHandler+0x26c>)
 8007aea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2208      	movs	r2, #8
 8007af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007afe:	f043 0208 	orr.w	r2, r3, #8
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d012      	beq.n	8007b3a <HAL_UART_IRQHandler+0x196>
 8007b14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007b18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00c      	beq.n	8007b3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b30:	f043 0220 	orr.w	r2, r3, #32
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 81e4 	beq.w	8007f0e <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b4a:	f003 0320 	and.w	r3, r3, #32
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d013      	beq.n	8007b7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007b56:	f003 0320 	and.w	r3, r3, #32
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d105      	bne.n	8007b6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d007      	beq.n	8007b7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b8e:	2b40      	cmp	r3, #64	@ 0x40
 8007b90:	d005      	beq.n	8007b9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d02e      	beq.n	8007bfc <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fe5e 	bl	8008860 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bae:	2b40      	cmp	r3, #64	@ 0x40
 8007bb0:	d120      	bne.n	8007bf4 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d017      	beq.n	8007bec <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc2:	4a15      	ldr	r2, [pc, #84]	@ (8007c18 <HAL_UART_IRQHandler+0x274>)
 8007bc4:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fa fa87 	bl	80020e0 <HAL_DMA_Abort_IT>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d019      	beq.n	8007c0c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007be6:	4610      	mov	r0, r2
 8007be8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bea:	e00f      	b.n	8007c0c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f9a3 	bl	8007f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf2:	e00b      	b.n	8007c0c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f99f 	bl	8007f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bfa:	e007      	b.n	8007c0c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f99b 	bl	8007f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007c0a:	e180      	b.n	8007f0e <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0c:	bf00      	nop
    return;
 8007c0e:	e17e      	b.n	8007f0e <HAL_UART_IRQHandler+0x56a>
 8007c10:	10000001 	.word	0x10000001
 8007c14:	04000120 	.word	0x04000120
 8007c18:	0800892d 	.word	0x0800892d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	f040 8129 	bne.w	8007e78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 8122 	beq.w	8007e78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007c38:	f003 0310 	and.w	r3, r3, #16
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 811b 	beq.w	8007e78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2210      	movs	r2, #16
 8007c48:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c54:	2b40      	cmp	r3, #64	@ 0x40
 8007c56:	f040 8091 	bne.w	8007d7c <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c64:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8007c68:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8150 	beq.w	8007f12 <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c78:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	f080 8148 	bcs.w	8007f12 <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007c88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c94:	2b81      	cmp	r3, #129	@ 0x81
 8007c96:	d060      	beq.n	8007d5a <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ca6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ca8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007cc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ccc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e2      	bne.n	8007c98 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cdc:	e853 3f00 	ldrex	r3, [r3]
 8007ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ce2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ce4:	f023 0301 	bic.w	r3, r3, #1
 8007ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007cf6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007cfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1e3      	bne.n	8007cd2 <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d20:	e853 3f00 	ldrex	r3, [r3]
 8007d24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d28:	f023 0310 	bic.w	r3, r3, #16
 8007d2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e4      	bne.n	8007d18 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fa f947 	bl	8001fe8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f8e9 	bl	8007f4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d7a:	e0ca      	b.n	8007f12 <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 80bc 	beq.w	8007f16 <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 8007d9e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 80b7 	beq.w	8007f16 <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dcc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e4      	bne.n	8007da8 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3308      	adds	r3, #8
 8007de4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	623b      	str	r3, [r7, #32]
   return(result);
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007df4:	f023 0301 	bic.w	r3, r3, #1
 8007df8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3308      	adds	r3, #8
 8007e02:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007e06:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e1      	bne.n	8007dde <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0310 	bic.w	r3, r3, #16
 8007e42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e50:	61fb      	str	r3, [r7, #28]
 8007e52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e54:	69b9      	ldr	r1, [r7, #24]
 8007e56:	69fa      	ldr	r2, [r7, #28]
 8007e58:	e841 2300 	strex	r3, r2, [r1]
 8007e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e4      	bne.n	8007e2e <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e6a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f86b 	bl	8007f4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e76:	e04e      	b.n	8007f16 <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d014      	beq.n	8007eae <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d105      	bne.n	8007e9c <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d008      	beq.n	8007eae <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d03a      	beq.n	8007f1a <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	4798      	blx	r3
    }
    return;
 8007eac:	e035      	b.n	8007f1a <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007eae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d009      	beq.n	8007ece <HAL_UART_IRQHandler+0x52a>
 8007eba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fd46 	bl	8008958 <UART_EndTransmit_IT>
    return;
 8007ecc:	e026      	b.n	8007f1c <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ece:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ed2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d009      	beq.n	8007eee <HAL_UART_IRQHandler+0x54a>
 8007eda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007ede:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 faa4 	bl	8009434 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007eec:	e016      	b.n	8007f1c <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007eee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ef2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d010      	beq.n	8007f1c <HAL_UART_IRQHandler+0x578>
 8007efa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	da0c      	bge.n	8007f1c <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 fa8c 	bl	8009420 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f08:	e008      	b.n	8007f1c <HAL_UART_IRQHandler+0x578>
      return;
 8007f0a:	bf00      	nop
 8007f0c:	e006      	b.n	8007f1c <HAL_UART_IRQHandler+0x578>
    return;
 8007f0e:	bf00      	nop
 8007f10:	e004      	b.n	8007f1c <HAL_UART_IRQHandler+0x578>
      return;
 8007f12:	bf00      	nop
 8007f14:	e002      	b.n	8007f1c <HAL_UART_IRQHandler+0x578>
      return;
 8007f16:	bf00      	nop
 8007f18:	e000      	b.n	8007f1c <HAL_UART_IRQHandler+0x578>
    return;
 8007f1a:	bf00      	nop
  }
}
 8007f1c:	37b8      	adds	r7, #184	@ 0xb8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop

08007f24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f68:	b094      	sub	sp, #80	@ 0x50
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	4b7e      	ldr	r3, [pc, #504]	@ (8008174 <UART_SetConfig+0x210>)
 8007f7a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	431a      	orrs	r2, r3
 8007f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4977      	ldr	r1, [pc, #476]	@ (8008178 <UART_SetConfig+0x214>)
 8007f9c:	4019      	ands	r1, r3
 8007f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb4:	68d9      	ldr	r1, [r3, #12]
 8007fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	ea40 0301 	orr.w	r3, r0, r1
 8007fbe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	4b6a      	ldr	r3, [pc, #424]	@ (8008174 <UART_SetConfig+0x210>)
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d009      	beq.n	8007fe4 <UART_SetConfig+0x80>
 8007fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	4b69      	ldr	r3, [pc, #420]	@ (800817c <UART_SetConfig+0x218>)
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d004      	beq.n	8007fe4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fdc:	6a1a      	ldr	r2, [r3, #32]
 8007fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007fee:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8007ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008002:	f023 000f 	bic.w	r0, r3, #15
 8008006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008008:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800800a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	ea40 0301 	orr.w	r3, r0, r1
 8008012:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	4b59      	ldr	r3, [pc, #356]	@ (8008180 <UART_SetConfig+0x21c>)
 800801a:	429a      	cmp	r2, r3
 800801c:	d102      	bne.n	8008024 <UART_SetConfig+0xc0>
 800801e:	2301      	movs	r3, #1
 8008020:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008022:	e029      	b.n	8008078 <UART_SetConfig+0x114>
 8008024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	4b56      	ldr	r3, [pc, #344]	@ (8008184 <UART_SetConfig+0x220>)
 800802a:	429a      	cmp	r2, r3
 800802c:	d102      	bne.n	8008034 <UART_SetConfig+0xd0>
 800802e:	2302      	movs	r3, #2
 8008030:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008032:	e021      	b.n	8008078 <UART_SetConfig+0x114>
 8008034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	4b53      	ldr	r3, [pc, #332]	@ (8008188 <UART_SetConfig+0x224>)
 800803a:	429a      	cmp	r2, r3
 800803c:	d102      	bne.n	8008044 <UART_SetConfig+0xe0>
 800803e:	2304      	movs	r3, #4
 8008040:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008042:	e019      	b.n	8008078 <UART_SetConfig+0x114>
 8008044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	4b50      	ldr	r3, [pc, #320]	@ (800818c <UART_SetConfig+0x228>)
 800804a:	429a      	cmp	r2, r3
 800804c:	d102      	bne.n	8008054 <UART_SetConfig+0xf0>
 800804e:	2308      	movs	r3, #8
 8008050:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008052:	e011      	b.n	8008078 <UART_SetConfig+0x114>
 8008054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	4b4d      	ldr	r3, [pc, #308]	@ (8008190 <UART_SetConfig+0x22c>)
 800805a:	429a      	cmp	r2, r3
 800805c:	d102      	bne.n	8008064 <UART_SetConfig+0x100>
 800805e:	2310      	movs	r3, #16
 8008060:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008062:	e009      	b.n	8008078 <UART_SetConfig+0x114>
 8008064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	4b42      	ldr	r3, [pc, #264]	@ (8008174 <UART_SetConfig+0x210>)
 800806a:	429a      	cmp	r2, r3
 800806c:	d102      	bne.n	8008074 <UART_SetConfig+0x110>
 800806e:	2320      	movs	r3, #32
 8008070:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008072:	e001      	b.n	8008078 <UART_SetConfig+0x114>
 8008074:	2300      	movs	r3, #0
 8008076:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	4b3d      	ldr	r3, [pc, #244]	@ (8008174 <UART_SetConfig+0x210>)
 800807e:	429a      	cmp	r2, r3
 8008080:	d005      	beq.n	800808e <UART_SetConfig+0x12a>
 8008082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	4b3d      	ldr	r3, [pc, #244]	@ (800817c <UART_SetConfig+0x218>)
 8008088:	429a      	cmp	r2, r3
 800808a:	f040 8085 	bne.w	8008198 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800808e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008090:	2200      	movs	r2, #0
 8008092:	623b      	str	r3, [r7, #32]
 8008094:	627a      	str	r2, [r7, #36]	@ 0x24
 8008096:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800809a:	f7fe f84d 	bl	8006138 <HAL_RCCEx_GetPeriphCLKFreq>
 800809e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80080a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 80e8 	beq.w	8008278 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ac:	4a39      	ldr	r2, [pc, #228]	@ (8008194 <UART_SetConfig+0x230>)
 80080ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080b2:	461a      	mov	r2, r3
 80080b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80080ba:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	4613      	mov	r3, r2
 80080c2:	005b      	lsls	r3, r3, #1
 80080c4:	4413      	add	r3, r2
 80080c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d305      	bcc.n	80080d8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d903      	bls.n	80080e0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80080de:	e048      	b.n	8008172 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080e2:	2200      	movs	r2, #0
 80080e4:	61bb      	str	r3, [r7, #24]
 80080e6:	61fa      	str	r2, [r7, #28]
 80080e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ec:	4a29      	ldr	r2, [pc, #164]	@ (8008194 <UART_SetConfig+0x230>)
 80080ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	2200      	movs	r2, #0
 80080f6:	613b      	str	r3, [r7, #16]
 80080f8:	617a      	str	r2, [r7, #20]
 80080fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80080fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008102:	f7f8 f8c1 	bl	8000288 <__aeabi_uldivmod>
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	4610      	mov	r0, r2
 800810c:	4619      	mov	r1, r3
 800810e:	f04f 0200 	mov.w	r2, #0
 8008112:	f04f 0300 	mov.w	r3, #0
 8008116:	020b      	lsls	r3, r1, #8
 8008118:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800811c:	0202      	lsls	r2, r0, #8
 800811e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008120:	6849      	ldr	r1, [r1, #4]
 8008122:	0849      	lsrs	r1, r1, #1
 8008124:	2000      	movs	r0, #0
 8008126:	460c      	mov	r4, r1
 8008128:	4605      	mov	r5, r0
 800812a:	eb12 0804 	adds.w	r8, r2, r4
 800812e:	eb43 0905 	adc.w	r9, r3, r5
 8008132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	60bb      	str	r3, [r7, #8]
 800813a:	60fa      	str	r2, [r7, #12]
 800813c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008140:	4640      	mov	r0, r8
 8008142:	4649      	mov	r1, r9
 8008144:	f7f8 f8a0 	bl	8000288 <__aeabi_uldivmod>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4613      	mov	r3, r2
 800814e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008152:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008156:	d308      	bcc.n	800816a <UART_SetConfig+0x206>
 8008158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800815a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800815e:	d204      	bcs.n	800816a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008166:	60da      	str	r2, [r3, #12]
 8008168:	e003      	b.n	8008172 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008170:	e082      	b.n	8008278 <UART_SetConfig+0x314>
 8008172:	e081      	b.n	8008278 <UART_SetConfig+0x314>
 8008174:	46002400 	.word	0x46002400
 8008178:	cfff69f3 	.word	0xcfff69f3
 800817c:	56002400 	.word	0x56002400
 8008180:	40013800 	.word	0x40013800
 8008184:	40004400 	.word	0x40004400
 8008188:	40004800 	.word	0x40004800
 800818c:	40004c00 	.word	0x40004c00
 8008190:	40005000 	.word	0x40005000
 8008194:	0800b8d8 	.word	0x0800b8d8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081a0:	d13c      	bne.n	800821c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80081a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081a4:	2200      	movs	r2, #0
 80081a6:	603b      	str	r3, [r7, #0]
 80081a8:	607a      	str	r2, [r7, #4]
 80081aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ae:	f7fd ffc3 	bl	8006138 <HAL_RCCEx_GetPeriphCLKFreq>
 80081b2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d05e      	beq.n	8008278 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081be:	4a39      	ldr	r2, [pc, #228]	@ (80082a4 <UART_SetConfig+0x340>)
 80081c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081c4:	461a      	mov	r2, r3
 80081c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081cc:	005a      	lsls	r2, r3, #1
 80081ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	085b      	lsrs	r3, r3, #1
 80081d4:	441a      	add	r2, r3
 80081d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	fbb2 f3f3 	udiv	r3, r2, r3
 80081de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e2:	2b0f      	cmp	r3, #15
 80081e4:	d916      	bls.n	8008214 <UART_SetConfig+0x2b0>
 80081e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081ec:	d212      	bcs.n	8008214 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	f023 030f 	bic.w	r3, r3, #15
 80081f6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081fa:	085b      	lsrs	r3, r3, #1
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	f003 0307 	and.w	r3, r3, #7
 8008202:	b29a      	uxth	r2, r3
 8008204:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008206:	4313      	orrs	r3, r2
 8008208:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800820a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008210:	60da      	str	r2, [r3, #12]
 8008212:	e031      	b.n	8008278 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800821a:	e02d      	b.n	8008278 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800821c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800821e:	2200      	movs	r2, #0
 8008220:	469a      	mov	sl, r3
 8008222:	4693      	mov	fp, r2
 8008224:	4650      	mov	r0, sl
 8008226:	4659      	mov	r1, fp
 8008228:	f7fd ff86 	bl	8006138 <HAL_RCCEx_GetPeriphCLKFreq>
 800822c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800822e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008230:	2b00      	cmp	r3, #0
 8008232:	d021      	beq.n	8008278 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008238:	4a1a      	ldr	r2, [pc, #104]	@ (80082a4 <UART_SetConfig+0x340>)
 800823a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800823e:	461a      	mov	r2, r3
 8008240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008242:	fbb3 f2f2 	udiv	r2, r3, r2
 8008246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	085b      	lsrs	r3, r3, #1
 800824c:	441a      	add	r2, r3
 800824e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	fbb2 f3f3 	udiv	r3, r2, r3
 8008256:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800825a:	2b0f      	cmp	r3, #15
 800825c:	d909      	bls.n	8008272 <UART_SetConfig+0x30e>
 800825e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008264:	d205      	bcs.n	8008272 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008268:	b29a      	uxth	r2, r3
 800826a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60da      	str	r2, [r3, #12]
 8008270:	e002      	b.n	8008278 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827a:	2201      	movs	r2, #1
 800827c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008282:	2201      	movs	r2, #1
 8008284:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828a:	2200      	movs	r2, #0
 800828c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800828e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008290:	2200      	movs	r2, #0
 8008292:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008294:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008298:	4618      	mov	r0, r3
 800829a:	3750      	adds	r7, #80	@ 0x50
 800829c:	46bd      	mov	sp, r7
 800829e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082a2:	bf00      	nop
 80082a4:	0800b8d8 	.word	0x0800b8d8

080082a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b4:	f003 0308 	and.w	r3, r3, #8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00a      	beq.n	8008316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833c:	f003 0310 	and.w	r3, r3, #16
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00a      	beq.n	800835a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00a      	beq.n	800837c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d01a      	beq.n	80083be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	430a      	orrs	r2, r1
 800839c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083a6:	d10a      	bne.n	80083be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	605a      	str	r2, [r3, #4]
  }
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b098      	sub	sp, #96	@ 0x60
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083fc:	f7f9 f868 	bl	80014d0 <HAL_GetTick>
 8008400:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0308 	and.w	r3, r3, #8
 800840c:	2b08      	cmp	r3, #8
 800840e:	d12f      	bne.n	8008470 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008410:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008418:	2200      	movs	r2, #0
 800841a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f88e 	bl	8008540 <UART_WaitOnFlagUntilTimeout>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d022      	beq.n	8008470 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008432:	e853 3f00 	ldrex	r3, [r3]
 8008436:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800843a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800843e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	461a      	mov	r2, r3
 8008446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008448:	647b      	str	r3, [r7, #68]	@ 0x44
 800844a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800844e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008450:	e841 2300 	strex	r3, r2, [r1]
 8008454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1e6      	bne.n	800842a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2220      	movs	r2, #32
 8008460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e063      	b.n	8008538 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0304 	and.w	r3, r3, #4
 800847a:	2b04      	cmp	r3, #4
 800847c:	d149      	bne.n	8008512 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800847e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008486:	2200      	movs	r2, #0
 8008488:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f857 	bl	8008540 <UART_WaitOnFlagUntilTimeout>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d03c      	beq.n	8008512 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	623b      	str	r3, [r7, #32]
   return(result);
 80084a6:	6a3b      	ldr	r3, [r7, #32]
 80084a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80084b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e6      	bne.n	8008498 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3308      	adds	r3, #8
 80084d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f023 0301 	bic.w	r3, r3, #1
 80084e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3308      	adds	r3, #8
 80084e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084ea:	61fa      	str	r2, [r7, #28]
 80084ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	69b9      	ldr	r1, [r7, #24]
 80084f0:	69fa      	ldr	r2, [r7, #28]
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	617b      	str	r3, [r7, #20]
   return(result);
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e5      	bne.n	80084ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2220      	movs	r2, #32
 8008502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e012      	b.n	8008538 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2220      	movs	r2, #32
 8008516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2220      	movs	r2, #32
 800851e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3758      	adds	r7, #88	@ 0x58
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	4613      	mov	r3, r2
 800854e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008550:	e04f      	b.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008558:	d04b      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800855a:	f7f8 ffb9 	bl	80014d0 <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	429a      	cmp	r2, r3
 8008568:	d302      	bcc.n	8008570 <UART_WaitOnFlagUntilTimeout+0x30>
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e04e      	b.n	8008612 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	d037      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2b80      	cmp	r3, #128	@ 0x80
 8008586:	d034      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b40      	cmp	r3, #64	@ 0x40
 800858c:	d031      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	69db      	ldr	r3, [r3, #28]
 8008594:	f003 0308 	and.w	r3, r3, #8
 8008598:	2b08      	cmp	r3, #8
 800859a:	d110      	bne.n	80085be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2208      	movs	r2, #8
 80085a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 f95b 	bl	8008860 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2208      	movs	r2, #8
 80085ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e029      	b.n	8008612 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085cc:	d111      	bne.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 f941 	bl	8008860 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2220      	movs	r2, #32
 80085e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e00f      	b.n	8008612 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69da      	ldr	r2, [r3, #28]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	4013      	ands	r3, r2
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	429a      	cmp	r2, r3
 8008600:	bf0c      	ite	eq
 8008602:	2301      	moveq	r3, #1
 8008604:	2300      	movne	r3, #0
 8008606:	b2db      	uxtb	r3, r3
 8008608:	461a      	mov	r2, r3
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	429a      	cmp	r2, r3
 800860e:	d0a0      	beq.n	8008552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800861c:	b480      	push	{r7}
 800861e:	b0a3      	sub	sp, #140	@ 0x8c
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	4613      	mov	r3, r2
 8008628:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	88fa      	ldrh	r2, [r7, #6]
 8008634:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	88fa      	ldrh	r2, [r7, #6]
 800863c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800864e:	d10e      	bne.n	800866e <UART_Start_Receive_IT+0x52>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d105      	bne.n	8008664 <UART_Start_Receive_IT+0x48>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800865e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008662:	e02d      	b.n	80086c0 <UART_Start_Receive_IT+0xa4>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	22ff      	movs	r2, #255	@ 0xff
 8008668:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800866c:	e028      	b.n	80086c0 <UART_Start_Receive_IT+0xa4>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10d      	bne.n	8008692 <UART_Start_Receive_IT+0x76>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d104      	bne.n	8008688 <UART_Start_Receive_IT+0x6c>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	22ff      	movs	r2, #255	@ 0xff
 8008682:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008686:	e01b      	b.n	80086c0 <UART_Start_Receive_IT+0xa4>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	227f      	movs	r2, #127	@ 0x7f
 800868c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008690:	e016      	b.n	80086c0 <UART_Start_Receive_IT+0xa4>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800869a:	d10d      	bne.n	80086b8 <UART_Start_Receive_IT+0x9c>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d104      	bne.n	80086ae <UART_Start_Receive_IT+0x92>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	227f      	movs	r2, #127	@ 0x7f
 80086a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086ac:	e008      	b.n	80086c0 <UART_Start_Receive_IT+0xa4>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	223f      	movs	r2, #63	@ 0x3f
 80086b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086b6:	e003      	b.n	80086c0 <UART_Start_Receive_IT+0xa4>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2222      	movs	r2, #34	@ 0x22
 80086cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3308      	adds	r3, #8
 80086d6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80086e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086e2:	f043 0301 	orr.w	r3, r3, #1
 80086e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3308      	adds	r3, #8
 80086f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80086f4:	673a      	str	r2, [r7, #112]	@ 0x70
 80086f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80086fa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80086fc:	e841 2300 	strex	r3, r2, [r1]
 8008700:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008702:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1e3      	bne.n	80086d0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800870c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008710:	d14f      	bne.n	80087b2 <UART_Start_Receive_IT+0x196>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008718:	88fa      	ldrh	r2, [r7, #6]
 800871a:	429a      	cmp	r2, r3
 800871c:	d349      	bcc.n	80087b2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008726:	d107      	bne.n	8008738 <UART_Start_Receive_IT+0x11c>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d103      	bne.n	8008738 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	4a47      	ldr	r2, [pc, #284]	@ (8008850 <UART_Start_Receive_IT+0x234>)
 8008734:	675a      	str	r2, [r3, #116]	@ 0x74
 8008736:	e002      	b.n	800873e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	4a46      	ldr	r2, [pc, #280]	@ (8008854 <UART_Start_Receive_IT+0x238>)
 800873c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d01a      	beq.n	800877c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800874e:	e853 3f00 	ldrex	r3, [r3]
 8008752:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008756:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800875a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008768:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800876a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800876e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008770:	e841 2300 	strex	r3, r2, [r1]
 8008774:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1e4      	bne.n	8008746 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3308      	adds	r3, #8
 8008782:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008786:	e853 3f00 	ldrex	r3, [r3]
 800878a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800878c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008792:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3308      	adds	r3, #8
 800879a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800879c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800879e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087a4:	e841 2300 	strex	r3, r2, [r1]
 80087a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80087aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e5      	bne.n	800877c <UART_Start_Receive_IT+0x160>
 80087b0:	e046      	b.n	8008840 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ba:	d107      	bne.n	80087cc <UART_Start_Receive_IT+0x1b0>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d103      	bne.n	80087cc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4a24      	ldr	r2, [pc, #144]	@ (8008858 <UART_Start_Receive_IT+0x23c>)
 80087c8:	675a      	str	r2, [r3, #116]	@ 0x74
 80087ca:	e002      	b.n	80087d2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4a23      	ldr	r2, [pc, #140]	@ (800885c <UART_Start_Receive_IT+0x240>)
 80087d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d019      	beq.n	800880e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ea:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80087ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80087fa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80087fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e6      	bne.n	80087da <UART_Start_Receive_IT+0x1be>
 800880c:	e018      	b.n	8008840 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	613b      	str	r3, [r7, #16]
   return(result);
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f043 0320 	orr.w	r3, r3, #32
 8008822:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800882c:	623b      	str	r3, [r7, #32]
 800882e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	69f9      	ldr	r1, [r7, #28]
 8008832:	6a3a      	ldr	r2, [r7, #32]
 8008834:	e841 2300 	strex	r3, r2, [r1]
 8008838:	61bb      	str	r3, [r7, #24]
   return(result);
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e6      	bne.n	800880e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	378c      	adds	r7, #140	@ 0x8c
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	080090a9 	.word	0x080090a9
 8008854:	08008d39 	.word	0x08008d39
 8008858:	08008b75 	.word	0x08008b75
 800885c:	080089b1 	.word	0x080089b1

08008860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008860:	b480      	push	{r7}
 8008862:	b095      	sub	sp, #84	@ 0x54
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008870:	e853 3f00 	ldrex	r3, [r3]
 8008874:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800887c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008886:	643b      	str	r3, [r7, #64]	@ 0x40
 8008888:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800888c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1e6      	bne.n	8008868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3308      	adds	r3, #8
 80088a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088b0:	f023 0301 	bic.w	r3, r3, #1
 80088b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3308      	adds	r3, #8
 80088bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e3      	bne.n	800889a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d118      	bne.n	800890c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	e853 3f00 	ldrex	r3, [r3]
 80088e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	f023 0310 	bic.w	r3, r3, #16
 80088ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	461a      	mov	r2, r3
 80088f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088f8:	61bb      	str	r3, [r7, #24]
 80088fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fc:	6979      	ldr	r1, [r7, #20]
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	e841 2300 	strex	r3, r2, [r1]
 8008904:	613b      	str	r3, [r7, #16]
   return(result);
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e6      	bne.n	80088da <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2220      	movs	r2, #32
 8008910:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008920:	bf00      	nop
 8008922:	3754      	adds	r7, #84	@ 0x54
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008938:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f7ff faf4 	bl	8007f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008950:	bf00      	nop
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b088      	sub	sp, #32
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	60bb      	str	r3, [r7, #8]
   return(result);
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008974:	61fb      	str	r3, [r7, #28]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	61bb      	str	r3, [r7, #24]
 8008980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	6979      	ldr	r1, [r7, #20]
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	613b      	str	r3, [r7, #16]
   return(result);
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e6      	bne.n	8008960 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2220      	movs	r2, #32
 8008996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7ff fabf 	bl	8007f24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089a6:	bf00      	nop
 80089a8:	3720      	adds	r7, #32
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b09c      	sub	sp, #112	@ 0x70
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80089be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089c8:	2b22      	cmp	r3, #34	@ 0x22
 80089ca:	f040 80c3 	bne.w	8008b54 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80089dc:	b2d9      	uxtb	r1, r3
 80089de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089e8:	400a      	ands	r2, r1
 80089ea:	b2d2      	uxtb	r2, r2
 80089ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	3b01      	subs	r3, #1
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f040 80a6 	bne.w	8008b64 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	461a      	mov	r2, r3
 8008a34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a3e:	e841 2300 	strex	r3, r2, [r1]
 8008a42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1e6      	bne.n	8008a18 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3308      	adds	r3, #8
 8008a50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a54:	e853 3f00 	ldrex	r3, [r3]
 8008a58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5c:	f023 0301 	bic.w	r3, r3, #1
 8008a60:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3308      	adds	r3, #8
 8008a68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008a6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a72:	e841 2300 	strex	r3, r2, [r1]
 8008a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1e5      	bne.n	8008a4a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2220      	movs	r2, #32
 8008a82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a35      	ldr	r2, [pc, #212]	@ (8008b6c <UART_RxISR_8BIT+0x1bc>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d024      	beq.n	8008ae6 <UART_RxISR_8BIT+0x136>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a33      	ldr	r2, [pc, #204]	@ (8008b70 <UART_RxISR_8BIT+0x1c0>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d01f      	beq.n	8008ae6 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d018      	beq.n	8008ae6 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ac8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ad2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ad4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ad8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ada:	e841 2300 	strex	r3, r2, [r1]
 8008ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e6      	bne.n	8008ab4 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d12e      	bne.n	8008b4c <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f023 0310 	bic.w	r3, r3, #16
 8008b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b12:	61fb      	str	r3, [r7, #28]
 8008b14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	69b9      	ldr	r1, [r7, #24]
 8008b18:	69fa      	ldr	r2, [r7, #28]
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e6      	bne.n	8008af4 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	69db      	ldr	r3, [r3, #28]
 8008b2c:	f003 0310 	and.w	r3, r3, #16
 8008b30:	2b10      	cmp	r3, #16
 8008b32:	d103      	bne.n	8008b3c <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2210      	movs	r2, #16
 8008b3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7ff fa01 	bl	8007f4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b4a:	e00b      	b.n	8008b64 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7f7 fd5f 	bl	8000610 <HAL_UART_RxCpltCallback>
}
 8008b52:	e007      	b.n	8008b64 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	699a      	ldr	r2, [r3, #24]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f042 0208 	orr.w	r2, r2, #8
 8008b62:	619a      	str	r2, [r3, #24]
}
 8008b64:	bf00      	nop
 8008b66:	3770      	adds	r7, #112	@ 0x70
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	46002400 	.word	0x46002400
 8008b70:	56002400 	.word	0x56002400

08008b74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b09c      	sub	sp, #112	@ 0x70
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b8c:	2b22      	cmp	r3, #34	@ 0x22
 8008b8e:	f040 80c3 	bne.w	8008d18 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ba2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008ba6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008baa:	4013      	ands	r3, r2
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bb0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb6:	1c9a      	adds	r2, r3, #2
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f040 80a6 	bne.w	8008d28 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bf0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bfc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c02:	e841 2300 	strex	r3, r2, [r1]
 8008c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008c08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e6      	bne.n	8008bdc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3308      	adds	r3, #8
 8008c14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c18:	e853 3f00 	ldrex	r3, [r3]
 8008c1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c20:	f023 0301 	bic.w	r3, r3, #1
 8008c24:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3308      	adds	r3, #8
 8008c2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008c2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e5      	bne.n	8008c0e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2220      	movs	r2, #32
 8008c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a35      	ldr	r2, [pc, #212]	@ (8008d30 <UART_RxISR_16BIT+0x1bc>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d024      	beq.n	8008caa <UART_RxISR_16BIT+0x136>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a33      	ldr	r2, [pc, #204]	@ (8008d34 <UART_RxISR_16BIT+0x1c0>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d01f      	beq.n	8008caa <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d018      	beq.n	8008caa <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c98:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e6      	bne.n	8008c78 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d12e      	bne.n	8008d10 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	e853 3f00 	ldrex	r3, [r3]
 8008cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f023 0310 	bic.w	r3, r3, #16
 8008ccc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cd6:	61bb      	str	r3, [r7, #24]
 8008cd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cda:	6979      	ldr	r1, [r7, #20]
 8008cdc:	69ba      	ldr	r2, [r7, #24]
 8008cde:	e841 2300 	strex	r3, r2, [r1]
 8008ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1e6      	bne.n	8008cb8 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	f003 0310 	and.w	r3, r3, #16
 8008cf4:	2b10      	cmp	r3, #16
 8008cf6:	d103      	bne.n	8008d00 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2210      	movs	r2, #16
 8008cfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7ff f91f 	bl	8007f4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d0e:	e00b      	b.n	8008d28 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7f7 fc7d 	bl	8000610 <HAL_UART_RxCpltCallback>
}
 8008d16:	e007      	b.n	8008d28 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	699a      	ldr	r2, [r3, #24]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f042 0208 	orr.w	r2, r2, #8
 8008d26:	619a      	str	r2, [r3, #24]
}
 8008d28:	bf00      	nop
 8008d2a:	3770      	adds	r7, #112	@ 0x70
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	46002400 	.word	0x46002400
 8008d34:	56002400 	.word	0x56002400

08008d38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b0ac      	sub	sp, #176	@ 0xb0
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d46:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d6e:	2b22      	cmp	r3, #34	@ 0x22
 8008d70:	f040 8187 	bne.w	8009082 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008d7a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d7e:	e12a      	b.n	8008fd6 <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d86:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d8a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008d8e:	b2d9      	uxtb	r1, r3
 8008d90:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d9a:	400a      	ands	r2, r1
 8008d9c:	b2d2      	uxtb	r2, r2
 8008d9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008da4:	1c5a      	adds	r2, r3, #1
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	3b01      	subs	r3, #1
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dca:	f003 0307 	and.w	r3, r3, #7
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d053      	beq.n	8008e7a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d011      	beq.n	8008e02 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00b      	beq.n	8008e02 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2201      	movs	r2, #1
 8008df0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008df8:	f043 0201 	orr.w	r2, r3, #1
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e06:	f003 0302 	and.w	r3, r3, #2
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d011      	beq.n	8008e32 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00b      	beq.n	8008e32 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e28:	f043 0204 	orr.w	r2, r3, #4
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e36:	f003 0304 	and.w	r3, r3, #4
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d011      	beq.n	8008e62 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00b      	beq.n	8008e62 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2204      	movs	r2, #4
 8008e50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e58:	f043 0202 	orr.w	r2, r3, #2
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d006      	beq.n	8008e7a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff f863 	bl	8007f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f040 80a7 	bne.w	8008fd6 <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008eac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008eb0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008eb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e4      	bne.n	8008e88 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008ece:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ed4:	f023 0301 	bic.w	r3, r3, #1
 8008ed8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ee6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008ee8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008eec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008ef4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e1      	bne.n	8008ebe <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a62      	ldr	r2, [pc, #392]	@ (800909c <UART_RxISR_8BIT_FIFOEN+0x364>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d026      	beq.n	8008f66 <UART_RxISR_8BIT_FIFOEN+0x22e>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a60      	ldr	r2, [pc, #384]	@ (80090a0 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d021      	beq.n	8008f66 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d01a      	beq.n	8008f66 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008f3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008f52:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f54:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1e4      	bne.n	8008f30 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d130      	bne.n	8008fd0 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	f023 0310 	bic.w	r3, r3, #16
 8008f88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	461a      	mov	r2, r3
 8008f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e4      	bne.n	8008f74 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	69db      	ldr	r3, [r3, #28]
 8008fb0:	f003 0310 	and.w	r3, r3, #16
 8008fb4:	2b10      	cmp	r3, #16
 8008fb6:	d103      	bne.n	8008fc0 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2210      	movs	r2, #16
 8008fbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7fe ffbf 	bl	8007f4c <HAL_UARTEx_RxEventCallback>
 8008fce:	e002      	b.n	8008fd6 <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7f7 fb1d 	bl	8000610 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fd6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d006      	beq.n	8008fec <UART_RxISR_8BIT_FIFOEN+0x2b4>
 8008fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fe2:	f003 0320 	and.w	r3, r3, #32
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f47f aeca 	bne.w	8008d80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ff2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ff6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d049      	beq.n	8009092 <UART_RxISR_8BIT_FIFOEN+0x35a>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009004:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009008:	429a      	cmp	r2, r3
 800900a:	d242      	bcs.n	8009092 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3308      	adds	r3, #8
 8009012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	e853 3f00 	ldrex	r3, [r3]
 800901a:	61fb      	str	r3, [r7, #28]
   return(result);
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009022:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3308      	adds	r3, #8
 800902c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009030:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009032:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009038:	e841 2300 	strex	r3, r2, [r1]
 800903c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800903e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1e3      	bne.n	800900c <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a17      	ldr	r2, [pc, #92]	@ (80090a4 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8009048:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	e853 3f00 	ldrex	r3, [r3]
 8009056:	60bb      	str	r3, [r7, #8]
   return(result);
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f043 0320 	orr.w	r3, r3, #32
 800905e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800906c:	61bb      	str	r3, [r7, #24]
 800906e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	6979      	ldr	r1, [r7, #20]
 8009072:	69ba      	ldr	r2, [r7, #24]
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	613b      	str	r3, [r7, #16]
   return(result);
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e4      	bne.n	800904a <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009080:	e007      	b.n	8009092 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	699a      	ldr	r2, [r3, #24]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f042 0208 	orr.w	r2, r2, #8
 8009090:	619a      	str	r2, [r3, #24]
}
 8009092:	bf00      	nop
 8009094:	37b0      	adds	r7, #176	@ 0xb0
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	46002400 	.word	0x46002400
 80090a0:	56002400 	.word	0x56002400
 80090a4:	080089b1 	.word	0x080089b1

080090a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b0ae      	sub	sp, #184	@ 0xb8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80090b6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090de:	2b22      	cmp	r3, #34	@ 0x22
 80090e0:	f040 818b 	bne.w	80093fa <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80090ea:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090ee:	e12e      	b.n	800934e <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009102:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009106:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800910a:	4013      	ands	r3, r2
 800910c:	b29a      	uxth	r2, r3
 800910e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009112:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009118:	1c9a      	adds	r2, r3, #2
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009124:	b29b      	uxth	r3, r3
 8009126:	3b01      	subs	r3, #1
 8009128:	b29a      	uxth	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	69db      	ldr	r3, [r3, #28]
 8009136:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800913a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800913e:	f003 0307 	and.w	r3, r3, #7
 8009142:	2b00      	cmp	r3, #0
 8009144:	d053      	beq.n	80091ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009146:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	2b00      	cmp	r3, #0
 8009150:	d011      	beq.n	8009176 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00b      	beq.n	8009176 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2201      	movs	r2, #1
 8009164:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800916c:	f043 0201 	orr.w	r2, r3, #1
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009176:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d011      	beq.n	80091a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009182:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00b      	beq.n	80091a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2202      	movs	r2, #2
 8009194:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800919c:	f043 0204 	orr.w	r2, r3, #4
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091aa:	f003 0304 	and.w	r3, r3, #4
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d011      	beq.n	80091d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80091b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00b      	beq.n	80091d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2204      	movs	r2, #4
 80091c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091cc:	f043 0202 	orr.w	r2, r3, #2
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d006      	beq.n	80091ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7fe fea9 	bl	8007f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f040 80a9 	bne.w	800934e <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009202:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009204:	e853 3f00 	ldrex	r3, [r3]
 8009208:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800920a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800920c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009210:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	461a      	mov	r2, r3
 800921a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800921e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009222:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009226:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800922a:	e841 2300 	strex	r3, r2, [r1]
 800922e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1e2      	bne.n	80091fc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3308      	adds	r3, #8
 800923c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009240:	e853 3f00 	ldrex	r3, [r3]
 8009244:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009248:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800924c:	f023 0301 	bic.w	r3, r3, #1
 8009250:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3308      	adds	r3, #8
 800925a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800925e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009260:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009264:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009266:	e841 2300 	strex	r3, r2, [r1]
 800926a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800926c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1e1      	bne.n	8009236 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2220      	movs	r2, #32
 8009276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a62      	ldr	r2, [pc, #392]	@ (8009414 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d026      	beq.n	80092de <UART_RxISR_16BIT_FIFOEN+0x236>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a60      	ldr	r2, [pc, #384]	@ (8009418 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d021      	beq.n	80092de <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d01a      	beq.n	80092de <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092b0:	e853 3f00 	ldrex	r3, [r3]
 80092b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80092b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80092bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	461a      	mov	r2, r3
 80092c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80092ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092d2:	e841 2300 	strex	r3, r2, [r1]
 80092d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1e4      	bne.n	80092a8 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d130      	bne.n	8009348 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f4:	e853 3f00 	ldrex	r3, [r3]
 80092f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092fc:	f023 0310 	bic.w	r3, r3, #16
 8009300:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800930e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009310:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009312:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009314:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009316:	e841 2300 	strex	r3, r2, [r1]
 800931a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800931c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1e4      	bne.n	80092ec <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	f003 0310 	and.w	r3, r3, #16
 800932c:	2b10      	cmp	r3, #16
 800932e:	d103      	bne.n	8009338 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2210      	movs	r2, #16
 8009336:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7fe fe03 	bl	8007f4c <HAL_UARTEx_RxEventCallback>
 8009346:	e002      	b.n	800934e <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7f7 f961 	bl	8000610 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800934e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009352:	2b00      	cmp	r3, #0
 8009354:	d006      	beq.n	8009364 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 8009356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800935a:	f003 0320 	and.w	r3, r3, #32
 800935e:	2b00      	cmp	r3, #0
 8009360:	f47f aec6 	bne.w	80090f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800936a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800936e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009372:	2b00      	cmp	r3, #0
 8009374:	d049      	beq.n	800940a <UART_RxISR_16BIT_FIFOEN+0x362>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800937c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009380:	429a      	cmp	r2, r3
 8009382:	d242      	bcs.n	800940a <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3308      	adds	r3, #8
 800938a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938e:	e853 3f00 	ldrex	r3, [r3]
 8009392:	623b      	str	r3, [r7, #32]
   return(result);
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800939a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3308      	adds	r3, #8
 80093a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80093a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80093aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e3      	bne.n	8009384 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a17      	ldr	r2, [pc, #92]	@ (800941c <UART_RxISR_16BIT_FIFOEN+0x374>)
 80093c0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	e853 3f00 	ldrex	r3, [r3]
 80093ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f043 0320 	orr.w	r3, r3, #32
 80093d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093e4:	61fb      	str	r3, [r7, #28]
 80093e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e8:	69b9      	ldr	r1, [r7, #24]
 80093ea:	69fa      	ldr	r2, [r7, #28]
 80093ec:	e841 2300 	strex	r3, r2, [r1]
 80093f0:	617b      	str	r3, [r7, #20]
   return(result);
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e4      	bne.n	80093c2 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093f8:	e007      	b.n	800940a <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	699a      	ldr	r2, [r3, #24]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f042 0208 	orr.w	r2, r2, #8
 8009408:	619a      	str	r2, [r3, #24]
}
 800940a:	bf00      	nop
 800940c:	37b8      	adds	r7, #184	@ 0xb8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	46002400 	.word	0x46002400
 8009418:	56002400 	.word	0x56002400
 800941c:	08008b75 	.word	0x08008b75

08009420 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009456:	2b01      	cmp	r3, #1
 8009458:	d101      	bne.n	800945e <HAL_UARTEx_DisableFifoMode+0x16>
 800945a:	2302      	movs	r3, #2
 800945c:	e027      	b.n	80094ae <HAL_UARTEx_DisableFifoMode+0x66>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2224      	movs	r2, #36	@ 0x24
 800946a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f022 0201 	bic.w	r2, r2, #1
 8009484:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800948c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2220      	movs	r2, #32
 80094a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d101      	bne.n	80094d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094ce:	2302      	movs	r3, #2
 80094d0:	e02d      	b.n	800952e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2224      	movs	r2, #36	@ 0x24
 80094de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 0201 	bic.w	r2, r2, #1
 80094f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	683a      	ldr	r2, [r7, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f850 	bl	80095b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2220      	movs	r2, #32
 8009520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009546:	2b01      	cmp	r3, #1
 8009548:	d101      	bne.n	800954e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800954a:	2302      	movs	r3, #2
 800954c:	e02d      	b.n	80095aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2224      	movs	r2, #36	@ 0x24
 800955a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0201 	bic.w	r2, r2, #1
 8009574:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	430a      	orrs	r2, r1
 8009588:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f812 	bl	80095b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2220      	movs	r2, #32
 800959c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
	...

080095b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d108      	bne.n	80095d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095d4:	e031      	b.n	800963a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095d6:	2308      	movs	r3, #8
 80095d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095da:	2308      	movs	r3, #8
 80095dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	0e5b      	lsrs	r3, r3, #25
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	f003 0307 	and.w	r3, r3, #7
 80095ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	0f5b      	lsrs	r3, r3, #29
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	f003 0307 	and.w	r3, r3, #7
 80095fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	7b3a      	ldrb	r2, [r7, #12]
 8009602:	4911      	ldr	r1, [pc, #68]	@ (8009648 <UARTEx_SetNbDataToProcess+0x94>)
 8009604:	5c8a      	ldrb	r2, [r1, r2]
 8009606:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800960a:	7b3a      	ldrb	r2, [r7, #12]
 800960c:	490f      	ldr	r1, [pc, #60]	@ (800964c <UARTEx_SetNbDataToProcess+0x98>)
 800960e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009610:	fb93 f3f2 	sdiv	r3, r3, r2
 8009614:	b29a      	uxth	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	7b7a      	ldrb	r2, [r7, #13]
 8009620:	4909      	ldr	r1, [pc, #36]	@ (8009648 <UARTEx_SetNbDataToProcess+0x94>)
 8009622:	5c8a      	ldrb	r2, [r1, r2]
 8009624:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009628:	7b7a      	ldrb	r2, [r7, #13]
 800962a:	4908      	ldr	r1, [pc, #32]	@ (800964c <UARTEx_SetNbDataToProcess+0x98>)
 800962c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800962e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009632:	b29a      	uxth	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800963a:	bf00      	nop
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	0800b8f0 	.word	0x0800b8f0
 800964c:	0800b8f8 	.word	0x0800b8f8

08009650 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009650:	b480      	push	{r7}
 8009652:	b08b      	sub	sp, #44	@ 0x2c
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	fa93 f3a3 	rbit	r3, r3
 800966a:	613b      	str	r3, [r7, #16]
  return result;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d101      	bne.n	800967a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009676:	2320      	movs	r3, #32
 8009678:	e003      	b.n	8009682 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	fab3 f383 	clz	r3, r3
 8009680:	b2db      	uxtb	r3, r3
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	2103      	movs	r1, #3
 8009686:	fa01 f303 	lsl.w	r3, r1, r3
 800968a:	43db      	mvns	r3, r3
 800968c:	401a      	ands	r2, r3
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	fa93 f3a3 	rbit	r3, r3
 8009698:	61fb      	str	r3, [r7, #28]
  return result;
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800969e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d101      	bne.n	80096a8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80096a4:	2320      	movs	r3, #32
 80096a6:	e003      	b.n	80096b0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80096a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096aa:	fab3 f383 	clz	r3, r3
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	fa01 f303 	lsl.w	r3, r1, r3
 80096b8:	431a      	orrs	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 80096be:	bf00      	nop
 80096c0:	372c      	adds	r7, #44	@ 0x2c
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b085      	sub	sp, #20
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	60f8      	str	r0, [r7, #12]
 80096d2:	60b9      	str	r1, [r7, #8]
 80096d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	43db      	mvns	r3, r3
 80096de:	401a      	ands	r2, r3
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	fb01 f303 	mul.w	r3, r1, r3
 80096e8:	431a      	orrs	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	605a      	str	r2, [r3, #4]
}
 80096ee:	bf00      	nop
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b08b      	sub	sp, #44	@ 0x2c
 80096fe:	af00      	add	r7, sp, #0
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	fa93 f3a3 	rbit	r3, r3
 8009714:	613b      	str	r3, [r7, #16]
  return result;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009720:	2320      	movs	r3, #32
 8009722:	e003      	b.n	800972c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	fab3 f383 	clz	r3, r3
 800972a:	b2db      	uxtb	r3, r3
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	2103      	movs	r1, #3
 8009730:	fa01 f303 	lsl.w	r3, r1, r3
 8009734:	43db      	mvns	r3, r3
 8009736:	401a      	ands	r2, r3
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800973c:	6a3b      	ldr	r3, [r7, #32]
 800973e:	fa93 f3a3 	rbit	r3, r3
 8009742:	61fb      	str	r3, [r7, #28]
  return result;
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800974e:	2320      	movs	r3, #32
 8009750:	e003      	b.n	800975a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009754:	fab3 f383 	clz	r3, r3
 8009758:	b2db      	uxtb	r3, r3
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	fa01 f303 	lsl.w	r3, r1, r3
 8009762:	431a      	orrs	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 8009768:	bf00      	nop
 800976a:	372c      	adds	r7, #44	@ 0x2c
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009774:	b480      	push	{r7}
 8009776:	b08b      	sub	sp, #44	@ 0x2c
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	68da      	ldr	r2, [r3, #12]
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	fa93 f3a3 	rbit	r3, r3
 800978e:	613b      	str	r3, [r7, #16]
  return result;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800979a:	2320      	movs	r3, #32
 800979c:	e003      	b.n	80097a6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	fab3 f383 	clz	r3, r3
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	005b      	lsls	r3, r3, #1
 80097a8:	2103      	movs	r1, #3
 80097aa:	fa01 f303 	lsl.w	r3, r1, r3
 80097ae:	43db      	mvns	r3, r3
 80097b0:	401a      	ands	r2, r3
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	fa93 f3a3 	rbit	r3, r3
 80097bc:	61fb      	str	r3, [r7, #28]
  return result;
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80097c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80097c8:	2320      	movs	r3, #32
 80097ca:	e003      	b.n	80097d4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80097cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ce:	fab3 f383 	clz	r3, r3
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	6879      	ldr	r1, [r7, #4]
 80097d8:	fa01 f303 	lsl.w	r3, r1, r3
 80097dc:	431a      	orrs	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 80097e2:	bf00      	nop
 80097e4:	372c      	adds	r7, #44	@ 0x2c
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b08b      	sub	sp, #44	@ 0x2c
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6a1a      	ldr	r2, [r3, #32]
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	fa93 f3a3 	rbit	r3, r3
 8009808:	613b      	str	r3, [r7, #16]
  return result;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009814:	2320      	movs	r3, #32
 8009816:	e003      	b.n	8009820 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	fab3 f383 	clz	r3, r3
 800981e:	b2db      	uxtb	r3, r3
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	210f      	movs	r1, #15
 8009824:	fa01 f303 	lsl.w	r3, r1, r3
 8009828:	43db      	mvns	r3, r3
 800982a:	401a      	ands	r2, r3
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	fa93 f3a3 	rbit	r3, r3
 8009836:	61fb      	str	r3, [r7, #28]
  return result;
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800983c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009842:	2320      	movs	r3, #32
 8009844:	e003      	b.n	800984e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009848:	fab3 f383 	clz	r3, r3
 800984c:	b2db      	uxtb	r3, r3
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	6879      	ldr	r1, [r7, #4]
 8009852:	fa01 f303 	lsl.w	r3, r1, r3
 8009856:	431a      	orrs	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 800985c:	bf00      	nop
 800985e:	372c      	adds	r7, #44	@ 0x2c
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009868:	b480      	push	{r7}
 800986a:	b08b      	sub	sp, #44	@ 0x2c
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	0a1b      	lsrs	r3, r3, #8
 800987c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	fa93 f3a3 	rbit	r3, r3
 8009884:	613b      	str	r3, [r7, #16]
  return result;
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d101      	bne.n	8009894 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009890:	2320      	movs	r3, #32
 8009892:	e003      	b.n	800989c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	fab3 f383 	clz	r3, r3
 800989a:	b2db      	uxtb	r3, r3
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	210f      	movs	r1, #15
 80098a0:	fa01 f303 	lsl.w	r3, r1, r3
 80098a4:	43db      	mvns	r3, r3
 80098a6:	401a      	ands	r2, r3
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	0a1b      	lsrs	r3, r3, #8
 80098ac:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	fa93 f3a3 	rbit	r3, r3
 80098b4:	61fb      	str	r3, [r7, #28]
  return result;
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80098ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d101      	bne.n	80098c4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80098c0:	2320      	movs	r3, #32
 80098c2:	e003      	b.n	80098cc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80098c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c6:	fab3 f383 	clz	r3, r3
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	fa01 f303 	lsl.w	r3, r1, r3
 80098d4:	431a      	orrs	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 80098da:	bf00      	nop
 80098dc:	372c      	adds	r7, #44	@ 0x2c
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b08a      	sub	sp, #40	@ 0x28
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	fa93 f3a3 	rbit	r3, r3
 80098fc:	617b      	str	r3, [r7, #20]
  return result;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <LL_GPIO_Init+0x26>
    return 32U;
 8009908:	2320      	movs	r3, #32
 800990a:	e003      	b.n	8009914 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	fab3 f383 	clz	r3, r3
 8009912:	b2db      	uxtb	r3, r3
 8009914:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009916:	e058      	b.n	80099ca <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	2101      	movs	r1, #1
 800991e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009920:	fa01 f303 	lsl.w	r3, r1, r3
 8009924:	4013      	ands	r3, r2
 8009926:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d04a      	beq.n	80099c4 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d003      	beq.n	800993e <LL_GPIO_Init+0x58>
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	2b02      	cmp	r3, #2
 800993c:	d10e      	bne.n	800995c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	461a      	mov	r2, r3
 8009944:	6a39      	ldr	r1, [r7, #32]
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7ff fed7 	bl	80096fa <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	6819      	ldr	r1, [r3, #0]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	461a      	mov	r2, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff feb7 	bl	80096ca <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	461a      	mov	r2, r3
 8009962:	6a39      	ldr	r1, [r7, #32]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7ff ff05 	bl	8009774 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	2b02      	cmp	r3, #2
 8009970:	d121      	bne.n	80099b6 <LL_GPIO_Init+0xd0>
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	fa93 f3a3 	rbit	r3, r3
 800997c:	60bb      	str	r3, [r7, #8]
  return result;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d101      	bne.n	800998c <LL_GPIO_Init+0xa6>
    return 32U;
 8009988:	2320      	movs	r3, #32
 800998a:	e003      	b.n	8009994 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	fab3 f383 	clz	r3, r3
 8009992:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8009994:	2b07      	cmp	r3, #7
 8009996:	d807      	bhi.n	80099a8 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	461a      	mov	r2, r3
 800999e:	6a39      	ldr	r1, [r7, #32]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff ff24 	bl	80097ee <LL_GPIO_SetAFPin_0_7>
 80099a6:	e006      	b.n	80099b6 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	461a      	mov	r2, r3
 80099ae:	6a39      	ldr	r1, [r7, #32]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7ff ff59 	bl	8009868 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	461a      	mov	r2, r3
 80099bc:	6a39      	ldr	r1, [r7, #32]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7ff fe46 	bl	8009650 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80099c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c6:	3301      	adds	r3, #1
 80099c8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d0:	fa22 f303 	lsr.w	r3, r2, r3
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d19f      	bne.n	8009918 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3728      	adds	r7, #40	@ 0x28
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099e2:	b084      	sub	sp, #16
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	f107 001c 	add.w	r0, r7, #28
 80099f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fd89 	bl	800a518 <USB_CoreReset>
 8009a06:	4603      	mov	r3, r0
 8009a08:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009a0a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d106      	bne.n	8009a20 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a16:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8009a1e:	e005      	b.n	8009a2c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a24:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a38:	b004      	add	sp, #16
 8009a3a:	4770      	bx	lr

08009a3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	4613      	mov	r3, r2
 8009a48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009a4a:	79fb      	ldrb	r3, [r7, #7]
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d165      	bne.n	8009b1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	4a41      	ldr	r2, [pc, #260]	@ (8009b58 <USB_SetTurnaroundTime+0x11c>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d906      	bls.n	8009a66 <USB_SetTurnaroundTime+0x2a>
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	4a40      	ldr	r2, [pc, #256]	@ (8009b5c <USB_SetTurnaroundTime+0x120>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d202      	bcs.n	8009a66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009a60:	230f      	movs	r3, #15
 8009a62:	617b      	str	r3, [r7, #20]
 8009a64:	e062      	b.n	8009b2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	4a3c      	ldr	r2, [pc, #240]	@ (8009b5c <USB_SetTurnaroundTime+0x120>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d306      	bcc.n	8009a7c <USB_SetTurnaroundTime+0x40>
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	4a3b      	ldr	r2, [pc, #236]	@ (8009b60 <USB_SetTurnaroundTime+0x124>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d202      	bcs.n	8009a7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009a76:	230e      	movs	r3, #14
 8009a78:	617b      	str	r3, [r7, #20]
 8009a7a:	e057      	b.n	8009b2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	4a38      	ldr	r2, [pc, #224]	@ (8009b60 <USB_SetTurnaroundTime+0x124>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d306      	bcc.n	8009a92 <USB_SetTurnaroundTime+0x56>
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	4a37      	ldr	r2, [pc, #220]	@ (8009b64 <USB_SetTurnaroundTime+0x128>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d202      	bcs.n	8009a92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009a8c:	230d      	movs	r3, #13
 8009a8e:	617b      	str	r3, [r7, #20]
 8009a90:	e04c      	b.n	8009b2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	4a33      	ldr	r2, [pc, #204]	@ (8009b64 <USB_SetTurnaroundTime+0x128>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d306      	bcc.n	8009aa8 <USB_SetTurnaroundTime+0x6c>
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	4a32      	ldr	r2, [pc, #200]	@ (8009b68 <USB_SetTurnaroundTime+0x12c>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d802      	bhi.n	8009aa8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009aa2:	230c      	movs	r3, #12
 8009aa4:	617b      	str	r3, [r7, #20]
 8009aa6:	e041      	b.n	8009b2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8009b68 <USB_SetTurnaroundTime+0x12c>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d906      	bls.n	8009abe <USB_SetTurnaroundTime+0x82>
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8009b6c <USB_SetTurnaroundTime+0x130>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d802      	bhi.n	8009abe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009ab8:	230b      	movs	r3, #11
 8009aba:	617b      	str	r3, [r7, #20]
 8009abc:	e036      	b.n	8009b2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8009b6c <USB_SetTurnaroundTime+0x130>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d906      	bls.n	8009ad4 <USB_SetTurnaroundTime+0x98>
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	4a29      	ldr	r2, [pc, #164]	@ (8009b70 <USB_SetTurnaroundTime+0x134>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d802      	bhi.n	8009ad4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009ace:	230a      	movs	r3, #10
 8009ad0:	617b      	str	r3, [r7, #20]
 8009ad2:	e02b      	b.n	8009b2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	4a26      	ldr	r2, [pc, #152]	@ (8009b70 <USB_SetTurnaroundTime+0x134>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d906      	bls.n	8009aea <USB_SetTurnaroundTime+0xae>
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	4a25      	ldr	r2, [pc, #148]	@ (8009b74 <USB_SetTurnaroundTime+0x138>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d202      	bcs.n	8009aea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ae4:	2309      	movs	r3, #9
 8009ae6:	617b      	str	r3, [r7, #20]
 8009ae8:	e020      	b.n	8009b2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	4a21      	ldr	r2, [pc, #132]	@ (8009b74 <USB_SetTurnaroundTime+0x138>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d306      	bcc.n	8009b00 <USB_SetTurnaroundTime+0xc4>
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	4a20      	ldr	r2, [pc, #128]	@ (8009b78 <USB_SetTurnaroundTime+0x13c>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d802      	bhi.n	8009b00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009afa:	2308      	movs	r3, #8
 8009afc:	617b      	str	r3, [r7, #20]
 8009afe:	e015      	b.n	8009b2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	4a1d      	ldr	r2, [pc, #116]	@ (8009b78 <USB_SetTurnaroundTime+0x13c>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d906      	bls.n	8009b16 <USB_SetTurnaroundTime+0xda>
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8009b7c <USB_SetTurnaroundTime+0x140>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d202      	bcs.n	8009b16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009b10:	2307      	movs	r3, #7
 8009b12:	617b      	str	r3, [r7, #20]
 8009b14:	e00a      	b.n	8009b2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009b16:	2306      	movs	r3, #6
 8009b18:	617b      	str	r3, [r7, #20]
 8009b1a:	e007      	b.n	8009b2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d102      	bne.n	8009b28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009b22:	2309      	movs	r3, #9
 8009b24:	617b      	str	r3, [r7, #20]
 8009b26:	e001      	b.n	8009b2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009b28:	2309      	movs	r3, #9
 8009b2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	68da      	ldr	r2, [r3, #12]
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	029b      	lsls	r3, r3, #10
 8009b40:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009b44:	431a      	orrs	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	371c      	adds	r7, #28
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr
 8009b58:	00d8acbf 	.word	0x00d8acbf
 8009b5c:	00e4e1c0 	.word	0x00e4e1c0
 8009b60:	00f42400 	.word	0x00f42400
 8009b64:	01067380 	.word	0x01067380
 8009b68:	011a499f 	.word	0x011a499f
 8009b6c:	01312cff 	.word	0x01312cff
 8009b70:	014ca43f 	.word	0x014ca43f
 8009b74:	016e3600 	.word	0x016e3600
 8009b78:	01a6ab1f 	.word	0x01a6ab1f
 8009b7c:	01e84800 	.word	0x01e84800

08009b80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f023 0201 	bic.w	r2, r3, #1
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	460b      	mov	r3, r1
 8009bac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009bbe:	78fb      	ldrb	r3, [r7, #3]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d115      	bne.n	8009bf0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009bd0:	200a      	movs	r0, #10
 8009bd2:	f7f7 fc89 	bl	80014e8 <HAL_Delay>
      ms += 10U;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	330a      	adds	r3, #10
 8009bda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fc0b 	bl	800a3f8 <USB_GetMode>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d01e      	beq.n	8009c26 <USB_SetCurrentMode+0x84>
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2bc7      	cmp	r3, #199	@ 0xc7
 8009bec:	d9f0      	bls.n	8009bd0 <USB_SetCurrentMode+0x2e>
 8009bee:	e01a      	b.n	8009c26 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d115      	bne.n	8009c22 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009c02:	200a      	movs	r0, #10
 8009c04:	f7f7 fc70 	bl	80014e8 <HAL_Delay>
      ms += 10U;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	330a      	adds	r3, #10
 8009c0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fbf2 	bl	800a3f8 <USB_GetMode>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d005      	beq.n	8009c26 <USB_SetCurrentMode+0x84>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2bc7      	cmp	r3, #199	@ 0xc7
 8009c1e:	d9f0      	bls.n	8009c02 <USB_SetCurrentMode+0x60>
 8009c20:	e001      	b.n	8009c26 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e005      	b.n	8009c32 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2bc8      	cmp	r3, #200	@ 0xc8
 8009c2a:	d101      	bne.n	8009c30 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e000      	b.n	8009c32 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b086      	sub	sp, #24
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009c56:	2300      	movs	r3, #0
 8009c58:	613b      	str	r3, [r7, #16]
 8009c5a:	e009      	b.n	8009c70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	3340      	adds	r3, #64	@ 0x40
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	2200      	movs	r2, #0
 8009c68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	613b      	str	r3, [r7, #16]
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	2b0e      	cmp	r3, #14
 8009c74:	d9f2      	bls.n	8009c5c <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009c76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d11c      	bne.n	8009cb8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c8c:	f043 0302 	orr.w	r3, r3, #2
 8009c90:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c96:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	e005      	b.n	8009cc4 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cbc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009cca:	461a      	mov	r2, r3
 8009ccc:	2300      	movs	r3, #0
 8009cce:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009cd0:	2103      	movs	r1, #3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f95e 	bl	8009f94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009cd8:	2110      	movs	r1, #16
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f8fa 	bl	8009ed4 <USB_FlushTxFifo>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f924 	bl	8009f38 <USB_FlushRxFifo>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d00:	461a      	mov	r2, r3
 8009d02:	2300      	movs	r3, #0
 8009d04:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	2300      	movs	r3, #0
 8009d10:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d18:	461a      	mov	r2, r3
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d1e:	2300      	movs	r3, #0
 8009d20:	613b      	str	r3, [r7, #16]
 8009d22:	e043      	b.n	8009dac <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	015a      	lsls	r2, r3, #5
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d3a:	d118      	bne.n	8009d6e <USB_DevInit+0x132>
    {
      if (i == 0U)
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10a      	bne.n	8009d58 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	015a      	lsls	r2, r3, #5
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	e013      	b.n	8009d80 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d64:	461a      	mov	r2, r3
 8009d66:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009d6a:	6013      	str	r3, [r2, #0]
 8009d6c:	e008      	b.n	8009d80 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	015a      	lsls	r2, r3, #5
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	4413      	add	r3, r2
 8009d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	2300      	movs	r3, #0
 8009d90:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	015a      	lsls	r2, r3, #5
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	4413      	add	r3, r2
 8009d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d9e:	461a      	mov	r2, r3
 8009da0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009da4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	3301      	adds	r3, #1
 8009daa:	613b      	str	r3, [r7, #16]
 8009dac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009db0:	461a      	mov	r2, r3
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d3b5      	bcc.n	8009d24 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009db8:	2300      	movs	r3, #0
 8009dba:	613b      	str	r3, [r7, #16]
 8009dbc:	e043      	b.n	8009e46 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009dd4:	d118      	bne.n	8009e08 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10a      	bne.n	8009df2 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de8:	461a      	mov	r2, r3
 8009dea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	e013      	b.n	8009e1a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dfe:	461a      	mov	r2, r3
 8009e00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	e008      	b.n	8009e1a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e14:	461a      	mov	r2, r3
 8009e16:	2300      	movs	r3, #0
 8009e18:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	015a      	lsls	r2, r3, #5
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	4413      	add	r3, r2
 8009e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e26:	461a      	mov	r2, r3
 8009e28:	2300      	movs	r3, #0
 8009e2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e38:	461a      	mov	r2, r3
 8009e3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009e3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	3301      	adds	r3, #1
 8009e44:	613b      	str	r3, [r7, #16]
 8009e46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d3b5      	bcc.n	8009dbe <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e64:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009e72:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009e74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d105      	bne.n	8009e88 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	f043 0210 	orr.w	r2, r3, #16
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	699a      	ldr	r2, [r3, #24]
 8009e8c:	4b10      	ldr	r3, [pc, #64]	@ (8009ed0 <USB_DevInit+0x294>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009e94:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d005      	beq.n	8009ea8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	f043 0208 	orr.w	r2, r3, #8
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009ea8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d107      	bne.n	8009ec0 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009eb8:	f043 0304 	orr.w	r3, r3, #4
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ecc:	b004      	add	sp, #16
 8009ece:	4770      	bx	lr
 8009ed0:	803c3800 	.word	0x803c3800

08009ed4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009eee:	d901      	bls.n	8009ef4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e01b      	b.n	8009f2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	daf2      	bge.n	8009ee2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009efc:	2300      	movs	r3, #0
 8009efe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	019b      	lsls	r3, r3, #6
 8009f04:	f043 0220 	orr.w	r2, r3, #32
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f18:	d901      	bls.n	8009f1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e006      	b.n	8009f2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	f003 0320 	and.w	r3, r3, #32
 8009f26:	2b20      	cmp	r3, #32
 8009f28:	d0f0      	beq.n	8009f0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3714      	adds	r7, #20
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	3301      	adds	r3, #1
 8009f48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f50:	d901      	bls.n	8009f56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009f52:	2303      	movs	r3, #3
 8009f54:	e018      	b.n	8009f88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	daf2      	bge.n	8009f44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2210      	movs	r2, #16
 8009f66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f74:	d901      	bls.n	8009f7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009f76:	2303      	movs	r3, #3
 8009f78:	e006      	b.n	8009f88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	f003 0310 	and.w	r3, r3, #16
 8009f82:	2b10      	cmp	r3, #16
 8009f84:	d0f0      	beq.n	8009f68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3714      	adds	r7, #20
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	78fb      	ldrb	r3, [r7, #3]
 8009fae:	68f9      	ldr	r1, [r7, #12]
 8009fb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fc6:	b480      	push	{r7}
 8009fc8:	b087      	sub	sp, #28
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f003 0306 	and.w	r3, r3, #6
 8009fde:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d102      	bne.n	8009fec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	75fb      	strb	r3, [r7, #23]
 8009fea:	e00a      	b.n	800a002 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d002      	beq.n	8009ff8 <USB_GetDevSpeed+0x32>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2b06      	cmp	r3, #6
 8009ff6:	d102      	bne.n	8009ffe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	75fb      	strb	r3, [r7, #23]
 8009ffc:	e001      	b.n	800a002 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009ffe:	230f      	movs	r3, #15
 800a000:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a002:	7dfb      	ldrb	r3, [r7, #23]
}
 800a004:	4618      	mov	r0, r3
 800a006:	371c      	adds	r7, #28
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a010:	b480      	push	{r7}
 800a012:	b087      	sub	sp, #28
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a01a:	2300      	movs	r3, #0
 800a01c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	785b      	ldrb	r3, [r3, #1]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d14a      	bne.n	800a0c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a042:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a046:	f040 8086 	bne.w	800a156 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	015a      	lsls	r2, r3, #5
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	4413      	add	r3, r2
 800a054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	683a      	ldr	r2, [r7, #0]
 800a05c:	7812      	ldrb	r2, [r2, #0]
 800a05e:	0151      	lsls	r1, r2, #5
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	440a      	add	r2, r1
 800a064:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a068:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a06c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	015a      	lsls	r2, r3, #5
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	4413      	add	r3, r2
 800a078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	7812      	ldrb	r2, [r2, #0]
 800a082:	0151      	lsls	r1, r2, #5
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	440a      	add	r2, r1
 800a088:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a08c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a090:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	3301      	adds	r3, #1
 800a096:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d902      	bls.n	800a0a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a0a6:	e056      	b.n	800a156 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	015a      	lsls	r2, r3, #5
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0c0:	d0e7      	beq.n	800a092 <USB_EPStopXfer+0x82>
 800a0c2:	e048      	b.n	800a156 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	015a      	lsls	r2, r3, #5
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0dc:	d13b      	bne.n	800a156 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	015a      	lsls	r2, r3, #5
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	683a      	ldr	r2, [r7, #0]
 800a0f0:	7812      	ldrb	r2, [r2, #0]
 800a0f2:	0151      	lsls	r1, r2, #5
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	440a      	add	r2, r1
 800a0f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a100:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	015a      	lsls	r2, r3, #5
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	4413      	add	r3, r2
 800a10c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	7812      	ldrb	r2, [r2, #0]
 800a116:	0151      	lsls	r1, r2, #5
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	440a      	add	r2, r1
 800a11c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a120:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a124:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3301      	adds	r3, #1
 800a12a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a132:	4293      	cmp	r3, r2
 800a134:	d902      	bls.n	800a13c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	75fb      	strb	r3, [r7, #23]
          break;
 800a13a:	e00c      	b.n	800a156 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	4413      	add	r3, r2
 800a146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a150:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a154:	d0e7      	beq.n	800a126 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a156:	7dfb      	ldrb	r3, [r7, #23]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	371c      	adds	r7, #28
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a164:	b480      	push	{r7}
 800a166:	b089      	sub	sp, #36	@ 0x24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	4611      	mov	r1, r2
 800a170:	461a      	mov	r2, r3
 800a172:	460b      	mov	r3, r1
 800a174:	71fb      	strb	r3, [r7, #7]
 800a176:	4613      	mov	r3, r2
 800a178:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a182:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a186:	2b00      	cmp	r3, #0
 800a188:	d123      	bne.n	800a1d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a18a:	88bb      	ldrh	r3, [r7, #4]
 800a18c:	3303      	adds	r3, #3
 800a18e:	089b      	lsrs	r3, r3, #2
 800a190:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a192:	2300      	movs	r3, #0
 800a194:	61bb      	str	r3, [r7, #24]
 800a196:	e018      	b.n	800a1ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a198:	79fb      	ldrb	r3, [r7, #7]
 800a19a:	031a      	lsls	r2, r3, #12
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	61bb      	str	r3, [r7, #24]
 800a1ca:	69ba      	ldr	r2, [r7, #24]
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d3e2      	bcc.n	800a198 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3724      	adds	r7, #36	@ 0x24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b08b      	sub	sp, #44	@ 0x2c
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a1f6:	88fb      	ldrh	r3, [r7, #6]
 800a1f8:	089b      	lsrs	r3, r3, #2
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a1fe:	88fb      	ldrh	r3, [r7, #6]
 800a200:	f003 0303 	and.w	r3, r3, #3
 800a204:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a206:	2300      	movs	r3, #0
 800a208:	623b      	str	r3, [r7, #32]
 800a20a:	e014      	b.n	800a236 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a216:	601a      	str	r2, [r3, #0]
    pDest++;
 800a218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21a:	3301      	adds	r3, #1
 800a21c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a220:	3301      	adds	r3, #1
 800a222:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a226:	3301      	adds	r3, #1
 800a228:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22c:	3301      	adds	r3, #1
 800a22e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a230:	6a3b      	ldr	r3, [r7, #32]
 800a232:	3301      	adds	r3, #1
 800a234:	623b      	str	r3, [r7, #32]
 800a236:	6a3a      	ldr	r2, [r7, #32]
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d3e6      	bcc.n	800a20c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a23e:	8bfb      	ldrh	r3, [r7, #30]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d01e      	beq.n	800a282 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a244:	2300      	movs	r3, #0
 800a246:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a24e:	461a      	mov	r2, r3
 800a250:	f107 0310 	add.w	r3, r7, #16
 800a254:	6812      	ldr	r2, [r2, #0]
 800a256:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	00db      	lsls	r3, r3, #3
 800a260:	fa22 f303 	lsr.w	r3, r2, r3
 800a264:	b2da      	uxtb	r2, r3
 800a266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a268:	701a      	strb	r2, [r3, #0]
      i++;
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	3301      	adds	r3, #1
 800a26e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a272:	3301      	adds	r3, #1
 800a274:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a276:	8bfb      	ldrh	r3, [r7, #30]
 800a278:	3b01      	subs	r3, #1
 800a27a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a27c:	8bfb      	ldrh	r3, [r7, #30]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1ea      	bne.n	800a258 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a284:	4618      	mov	r0, r3
 800a286:	372c      	adds	r7, #44	@ 0x2c
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a2aa:	f023 0303 	bic.w	r3, r3, #3
 800a2ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2be:	f043 0302 	orr.w	r3, r3, #2
 800a2c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b085      	sub	sp, #20
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	695b      	ldr	r3, [r3, #20]
 800a2de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	4013      	ands	r3, r2
 800a31a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	0c1b      	lsrs	r3, r3, #16
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a348:	69db      	ldr	r3, [r3, #28]
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	4013      	ands	r3, r2
 800a34e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	b29b      	uxth	r3, r3
}
 800a354:	4618      	mov	r0, r3
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a370:	78fb      	ldrb	r3, [r7, #3]
 800a372:	015a      	lsls	r2, r3, #5
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	4413      	add	r3, r2
 800a378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	4013      	ands	r3, r2
 800a38c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a38e:	68bb      	ldr	r3, [r7, #8]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3be:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a3c0:	78fb      	ldrb	r3, [r7, #3]
 800a3c2:	f003 030f 	and.w	r3, r3, #15
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3cc:	01db      	lsls	r3, r3, #7
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a3d6:	78fb      	ldrb	r3, [r7, #3]
 800a3d8:	015a      	lsls	r2, r3, #5
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	4413      	add	r3, r2
 800a3de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a3ea:	68bb      	ldr	r3, [r7, #8]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	371c      	adds	r7, #28
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	695b      	ldr	r3, [r3, #20]
 800a404:	f003 0301 	and.w	r3, r3, #1
}
 800a408:	4618      	mov	r0, r3
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a42e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a432:	f023 0307 	bic.w	r3, r3, #7
 800a436:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a44a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3714      	adds	r7, #20
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
	...

0800a45c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b087      	sub	sp, #28
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	460b      	mov	r3, r1
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	333c      	adds	r3, #60	@ 0x3c
 800a472:	3304      	adds	r3, #4
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	4a26      	ldr	r2, [pc, #152]	@ (800a514 <USB_EP0_OutStart+0xb8>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d90a      	bls.n	800a496 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a48c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a490:	d101      	bne.n	800a496 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	e037      	b.n	800a506 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a49c:	461a      	mov	r2, r3
 800a49e:	2300      	movs	r3, #0
 800a4a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4c4:	f043 0318 	orr.w	r3, r3, #24
 800a4c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4d8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a4dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a4de:	7afb      	ldrb	r3, [r7, #11]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d10f      	bne.n	800a504 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	697a      	ldr	r2, [r7, #20]
 800a4fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4fe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a502:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	371c      	adds	r7, #28
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	4f54300a 	.word	0x4f54300a

0800a518 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a520:	2300      	movs	r3, #0
 800a522:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	3301      	adds	r3, #1
 800a528:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a530:	d901      	bls.n	800a536 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a532:	2303      	movs	r3, #3
 800a534:	e01b      	b.n	800a56e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	daf2      	bge.n	800a524 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a53e:	2300      	movs	r3, #0
 800a540:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	f043 0201 	orr.w	r2, r3, #1
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	3301      	adds	r3, #1
 800a552:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a55a:	d901      	bls.n	800a560 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a55c:	2303      	movs	r3, #3
 800a55e:	e006      	b.n	800a56e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	f003 0301 	and.w	r3, r3, #1
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d0f0      	beq.n	800a54e <USB_CoreReset+0x36>

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3714      	adds	r7, #20
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
	...

0800a57c <std>:
 800a57c:	2300      	movs	r3, #0
 800a57e:	b510      	push	{r4, lr}
 800a580:	4604      	mov	r4, r0
 800a582:	6083      	str	r3, [r0, #8]
 800a584:	8181      	strh	r1, [r0, #12]
 800a586:	4619      	mov	r1, r3
 800a588:	6643      	str	r3, [r0, #100]	@ 0x64
 800a58a:	81c2      	strh	r2, [r0, #14]
 800a58c:	2208      	movs	r2, #8
 800a58e:	6183      	str	r3, [r0, #24]
 800a590:	e9c0 3300 	strd	r3, r3, [r0]
 800a594:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a598:	305c      	adds	r0, #92	@ 0x5c
 800a59a:	f000 f926 	bl	800a7ea <memset>
 800a59e:	4b0d      	ldr	r3, [pc, #52]	@ (800a5d4 <std+0x58>)
 800a5a0:	6224      	str	r4, [r4, #32]
 800a5a2:	6263      	str	r3, [r4, #36]	@ 0x24
 800a5a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d8 <std+0x5c>)
 800a5a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a5dc <std+0x60>)
 800a5aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a5ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a5e0 <std+0x64>)
 800a5ae:	6323      	str	r3, [r4, #48]	@ 0x30
 800a5b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a5e4 <std+0x68>)
 800a5b2:	429c      	cmp	r4, r3
 800a5b4:	d006      	beq.n	800a5c4 <std+0x48>
 800a5b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a5ba:	4294      	cmp	r4, r2
 800a5bc:	d002      	beq.n	800a5c4 <std+0x48>
 800a5be:	33d0      	adds	r3, #208	@ 0xd0
 800a5c0:	429c      	cmp	r4, r3
 800a5c2:	d105      	bne.n	800a5d0 <std+0x54>
 800a5c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5cc:	f000 b986 	b.w	800a8dc <__retarget_lock_init_recursive>
 800a5d0:	bd10      	pop	{r4, pc}
 800a5d2:	bf00      	nop
 800a5d4:	0800a765 	.word	0x0800a765
 800a5d8:	0800a787 	.word	0x0800a787
 800a5dc:	0800a7bf 	.word	0x0800a7bf
 800a5e0:	0800a7e3 	.word	0x0800a7e3
 800a5e4:	2000074c 	.word	0x2000074c

0800a5e8 <stdio_exit_handler>:
 800a5e8:	4a02      	ldr	r2, [pc, #8]	@ (800a5f4 <stdio_exit_handler+0xc>)
 800a5ea:	4903      	ldr	r1, [pc, #12]	@ (800a5f8 <stdio_exit_handler+0x10>)
 800a5ec:	4803      	ldr	r0, [pc, #12]	@ (800a5fc <stdio_exit_handler+0x14>)
 800a5ee:	f000 b869 	b.w	800a6c4 <_fwalk_sglue>
 800a5f2:	bf00      	nop
 800a5f4:	2000000c 	.word	0x2000000c
 800a5f8:	0800b435 	.word	0x0800b435
 800a5fc:	2000001c 	.word	0x2000001c

0800a600 <cleanup_stdio>:
 800a600:	6841      	ldr	r1, [r0, #4]
 800a602:	4b0c      	ldr	r3, [pc, #48]	@ (800a634 <cleanup_stdio+0x34>)
 800a604:	4299      	cmp	r1, r3
 800a606:	b510      	push	{r4, lr}
 800a608:	4604      	mov	r4, r0
 800a60a:	d001      	beq.n	800a610 <cleanup_stdio+0x10>
 800a60c:	f000 ff12 	bl	800b434 <_fflush_r>
 800a610:	68a1      	ldr	r1, [r4, #8]
 800a612:	4b09      	ldr	r3, [pc, #36]	@ (800a638 <cleanup_stdio+0x38>)
 800a614:	4299      	cmp	r1, r3
 800a616:	d002      	beq.n	800a61e <cleanup_stdio+0x1e>
 800a618:	4620      	mov	r0, r4
 800a61a:	f000 ff0b 	bl	800b434 <_fflush_r>
 800a61e:	68e1      	ldr	r1, [r4, #12]
 800a620:	4b06      	ldr	r3, [pc, #24]	@ (800a63c <cleanup_stdio+0x3c>)
 800a622:	4299      	cmp	r1, r3
 800a624:	d004      	beq.n	800a630 <cleanup_stdio+0x30>
 800a626:	4620      	mov	r0, r4
 800a628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a62c:	f000 bf02 	b.w	800b434 <_fflush_r>
 800a630:	bd10      	pop	{r4, pc}
 800a632:	bf00      	nop
 800a634:	2000074c 	.word	0x2000074c
 800a638:	200007b4 	.word	0x200007b4
 800a63c:	2000081c 	.word	0x2000081c

0800a640 <global_stdio_init.part.0>:
 800a640:	b510      	push	{r4, lr}
 800a642:	4b0b      	ldr	r3, [pc, #44]	@ (800a670 <global_stdio_init.part.0+0x30>)
 800a644:	2104      	movs	r1, #4
 800a646:	4c0b      	ldr	r4, [pc, #44]	@ (800a674 <global_stdio_init.part.0+0x34>)
 800a648:	4a0b      	ldr	r2, [pc, #44]	@ (800a678 <global_stdio_init.part.0+0x38>)
 800a64a:	4620      	mov	r0, r4
 800a64c:	601a      	str	r2, [r3, #0]
 800a64e:	2200      	movs	r2, #0
 800a650:	f7ff ff94 	bl	800a57c <std>
 800a654:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a658:	2201      	movs	r2, #1
 800a65a:	2109      	movs	r1, #9
 800a65c:	f7ff ff8e 	bl	800a57c <std>
 800a660:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a664:	2202      	movs	r2, #2
 800a666:	2112      	movs	r1, #18
 800a668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a66c:	f7ff bf86 	b.w	800a57c <std>
 800a670:	20000884 	.word	0x20000884
 800a674:	2000074c 	.word	0x2000074c
 800a678:	0800a5e9 	.word	0x0800a5e9

0800a67c <__sfp_lock_acquire>:
 800a67c:	4801      	ldr	r0, [pc, #4]	@ (800a684 <__sfp_lock_acquire+0x8>)
 800a67e:	f000 b92e 	b.w	800a8de <__retarget_lock_acquire_recursive>
 800a682:	bf00      	nop
 800a684:	2000088d 	.word	0x2000088d

0800a688 <__sfp_lock_release>:
 800a688:	4801      	ldr	r0, [pc, #4]	@ (800a690 <__sfp_lock_release+0x8>)
 800a68a:	f000 b929 	b.w	800a8e0 <__retarget_lock_release_recursive>
 800a68e:	bf00      	nop
 800a690:	2000088d 	.word	0x2000088d

0800a694 <__sinit>:
 800a694:	b510      	push	{r4, lr}
 800a696:	4604      	mov	r4, r0
 800a698:	f7ff fff0 	bl	800a67c <__sfp_lock_acquire>
 800a69c:	6a23      	ldr	r3, [r4, #32]
 800a69e:	b11b      	cbz	r3, 800a6a8 <__sinit+0x14>
 800a6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6a4:	f7ff bff0 	b.w	800a688 <__sfp_lock_release>
 800a6a8:	4b04      	ldr	r3, [pc, #16]	@ (800a6bc <__sinit+0x28>)
 800a6aa:	6223      	str	r3, [r4, #32]
 800a6ac:	4b04      	ldr	r3, [pc, #16]	@ (800a6c0 <__sinit+0x2c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1f5      	bne.n	800a6a0 <__sinit+0xc>
 800a6b4:	f7ff ffc4 	bl	800a640 <global_stdio_init.part.0>
 800a6b8:	e7f2      	b.n	800a6a0 <__sinit+0xc>
 800a6ba:	bf00      	nop
 800a6bc:	0800a601 	.word	0x0800a601
 800a6c0:	20000884 	.word	0x20000884

0800a6c4 <_fwalk_sglue>:
 800a6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6c8:	4607      	mov	r7, r0
 800a6ca:	4688      	mov	r8, r1
 800a6cc:	4614      	mov	r4, r2
 800a6ce:	2600      	movs	r6, #0
 800a6d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6d4:	f1b9 0901 	subs.w	r9, r9, #1
 800a6d8:	d505      	bpl.n	800a6e6 <_fwalk_sglue+0x22>
 800a6da:	6824      	ldr	r4, [r4, #0]
 800a6dc:	2c00      	cmp	r4, #0
 800a6de:	d1f7      	bne.n	800a6d0 <_fwalk_sglue+0xc>
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6e6:	89ab      	ldrh	r3, [r5, #12]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d907      	bls.n	800a6fc <_fwalk_sglue+0x38>
 800a6ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	d003      	beq.n	800a6fc <_fwalk_sglue+0x38>
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	47c0      	blx	r8
 800a6fa:	4306      	orrs	r6, r0
 800a6fc:	3568      	adds	r5, #104	@ 0x68
 800a6fe:	e7e9      	b.n	800a6d4 <_fwalk_sglue+0x10>

0800a700 <iprintf>:
 800a700:	b40f      	push	{r0, r1, r2, r3}
 800a702:	b507      	push	{r0, r1, r2, lr}
 800a704:	4906      	ldr	r1, [pc, #24]	@ (800a720 <iprintf+0x20>)
 800a706:	ab04      	add	r3, sp, #16
 800a708:	6808      	ldr	r0, [r1, #0]
 800a70a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a70e:	6881      	ldr	r1, [r0, #8]
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	f000 fb61 	bl	800add8 <_vfiprintf_r>
 800a716:	b003      	add	sp, #12
 800a718:	f85d eb04 	ldr.w	lr, [sp], #4
 800a71c:	b004      	add	sp, #16
 800a71e:	4770      	bx	lr
 800a720:	20000018 	.word	0x20000018

0800a724 <siprintf>:
 800a724:	b40e      	push	{r1, r2, r3}
 800a726:	b500      	push	{lr}
 800a728:	b09c      	sub	sp, #112	@ 0x70
 800a72a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a72e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a730:	9002      	str	r0, [sp, #8]
 800a732:	9006      	str	r0, [sp, #24]
 800a734:	9107      	str	r1, [sp, #28]
 800a736:	9104      	str	r1, [sp, #16]
 800a738:	4808      	ldr	r0, [pc, #32]	@ (800a75c <siprintf+0x38>)
 800a73a:	4909      	ldr	r1, [pc, #36]	@ (800a760 <siprintf+0x3c>)
 800a73c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a740:	9105      	str	r1, [sp, #20]
 800a742:	a902      	add	r1, sp, #8
 800a744:	6800      	ldr	r0, [r0, #0]
 800a746:	9301      	str	r3, [sp, #4]
 800a748:	f000 fa20 	bl	800ab8c <_svfiprintf_r>
 800a74c:	9b02      	ldr	r3, [sp, #8]
 800a74e:	2200      	movs	r2, #0
 800a750:	701a      	strb	r2, [r3, #0]
 800a752:	b01c      	add	sp, #112	@ 0x70
 800a754:	f85d eb04 	ldr.w	lr, [sp], #4
 800a758:	b003      	add	sp, #12
 800a75a:	4770      	bx	lr
 800a75c:	20000018 	.word	0x20000018
 800a760:	ffff0208 	.word	0xffff0208

0800a764 <__sread>:
 800a764:	b510      	push	{r4, lr}
 800a766:	460c      	mov	r4, r1
 800a768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a76c:	f000 f868 	bl	800a840 <_read_r>
 800a770:	2800      	cmp	r0, #0
 800a772:	bfab      	itete	ge
 800a774:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a776:	89a3      	ldrhlt	r3, [r4, #12]
 800a778:	181b      	addge	r3, r3, r0
 800a77a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a77e:	bfac      	ite	ge
 800a780:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a782:	81a3      	strhlt	r3, [r4, #12]
 800a784:	bd10      	pop	{r4, pc}

0800a786 <__swrite>:
 800a786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a78a:	461f      	mov	r7, r3
 800a78c:	898b      	ldrh	r3, [r1, #12]
 800a78e:	4605      	mov	r5, r0
 800a790:	460c      	mov	r4, r1
 800a792:	05db      	lsls	r3, r3, #23
 800a794:	4616      	mov	r6, r2
 800a796:	d505      	bpl.n	800a7a4 <__swrite+0x1e>
 800a798:	2302      	movs	r3, #2
 800a79a:	2200      	movs	r2, #0
 800a79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a0:	f000 f83c 	bl	800a81c <_lseek_r>
 800a7a4:	89a3      	ldrh	r3, [r4, #12]
 800a7a6:	4632      	mov	r2, r6
 800a7a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a7b2:	81a3      	strh	r3, [r4, #12]
 800a7b4:	463b      	mov	r3, r7
 800a7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ba:	f000 b853 	b.w	800a864 <_write_r>

0800a7be <__sseek>:
 800a7be:	b510      	push	{r4, lr}
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c6:	f000 f829 	bl	800a81c <_lseek_r>
 800a7ca:	1c43      	adds	r3, r0, #1
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	bf15      	itete	ne
 800a7d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a7d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a7d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a7da:	81a3      	strheq	r3, [r4, #12]
 800a7dc:	bf18      	it	ne
 800a7de:	81a3      	strhne	r3, [r4, #12]
 800a7e0:	bd10      	pop	{r4, pc}

0800a7e2 <__sclose>:
 800a7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e6:	f000 b809 	b.w	800a7fc <_close_r>

0800a7ea <memset>:
 800a7ea:	4402      	add	r2, r0
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d100      	bne.n	800a7f4 <memset+0xa>
 800a7f2:	4770      	bx	lr
 800a7f4:	f803 1b01 	strb.w	r1, [r3], #1
 800a7f8:	e7f9      	b.n	800a7ee <memset+0x4>
	...

0800a7fc <_close_r>:
 800a7fc:	b538      	push	{r3, r4, r5, lr}
 800a7fe:	2300      	movs	r3, #0
 800a800:	4d05      	ldr	r5, [pc, #20]	@ (800a818 <_close_r+0x1c>)
 800a802:	4604      	mov	r4, r0
 800a804:	4608      	mov	r0, r1
 800a806:	602b      	str	r3, [r5, #0]
 800a808:	f7f6 fcdb 	bl	80011c2 <_close>
 800a80c:	1c43      	adds	r3, r0, #1
 800a80e:	d102      	bne.n	800a816 <_close_r+0x1a>
 800a810:	682b      	ldr	r3, [r5, #0]
 800a812:	b103      	cbz	r3, 800a816 <_close_r+0x1a>
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	bd38      	pop	{r3, r4, r5, pc}
 800a818:	20000888 	.word	0x20000888

0800a81c <_lseek_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4604      	mov	r4, r0
 800a820:	4d06      	ldr	r5, [pc, #24]	@ (800a83c <_lseek_r+0x20>)
 800a822:	4608      	mov	r0, r1
 800a824:	4611      	mov	r1, r2
 800a826:	2200      	movs	r2, #0
 800a828:	602a      	str	r2, [r5, #0]
 800a82a:	461a      	mov	r2, r3
 800a82c:	f7f6 fcf0 	bl	8001210 <_lseek>
 800a830:	1c43      	adds	r3, r0, #1
 800a832:	d102      	bne.n	800a83a <_lseek_r+0x1e>
 800a834:	682b      	ldr	r3, [r5, #0]
 800a836:	b103      	cbz	r3, 800a83a <_lseek_r+0x1e>
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	bd38      	pop	{r3, r4, r5, pc}
 800a83c:	20000888 	.word	0x20000888

0800a840 <_read_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	4604      	mov	r4, r0
 800a844:	4d06      	ldr	r5, [pc, #24]	@ (800a860 <_read_r+0x20>)
 800a846:	4608      	mov	r0, r1
 800a848:	4611      	mov	r1, r2
 800a84a:	2200      	movs	r2, #0
 800a84c:	602a      	str	r2, [r5, #0]
 800a84e:	461a      	mov	r2, r3
 800a850:	f7f6 fc7e 	bl	8001150 <_read>
 800a854:	1c43      	adds	r3, r0, #1
 800a856:	d102      	bne.n	800a85e <_read_r+0x1e>
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	b103      	cbz	r3, 800a85e <_read_r+0x1e>
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	bd38      	pop	{r3, r4, r5, pc}
 800a860:	20000888 	.word	0x20000888

0800a864 <_write_r>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	4604      	mov	r4, r0
 800a868:	4d06      	ldr	r5, [pc, #24]	@ (800a884 <_write_r+0x20>)
 800a86a:	4608      	mov	r0, r1
 800a86c:	4611      	mov	r1, r2
 800a86e:	2200      	movs	r2, #0
 800a870:	602a      	str	r2, [r5, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	f7f6 fc89 	bl	800118a <_write>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_write_r+0x1e>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_write_r+0x1e>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	20000888 	.word	0x20000888

0800a888 <__errno>:
 800a888:	4b01      	ldr	r3, [pc, #4]	@ (800a890 <__errno+0x8>)
 800a88a:	6818      	ldr	r0, [r3, #0]
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	20000018 	.word	0x20000018

0800a894 <__libc_init_array>:
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	4d0d      	ldr	r5, [pc, #52]	@ (800a8cc <__libc_init_array+0x38>)
 800a898:	2600      	movs	r6, #0
 800a89a:	4c0d      	ldr	r4, [pc, #52]	@ (800a8d0 <__libc_init_array+0x3c>)
 800a89c:	1b64      	subs	r4, r4, r5
 800a89e:	10a4      	asrs	r4, r4, #2
 800a8a0:	42a6      	cmp	r6, r4
 800a8a2:	d109      	bne.n	800a8b8 <__libc_init_array+0x24>
 800a8a4:	4d0b      	ldr	r5, [pc, #44]	@ (800a8d4 <__libc_init_array+0x40>)
 800a8a6:	2600      	movs	r6, #0
 800a8a8:	4c0b      	ldr	r4, [pc, #44]	@ (800a8d8 <__libc_init_array+0x44>)
 800a8aa:	f000 ff7d 	bl	800b7a8 <_init>
 800a8ae:	1b64      	subs	r4, r4, r5
 800a8b0:	10a4      	asrs	r4, r4, #2
 800a8b2:	42a6      	cmp	r6, r4
 800a8b4:	d105      	bne.n	800a8c2 <__libc_init_array+0x2e>
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}
 800a8b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8bc:	3601      	adds	r6, #1
 800a8be:	4798      	blx	r3
 800a8c0:	e7ee      	b.n	800a8a0 <__libc_init_array+0xc>
 800a8c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c6:	3601      	adds	r6, #1
 800a8c8:	4798      	blx	r3
 800a8ca:	e7f2      	b.n	800a8b2 <__libc_init_array+0x1e>
 800a8cc:	0800b93c 	.word	0x0800b93c
 800a8d0:	0800b93c 	.word	0x0800b93c
 800a8d4:	0800b93c 	.word	0x0800b93c
 800a8d8:	0800b940 	.word	0x0800b940

0800a8dc <__retarget_lock_init_recursive>:
 800a8dc:	4770      	bx	lr

0800a8de <__retarget_lock_acquire_recursive>:
 800a8de:	4770      	bx	lr

0800a8e0 <__retarget_lock_release_recursive>:
 800a8e0:	4770      	bx	lr
	...

0800a8e4 <_free_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	2900      	cmp	r1, #0
 800a8ea:	d041      	beq.n	800a970 <_free_r+0x8c>
 800a8ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8f0:	1f0c      	subs	r4, r1, #4
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	bfb8      	it	lt
 800a8f6:	18e4      	addlt	r4, r4, r3
 800a8f8:	f000 f8e0 	bl	800aabc <__malloc_lock>
 800a8fc:	4a1d      	ldr	r2, [pc, #116]	@ (800a974 <_free_r+0x90>)
 800a8fe:	6813      	ldr	r3, [r2, #0]
 800a900:	b933      	cbnz	r3, 800a910 <_free_r+0x2c>
 800a902:	6063      	str	r3, [r4, #4]
 800a904:	6014      	str	r4, [r2, #0]
 800a906:	4628      	mov	r0, r5
 800a908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a90c:	f000 b8dc 	b.w	800aac8 <__malloc_unlock>
 800a910:	42a3      	cmp	r3, r4
 800a912:	d908      	bls.n	800a926 <_free_r+0x42>
 800a914:	6820      	ldr	r0, [r4, #0]
 800a916:	1821      	adds	r1, r4, r0
 800a918:	428b      	cmp	r3, r1
 800a91a:	bf01      	itttt	eq
 800a91c:	6819      	ldreq	r1, [r3, #0]
 800a91e:	685b      	ldreq	r3, [r3, #4]
 800a920:	1809      	addeq	r1, r1, r0
 800a922:	6021      	streq	r1, [r4, #0]
 800a924:	e7ed      	b.n	800a902 <_free_r+0x1e>
 800a926:	461a      	mov	r2, r3
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	b10b      	cbz	r3, 800a930 <_free_r+0x4c>
 800a92c:	42a3      	cmp	r3, r4
 800a92e:	d9fa      	bls.n	800a926 <_free_r+0x42>
 800a930:	6811      	ldr	r1, [r2, #0]
 800a932:	1850      	adds	r0, r2, r1
 800a934:	42a0      	cmp	r0, r4
 800a936:	d10b      	bne.n	800a950 <_free_r+0x6c>
 800a938:	6820      	ldr	r0, [r4, #0]
 800a93a:	4401      	add	r1, r0
 800a93c:	1850      	adds	r0, r2, r1
 800a93e:	6011      	str	r1, [r2, #0]
 800a940:	4283      	cmp	r3, r0
 800a942:	d1e0      	bne.n	800a906 <_free_r+0x22>
 800a944:	6818      	ldr	r0, [r3, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	4408      	add	r0, r1
 800a94a:	6053      	str	r3, [r2, #4]
 800a94c:	6010      	str	r0, [r2, #0]
 800a94e:	e7da      	b.n	800a906 <_free_r+0x22>
 800a950:	d902      	bls.n	800a958 <_free_r+0x74>
 800a952:	230c      	movs	r3, #12
 800a954:	602b      	str	r3, [r5, #0]
 800a956:	e7d6      	b.n	800a906 <_free_r+0x22>
 800a958:	6820      	ldr	r0, [r4, #0]
 800a95a:	1821      	adds	r1, r4, r0
 800a95c:	428b      	cmp	r3, r1
 800a95e:	bf02      	ittt	eq
 800a960:	6819      	ldreq	r1, [r3, #0]
 800a962:	685b      	ldreq	r3, [r3, #4]
 800a964:	1809      	addeq	r1, r1, r0
 800a966:	6063      	str	r3, [r4, #4]
 800a968:	bf08      	it	eq
 800a96a:	6021      	streq	r1, [r4, #0]
 800a96c:	6054      	str	r4, [r2, #4]
 800a96e:	e7ca      	b.n	800a906 <_free_r+0x22>
 800a970:	bd38      	pop	{r3, r4, r5, pc}
 800a972:	bf00      	nop
 800a974:	20000894 	.word	0x20000894

0800a978 <sbrk_aligned>:
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	4e0f      	ldr	r6, [pc, #60]	@ (800a9b8 <sbrk_aligned+0x40>)
 800a97c:	460c      	mov	r4, r1
 800a97e:	4605      	mov	r5, r0
 800a980:	6831      	ldr	r1, [r6, #0]
 800a982:	b911      	cbnz	r1, 800a98a <sbrk_aligned+0x12>
 800a984:	f000 fe2c 	bl	800b5e0 <_sbrk_r>
 800a988:	6030      	str	r0, [r6, #0]
 800a98a:	4621      	mov	r1, r4
 800a98c:	4628      	mov	r0, r5
 800a98e:	f000 fe27 	bl	800b5e0 <_sbrk_r>
 800a992:	1c43      	adds	r3, r0, #1
 800a994:	d103      	bne.n	800a99e <sbrk_aligned+0x26>
 800a996:	f04f 34ff 	mov.w	r4, #4294967295
 800a99a:	4620      	mov	r0, r4
 800a99c:	bd70      	pop	{r4, r5, r6, pc}
 800a99e:	1cc4      	adds	r4, r0, #3
 800a9a0:	f024 0403 	bic.w	r4, r4, #3
 800a9a4:	42a0      	cmp	r0, r4
 800a9a6:	d0f8      	beq.n	800a99a <sbrk_aligned+0x22>
 800a9a8:	1a21      	subs	r1, r4, r0
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	f000 fe18 	bl	800b5e0 <_sbrk_r>
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	d1f2      	bne.n	800a99a <sbrk_aligned+0x22>
 800a9b4:	e7ef      	b.n	800a996 <sbrk_aligned+0x1e>
 800a9b6:	bf00      	nop
 800a9b8:	20000890 	.word	0x20000890

0800a9bc <_malloc_r>:
 800a9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9c0:	1ccd      	adds	r5, r1, #3
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	f025 0503 	bic.w	r5, r5, #3
 800a9c8:	3508      	adds	r5, #8
 800a9ca:	2d0c      	cmp	r5, #12
 800a9cc:	bf38      	it	cc
 800a9ce:	250c      	movcc	r5, #12
 800a9d0:	2d00      	cmp	r5, #0
 800a9d2:	db01      	blt.n	800a9d8 <_malloc_r+0x1c>
 800a9d4:	42a9      	cmp	r1, r5
 800a9d6:	d904      	bls.n	800a9e2 <_malloc_r+0x26>
 800a9d8:	230c      	movs	r3, #12
 800a9da:	6033      	str	r3, [r6, #0]
 800a9dc:	2000      	movs	r0, #0
 800a9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aab8 <_malloc_r+0xfc>
 800a9e6:	f000 f869 	bl	800aabc <__malloc_lock>
 800a9ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ee:	461c      	mov	r4, r3
 800a9f0:	bb44      	cbnz	r4, 800aa44 <_malloc_r+0x88>
 800a9f2:	4629      	mov	r1, r5
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f7ff ffbf 	bl	800a978 <sbrk_aligned>
 800a9fa:	1c43      	adds	r3, r0, #1
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	d158      	bne.n	800aab2 <_malloc_r+0xf6>
 800aa00:	f8d8 4000 	ldr.w	r4, [r8]
 800aa04:	4627      	mov	r7, r4
 800aa06:	2f00      	cmp	r7, #0
 800aa08:	d143      	bne.n	800aa92 <_malloc_r+0xd6>
 800aa0a:	2c00      	cmp	r4, #0
 800aa0c:	d04b      	beq.n	800aaa6 <_malloc_r+0xea>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	4639      	mov	r1, r7
 800aa12:	4630      	mov	r0, r6
 800aa14:	eb04 0903 	add.w	r9, r4, r3
 800aa18:	f000 fde2 	bl	800b5e0 <_sbrk_r>
 800aa1c:	4581      	cmp	r9, r0
 800aa1e:	d142      	bne.n	800aaa6 <_malloc_r+0xea>
 800aa20:	6821      	ldr	r1, [r4, #0]
 800aa22:	4630      	mov	r0, r6
 800aa24:	1a6d      	subs	r5, r5, r1
 800aa26:	4629      	mov	r1, r5
 800aa28:	f7ff ffa6 	bl	800a978 <sbrk_aligned>
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	d03a      	beq.n	800aaa6 <_malloc_r+0xea>
 800aa30:	6823      	ldr	r3, [r4, #0]
 800aa32:	442b      	add	r3, r5
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	f8d8 3000 	ldr.w	r3, [r8]
 800aa3a:	685a      	ldr	r2, [r3, #4]
 800aa3c:	bb62      	cbnz	r2, 800aa98 <_malloc_r+0xdc>
 800aa3e:	f8c8 7000 	str.w	r7, [r8]
 800aa42:	e00f      	b.n	800aa64 <_malloc_r+0xa8>
 800aa44:	6822      	ldr	r2, [r4, #0]
 800aa46:	1b52      	subs	r2, r2, r5
 800aa48:	d420      	bmi.n	800aa8c <_malloc_r+0xd0>
 800aa4a:	2a0b      	cmp	r2, #11
 800aa4c:	d917      	bls.n	800aa7e <_malloc_r+0xc2>
 800aa4e:	1961      	adds	r1, r4, r5
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	6025      	str	r5, [r4, #0]
 800aa54:	bf18      	it	ne
 800aa56:	6059      	strne	r1, [r3, #4]
 800aa58:	6863      	ldr	r3, [r4, #4]
 800aa5a:	bf08      	it	eq
 800aa5c:	f8c8 1000 	streq.w	r1, [r8]
 800aa60:	5162      	str	r2, [r4, r5]
 800aa62:	604b      	str	r3, [r1, #4]
 800aa64:	4630      	mov	r0, r6
 800aa66:	f000 f82f 	bl	800aac8 <__malloc_unlock>
 800aa6a:	f104 000b 	add.w	r0, r4, #11
 800aa6e:	1d23      	adds	r3, r4, #4
 800aa70:	f020 0007 	bic.w	r0, r0, #7
 800aa74:	1ac2      	subs	r2, r0, r3
 800aa76:	bf1c      	itt	ne
 800aa78:	1a1b      	subne	r3, r3, r0
 800aa7a:	50a3      	strne	r3, [r4, r2]
 800aa7c:	e7af      	b.n	800a9de <_malloc_r+0x22>
 800aa7e:	6862      	ldr	r2, [r4, #4]
 800aa80:	42a3      	cmp	r3, r4
 800aa82:	bf0c      	ite	eq
 800aa84:	f8c8 2000 	streq.w	r2, [r8]
 800aa88:	605a      	strne	r2, [r3, #4]
 800aa8a:	e7eb      	b.n	800aa64 <_malloc_r+0xa8>
 800aa8c:	4623      	mov	r3, r4
 800aa8e:	6864      	ldr	r4, [r4, #4]
 800aa90:	e7ae      	b.n	800a9f0 <_malloc_r+0x34>
 800aa92:	463c      	mov	r4, r7
 800aa94:	687f      	ldr	r7, [r7, #4]
 800aa96:	e7b6      	b.n	800aa06 <_malloc_r+0x4a>
 800aa98:	461a      	mov	r2, r3
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	42a3      	cmp	r3, r4
 800aa9e:	d1fb      	bne.n	800aa98 <_malloc_r+0xdc>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	6053      	str	r3, [r2, #4]
 800aaa4:	e7de      	b.n	800aa64 <_malloc_r+0xa8>
 800aaa6:	230c      	movs	r3, #12
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	6033      	str	r3, [r6, #0]
 800aaac:	f000 f80c 	bl	800aac8 <__malloc_unlock>
 800aab0:	e794      	b.n	800a9dc <_malloc_r+0x20>
 800aab2:	6005      	str	r5, [r0, #0]
 800aab4:	e7d6      	b.n	800aa64 <_malloc_r+0xa8>
 800aab6:	bf00      	nop
 800aab8:	20000894 	.word	0x20000894

0800aabc <__malloc_lock>:
 800aabc:	4801      	ldr	r0, [pc, #4]	@ (800aac4 <__malloc_lock+0x8>)
 800aabe:	f7ff bf0e 	b.w	800a8de <__retarget_lock_acquire_recursive>
 800aac2:	bf00      	nop
 800aac4:	2000088c 	.word	0x2000088c

0800aac8 <__malloc_unlock>:
 800aac8:	4801      	ldr	r0, [pc, #4]	@ (800aad0 <__malloc_unlock+0x8>)
 800aaca:	f7ff bf09 	b.w	800a8e0 <__retarget_lock_release_recursive>
 800aace:	bf00      	nop
 800aad0:	2000088c 	.word	0x2000088c

0800aad4 <__ssputs_r>:
 800aad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aad8:	461f      	mov	r7, r3
 800aada:	688e      	ldr	r6, [r1, #8]
 800aadc:	4682      	mov	sl, r0
 800aade:	460c      	mov	r4, r1
 800aae0:	42be      	cmp	r6, r7
 800aae2:	4690      	mov	r8, r2
 800aae4:	680b      	ldr	r3, [r1, #0]
 800aae6:	d82d      	bhi.n	800ab44 <__ssputs_r+0x70>
 800aae8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aaec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aaf0:	d026      	beq.n	800ab40 <__ssputs_r+0x6c>
 800aaf2:	6965      	ldr	r5, [r4, #20]
 800aaf4:	6909      	ldr	r1, [r1, #16]
 800aaf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aafa:	eba3 0901 	sub.w	r9, r3, r1
 800aafe:	1c7b      	adds	r3, r7, #1
 800ab00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab04:	444b      	add	r3, r9
 800ab06:	106d      	asrs	r5, r5, #1
 800ab08:	429d      	cmp	r5, r3
 800ab0a:	bf38      	it	cc
 800ab0c:	461d      	movcc	r5, r3
 800ab0e:	0553      	lsls	r3, r2, #21
 800ab10:	d527      	bpl.n	800ab62 <__ssputs_r+0x8e>
 800ab12:	4629      	mov	r1, r5
 800ab14:	f7ff ff52 	bl	800a9bc <_malloc_r>
 800ab18:	4606      	mov	r6, r0
 800ab1a:	b360      	cbz	r0, 800ab76 <__ssputs_r+0xa2>
 800ab1c:	464a      	mov	r2, r9
 800ab1e:	6921      	ldr	r1, [r4, #16]
 800ab20:	f000 fd7c 	bl	800b61c <memcpy>
 800ab24:	89a3      	ldrh	r3, [r4, #12]
 800ab26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab2e:	81a3      	strh	r3, [r4, #12]
 800ab30:	6126      	str	r6, [r4, #16]
 800ab32:	444e      	add	r6, r9
 800ab34:	6165      	str	r5, [r4, #20]
 800ab36:	eba5 0509 	sub.w	r5, r5, r9
 800ab3a:	6026      	str	r6, [r4, #0]
 800ab3c:	463e      	mov	r6, r7
 800ab3e:	60a5      	str	r5, [r4, #8]
 800ab40:	42be      	cmp	r6, r7
 800ab42:	d900      	bls.n	800ab46 <__ssputs_r+0x72>
 800ab44:	463e      	mov	r6, r7
 800ab46:	4632      	mov	r2, r6
 800ab48:	4641      	mov	r1, r8
 800ab4a:	6820      	ldr	r0, [r4, #0]
 800ab4c:	f000 fd2e 	bl	800b5ac <memmove>
 800ab50:	68a3      	ldr	r3, [r4, #8]
 800ab52:	2000      	movs	r0, #0
 800ab54:	1b9b      	subs	r3, r3, r6
 800ab56:	60a3      	str	r3, [r4, #8]
 800ab58:	6823      	ldr	r3, [r4, #0]
 800ab5a:	4433      	add	r3, r6
 800ab5c:	6023      	str	r3, [r4, #0]
 800ab5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab62:	462a      	mov	r2, r5
 800ab64:	f000 fd67 	bl	800b636 <_realloc_r>
 800ab68:	4606      	mov	r6, r0
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d1e0      	bne.n	800ab30 <__ssputs_r+0x5c>
 800ab6e:	6921      	ldr	r1, [r4, #16]
 800ab70:	4650      	mov	r0, sl
 800ab72:	f7ff feb7 	bl	800a8e4 <_free_r>
 800ab76:	230c      	movs	r3, #12
 800ab78:	f04f 30ff 	mov.w	r0, #4294967295
 800ab7c:	f8ca 3000 	str.w	r3, [sl]
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab86:	81a3      	strh	r3, [r4, #12]
 800ab88:	e7e9      	b.n	800ab5e <__ssputs_r+0x8a>
	...

0800ab8c <_svfiprintf_r>:
 800ab8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab90:	4698      	mov	r8, r3
 800ab92:	898b      	ldrh	r3, [r1, #12]
 800ab94:	b09d      	sub	sp, #116	@ 0x74
 800ab96:	4607      	mov	r7, r0
 800ab98:	061b      	lsls	r3, r3, #24
 800ab9a:	460d      	mov	r5, r1
 800ab9c:	4614      	mov	r4, r2
 800ab9e:	d510      	bpl.n	800abc2 <_svfiprintf_r+0x36>
 800aba0:	690b      	ldr	r3, [r1, #16]
 800aba2:	b973      	cbnz	r3, 800abc2 <_svfiprintf_r+0x36>
 800aba4:	2140      	movs	r1, #64	@ 0x40
 800aba6:	f7ff ff09 	bl	800a9bc <_malloc_r>
 800abaa:	6028      	str	r0, [r5, #0]
 800abac:	6128      	str	r0, [r5, #16]
 800abae:	b930      	cbnz	r0, 800abbe <_svfiprintf_r+0x32>
 800abb0:	230c      	movs	r3, #12
 800abb2:	603b      	str	r3, [r7, #0]
 800abb4:	f04f 30ff 	mov.w	r0, #4294967295
 800abb8:	b01d      	add	sp, #116	@ 0x74
 800abba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abbe:	2340      	movs	r3, #64	@ 0x40
 800abc0:	616b      	str	r3, [r5, #20]
 800abc2:	2300      	movs	r3, #0
 800abc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800abc8:	f04f 0901 	mov.w	r9, #1
 800abcc:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800ad70 <_svfiprintf_r+0x1e4>
 800abd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800abd2:	2320      	movs	r3, #32
 800abd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abd8:	2330      	movs	r3, #48	@ 0x30
 800abda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abde:	4623      	mov	r3, r4
 800abe0:	469a      	mov	sl, r3
 800abe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abe6:	b10a      	cbz	r2, 800abec <_svfiprintf_r+0x60>
 800abe8:	2a25      	cmp	r2, #37	@ 0x25
 800abea:	d1f9      	bne.n	800abe0 <_svfiprintf_r+0x54>
 800abec:	ebba 0b04 	subs.w	fp, sl, r4
 800abf0:	d00b      	beq.n	800ac0a <_svfiprintf_r+0x7e>
 800abf2:	465b      	mov	r3, fp
 800abf4:	4622      	mov	r2, r4
 800abf6:	4629      	mov	r1, r5
 800abf8:	4638      	mov	r0, r7
 800abfa:	f7ff ff6b 	bl	800aad4 <__ssputs_r>
 800abfe:	3001      	adds	r0, #1
 800ac00:	f000 80a7 	beq.w	800ad52 <_svfiprintf_r+0x1c6>
 800ac04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac06:	445a      	add	r2, fp
 800ac08:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f000 809f 	beq.w	800ad52 <_svfiprintf_r+0x1c6>
 800ac14:	2300      	movs	r3, #0
 800ac16:	f04f 32ff 	mov.w	r2, #4294967295
 800ac1a:	f10a 0a01 	add.w	sl, sl, #1
 800ac1e:	9304      	str	r3, [sp, #16]
 800ac20:	9307      	str	r3, [sp, #28]
 800ac22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac26:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac2c:	4654      	mov	r4, sl
 800ac2e:	2205      	movs	r2, #5
 800ac30:	484f      	ldr	r0, [pc, #316]	@ (800ad70 <_svfiprintf_r+0x1e4>)
 800ac32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac36:	f000 fce3 	bl	800b600 <memchr>
 800ac3a:	9a04      	ldr	r2, [sp, #16]
 800ac3c:	b9d8      	cbnz	r0, 800ac76 <_svfiprintf_r+0xea>
 800ac3e:	06d0      	lsls	r0, r2, #27
 800ac40:	bf44      	itt	mi
 800ac42:	2320      	movmi	r3, #32
 800ac44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac48:	0711      	lsls	r1, r2, #28
 800ac4a:	bf44      	itt	mi
 800ac4c:	232b      	movmi	r3, #43	@ 0x2b
 800ac4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac52:	f89a 3000 	ldrb.w	r3, [sl]
 800ac56:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac58:	d015      	beq.n	800ac86 <_svfiprintf_r+0xfa>
 800ac5a:	9a07      	ldr	r2, [sp, #28]
 800ac5c:	4654      	mov	r4, sl
 800ac5e:	2000      	movs	r0, #0
 800ac60:	f04f 0c0a 	mov.w	ip, #10
 800ac64:	4621      	mov	r1, r4
 800ac66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac6a:	3b30      	subs	r3, #48	@ 0x30
 800ac6c:	2b09      	cmp	r3, #9
 800ac6e:	d94b      	bls.n	800ad08 <_svfiprintf_r+0x17c>
 800ac70:	b1b0      	cbz	r0, 800aca0 <_svfiprintf_r+0x114>
 800ac72:	9207      	str	r2, [sp, #28]
 800ac74:	e014      	b.n	800aca0 <_svfiprintf_r+0x114>
 800ac76:	eba0 0308 	sub.w	r3, r0, r8
 800ac7a:	46a2      	mov	sl, r4
 800ac7c:	fa09 f303 	lsl.w	r3, r9, r3
 800ac80:	4313      	orrs	r3, r2
 800ac82:	9304      	str	r3, [sp, #16]
 800ac84:	e7d2      	b.n	800ac2c <_svfiprintf_r+0xa0>
 800ac86:	9b03      	ldr	r3, [sp, #12]
 800ac88:	1d19      	adds	r1, r3, #4
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	9103      	str	r1, [sp, #12]
 800ac90:	bfbb      	ittet	lt
 800ac92:	425b      	neglt	r3, r3
 800ac94:	f042 0202 	orrlt.w	r2, r2, #2
 800ac98:	9307      	strge	r3, [sp, #28]
 800ac9a:	9307      	strlt	r3, [sp, #28]
 800ac9c:	bfb8      	it	lt
 800ac9e:	9204      	strlt	r2, [sp, #16]
 800aca0:	7823      	ldrb	r3, [r4, #0]
 800aca2:	2b2e      	cmp	r3, #46	@ 0x2e
 800aca4:	d10a      	bne.n	800acbc <_svfiprintf_r+0x130>
 800aca6:	7863      	ldrb	r3, [r4, #1]
 800aca8:	2b2a      	cmp	r3, #42	@ 0x2a
 800acaa:	d132      	bne.n	800ad12 <_svfiprintf_r+0x186>
 800acac:	9b03      	ldr	r3, [sp, #12]
 800acae:	3402      	adds	r4, #2
 800acb0:	1d1a      	adds	r2, r3, #4
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acb8:	9203      	str	r2, [sp, #12]
 800acba:	9305      	str	r3, [sp, #20]
 800acbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad80 <_svfiprintf_r+0x1f4>
 800acc0:	2203      	movs	r2, #3
 800acc2:	7821      	ldrb	r1, [r4, #0]
 800acc4:	4650      	mov	r0, sl
 800acc6:	f000 fc9b 	bl	800b600 <memchr>
 800acca:	b138      	cbz	r0, 800acdc <_svfiprintf_r+0x150>
 800accc:	eba0 000a 	sub.w	r0, r0, sl
 800acd0:	2240      	movs	r2, #64	@ 0x40
 800acd2:	9b04      	ldr	r3, [sp, #16]
 800acd4:	3401      	adds	r4, #1
 800acd6:	4082      	lsls	r2, r0
 800acd8:	4313      	orrs	r3, r2
 800acda:	9304      	str	r3, [sp, #16]
 800acdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace0:	2206      	movs	r2, #6
 800ace2:	4824      	ldr	r0, [pc, #144]	@ (800ad74 <_svfiprintf_r+0x1e8>)
 800ace4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ace8:	f000 fc8a 	bl	800b600 <memchr>
 800acec:	2800      	cmp	r0, #0
 800acee:	d036      	beq.n	800ad5e <_svfiprintf_r+0x1d2>
 800acf0:	4b21      	ldr	r3, [pc, #132]	@ (800ad78 <_svfiprintf_r+0x1ec>)
 800acf2:	bb1b      	cbnz	r3, 800ad3c <_svfiprintf_r+0x1b0>
 800acf4:	9b03      	ldr	r3, [sp, #12]
 800acf6:	3307      	adds	r3, #7
 800acf8:	f023 0307 	bic.w	r3, r3, #7
 800acfc:	3308      	adds	r3, #8
 800acfe:	9303      	str	r3, [sp, #12]
 800ad00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad02:	4433      	add	r3, r6
 800ad04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad06:	e76a      	b.n	800abde <_svfiprintf_r+0x52>
 800ad08:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad0c:	460c      	mov	r4, r1
 800ad0e:	2001      	movs	r0, #1
 800ad10:	e7a8      	b.n	800ac64 <_svfiprintf_r+0xd8>
 800ad12:	2300      	movs	r3, #0
 800ad14:	3401      	adds	r4, #1
 800ad16:	f04f 0c0a 	mov.w	ip, #10
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	9305      	str	r3, [sp, #20]
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad24:	3a30      	subs	r2, #48	@ 0x30
 800ad26:	2a09      	cmp	r2, #9
 800ad28:	d903      	bls.n	800ad32 <_svfiprintf_r+0x1a6>
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d0c6      	beq.n	800acbc <_svfiprintf_r+0x130>
 800ad2e:	9105      	str	r1, [sp, #20]
 800ad30:	e7c4      	b.n	800acbc <_svfiprintf_r+0x130>
 800ad32:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad36:	4604      	mov	r4, r0
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e7f0      	b.n	800ad1e <_svfiprintf_r+0x192>
 800ad3c:	ab03      	add	r3, sp, #12
 800ad3e:	462a      	mov	r2, r5
 800ad40:	a904      	add	r1, sp, #16
 800ad42:	4638      	mov	r0, r7
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	4b0d      	ldr	r3, [pc, #52]	@ (800ad7c <_svfiprintf_r+0x1f0>)
 800ad48:	f3af 8000 	nop.w
 800ad4c:	1c42      	adds	r2, r0, #1
 800ad4e:	4606      	mov	r6, r0
 800ad50:	d1d6      	bne.n	800ad00 <_svfiprintf_r+0x174>
 800ad52:	89ab      	ldrh	r3, [r5, #12]
 800ad54:	065b      	lsls	r3, r3, #25
 800ad56:	f53f af2d 	bmi.w	800abb4 <_svfiprintf_r+0x28>
 800ad5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad5c:	e72c      	b.n	800abb8 <_svfiprintf_r+0x2c>
 800ad5e:	ab03      	add	r3, sp, #12
 800ad60:	462a      	mov	r2, r5
 800ad62:	a904      	add	r1, sp, #16
 800ad64:	4638      	mov	r0, r7
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	4b04      	ldr	r3, [pc, #16]	@ (800ad7c <_svfiprintf_r+0x1f0>)
 800ad6a:	f000 f9bf 	bl	800b0ec <_printf_i>
 800ad6e:	e7ed      	b.n	800ad4c <_svfiprintf_r+0x1c0>
 800ad70:	0800b900 	.word	0x0800b900
 800ad74:	0800b90a 	.word	0x0800b90a
 800ad78:	00000000 	.word	0x00000000
 800ad7c:	0800aad5 	.word	0x0800aad5
 800ad80:	0800b906 	.word	0x0800b906

0800ad84 <__sfputc_r>:
 800ad84:	6893      	ldr	r3, [r2, #8]
 800ad86:	3b01      	subs	r3, #1
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	6093      	str	r3, [r2, #8]
 800ad8c:	b410      	push	{r4}
 800ad8e:	da08      	bge.n	800ada2 <__sfputc_r+0x1e>
 800ad90:	6994      	ldr	r4, [r2, #24]
 800ad92:	42a3      	cmp	r3, r4
 800ad94:	db01      	blt.n	800ad9a <__sfputc_r+0x16>
 800ad96:	290a      	cmp	r1, #10
 800ad98:	d103      	bne.n	800ada2 <__sfputc_r+0x1e>
 800ad9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad9e:	f000 bb71 	b.w	800b484 <__swbuf_r>
 800ada2:	6813      	ldr	r3, [r2, #0]
 800ada4:	1c58      	adds	r0, r3, #1
 800ada6:	6010      	str	r0, [r2, #0]
 800ada8:	4608      	mov	r0, r1
 800adaa:	7019      	strb	r1, [r3, #0]
 800adac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <__sfputs_r>:
 800adb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb4:	4606      	mov	r6, r0
 800adb6:	460f      	mov	r7, r1
 800adb8:	4614      	mov	r4, r2
 800adba:	18d5      	adds	r5, r2, r3
 800adbc:	42ac      	cmp	r4, r5
 800adbe:	d101      	bne.n	800adc4 <__sfputs_r+0x12>
 800adc0:	2000      	movs	r0, #0
 800adc2:	e007      	b.n	800add4 <__sfputs_r+0x22>
 800adc4:	463a      	mov	r2, r7
 800adc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adca:	4630      	mov	r0, r6
 800adcc:	f7ff ffda 	bl	800ad84 <__sfputc_r>
 800add0:	1c43      	adds	r3, r0, #1
 800add2:	d1f3      	bne.n	800adbc <__sfputs_r+0xa>
 800add4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800add8 <_vfiprintf_r>:
 800add8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800addc:	460d      	mov	r5, r1
 800adde:	b09d      	sub	sp, #116	@ 0x74
 800ade0:	4614      	mov	r4, r2
 800ade2:	4698      	mov	r8, r3
 800ade4:	4606      	mov	r6, r0
 800ade6:	b118      	cbz	r0, 800adf0 <_vfiprintf_r+0x18>
 800ade8:	6a03      	ldr	r3, [r0, #32]
 800adea:	b90b      	cbnz	r3, 800adf0 <_vfiprintf_r+0x18>
 800adec:	f7ff fc52 	bl	800a694 <__sinit>
 800adf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adf2:	07d9      	lsls	r1, r3, #31
 800adf4:	d405      	bmi.n	800ae02 <_vfiprintf_r+0x2a>
 800adf6:	89ab      	ldrh	r3, [r5, #12]
 800adf8:	059a      	lsls	r2, r3, #22
 800adfa:	d402      	bmi.n	800ae02 <_vfiprintf_r+0x2a>
 800adfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adfe:	f7ff fd6e 	bl	800a8de <__retarget_lock_acquire_recursive>
 800ae02:	89ab      	ldrh	r3, [r5, #12]
 800ae04:	071b      	lsls	r3, r3, #28
 800ae06:	d501      	bpl.n	800ae0c <_vfiprintf_r+0x34>
 800ae08:	692b      	ldr	r3, [r5, #16]
 800ae0a:	b99b      	cbnz	r3, 800ae34 <_vfiprintf_r+0x5c>
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f000 fb76 	bl	800b500 <__swsetup_r>
 800ae14:	b170      	cbz	r0, 800ae34 <_vfiprintf_r+0x5c>
 800ae16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae18:	07dc      	lsls	r4, r3, #31
 800ae1a:	d504      	bpl.n	800ae26 <_vfiprintf_r+0x4e>
 800ae1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae20:	b01d      	add	sp, #116	@ 0x74
 800ae22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae26:	89ab      	ldrh	r3, [r5, #12]
 800ae28:	0598      	lsls	r0, r3, #22
 800ae2a:	d4f7      	bmi.n	800ae1c <_vfiprintf_r+0x44>
 800ae2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae2e:	f7ff fd57 	bl	800a8e0 <__retarget_lock_release_recursive>
 800ae32:	e7f3      	b.n	800ae1c <_vfiprintf_r+0x44>
 800ae34:	2300      	movs	r3, #0
 800ae36:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae3a:	f04f 0901 	mov.w	r9, #1
 800ae3e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800aff4 <_vfiprintf_r+0x21c>
 800ae42:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae44:	2320      	movs	r3, #32
 800ae46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae4a:	2330      	movs	r3, #48	@ 0x30
 800ae4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae50:	4623      	mov	r3, r4
 800ae52:	469a      	mov	sl, r3
 800ae54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae58:	b10a      	cbz	r2, 800ae5e <_vfiprintf_r+0x86>
 800ae5a:	2a25      	cmp	r2, #37	@ 0x25
 800ae5c:	d1f9      	bne.n	800ae52 <_vfiprintf_r+0x7a>
 800ae5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae62:	d00b      	beq.n	800ae7c <_vfiprintf_r+0xa4>
 800ae64:	465b      	mov	r3, fp
 800ae66:	4622      	mov	r2, r4
 800ae68:	4629      	mov	r1, r5
 800ae6a:	4630      	mov	r0, r6
 800ae6c:	f7ff ffa1 	bl	800adb2 <__sfputs_r>
 800ae70:	3001      	adds	r0, #1
 800ae72:	f000 80a7 	beq.w	800afc4 <_vfiprintf_r+0x1ec>
 800ae76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae78:	445a      	add	r2, fp
 800ae7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f000 809f 	beq.w	800afc4 <_vfiprintf_r+0x1ec>
 800ae86:	2300      	movs	r3, #0
 800ae88:	f04f 32ff 	mov.w	r2, #4294967295
 800ae8c:	f10a 0a01 	add.w	sl, sl, #1
 800ae90:	9304      	str	r3, [sp, #16]
 800ae92:	9307      	str	r3, [sp, #28]
 800ae94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae98:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae9e:	4654      	mov	r4, sl
 800aea0:	2205      	movs	r2, #5
 800aea2:	4854      	ldr	r0, [pc, #336]	@ (800aff4 <_vfiprintf_r+0x21c>)
 800aea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea8:	f000 fbaa 	bl	800b600 <memchr>
 800aeac:	9a04      	ldr	r2, [sp, #16]
 800aeae:	b9d8      	cbnz	r0, 800aee8 <_vfiprintf_r+0x110>
 800aeb0:	06d1      	lsls	r1, r2, #27
 800aeb2:	bf44      	itt	mi
 800aeb4:	2320      	movmi	r3, #32
 800aeb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeba:	0713      	lsls	r3, r2, #28
 800aebc:	bf44      	itt	mi
 800aebe:	232b      	movmi	r3, #43	@ 0x2b
 800aec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aec4:	f89a 3000 	ldrb.w	r3, [sl]
 800aec8:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeca:	d015      	beq.n	800aef8 <_vfiprintf_r+0x120>
 800aecc:	9a07      	ldr	r2, [sp, #28]
 800aece:	4654      	mov	r4, sl
 800aed0:	2000      	movs	r0, #0
 800aed2:	f04f 0c0a 	mov.w	ip, #10
 800aed6:	4621      	mov	r1, r4
 800aed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aedc:	3b30      	subs	r3, #48	@ 0x30
 800aede:	2b09      	cmp	r3, #9
 800aee0:	d94b      	bls.n	800af7a <_vfiprintf_r+0x1a2>
 800aee2:	b1b0      	cbz	r0, 800af12 <_vfiprintf_r+0x13a>
 800aee4:	9207      	str	r2, [sp, #28]
 800aee6:	e014      	b.n	800af12 <_vfiprintf_r+0x13a>
 800aee8:	eba0 0308 	sub.w	r3, r0, r8
 800aeec:	46a2      	mov	sl, r4
 800aeee:	fa09 f303 	lsl.w	r3, r9, r3
 800aef2:	4313      	orrs	r3, r2
 800aef4:	9304      	str	r3, [sp, #16]
 800aef6:	e7d2      	b.n	800ae9e <_vfiprintf_r+0xc6>
 800aef8:	9b03      	ldr	r3, [sp, #12]
 800aefa:	1d19      	adds	r1, r3, #4
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	9103      	str	r1, [sp, #12]
 800af02:	bfbb      	ittet	lt
 800af04:	425b      	neglt	r3, r3
 800af06:	f042 0202 	orrlt.w	r2, r2, #2
 800af0a:	9307      	strge	r3, [sp, #28]
 800af0c:	9307      	strlt	r3, [sp, #28]
 800af0e:	bfb8      	it	lt
 800af10:	9204      	strlt	r2, [sp, #16]
 800af12:	7823      	ldrb	r3, [r4, #0]
 800af14:	2b2e      	cmp	r3, #46	@ 0x2e
 800af16:	d10a      	bne.n	800af2e <_vfiprintf_r+0x156>
 800af18:	7863      	ldrb	r3, [r4, #1]
 800af1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800af1c:	d132      	bne.n	800af84 <_vfiprintf_r+0x1ac>
 800af1e:	9b03      	ldr	r3, [sp, #12]
 800af20:	3402      	adds	r4, #2
 800af22:	1d1a      	adds	r2, r3, #4
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af2a:	9203      	str	r2, [sp, #12]
 800af2c:	9305      	str	r3, [sp, #20]
 800af2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b004 <_vfiprintf_r+0x22c>
 800af32:	2203      	movs	r2, #3
 800af34:	7821      	ldrb	r1, [r4, #0]
 800af36:	4650      	mov	r0, sl
 800af38:	f000 fb62 	bl	800b600 <memchr>
 800af3c:	b138      	cbz	r0, 800af4e <_vfiprintf_r+0x176>
 800af3e:	eba0 000a 	sub.w	r0, r0, sl
 800af42:	2240      	movs	r2, #64	@ 0x40
 800af44:	9b04      	ldr	r3, [sp, #16]
 800af46:	3401      	adds	r4, #1
 800af48:	4082      	lsls	r2, r0
 800af4a:	4313      	orrs	r3, r2
 800af4c:	9304      	str	r3, [sp, #16]
 800af4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af52:	2206      	movs	r2, #6
 800af54:	4828      	ldr	r0, [pc, #160]	@ (800aff8 <_vfiprintf_r+0x220>)
 800af56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af5a:	f000 fb51 	bl	800b600 <memchr>
 800af5e:	2800      	cmp	r0, #0
 800af60:	d03f      	beq.n	800afe2 <_vfiprintf_r+0x20a>
 800af62:	4b26      	ldr	r3, [pc, #152]	@ (800affc <_vfiprintf_r+0x224>)
 800af64:	bb1b      	cbnz	r3, 800afae <_vfiprintf_r+0x1d6>
 800af66:	9b03      	ldr	r3, [sp, #12]
 800af68:	3307      	adds	r3, #7
 800af6a:	f023 0307 	bic.w	r3, r3, #7
 800af6e:	3308      	adds	r3, #8
 800af70:	9303      	str	r3, [sp, #12]
 800af72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af74:	443b      	add	r3, r7
 800af76:	9309      	str	r3, [sp, #36]	@ 0x24
 800af78:	e76a      	b.n	800ae50 <_vfiprintf_r+0x78>
 800af7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800af7e:	460c      	mov	r4, r1
 800af80:	2001      	movs	r0, #1
 800af82:	e7a8      	b.n	800aed6 <_vfiprintf_r+0xfe>
 800af84:	2300      	movs	r3, #0
 800af86:	3401      	adds	r4, #1
 800af88:	f04f 0c0a 	mov.w	ip, #10
 800af8c:	4619      	mov	r1, r3
 800af8e:	9305      	str	r3, [sp, #20]
 800af90:	4620      	mov	r0, r4
 800af92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af96:	3a30      	subs	r2, #48	@ 0x30
 800af98:	2a09      	cmp	r2, #9
 800af9a:	d903      	bls.n	800afa4 <_vfiprintf_r+0x1cc>
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d0c6      	beq.n	800af2e <_vfiprintf_r+0x156>
 800afa0:	9105      	str	r1, [sp, #20]
 800afa2:	e7c4      	b.n	800af2e <_vfiprintf_r+0x156>
 800afa4:	fb0c 2101 	mla	r1, ip, r1, r2
 800afa8:	4604      	mov	r4, r0
 800afaa:	2301      	movs	r3, #1
 800afac:	e7f0      	b.n	800af90 <_vfiprintf_r+0x1b8>
 800afae:	ab03      	add	r3, sp, #12
 800afb0:	462a      	mov	r2, r5
 800afb2:	a904      	add	r1, sp, #16
 800afb4:	4630      	mov	r0, r6
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	4b11      	ldr	r3, [pc, #68]	@ (800b000 <_vfiprintf_r+0x228>)
 800afba:	f3af 8000 	nop.w
 800afbe:	4607      	mov	r7, r0
 800afc0:	1c78      	adds	r0, r7, #1
 800afc2:	d1d6      	bne.n	800af72 <_vfiprintf_r+0x19a>
 800afc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afc6:	07d9      	lsls	r1, r3, #31
 800afc8:	d405      	bmi.n	800afd6 <_vfiprintf_r+0x1fe>
 800afca:	89ab      	ldrh	r3, [r5, #12]
 800afcc:	059a      	lsls	r2, r3, #22
 800afce:	d402      	bmi.n	800afd6 <_vfiprintf_r+0x1fe>
 800afd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afd2:	f7ff fc85 	bl	800a8e0 <__retarget_lock_release_recursive>
 800afd6:	89ab      	ldrh	r3, [r5, #12]
 800afd8:	065b      	lsls	r3, r3, #25
 800afda:	f53f af1f 	bmi.w	800ae1c <_vfiprintf_r+0x44>
 800afde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afe0:	e71e      	b.n	800ae20 <_vfiprintf_r+0x48>
 800afe2:	ab03      	add	r3, sp, #12
 800afe4:	462a      	mov	r2, r5
 800afe6:	a904      	add	r1, sp, #16
 800afe8:	4630      	mov	r0, r6
 800afea:	9300      	str	r3, [sp, #0]
 800afec:	4b04      	ldr	r3, [pc, #16]	@ (800b000 <_vfiprintf_r+0x228>)
 800afee:	f000 f87d 	bl	800b0ec <_printf_i>
 800aff2:	e7e4      	b.n	800afbe <_vfiprintf_r+0x1e6>
 800aff4:	0800b900 	.word	0x0800b900
 800aff8:	0800b90a 	.word	0x0800b90a
 800affc:	00000000 	.word	0x00000000
 800b000:	0800adb3 	.word	0x0800adb3
 800b004:	0800b906 	.word	0x0800b906

0800b008 <_printf_common>:
 800b008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b00c:	4616      	mov	r6, r2
 800b00e:	4698      	mov	r8, r3
 800b010:	688a      	ldr	r2, [r1, #8]
 800b012:	4607      	mov	r7, r0
 800b014:	690b      	ldr	r3, [r1, #16]
 800b016:	460c      	mov	r4, r1
 800b018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b01c:	4293      	cmp	r3, r2
 800b01e:	bfb8      	it	lt
 800b020:	4613      	movlt	r3, r2
 800b022:	6033      	str	r3, [r6, #0]
 800b024:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b028:	b10a      	cbz	r2, 800b02e <_printf_common+0x26>
 800b02a:	3301      	adds	r3, #1
 800b02c:	6033      	str	r3, [r6, #0]
 800b02e:	6823      	ldr	r3, [r4, #0]
 800b030:	0699      	lsls	r1, r3, #26
 800b032:	bf42      	ittt	mi
 800b034:	6833      	ldrmi	r3, [r6, #0]
 800b036:	3302      	addmi	r3, #2
 800b038:	6033      	strmi	r3, [r6, #0]
 800b03a:	6825      	ldr	r5, [r4, #0]
 800b03c:	f015 0506 	ands.w	r5, r5, #6
 800b040:	d106      	bne.n	800b050 <_printf_common+0x48>
 800b042:	f104 0a19 	add.w	sl, r4, #25
 800b046:	68e3      	ldr	r3, [r4, #12]
 800b048:	6832      	ldr	r2, [r6, #0]
 800b04a:	1a9b      	subs	r3, r3, r2
 800b04c:	42ab      	cmp	r3, r5
 800b04e:	dc2b      	bgt.n	800b0a8 <_printf_common+0xa0>
 800b050:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b054:	6822      	ldr	r2, [r4, #0]
 800b056:	3b00      	subs	r3, #0
 800b058:	bf18      	it	ne
 800b05a:	2301      	movne	r3, #1
 800b05c:	0692      	lsls	r2, r2, #26
 800b05e:	d430      	bmi.n	800b0c2 <_printf_common+0xba>
 800b060:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b064:	4641      	mov	r1, r8
 800b066:	4638      	mov	r0, r7
 800b068:	47c8      	blx	r9
 800b06a:	3001      	adds	r0, #1
 800b06c:	d023      	beq.n	800b0b6 <_printf_common+0xae>
 800b06e:	6823      	ldr	r3, [r4, #0]
 800b070:	341a      	adds	r4, #26
 800b072:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b076:	f003 0306 	and.w	r3, r3, #6
 800b07a:	2b04      	cmp	r3, #4
 800b07c:	bf0a      	itet	eq
 800b07e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b082:	2500      	movne	r5, #0
 800b084:	6833      	ldreq	r3, [r6, #0]
 800b086:	f04f 0600 	mov.w	r6, #0
 800b08a:	bf08      	it	eq
 800b08c:	1aed      	subeq	r5, r5, r3
 800b08e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b092:	bf08      	it	eq
 800b094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b098:	4293      	cmp	r3, r2
 800b09a:	bfc4      	itt	gt
 800b09c:	1a9b      	subgt	r3, r3, r2
 800b09e:	18ed      	addgt	r5, r5, r3
 800b0a0:	42b5      	cmp	r5, r6
 800b0a2:	d11a      	bne.n	800b0da <_printf_common+0xd2>
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	e008      	b.n	800b0ba <_printf_common+0xb2>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	4652      	mov	r2, sl
 800b0ac:	4641      	mov	r1, r8
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	47c8      	blx	r9
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	d103      	bne.n	800b0be <_printf_common+0xb6>
 800b0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0be:	3501      	adds	r5, #1
 800b0c0:	e7c1      	b.n	800b046 <_printf_common+0x3e>
 800b0c2:	18e1      	adds	r1, r4, r3
 800b0c4:	1c5a      	adds	r2, r3, #1
 800b0c6:	2030      	movs	r0, #48	@ 0x30
 800b0c8:	3302      	adds	r3, #2
 800b0ca:	4422      	add	r2, r4
 800b0cc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b0d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b0d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b0d8:	e7c2      	b.n	800b060 <_printf_common+0x58>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	4622      	mov	r2, r4
 800b0de:	4641      	mov	r1, r8
 800b0e0:	4638      	mov	r0, r7
 800b0e2:	47c8      	blx	r9
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	d0e6      	beq.n	800b0b6 <_printf_common+0xae>
 800b0e8:	3601      	adds	r6, #1
 800b0ea:	e7d9      	b.n	800b0a0 <_printf_common+0x98>

0800b0ec <_printf_i>:
 800b0ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f0:	7e0f      	ldrb	r7, [r1, #24]
 800b0f2:	4691      	mov	r9, r2
 800b0f4:	4680      	mov	r8, r0
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	2f78      	cmp	r7, #120	@ 0x78
 800b0fa:	469a      	mov	sl, r3
 800b0fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b0fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b102:	d807      	bhi.n	800b114 <_printf_i+0x28>
 800b104:	2f62      	cmp	r7, #98	@ 0x62
 800b106:	d80a      	bhi.n	800b11e <_printf_i+0x32>
 800b108:	2f00      	cmp	r7, #0
 800b10a:	f000 80d2 	beq.w	800b2b2 <_printf_i+0x1c6>
 800b10e:	2f58      	cmp	r7, #88	@ 0x58
 800b110:	f000 80b9 	beq.w	800b286 <_printf_i+0x19a>
 800b114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b118:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b11c:	e03a      	b.n	800b194 <_printf_i+0xa8>
 800b11e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b122:	2b15      	cmp	r3, #21
 800b124:	d8f6      	bhi.n	800b114 <_printf_i+0x28>
 800b126:	a101      	add	r1, pc, #4	@ (adr r1, 800b12c <_printf_i+0x40>)
 800b128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b12c:	0800b185 	.word	0x0800b185
 800b130:	0800b199 	.word	0x0800b199
 800b134:	0800b115 	.word	0x0800b115
 800b138:	0800b115 	.word	0x0800b115
 800b13c:	0800b115 	.word	0x0800b115
 800b140:	0800b115 	.word	0x0800b115
 800b144:	0800b199 	.word	0x0800b199
 800b148:	0800b115 	.word	0x0800b115
 800b14c:	0800b115 	.word	0x0800b115
 800b150:	0800b115 	.word	0x0800b115
 800b154:	0800b115 	.word	0x0800b115
 800b158:	0800b299 	.word	0x0800b299
 800b15c:	0800b1c3 	.word	0x0800b1c3
 800b160:	0800b253 	.word	0x0800b253
 800b164:	0800b115 	.word	0x0800b115
 800b168:	0800b115 	.word	0x0800b115
 800b16c:	0800b2bb 	.word	0x0800b2bb
 800b170:	0800b115 	.word	0x0800b115
 800b174:	0800b1c3 	.word	0x0800b1c3
 800b178:	0800b115 	.word	0x0800b115
 800b17c:	0800b115 	.word	0x0800b115
 800b180:	0800b25b 	.word	0x0800b25b
 800b184:	6833      	ldr	r3, [r6, #0]
 800b186:	1d1a      	adds	r2, r3, #4
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	6032      	str	r2, [r6, #0]
 800b18c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b190:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b194:	2301      	movs	r3, #1
 800b196:	e09d      	b.n	800b2d4 <_printf_i+0x1e8>
 800b198:	6833      	ldr	r3, [r6, #0]
 800b19a:	6820      	ldr	r0, [r4, #0]
 800b19c:	1d19      	adds	r1, r3, #4
 800b19e:	6031      	str	r1, [r6, #0]
 800b1a0:	0606      	lsls	r6, r0, #24
 800b1a2:	d501      	bpl.n	800b1a8 <_printf_i+0xbc>
 800b1a4:	681d      	ldr	r5, [r3, #0]
 800b1a6:	e003      	b.n	800b1b0 <_printf_i+0xc4>
 800b1a8:	0645      	lsls	r5, r0, #25
 800b1aa:	d5fb      	bpl.n	800b1a4 <_printf_i+0xb8>
 800b1ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b1b0:	2d00      	cmp	r5, #0
 800b1b2:	da03      	bge.n	800b1bc <_printf_i+0xd0>
 800b1b4:	232d      	movs	r3, #45	@ 0x2d
 800b1b6:	426d      	negs	r5, r5
 800b1b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1bc:	4859      	ldr	r0, [pc, #356]	@ (800b324 <_printf_i+0x238>)
 800b1be:	230a      	movs	r3, #10
 800b1c0:	e011      	b.n	800b1e6 <_printf_i+0xfa>
 800b1c2:	6821      	ldr	r1, [r4, #0]
 800b1c4:	6833      	ldr	r3, [r6, #0]
 800b1c6:	0608      	lsls	r0, r1, #24
 800b1c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b1cc:	d402      	bmi.n	800b1d4 <_printf_i+0xe8>
 800b1ce:	0649      	lsls	r1, r1, #25
 800b1d0:	bf48      	it	mi
 800b1d2:	b2ad      	uxthmi	r5, r5
 800b1d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b1d6:	6033      	str	r3, [r6, #0]
 800b1d8:	4852      	ldr	r0, [pc, #328]	@ (800b324 <_printf_i+0x238>)
 800b1da:	bf14      	ite	ne
 800b1dc:	230a      	movne	r3, #10
 800b1de:	2308      	moveq	r3, #8
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b1e6:	6866      	ldr	r6, [r4, #4]
 800b1e8:	2e00      	cmp	r6, #0
 800b1ea:	60a6      	str	r6, [r4, #8]
 800b1ec:	bfa2      	ittt	ge
 800b1ee:	6821      	ldrge	r1, [r4, #0]
 800b1f0:	f021 0104 	bicge.w	r1, r1, #4
 800b1f4:	6021      	strge	r1, [r4, #0]
 800b1f6:	b90d      	cbnz	r5, 800b1fc <_printf_i+0x110>
 800b1f8:	2e00      	cmp	r6, #0
 800b1fa:	d04b      	beq.n	800b294 <_printf_i+0x1a8>
 800b1fc:	4616      	mov	r6, r2
 800b1fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800b202:	fb03 5711 	mls	r7, r3, r1, r5
 800b206:	5dc7      	ldrb	r7, [r0, r7]
 800b208:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b20c:	462f      	mov	r7, r5
 800b20e:	460d      	mov	r5, r1
 800b210:	42bb      	cmp	r3, r7
 800b212:	d9f4      	bls.n	800b1fe <_printf_i+0x112>
 800b214:	2b08      	cmp	r3, #8
 800b216:	d10b      	bne.n	800b230 <_printf_i+0x144>
 800b218:	6823      	ldr	r3, [r4, #0]
 800b21a:	07df      	lsls	r7, r3, #31
 800b21c:	d508      	bpl.n	800b230 <_printf_i+0x144>
 800b21e:	6923      	ldr	r3, [r4, #16]
 800b220:	6861      	ldr	r1, [r4, #4]
 800b222:	4299      	cmp	r1, r3
 800b224:	bfde      	ittt	le
 800b226:	2330      	movle	r3, #48	@ 0x30
 800b228:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b22c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b230:	1b92      	subs	r2, r2, r6
 800b232:	6122      	str	r2, [r4, #16]
 800b234:	464b      	mov	r3, r9
 800b236:	aa03      	add	r2, sp, #12
 800b238:	4621      	mov	r1, r4
 800b23a:	4640      	mov	r0, r8
 800b23c:	f8cd a000 	str.w	sl, [sp]
 800b240:	f7ff fee2 	bl	800b008 <_printf_common>
 800b244:	3001      	adds	r0, #1
 800b246:	d14a      	bne.n	800b2de <_printf_i+0x1f2>
 800b248:	f04f 30ff 	mov.w	r0, #4294967295
 800b24c:	b004      	add	sp, #16
 800b24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	f043 0320 	orr.w	r3, r3, #32
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	2778      	movs	r7, #120	@ 0x78
 800b25c:	4832      	ldr	r0, [pc, #200]	@ (800b328 <_printf_i+0x23c>)
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b264:	061f      	lsls	r7, r3, #24
 800b266:	6831      	ldr	r1, [r6, #0]
 800b268:	f851 5b04 	ldr.w	r5, [r1], #4
 800b26c:	d402      	bmi.n	800b274 <_printf_i+0x188>
 800b26e:	065f      	lsls	r7, r3, #25
 800b270:	bf48      	it	mi
 800b272:	b2ad      	uxthmi	r5, r5
 800b274:	6031      	str	r1, [r6, #0]
 800b276:	07d9      	lsls	r1, r3, #31
 800b278:	bf44      	itt	mi
 800b27a:	f043 0320 	orrmi.w	r3, r3, #32
 800b27e:	6023      	strmi	r3, [r4, #0]
 800b280:	b11d      	cbz	r5, 800b28a <_printf_i+0x19e>
 800b282:	2310      	movs	r3, #16
 800b284:	e7ac      	b.n	800b1e0 <_printf_i+0xf4>
 800b286:	4827      	ldr	r0, [pc, #156]	@ (800b324 <_printf_i+0x238>)
 800b288:	e7e9      	b.n	800b25e <_printf_i+0x172>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	f023 0320 	bic.w	r3, r3, #32
 800b290:	6023      	str	r3, [r4, #0]
 800b292:	e7f6      	b.n	800b282 <_printf_i+0x196>
 800b294:	4616      	mov	r6, r2
 800b296:	e7bd      	b.n	800b214 <_printf_i+0x128>
 800b298:	6833      	ldr	r3, [r6, #0]
 800b29a:	6825      	ldr	r5, [r4, #0]
 800b29c:	1d18      	adds	r0, r3, #4
 800b29e:	6961      	ldr	r1, [r4, #20]
 800b2a0:	6030      	str	r0, [r6, #0]
 800b2a2:	062e      	lsls	r6, r5, #24
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	d501      	bpl.n	800b2ac <_printf_i+0x1c0>
 800b2a8:	6019      	str	r1, [r3, #0]
 800b2aa:	e002      	b.n	800b2b2 <_printf_i+0x1c6>
 800b2ac:	0668      	lsls	r0, r5, #25
 800b2ae:	d5fb      	bpl.n	800b2a8 <_printf_i+0x1bc>
 800b2b0:	8019      	strh	r1, [r3, #0]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	4616      	mov	r6, r2
 800b2b6:	6123      	str	r3, [r4, #16]
 800b2b8:	e7bc      	b.n	800b234 <_printf_i+0x148>
 800b2ba:	6833      	ldr	r3, [r6, #0]
 800b2bc:	2100      	movs	r1, #0
 800b2be:	1d1a      	adds	r2, r3, #4
 800b2c0:	6032      	str	r2, [r6, #0]
 800b2c2:	681e      	ldr	r6, [r3, #0]
 800b2c4:	6862      	ldr	r2, [r4, #4]
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f000 f99a 	bl	800b600 <memchr>
 800b2cc:	b108      	cbz	r0, 800b2d2 <_printf_i+0x1e6>
 800b2ce:	1b80      	subs	r0, r0, r6
 800b2d0:	6060      	str	r0, [r4, #4]
 800b2d2:	6863      	ldr	r3, [r4, #4]
 800b2d4:	6123      	str	r3, [r4, #16]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2dc:	e7aa      	b.n	800b234 <_printf_i+0x148>
 800b2de:	6923      	ldr	r3, [r4, #16]
 800b2e0:	4632      	mov	r2, r6
 800b2e2:	4649      	mov	r1, r9
 800b2e4:	4640      	mov	r0, r8
 800b2e6:	47d0      	blx	sl
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	d0ad      	beq.n	800b248 <_printf_i+0x15c>
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	079b      	lsls	r3, r3, #30
 800b2f0:	d413      	bmi.n	800b31a <_printf_i+0x22e>
 800b2f2:	68e0      	ldr	r0, [r4, #12]
 800b2f4:	9b03      	ldr	r3, [sp, #12]
 800b2f6:	4298      	cmp	r0, r3
 800b2f8:	bfb8      	it	lt
 800b2fa:	4618      	movlt	r0, r3
 800b2fc:	e7a6      	b.n	800b24c <_printf_i+0x160>
 800b2fe:	2301      	movs	r3, #1
 800b300:	4632      	mov	r2, r6
 800b302:	4649      	mov	r1, r9
 800b304:	4640      	mov	r0, r8
 800b306:	47d0      	blx	sl
 800b308:	3001      	adds	r0, #1
 800b30a:	d09d      	beq.n	800b248 <_printf_i+0x15c>
 800b30c:	3501      	adds	r5, #1
 800b30e:	68e3      	ldr	r3, [r4, #12]
 800b310:	9903      	ldr	r1, [sp, #12]
 800b312:	1a5b      	subs	r3, r3, r1
 800b314:	42ab      	cmp	r3, r5
 800b316:	dcf2      	bgt.n	800b2fe <_printf_i+0x212>
 800b318:	e7eb      	b.n	800b2f2 <_printf_i+0x206>
 800b31a:	2500      	movs	r5, #0
 800b31c:	f104 0619 	add.w	r6, r4, #25
 800b320:	e7f5      	b.n	800b30e <_printf_i+0x222>
 800b322:	bf00      	nop
 800b324:	0800b911 	.word	0x0800b911
 800b328:	0800b922 	.word	0x0800b922

0800b32c <__sflush_r>:
 800b32c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b334:	0716      	lsls	r6, r2, #28
 800b336:	4605      	mov	r5, r0
 800b338:	460c      	mov	r4, r1
 800b33a:	d454      	bmi.n	800b3e6 <__sflush_r+0xba>
 800b33c:	684b      	ldr	r3, [r1, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	dc02      	bgt.n	800b348 <__sflush_r+0x1c>
 800b342:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b344:	2b00      	cmp	r3, #0
 800b346:	dd48      	ble.n	800b3da <__sflush_r+0xae>
 800b348:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b34a:	2e00      	cmp	r6, #0
 800b34c:	d045      	beq.n	800b3da <__sflush_r+0xae>
 800b34e:	2300      	movs	r3, #0
 800b350:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b354:	682f      	ldr	r7, [r5, #0]
 800b356:	6a21      	ldr	r1, [r4, #32]
 800b358:	602b      	str	r3, [r5, #0]
 800b35a:	d030      	beq.n	800b3be <__sflush_r+0x92>
 800b35c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b35e:	89a3      	ldrh	r3, [r4, #12]
 800b360:	0759      	lsls	r1, r3, #29
 800b362:	d505      	bpl.n	800b370 <__sflush_r+0x44>
 800b364:	6863      	ldr	r3, [r4, #4]
 800b366:	1ad2      	subs	r2, r2, r3
 800b368:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b36a:	b10b      	cbz	r3, 800b370 <__sflush_r+0x44>
 800b36c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b36e:	1ad2      	subs	r2, r2, r3
 800b370:	2300      	movs	r3, #0
 800b372:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b374:	6a21      	ldr	r1, [r4, #32]
 800b376:	4628      	mov	r0, r5
 800b378:	47b0      	blx	r6
 800b37a:	1c43      	adds	r3, r0, #1
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	d106      	bne.n	800b38e <__sflush_r+0x62>
 800b380:	6829      	ldr	r1, [r5, #0]
 800b382:	291d      	cmp	r1, #29
 800b384:	d82b      	bhi.n	800b3de <__sflush_r+0xb2>
 800b386:	4a2a      	ldr	r2, [pc, #168]	@ (800b430 <__sflush_r+0x104>)
 800b388:	410a      	asrs	r2, r1
 800b38a:	07d6      	lsls	r6, r2, #31
 800b38c:	d427      	bmi.n	800b3de <__sflush_r+0xb2>
 800b38e:	2200      	movs	r2, #0
 800b390:	04d9      	lsls	r1, r3, #19
 800b392:	6062      	str	r2, [r4, #4]
 800b394:	6922      	ldr	r2, [r4, #16]
 800b396:	6022      	str	r2, [r4, #0]
 800b398:	d504      	bpl.n	800b3a4 <__sflush_r+0x78>
 800b39a:	1c42      	adds	r2, r0, #1
 800b39c:	d101      	bne.n	800b3a2 <__sflush_r+0x76>
 800b39e:	682b      	ldr	r3, [r5, #0]
 800b3a0:	b903      	cbnz	r3, 800b3a4 <__sflush_r+0x78>
 800b3a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b3a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3a6:	602f      	str	r7, [r5, #0]
 800b3a8:	b1b9      	cbz	r1, 800b3da <__sflush_r+0xae>
 800b3aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3ae:	4299      	cmp	r1, r3
 800b3b0:	d002      	beq.n	800b3b8 <__sflush_r+0x8c>
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f7ff fa96 	bl	800a8e4 <_free_r>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3bc:	e00d      	b.n	800b3da <__sflush_r+0xae>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	47b0      	blx	r6
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	1c50      	adds	r0, r2, #1
 800b3c8:	d1c9      	bne.n	800b35e <__sflush_r+0x32>
 800b3ca:	682b      	ldr	r3, [r5, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d0c6      	beq.n	800b35e <__sflush_r+0x32>
 800b3d0:	2b1d      	cmp	r3, #29
 800b3d2:	d001      	beq.n	800b3d8 <__sflush_r+0xac>
 800b3d4:	2b16      	cmp	r3, #22
 800b3d6:	d11d      	bne.n	800b414 <__sflush_r+0xe8>
 800b3d8:	602f      	str	r7, [r5, #0]
 800b3da:	2000      	movs	r0, #0
 800b3dc:	e021      	b.n	800b422 <__sflush_r+0xf6>
 800b3de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3e2:	b21b      	sxth	r3, r3
 800b3e4:	e01a      	b.n	800b41c <__sflush_r+0xf0>
 800b3e6:	690f      	ldr	r7, [r1, #16]
 800b3e8:	2f00      	cmp	r7, #0
 800b3ea:	d0f6      	beq.n	800b3da <__sflush_r+0xae>
 800b3ec:	0793      	lsls	r3, r2, #30
 800b3ee:	680e      	ldr	r6, [r1, #0]
 800b3f0:	600f      	str	r7, [r1, #0]
 800b3f2:	bf0c      	ite	eq
 800b3f4:	694b      	ldreq	r3, [r1, #20]
 800b3f6:	2300      	movne	r3, #0
 800b3f8:	eba6 0807 	sub.w	r8, r6, r7
 800b3fc:	608b      	str	r3, [r1, #8]
 800b3fe:	f1b8 0f00 	cmp.w	r8, #0
 800b402:	ddea      	ble.n	800b3da <__sflush_r+0xae>
 800b404:	4643      	mov	r3, r8
 800b406:	463a      	mov	r2, r7
 800b408:	6a21      	ldr	r1, [r4, #32]
 800b40a:	4628      	mov	r0, r5
 800b40c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b40e:	47b0      	blx	r6
 800b410:	2800      	cmp	r0, #0
 800b412:	dc08      	bgt.n	800b426 <__sflush_r+0xfa>
 800b414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295
 800b420:	81a3      	strh	r3, [r4, #12]
 800b422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b426:	4407      	add	r7, r0
 800b428:	eba8 0800 	sub.w	r8, r8, r0
 800b42c:	e7e7      	b.n	800b3fe <__sflush_r+0xd2>
 800b42e:	bf00      	nop
 800b430:	dfbffffe 	.word	0xdfbffffe

0800b434 <_fflush_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	690b      	ldr	r3, [r1, #16]
 800b438:	4605      	mov	r5, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	b913      	cbnz	r3, 800b444 <_fflush_r+0x10>
 800b43e:	2500      	movs	r5, #0
 800b440:	4628      	mov	r0, r5
 800b442:	bd38      	pop	{r3, r4, r5, pc}
 800b444:	b118      	cbz	r0, 800b44e <_fflush_r+0x1a>
 800b446:	6a03      	ldr	r3, [r0, #32]
 800b448:	b90b      	cbnz	r3, 800b44e <_fflush_r+0x1a>
 800b44a:	f7ff f923 	bl	800a694 <__sinit>
 800b44e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d0f3      	beq.n	800b43e <_fflush_r+0xa>
 800b456:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b458:	07d0      	lsls	r0, r2, #31
 800b45a:	d404      	bmi.n	800b466 <_fflush_r+0x32>
 800b45c:	0599      	lsls	r1, r3, #22
 800b45e:	d402      	bmi.n	800b466 <_fflush_r+0x32>
 800b460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b462:	f7ff fa3c 	bl	800a8de <__retarget_lock_acquire_recursive>
 800b466:	4628      	mov	r0, r5
 800b468:	4621      	mov	r1, r4
 800b46a:	f7ff ff5f 	bl	800b32c <__sflush_r>
 800b46e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b470:	4605      	mov	r5, r0
 800b472:	07da      	lsls	r2, r3, #31
 800b474:	d4e4      	bmi.n	800b440 <_fflush_r+0xc>
 800b476:	89a3      	ldrh	r3, [r4, #12]
 800b478:	059b      	lsls	r3, r3, #22
 800b47a:	d4e1      	bmi.n	800b440 <_fflush_r+0xc>
 800b47c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b47e:	f7ff fa2f 	bl	800a8e0 <__retarget_lock_release_recursive>
 800b482:	e7dd      	b.n	800b440 <_fflush_r+0xc>

0800b484 <__swbuf_r>:
 800b484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b486:	460e      	mov	r6, r1
 800b488:	4614      	mov	r4, r2
 800b48a:	4605      	mov	r5, r0
 800b48c:	b118      	cbz	r0, 800b496 <__swbuf_r+0x12>
 800b48e:	6a03      	ldr	r3, [r0, #32]
 800b490:	b90b      	cbnz	r3, 800b496 <__swbuf_r+0x12>
 800b492:	f7ff f8ff 	bl	800a694 <__sinit>
 800b496:	69a3      	ldr	r3, [r4, #24]
 800b498:	60a3      	str	r3, [r4, #8]
 800b49a:	89a3      	ldrh	r3, [r4, #12]
 800b49c:	071a      	lsls	r2, r3, #28
 800b49e:	d501      	bpl.n	800b4a4 <__swbuf_r+0x20>
 800b4a0:	6923      	ldr	r3, [r4, #16]
 800b4a2:	b943      	cbnz	r3, 800b4b6 <__swbuf_r+0x32>
 800b4a4:	4621      	mov	r1, r4
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	f000 f82a 	bl	800b500 <__swsetup_r>
 800b4ac:	b118      	cbz	r0, 800b4b6 <__swbuf_r+0x32>
 800b4ae:	f04f 37ff 	mov.w	r7, #4294967295
 800b4b2:	4638      	mov	r0, r7
 800b4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	b2f6      	uxtb	r6, r6
 800b4ba:	6922      	ldr	r2, [r4, #16]
 800b4bc:	4637      	mov	r7, r6
 800b4be:	1a98      	subs	r0, r3, r2
 800b4c0:	6963      	ldr	r3, [r4, #20]
 800b4c2:	4283      	cmp	r3, r0
 800b4c4:	dc05      	bgt.n	800b4d2 <__swbuf_r+0x4e>
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	f7ff ffb3 	bl	800b434 <_fflush_r>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d1ed      	bne.n	800b4ae <__swbuf_r+0x2a>
 800b4d2:	68a3      	ldr	r3, [r4, #8]
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	60a3      	str	r3, [r4, #8]
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	1c5a      	adds	r2, r3, #1
 800b4dc:	6022      	str	r2, [r4, #0]
 800b4de:	701e      	strb	r6, [r3, #0]
 800b4e0:	1c43      	adds	r3, r0, #1
 800b4e2:	6962      	ldr	r2, [r4, #20]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d004      	beq.n	800b4f2 <__swbuf_r+0x6e>
 800b4e8:	89a3      	ldrh	r3, [r4, #12]
 800b4ea:	07db      	lsls	r3, r3, #31
 800b4ec:	d5e1      	bpl.n	800b4b2 <__swbuf_r+0x2e>
 800b4ee:	2e0a      	cmp	r6, #10
 800b4f0:	d1df      	bne.n	800b4b2 <__swbuf_r+0x2e>
 800b4f2:	4621      	mov	r1, r4
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	f7ff ff9d 	bl	800b434 <_fflush_r>
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d0d9      	beq.n	800b4b2 <__swbuf_r+0x2e>
 800b4fe:	e7d6      	b.n	800b4ae <__swbuf_r+0x2a>

0800b500 <__swsetup_r>:
 800b500:	b538      	push	{r3, r4, r5, lr}
 800b502:	4b29      	ldr	r3, [pc, #164]	@ (800b5a8 <__swsetup_r+0xa8>)
 800b504:	4605      	mov	r5, r0
 800b506:	460c      	mov	r4, r1
 800b508:	6818      	ldr	r0, [r3, #0]
 800b50a:	b118      	cbz	r0, 800b514 <__swsetup_r+0x14>
 800b50c:	6a03      	ldr	r3, [r0, #32]
 800b50e:	b90b      	cbnz	r3, 800b514 <__swsetup_r+0x14>
 800b510:	f7ff f8c0 	bl	800a694 <__sinit>
 800b514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b518:	0719      	lsls	r1, r3, #28
 800b51a:	d422      	bmi.n	800b562 <__swsetup_r+0x62>
 800b51c:	06da      	lsls	r2, r3, #27
 800b51e:	d407      	bmi.n	800b530 <__swsetup_r+0x30>
 800b520:	2209      	movs	r2, #9
 800b522:	602a      	str	r2, [r5, #0]
 800b524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b528:	f04f 30ff 	mov.w	r0, #4294967295
 800b52c:	81a3      	strh	r3, [r4, #12]
 800b52e:	e033      	b.n	800b598 <__swsetup_r+0x98>
 800b530:	0758      	lsls	r0, r3, #29
 800b532:	d512      	bpl.n	800b55a <__swsetup_r+0x5a>
 800b534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b536:	b141      	cbz	r1, 800b54a <__swsetup_r+0x4a>
 800b538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b53c:	4299      	cmp	r1, r3
 800b53e:	d002      	beq.n	800b546 <__swsetup_r+0x46>
 800b540:	4628      	mov	r0, r5
 800b542:	f7ff f9cf 	bl	800a8e4 <_free_r>
 800b546:	2300      	movs	r3, #0
 800b548:	6363      	str	r3, [r4, #52]	@ 0x34
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b550:	81a3      	strh	r3, [r4, #12]
 800b552:	2300      	movs	r3, #0
 800b554:	6063      	str	r3, [r4, #4]
 800b556:	6923      	ldr	r3, [r4, #16]
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	f043 0308 	orr.w	r3, r3, #8
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	6923      	ldr	r3, [r4, #16]
 800b564:	b94b      	cbnz	r3, 800b57a <__swsetup_r+0x7a>
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b56c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b570:	d003      	beq.n	800b57a <__swsetup_r+0x7a>
 800b572:	4621      	mov	r1, r4
 800b574:	4628      	mov	r0, r5
 800b576:	f000 f8b1 	bl	800b6dc <__smakebuf_r>
 800b57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b57e:	f013 0201 	ands.w	r2, r3, #1
 800b582:	d00a      	beq.n	800b59a <__swsetup_r+0x9a>
 800b584:	2200      	movs	r2, #0
 800b586:	60a2      	str	r2, [r4, #8]
 800b588:	6962      	ldr	r2, [r4, #20]
 800b58a:	4252      	negs	r2, r2
 800b58c:	61a2      	str	r2, [r4, #24]
 800b58e:	6922      	ldr	r2, [r4, #16]
 800b590:	b942      	cbnz	r2, 800b5a4 <__swsetup_r+0xa4>
 800b592:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b596:	d1c5      	bne.n	800b524 <__swsetup_r+0x24>
 800b598:	bd38      	pop	{r3, r4, r5, pc}
 800b59a:	0799      	lsls	r1, r3, #30
 800b59c:	bf58      	it	pl
 800b59e:	6962      	ldrpl	r2, [r4, #20]
 800b5a0:	60a2      	str	r2, [r4, #8]
 800b5a2:	e7f4      	b.n	800b58e <__swsetup_r+0x8e>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	e7f7      	b.n	800b598 <__swsetup_r+0x98>
 800b5a8:	20000018 	.word	0x20000018

0800b5ac <memmove>:
 800b5ac:	4288      	cmp	r0, r1
 800b5ae:	b510      	push	{r4, lr}
 800b5b0:	eb01 0402 	add.w	r4, r1, r2
 800b5b4:	d902      	bls.n	800b5bc <memmove+0x10>
 800b5b6:	4284      	cmp	r4, r0
 800b5b8:	4623      	mov	r3, r4
 800b5ba:	d807      	bhi.n	800b5cc <memmove+0x20>
 800b5bc:	1e43      	subs	r3, r0, #1
 800b5be:	42a1      	cmp	r1, r4
 800b5c0:	d008      	beq.n	800b5d4 <memmove+0x28>
 800b5c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5ca:	e7f8      	b.n	800b5be <memmove+0x12>
 800b5cc:	4402      	add	r2, r0
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	428a      	cmp	r2, r1
 800b5d2:	d100      	bne.n	800b5d6 <memmove+0x2a>
 800b5d4:	bd10      	pop	{r4, pc}
 800b5d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5de:	e7f7      	b.n	800b5d0 <memmove+0x24>

0800b5e0 <_sbrk_r>:
 800b5e0:	b538      	push	{r3, r4, r5, lr}
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	4d05      	ldr	r5, [pc, #20]	@ (800b5fc <_sbrk_r+0x1c>)
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	4608      	mov	r0, r1
 800b5ea:	602b      	str	r3, [r5, #0]
 800b5ec:	f7f5 fe1e 	bl	800122c <_sbrk>
 800b5f0:	1c43      	adds	r3, r0, #1
 800b5f2:	d102      	bne.n	800b5fa <_sbrk_r+0x1a>
 800b5f4:	682b      	ldr	r3, [r5, #0]
 800b5f6:	b103      	cbz	r3, 800b5fa <_sbrk_r+0x1a>
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	20000888 	.word	0x20000888

0800b600 <memchr>:
 800b600:	b2c9      	uxtb	r1, r1
 800b602:	4603      	mov	r3, r0
 800b604:	4402      	add	r2, r0
 800b606:	b510      	push	{r4, lr}
 800b608:	4293      	cmp	r3, r2
 800b60a:	4618      	mov	r0, r3
 800b60c:	d101      	bne.n	800b612 <memchr+0x12>
 800b60e:	2000      	movs	r0, #0
 800b610:	e003      	b.n	800b61a <memchr+0x1a>
 800b612:	7804      	ldrb	r4, [r0, #0]
 800b614:	3301      	adds	r3, #1
 800b616:	428c      	cmp	r4, r1
 800b618:	d1f6      	bne.n	800b608 <memchr+0x8>
 800b61a:	bd10      	pop	{r4, pc}

0800b61c <memcpy>:
 800b61c:	440a      	add	r2, r1
 800b61e:	1e43      	subs	r3, r0, #1
 800b620:	4291      	cmp	r1, r2
 800b622:	d100      	bne.n	800b626 <memcpy+0xa>
 800b624:	4770      	bx	lr
 800b626:	b510      	push	{r4, lr}
 800b628:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b62c:	4291      	cmp	r1, r2
 800b62e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b632:	d1f9      	bne.n	800b628 <memcpy+0xc>
 800b634:	bd10      	pop	{r4, pc}

0800b636 <_realloc_r>:
 800b636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b63a:	4680      	mov	r8, r0
 800b63c:	4615      	mov	r5, r2
 800b63e:	460c      	mov	r4, r1
 800b640:	b921      	cbnz	r1, 800b64c <_realloc_r+0x16>
 800b642:	4611      	mov	r1, r2
 800b644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b648:	f7ff b9b8 	b.w	800a9bc <_malloc_r>
 800b64c:	b92a      	cbnz	r2, 800b65a <_realloc_r+0x24>
 800b64e:	f7ff f949 	bl	800a8e4 <_free_r>
 800b652:	2400      	movs	r4, #0
 800b654:	4620      	mov	r0, r4
 800b656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b65a:	f000 f89d 	bl	800b798 <_malloc_usable_size_r>
 800b65e:	4285      	cmp	r5, r0
 800b660:	4606      	mov	r6, r0
 800b662:	d802      	bhi.n	800b66a <_realloc_r+0x34>
 800b664:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b668:	d8f4      	bhi.n	800b654 <_realloc_r+0x1e>
 800b66a:	4629      	mov	r1, r5
 800b66c:	4640      	mov	r0, r8
 800b66e:	f7ff f9a5 	bl	800a9bc <_malloc_r>
 800b672:	4607      	mov	r7, r0
 800b674:	2800      	cmp	r0, #0
 800b676:	d0ec      	beq.n	800b652 <_realloc_r+0x1c>
 800b678:	42b5      	cmp	r5, r6
 800b67a:	462a      	mov	r2, r5
 800b67c:	4621      	mov	r1, r4
 800b67e:	bf28      	it	cs
 800b680:	4632      	movcs	r2, r6
 800b682:	f7ff ffcb 	bl	800b61c <memcpy>
 800b686:	4621      	mov	r1, r4
 800b688:	4640      	mov	r0, r8
 800b68a:	463c      	mov	r4, r7
 800b68c:	f7ff f92a 	bl	800a8e4 <_free_r>
 800b690:	e7e0      	b.n	800b654 <_realloc_r+0x1e>

0800b692 <__swhatbuf_r>:
 800b692:	b570      	push	{r4, r5, r6, lr}
 800b694:	460c      	mov	r4, r1
 800b696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b69a:	b096      	sub	sp, #88	@ 0x58
 800b69c:	4615      	mov	r5, r2
 800b69e:	2900      	cmp	r1, #0
 800b6a0:	461e      	mov	r6, r3
 800b6a2:	da0c      	bge.n	800b6be <__swhatbuf_r+0x2c>
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b6ac:	bf14      	ite	ne
 800b6ae:	2340      	movne	r3, #64	@ 0x40
 800b6b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	6031      	str	r1, [r6, #0]
 800b6b8:	602b      	str	r3, [r5, #0]
 800b6ba:	b016      	add	sp, #88	@ 0x58
 800b6bc:	bd70      	pop	{r4, r5, r6, pc}
 800b6be:	466a      	mov	r2, sp
 800b6c0:	f000 f848 	bl	800b754 <_fstat_r>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	dbed      	blt.n	800b6a4 <__swhatbuf_r+0x12>
 800b6c8:	9901      	ldr	r1, [sp, #4]
 800b6ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b6ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b6d2:	4259      	negs	r1, r3
 800b6d4:	4159      	adcs	r1, r3
 800b6d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b6da:	e7eb      	b.n	800b6b4 <__swhatbuf_r+0x22>

0800b6dc <__smakebuf_r>:
 800b6dc:	898b      	ldrh	r3, [r1, #12]
 800b6de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6e0:	079d      	lsls	r5, r3, #30
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	460c      	mov	r4, r1
 800b6e6:	d507      	bpl.n	800b6f8 <__smakebuf_r+0x1c>
 800b6e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	6123      	str	r3, [r4, #16]
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	6163      	str	r3, [r4, #20]
 800b6f4:	b003      	add	sp, #12
 800b6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6f8:	ab01      	add	r3, sp, #4
 800b6fa:	466a      	mov	r2, sp
 800b6fc:	f7ff ffc9 	bl	800b692 <__swhatbuf_r>
 800b700:	9f00      	ldr	r7, [sp, #0]
 800b702:	4605      	mov	r5, r0
 800b704:	4630      	mov	r0, r6
 800b706:	4639      	mov	r1, r7
 800b708:	f7ff f958 	bl	800a9bc <_malloc_r>
 800b70c:	b948      	cbnz	r0, 800b722 <__smakebuf_r+0x46>
 800b70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b712:	059a      	lsls	r2, r3, #22
 800b714:	d4ee      	bmi.n	800b6f4 <__smakebuf_r+0x18>
 800b716:	f023 0303 	bic.w	r3, r3, #3
 800b71a:	f043 0302 	orr.w	r3, r3, #2
 800b71e:	81a3      	strh	r3, [r4, #12]
 800b720:	e7e2      	b.n	800b6e8 <__smakebuf_r+0xc>
 800b722:	89a3      	ldrh	r3, [r4, #12]
 800b724:	6020      	str	r0, [r4, #0]
 800b726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b72a:	81a3      	strh	r3, [r4, #12]
 800b72c:	9b01      	ldr	r3, [sp, #4]
 800b72e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b732:	b15b      	cbz	r3, 800b74c <__smakebuf_r+0x70>
 800b734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b738:	4630      	mov	r0, r6
 800b73a:	f000 f81d 	bl	800b778 <_isatty_r>
 800b73e:	b128      	cbz	r0, 800b74c <__smakebuf_r+0x70>
 800b740:	89a3      	ldrh	r3, [r4, #12]
 800b742:	f023 0303 	bic.w	r3, r3, #3
 800b746:	f043 0301 	orr.w	r3, r3, #1
 800b74a:	81a3      	strh	r3, [r4, #12]
 800b74c:	89a3      	ldrh	r3, [r4, #12]
 800b74e:	431d      	orrs	r5, r3
 800b750:	81a5      	strh	r5, [r4, #12]
 800b752:	e7cf      	b.n	800b6f4 <__smakebuf_r+0x18>

0800b754 <_fstat_r>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	2300      	movs	r3, #0
 800b758:	4d06      	ldr	r5, [pc, #24]	@ (800b774 <_fstat_r+0x20>)
 800b75a:	4604      	mov	r4, r0
 800b75c:	4608      	mov	r0, r1
 800b75e:	4611      	mov	r1, r2
 800b760:	602b      	str	r3, [r5, #0]
 800b762:	f7f5 fd3a 	bl	80011da <_fstat>
 800b766:	1c43      	adds	r3, r0, #1
 800b768:	d102      	bne.n	800b770 <_fstat_r+0x1c>
 800b76a:	682b      	ldr	r3, [r5, #0]
 800b76c:	b103      	cbz	r3, 800b770 <_fstat_r+0x1c>
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	bd38      	pop	{r3, r4, r5, pc}
 800b772:	bf00      	nop
 800b774:	20000888 	.word	0x20000888

0800b778 <_isatty_r>:
 800b778:	b538      	push	{r3, r4, r5, lr}
 800b77a:	2300      	movs	r3, #0
 800b77c:	4d05      	ldr	r5, [pc, #20]	@ (800b794 <_isatty_r+0x1c>)
 800b77e:	4604      	mov	r4, r0
 800b780:	4608      	mov	r0, r1
 800b782:	602b      	str	r3, [r5, #0]
 800b784:	f7f5 fd39 	bl	80011fa <_isatty>
 800b788:	1c43      	adds	r3, r0, #1
 800b78a:	d102      	bne.n	800b792 <_isatty_r+0x1a>
 800b78c:	682b      	ldr	r3, [r5, #0]
 800b78e:	b103      	cbz	r3, 800b792 <_isatty_r+0x1a>
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	bd38      	pop	{r3, r4, r5, pc}
 800b794:	20000888 	.word	0x20000888

0800b798 <_malloc_usable_size_r>:
 800b798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b79c:	1f18      	subs	r0, r3, #4
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	bfbc      	itt	lt
 800b7a2:	580b      	ldrlt	r3, [r1, r0]
 800b7a4:	18c0      	addlt	r0, r0, r3
 800b7a6:	4770      	bx	lr

0800b7a8 <_init>:
 800b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7aa:	bf00      	nop
 800b7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ae:	bc08      	pop	{r3}
 800b7b0:	469e      	mov	lr, r3
 800b7b2:	4770      	bx	lr

0800b7b4 <_fini>:
 800b7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b6:	bf00      	nop
 800b7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ba:	bc08      	pop	{r3}
 800b7bc:	469e      	mov	lr, r3
 800b7be:	4770      	bx	lr
