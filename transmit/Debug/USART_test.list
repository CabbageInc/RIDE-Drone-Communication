
USART_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aae4  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013f  0800ad1c  0800ad1c  0000bd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ae5c  0800ae5c  0000be5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ae64  0800ae64  0000be64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ae68  0800ae68  0000be68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000074  20000000  0800ae6c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000081c  20000074  0800aee0  0000c074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000890  0800aee0  0000c890  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018c9a  00000000  00000000  0000c0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000300c  00000000  00000000  00024d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001330  00000000  00000000  00027d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ebe  00000000  00000000  00029080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036b70  00000000  00000000  00029f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018b93  00000000  00000000  00060aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ab42  00000000  00000000  00079641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d4183  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000056d0  00000000  00000000  001d41c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  001d9898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000074 	.word	0x20000074
 8000254:	00000000 	.word	0x00000000
 8000258:	0800ad04 	.word	0x0800ad04

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000078 	.word	0x20000078
 8000274:	0800ad04 	.word	0x0800ad04

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800059a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800059e:	4909      	ldr	r1, [pc, #36]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b4:	68fb      	ldr	r3, [r7, #12]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	46020c00 	.word	0x46020c00

080005c8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005d0:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005d6:	4909      	ldr	r1, [pc, #36]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4313      	orrs	r3, r2
 80005dc:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ec:	68fb      	ldr	r3, [r7, #12]
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	46020c00 	.word	0x46020c00

08000600 <HAL_UART_RxCpltCallback>:
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* Callback for when data is received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a19      	ldr	r2, [pc, #100]	@ (8000674 <HAL_UART_RxCpltCallback+0x74>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d12b      	bne.n	800066a <HAL_UART_RxCpltCallback+0x6a>
        // Store received byte in buffer for later use
        rxData[indx++] = receivedByte; // Storing in rxData array (expand this as needed)
 8000612:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <HAL_UART_RxCpltCallback+0x78>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	4917      	ldr	r1, [pc, #92]	@ (8000678 <HAL_UART_RxCpltCallback+0x78>)
 800061a:	600a      	str	r2, [r1, #0]
 800061c:	4a17      	ldr	r2, [pc, #92]	@ (800067c <HAL_UART_RxCpltCallback+0x7c>)
 800061e:	7811      	ldrb	r1, [r2, #0]
 8000620:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <HAL_UART_RxCpltCallback+0x80>)
 8000622:	54d1      	strb	r1, [r2, r3]

        sprintf(msg, "0x%X ", rxData[indx]); // create msg string to echo to serial monitor
 8000624:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <HAL_UART_RxCpltCallback+0x78>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a15      	ldr	r2, [pc, #84]	@ (8000680 <HAL_UART_RxCpltCallback+0x80>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	461a      	mov	r2, r3
 800062e:	4915      	ldr	r1, [pc, #84]	@ (8000684 <HAL_UART_RxCpltCallback+0x84>)
 8000630:	4815      	ldr	r0, [pc, #84]	@ (8000688 <HAL_UART_RxCpltCallback+0x88>)
 8000632:	f009 feb5 	bl	800a3a0 <siprintf>

        HAL_UART_Transmit(huart, (uint8_t*)msg, sizeof(msg), 1000);
 8000636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800063a:	2206      	movs	r2, #6
 800063c:	4912      	ldr	r1, [pc, #72]	@ (8000688 <HAL_UART_RxCpltCallback+0x88>)
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f006 ffc2 	bl	80075c8 <HAL_UART_Transmit>

        if(indx > 7){
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <HAL_UART_RxCpltCallback+0x78>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b07      	cmp	r3, #7
 800064a:	dd09      	ble.n	8000660 <HAL_UART_RxCpltCallback+0x60>
        	indx = 0;
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <HAL_UART_RxCpltCallback+0x78>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
        	HAL_UART_Transmit(huart, (uint8_t*)"\n", 1, 1000);
 8000652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000656:	2201      	movs	r2, #1
 8000658:	490c      	ldr	r1, [pc, #48]	@ (800068c <HAL_UART_RxCpltCallback+0x8c>)
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f006 ffb4 	bl	80075c8 <HAL_UART_Transmit>
        }

        // Continue receiving the next byte using interrupt
        HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	4906      	ldr	r1, [pc, #24]	@ (800067c <HAL_UART_RxCpltCallback+0x7c>)
 8000664:	480a      	ldr	r0, [pc, #40]	@ (8000690 <HAL_UART_RxCpltCallback+0x90>)
 8000666:	f007 f84d 	bl	8007704 <HAL_UART_Receive_IT>
    }
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40004400 	.word	0x40004400
 8000678:	20000734 	.word	0x20000734
 800067c:	20000730 	.word	0x20000730
 8000680:	20000728 	.word	0x20000728
 8000684:	0800ad1c 	.word	0x0800ad1c
 8000688:	20000738 	.word	0x20000738
 800068c:	0800ad24 	.word	0x0800ad24
 8000690:	200001b0 	.word	0x200001b0

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fd72 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f828 	bl	80006f0 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80006a0:	f000 f88a 	bl	80007b8 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 f9ee 	bl	8000a84 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006a8:	f000 f894 	bl	80007d4 <MX_ADC1_Init>
  MX_ICACHE_Init();
 80006ac:	f000 f8d6 	bl	800085c <MX_ICACHE_Init>
  MX_UCPD1_Init();
 80006b0:	f000 f8e8 	bl	8000884 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006b4:	f000 f9b4 	bl	8000a20 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 80006b8:	f000 f91a 	bl	80008f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006bc:	f000 f964 	bl	8000988 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 80006c0:	2201      	movs	r2, #1
 80006c2:	4908      	ldr	r1, [pc, #32]	@ (80006e4 <main+0x50>)
 80006c4:	4808      	ldr	r0, [pc, #32]	@ (80006e8 <main+0x54>)
 80006c6:	f007 f81d 	bl	8007704 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_UART_Transmit(&huart2, txData, sizeof(txData), 1000);
 80006ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ce:	2218      	movs	r2, #24
 80006d0:	4906      	ldr	r1, [pc, #24]	@ (80006ec <main+0x58>)
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <main+0x54>)
 80006d4:	f006 ff78 	bl	80075c8 <HAL_UART_Transmit>

	HAL_Delay(1000);
 80006d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006dc:	f000 fe16 	bl	800130c <HAL_Delay>
	HAL_UART_Transmit(&huart2, txData, sizeof(txData), 1000);
 80006e0:	bf00      	nop
 80006e2:	e7f2      	b.n	80006ca <main+0x36>
 80006e4:	20000730 	.word	0x20000730
 80006e8:	200001b0 	.word	0x200001b0
 80006ec:	20000000 	.word	0x20000000

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09e      	sub	sp, #120	@ 0x78
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0318 	add.w	r3, r7, #24
 80006fa:	2260      	movs	r2, #96	@ 0x60
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f009 fe6e 	bl	800a3e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	463b      	mov	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
 8000712:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000714:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000718:	f002 feb6 	bl	8003488 <HAL_PWREx_ControlVoltageScaling>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000722:	f000 fa65 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000726:	2332      	movs	r3, #50	@ 0x32
 8000728:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800072e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000730:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000734:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000736:	2310      	movs	r3, #16
 8000738:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800073a:	2301      	movs	r3, #1
 800073c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800073e:	2310      	movs	r3, #16
 8000740:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000742:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800074c:	2301      	movs	r3, #1
 800074e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000758:	2350      	movs	r3, #80	@ 0x50
 800075a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000768:	2300      	movs	r3, #0
 800076a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0318 	add.w	r3, r7, #24
 8000774:	4618      	mov	r0, r3
 8000776:	f002 ff93 	bl	80036a0 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000780:	f000 fa36 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	231f      	movs	r3, #31
 8000786:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2303      	movs	r3, #3
 800078a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	2104      	movs	r1, #4
 80007a0:	4618      	mov	r0, r3
 80007a2:	f003 fe59 	bl	8004458 <HAL_RCC_ClockConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007ac:	f000 fa20 	bl	8000bf0 <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3778      	adds	r7, #120	@ 0x78
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80007bc:	f002 ff50 	bl	8003660 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80007c0:	2002      	movs	r0, #2
 80007c2:	f002 feed 	bl	80035a0 <HAL_PWREx_ConfigSupply>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80007cc:	f000 fa10 	bl	8000bf0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <MX_ADC1_Init+0x80>)
 80007da:	4a1f      	ldr	r2, [pc, #124]	@ (8000858 <MX_ADC1_Init+0x84>)
 80007dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <MX_ADC1_Init+0x80>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <MX_ADC1_Init+0x80>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MX_ADC1_Init+0x80>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <MX_ADC1_Init+0x80>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <MX_ADC1_Init+0x80>)
 80007f8:	2204      	movs	r2, #4
 80007fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007fc:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <MX_ADC1_Init+0x80>)
 80007fe:	2200      	movs	r2, #0
 8000800:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000802:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_ADC1_Init+0x80>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 800080a:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <MX_ADC1_Init+0x80>)
 800080c:	2201      	movs	r2, #1
 800080e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000810:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <MX_ADC1_Init+0x80>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000818:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_ADC1_Init+0x80>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_ADC1_Init+0x80>)
 8000822:	2200      	movs	r2, #0
 8000824:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_ADC1_Init+0x80>)
 8000828:	2200      	movs	r2, #0
 800082a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_ADC1_Init+0x80>)
 800082e:	2200      	movs	r2, #0
 8000830:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_ADC1_Init+0x80>)
 8000834:	2200      	movs	r2, #0
 8000836:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_ADC1_Init+0x80>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_ADC1_Init+0x80>)
 8000842:	f000 fe85 	bl	8001550 <HAL_ADC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 800084c:	f000 f9d0 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000090 	.word	0x20000090
 8000858:	42028000 	.word	0x42028000

0800085c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000860:	2000      	movs	r0, #0
 8000862:	f001 fd69 	bl	8002338 <HAL_ICACHE_ConfigAssociativityMode>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800086c:	f000 f9c0 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000870:	f001 fd82 	bl	8002378 <HAL_ICACHE_Enable>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800087a:	f000 f9b9 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
 8000898:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800089a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800089e:	f7ff fe93 	bl	80005c8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff fe74 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f7ff fe71 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80008ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008b4:	2303      	movs	r3, #3
 80008b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008bc:	463b      	mov	r3, r7
 80008be:	4619      	mov	r1, r3
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <MX_UCPD1_Init+0x64>)
 80008c2:	f008 ff22 	bl	800970a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80008c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008cc:	2303      	movs	r3, #3
 80008ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_UCPD1_Init+0x68>)
 80008da:	f008 ff16 	bl	800970a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	42020400 	.word	0x42020400
 80008ec:	42020000 	.word	0x42020000

080008f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f4:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 80008f6:	4a23      	ldr	r2, [pc, #140]	@ (8000984 <MX_USART1_UART_Init+0x94>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008fa:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000932:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000938:	4811      	ldr	r0, [pc, #68]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 800093a:	f006 fdf5 	bl	8007528 <HAL_UART_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000944:	f000 f954 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	480d      	ldr	r0, [pc, #52]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 800094c:	f008 fcc7 	bl	80092de <HAL_UARTEx_SetTxFifoThreshold>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000956:	f000 f94b 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4808      	ldr	r0, [pc, #32]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 800095e:	f008 fcfc 	bl	800935a <HAL_UARTEx_SetRxFifoThreshold>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000968:	f000 f942 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	@ (8000980 <MX_USART1_UART_Init+0x90>)
 800096e:	f008 fc7d 	bl	800926c <HAL_UARTEx_DisableFifoMode>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000978:	f000 f93a 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	2000011c 	.word	0x2000011c
 8000984:	40013800 	.word	0x40013800

08000988 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800098c:	4b22      	ldr	r3, [pc, #136]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 800098e:	4a23      	ldr	r2, [pc, #140]	@ (8000a1c <MX_USART2_UART_Init+0x94>)
 8000990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000992:	4b21      	ldr	r3, [pc, #132]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c4:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ca:	4b13      	ldr	r3, [pc, #76]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d0:	4811      	ldr	r0, [pc, #68]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 80009d2:	f006 fda9 	bl	8007528 <HAL_UART_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009dc:	f000 f908 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	480d      	ldr	r0, [pc, #52]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 80009e4:	f008 fc7b 	bl	80092de <HAL_UARTEx_SetTxFifoThreshold>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ee:	f000 f8ff 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4808      	ldr	r0, [pc, #32]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 80009f6:	f008 fcb0 	bl	800935a <HAL_UARTEx_SetRxFifoThreshold>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a00:	f000 f8f6 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <MX_USART2_UART_Init+0x90>)
 8000a06:	f008 fc31 	bl	800926c <HAL_UARTEx_DisableFifoMode>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a10:	f000 f8ee 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200001b0 	.word	0x200001b0
 8000a1c:	40004400 	.word	0x40004400

08000a20 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a24:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a26:	4a16      	ldr	r2, [pc, #88]	@ (8000a80 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a28:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2c:	2206      	movs	r2, #6
 8000a2e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a54:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a68:	f001 fc96 	bl	8002398 <HAL_PCD_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a72:	f000 f8bd 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000244 	.word	0x20000244
 8000a80:	42040000 	.word	0x42040000

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	4b50      	ldr	r3, [pc, #320]	@ (8000bdc <MX_GPIO_Init+0x158>)
 8000a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aa0:	4a4e      	ldr	r2, [pc, #312]	@ (8000bdc <MX_GPIO_Init+0x158>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8000bdc <MX_GPIO_Init+0x158>)
 8000aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b48      	ldr	r3, [pc, #288]	@ (8000bdc <MX_GPIO_Init+0x158>)
 8000aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000abe:	4a47      	ldr	r2, [pc, #284]	@ (8000bdc <MX_GPIO_Init+0x158>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ac8:	4b44      	ldr	r3, [pc, #272]	@ (8000bdc <MX_GPIO_Init+0x158>)
 8000aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b41      	ldr	r3, [pc, #260]	@ (8000bdc <MX_GPIO_Init+0x158>)
 8000ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000adc:	4a3f      	ldr	r2, [pc, #252]	@ (8000bdc <MX_GPIO_Init+0x158>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bdc <MX_GPIO_Init+0x158>)
 8000ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000af4:	4b39      	ldr	r3, [pc, #228]	@ (8000bdc <MX_GPIO_Init+0x158>)
 8000af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000afa:	4a38      	ldr	r2, [pc, #224]	@ (8000bdc <MX_GPIO_Init+0x158>)
 8000afc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b04:	4b35      	ldr	r3, [pc, #212]	@ (8000bdc <MX_GPIO_Init+0x158>)
 8000b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2104      	movs	r1, #4
 8000b16:	4832      	ldr	r0, [pc, #200]	@ (8000be0 <MX_GPIO_Init+0x15c>)
 8000b18:	f001 fbf6 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2180      	movs	r1, #128	@ 0x80
 8000b20:	4830      	ldr	r0, [pc, #192]	@ (8000be4 <MX_GPIO_Init+0x160>)
 8000b22:	f001 fbf1 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	21a0      	movs	r1, #160	@ 0xa0
 8000b2a:	482f      	ldr	r0, [pc, #188]	@ (8000be8 <MX_GPIO_Init+0x164>)
 8000b2c:	f001 fbec 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000b30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b36:	4b2d      	ldr	r3, [pc, #180]	@ (8000bec <MX_GPIO_Init+0x168>)
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4827      	ldr	r0, [pc, #156]	@ (8000be4 <MX_GPIO_Init+0x160>)
 8000b46:	f001 fa07 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000b4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4822      	ldr	r0, [pc, #136]	@ (8000be8 <MX_GPIO_Init+0x164>)
 8000b60:	f001 f9fa 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000b64:	2304      	movs	r3, #4
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	2302      	movs	r3, #2
 8000b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4819      	ldr	r0, [pc, #100]	@ (8000be0 <MX_GPIO_Init+0x15c>)
 8000b7c:	f001 f9ec 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000b80:	2380      	movs	r3, #128	@ 0x80
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4813      	ldr	r0, [pc, #76]	@ (8000be4 <MX_GPIO_Init+0x160>)
 8000b98:	f001 f9de 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000b9c:	2320      	movs	r3, #32
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480d      	ldr	r0, [pc, #52]	@ (8000be8 <MX_GPIO_Init+0x164>)
 8000bb4:	f001 f9d0 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000bb8:	2380      	movs	r3, #128	@ 0x80
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <MX_GPIO_Init+0x164>)
 8000bd0:	f001 f9c2 	bl	8001f58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	@ 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	46020c00 	.word	0x46020c00
 8000be0:	42021800 	.word	0x42021800
 8000be4:	42020800 	.word	0x42020800
 8000be8:	42020400 	.word	0x42020400
 8000bec:	10210000 	.word	0x10210000

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <Error_Handler+0x8>

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <HAL_MspInit+0x38>)
 8000c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c08:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <HAL_MspInit+0x38>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000c12:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <HAL_MspInit+0x38>)
 8000c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000c20:	f002 fd2e 	bl	8003680 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000c24:	2004      	movs	r0, #4
 8000c26:	f001 f80a 	bl	8001c3e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	46020c00 	.word	0x46020c00

08000c38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0ba      	sub	sp, #232	@ 0xe8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	22c0      	movs	r2, #192	@ 0xc0
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f009 fbc1 	bl	800a3e0 <memset>
  if(hadc->Instance==ADC1)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a24      	ldr	r2, [pc, #144]	@ (8000cf4 <HAL_ADC_MspInit+0xbc>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d140      	bne.n	8000cea <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000c68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000c74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	4618      	mov	r0, r3
 8000c82:	f003 ffb9 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000c8c:	f7ff ffb0 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <HAL_ADC_MspInit+0xc0>)
 8000c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c96:	4a18      	ldr	r2, [pc, #96]	@ (8000cf8 <HAL_ADC_MspInit+0xc0>)
 8000c98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c9c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ca0:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_ADC_MspInit+0xc0>)
 8000ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_ADC_MspInit+0xc0>)
 8000cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cb4:	4a10      	ldr	r2, [pc, #64]	@ (8000cf8 <HAL_ADC_MspInit+0xc0>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <HAL_ADC_MspInit+0xc0>)
 8000cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <HAL_ADC_MspInit+0xc4>)
 8000ce6:	f001 f937 	bl	8001f58 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cea:	bf00      	nop
 8000cec:	37e8      	adds	r7, #232	@ 0xe8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	42028000 	.word	0x42028000
 8000cf8:	46020c00 	.word	0x46020c00
 8000cfc:	42020800 	.word	0x42020800

08000d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0bc      	sub	sp, #240	@ 0xf0
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	22c0      	movs	r2, #192	@ 0xc0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f009 fb5d 	bl	800a3e0 <memset>
  if(huart->Instance==USART1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a54      	ldr	r2, [pc, #336]	@ (8000e7c <HAL_UART_MspInit+0x17c>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d14e      	bne.n	8000dce <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d30:	f04f 0201 	mov.w	r2, #1
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d40:	f107 0318 	add.w	r3, r7, #24
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 ff57 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000d50:	f7ff ff4e 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d54:	4b4a      	ldr	r3, [pc, #296]	@ (8000e80 <HAL_UART_MspInit+0x180>)
 8000d56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d5a:	4a49      	ldr	r2, [pc, #292]	@ (8000e80 <HAL_UART_MspInit+0x180>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d60:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000d64:	4b46      	ldr	r3, [pc, #280]	@ (8000e80 <HAL_UART_MspInit+0x180>)
 8000d66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b43      	ldr	r3, [pc, #268]	@ (8000e80 <HAL_UART_MspInit+0x180>)
 8000d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d78:	4a41      	ldr	r2, [pc, #260]	@ (8000e80 <HAL_UART_MspInit+0x180>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d82:	4b3f      	ldr	r3, [pc, #252]	@ (8000e80 <HAL_UART_MspInit+0x180>)
 8000d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000d90:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000daa:	2307      	movs	r3, #7
 8000dac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000db4:	4619      	mov	r1, r3
 8000db6:	4833      	ldr	r0, [pc, #204]	@ (8000e84 <HAL_UART_MspInit+0x184>)
 8000db8:	f001 f8ce 	bl	8001f58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	203d      	movs	r0, #61	@ 0x3d
 8000dc2:	f000 ff47 	bl	8001c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dc6:	203d      	movs	r0, #61	@ 0x3d
 8000dc8:	f000 ff5e 	bl	8001c88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dcc:	e051      	b.n	8000e72 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART2)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a2d      	ldr	r2, [pc, #180]	@ (8000e88 <HAL_UART_MspInit+0x188>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d14c      	bne.n	8000e72 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dd8:	f04f 0202 	mov.w	r2, #2
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de8:	f107 0318 	add.w	r3, r7, #24
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 ff03 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8000df8:	f7ff fefa 	bl	8000bf0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dfc:	4b20      	ldr	r3, [pc, #128]	@ (8000e80 <HAL_UART_MspInit+0x180>)
 8000dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e02:	4a1f      	ldr	r2, [pc, #124]	@ (8000e80 <HAL_UART_MspInit+0x180>)
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e08:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <HAL_UART_MspInit+0x180>)
 8000e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <HAL_UART_MspInit+0x180>)
 8000e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e20:	4a17      	ldr	r2, [pc, #92]	@ (8000e80 <HAL_UART_MspInit+0x180>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <HAL_UART_MspInit+0x180>)
 8000e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e38:	230c      	movs	r3, #12
 8000e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e50:	2307      	movs	r3, #7
 8000e52:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4809      	ldr	r0, [pc, #36]	@ (8000e84 <HAL_UART_MspInit+0x184>)
 8000e5e:	f001 f87b 	bl	8001f58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	203e      	movs	r0, #62	@ 0x3e
 8000e68:	f000 fef4 	bl	8001c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e6c:	203e      	movs	r0, #62	@ 0x3e
 8000e6e:	f000 ff0b 	bl	8001c88 <HAL_NVIC_EnableIRQ>
}
 8000e72:	bf00      	nop
 8000e74:	37f0      	adds	r7, #240	@ 0xf0
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40013800 	.word	0x40013800
 8000e80:	46020c00 	.word	0x46020c00
 8000e84:	42020000 	.word	0x42020000
 8000e88:	40004400 	.word	0x40004400

08000e8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0bc      	sub	sp, #240	@ 0xf0
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea4:	f107 0318 	add.w	r3, r7, #24
 8000ea8:	22c0      	movs	r2, #192	@ 0xc0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f009 fa97 	bl	800a3e0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a3c      	ldr	r2, [pc, #240]	@ (8000fa8 <HAL_PCD_MspInit+0x11c>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d171      	bne.n	8000fa0 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ebc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 fe90 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000ede:	f7ff fe87 	bl	8000bf0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b32      	ldr	r3, [pc, #200]	@ (8000fac <HAL_PCD_MspInit+0x120>)
 8000ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ee8:	4a30      	ldr	r2, [pc, #192]	@ (8000fac <HAL_PCD_MspInit+0x120>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <HAL_PCD_MspInit+0x120>)
 8000ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f00:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f24:	4619      	mov	r1, r3
 8000f26:	4822      	ldr	r0, [pc, #136]	@ (8000fb0 <HAL_PCD_MspInit+0x124>)
 8000f28:	f001 f816 	bl	8001f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <HAL_PCD_MspInit+0x120>)
 8000f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f32:	4a1e      	ldr	r2, [pc, #120]	@ (8000fac <HAL_PCD_MspInit+0x120>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <HAL_PCD_MspInit+0x120>)
 8000f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f4a:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_PCD_MspInit+0x120>)
 8000f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d119      	bne.n	8000f8c <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <HAL_PCD_MspInit+0x120>)
 8000f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f5e:	4a13      	ldr	r2, [pc, #76]	@ (8000fac <HAL_PCD_MspInit+0x120>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000f68:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <HAL_PCD_MspInit+0x120>)
 8000f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000f76:	f002 fb63 	bl	8003640 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <HAL_PCD_MspInit+0x120>)
 8000f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f80:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_PCD_MspInit+0x120>)
 8000f82:	f023 0304 	bic.w	r3, r3, #4
 8000f86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000f8a:	e001      	b.n	8000f90 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8000f8c:	f002 fb58 	bl	8003640 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	2049      	movs	r0, #73	@ 0x49
 8000f96:	f000 fe5d 	bl	8001c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000f9a:	2049      	movs	r0, #73	@ 0x49
 8000f9c:	f000 fe74 	bl	8001c88 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000fa0:	bf00      	nop
 8000fa2:	37f0      	adds	r7, #240	@ 0xf0
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	42040000 	.word	0x42040000
 8000fac:	46020c00 	.word	0x46020c00
 8000fb0:	42020000 	.word	0x42020000

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <NMI_Handler+0x4>

08000fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <BusFault_Handler+0x4>

08000fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <UsageFault_Handler+0x4>

08000fdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100a:	f000 f95f 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001018:	4802      	ldr	r0, [pc, #8]	@ (8001024 <USART1_IRQHandler+0x10>)
 800101a:	f006 fbd5 	bl	80077c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000011c 	.word	0x2000011c

08001028 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <USART2_IRQHandler+0x10>)
 800102e:	f006 fbcb 	bl	80077c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001b0 	.word	0x200001b0

0800103c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <OTG_FS_IRQHandler+0x10>)
 8001042:	f001 fac1 	bl	80025c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000244 	.word	0x20000244

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	@ (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f009 f9b6 	bl	800a3f0 <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200c0000 	.word	0x200c0000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	20000740 	.word	0x20000740
 80010b8:	20000890 	.word	0x20000890

080010bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <SystemInit+0x68>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c6:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <SystemInit+0x68>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <SystemInit+0x6c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <SystemInit+0x6c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <SystemInit+0x6c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <SystemInit+0x6c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <SystemInit+0x6c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001128 <SystemInit+0x6c>)
 80010ee:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80010f2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80010f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <SystemInit+0x6c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <SystemInit+0x6c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a09      	ldr	r2, [pc, #36]	@ (8001128 <SystemInit+0x6c>)
 8001104:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001108:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800110a:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <SystemInit+0x6c>)
 800110c:	2200      	movs	r2, #0
 800110e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <SystemInit+0x68>)
 8001112:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001116:	609a      	str	r2, [r3, #8]
  #endif
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00
 8001128:	46020c00 	.word	0x46020c00

0800112c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001164 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001130:	f7ff ffc4 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001134:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001136:	e003      	b.n	8001140 <LoopCopyDataInit>

08001138 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800113a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800113c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800113e:	3104      	adds	r1, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001140:	480a      	ldr	r0, [pc, #40]	@ (800116c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001144:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001146:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001148:	d3f6      	bcc.n	8001138 <CopyDataInit>
	ldr	r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <LoopForever+0x12>)
	b	LoopFillZerobss
 800114c:	e002      	b.n	8001154 <LoopFillZerobss>

0800114e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800114e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001150:	f842 3b04 	str.w	r3, [r2], #4

08001154 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <LoopForever+0x16>)
	cmp	r2, r3
 8001156:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001158:	d3f9      	bcc.n	800114e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115a:	f009 f94f 	bl	800a3fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800115e:	f7ff fa99 	bl	8000694 <main>

08001162 <LoopForever>:

LoopForever:
    b LoopForever
 8001162:	e7fe      	b.n	8001162 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001164:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001168:	0800ae6c 	.word	0x0800ae6c
	ldr	r0, =_sdata
 800116c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001170:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001174:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001178:	20000890 	.word	0x20000890

0800117c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_IRQHandler>
	...

08001180 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <HAL_Init+0x50>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a11      	ldr	r2, [pc, #68]	@ (80011d0 <HAL_Init+0x50>)
 800118a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800118e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 fd54 	bl	8001c3e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001196:	f003 fb51 	bl	800483c <HAL_RCC_GetSysClockFreq>
 800119a:	4602      	mov	r2, r0
 800119c:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <HAL_Init+0x54>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <HAL_Init+0x58>)
 80011a6:	5ccb      	ldrb	r3, [r1, r3]
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	4a0b      	ldr	r2, [pc, #44]	@ (80011dc <HAL_Init+0x5c>)
 80011ae:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011b0:	2004      	movs	r0, #4
 80011b2:	f000 fd99 	bl	8001ce8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 f812 	bl	80011e0 <HAL_InitTick>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e002      	b.n	80011cc <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011c6:	f7ff fd19 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40022000 	.word	0x40022000
 80011d4:	46020c00 	.word	0x46020c00
 80011d8:	0800ad28 	.word	0x0800ad28
 80011dc:	20000018 	.word	0x20000018

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80011ec:	4b33      	ldr	r3, [pc, #204]	@ (80012bc <HAL_InitTick+0xdc>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e05c      	b.n	80012b2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80011f8:	4b31      	ldr	r3, [pc, #196]	@ (80012c0 <HAL_InitTick+0xe0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b04      	cmp	r3, #4
 8001202:	d10c      	bne.n	800121e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001204:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <HAL_InitTick+0xe4>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <HAL_InitTick+0xdc>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	e037      	b.n	800128e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800121e:	f000 fdbb 	bl	8001d98 <HAL_SYSTICK_GetCLKSourceConfig>
 8001222:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d023      	beq.n	8001272 <HAL_InitTick+0x92>
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d82d      	bhi.n	800128c <HAL_InitTick+0xac>
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_InitTick+0x5e>
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d00d      	beq.n	8001258 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800123c:	e026      	b.n	800128c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800123e:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <HAL_InitTick+0xe4>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <HAL_InitTick+0xdc>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4619      	mov	r1, r3
 8001248:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800124c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001250:	fbb2 f3f3 	udiv	r3, r2, r3
 8001254:	60fb      	str	r3, [r7, #12]
        break;
 8001256:	e01a      	b.n	800128e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001258:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <HAL_InitTick+0xdc>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001262:	fbb3 f3f2 	udiv	r3, r3, r2
 8001266:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	60fb      	str	r3, [r7, #12]
        break;
 8001270:	e00d      	b.n	800128e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_InitTick+0xdc>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001280:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001284:	fbb2 f3f3 	udiv	r3, r2, r3
 8001288:	60fb      	str	r3, [r7, #12]
        break;
 800128a:	e000      	b.n	800128e <HAL_InitTick+0xae>
        break;
 800128c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 fd08 	bl	8001ca4 <HAL_SYSTICK_Config>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e009      	b.n	80012b2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129e:	2200      	movs	r2, #0
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	f04f 30ff 	mov.w	r0, #4294967295
 80012a6:	f000 fcd5 	bl	8001c54 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80012aa:	4a07      	ldr	r2, [pc, #28]	@ (80012c8 <HAL_InitTick+0xe8>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000020 	.word	0x20000020
 80012c0:	e000e010 	.word	0xe000e010
 80012c4:	20000018 	.word	0x20000018
 80012c8:	2000001c 	.word	0x2000001c

080012cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000020 	.word	0x20000020
 80012f0:	20000744 	.word	0x20000744

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	@ (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000744 	.word	0x20000744

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000020 	.word	0x20000020

08001354 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	601a      	str	r2, [r3, #0]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <LL_ADC_SetResolution+0x3c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d104      	bne.n	800139c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3b01      	subs	r3, #1
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	f023 020c 	bic.w	r2, r3, #12
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	60da      	str	r2, [r3, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	46021000 	.word	0x46021000

080013bc <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ca:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	2a00      	cmp	r2, #0
 80013e6:	d002      	beq.n	80013ee <LL_ADC_SetGainCompensation+0x32>
 80013e8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013ec:	e000      	b.n	80013f0 <LL_ADC_SetGainCompensation+0x34>
 80013ee:	2200      	movs	r2, #0
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001402:	b480      	push	{r7}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2107      	movs	r1, #7
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	401a      	ands	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	431a      	orrs	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001450:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6093      	str	r3, [r2, #8]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001478:	d101      	bne.n	800147e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800149c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80014c8:	d101      	bne.n	80014ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <LL_ADC_IsEnabled+0x18>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e000      	b.n	80014f6 <LL_ADC_IsEnabled+0x1a>
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	2b04      	cmp	r3, #4
 8001514:	d101      	bne.n	800151a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b08      	cmp	r3, #8
 800153a:	d101      	bne.n	8001540 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e2b3      	b.n	8001ad8 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a8b      	ldr	r2, [pc, #556]	@ (80017ac <HAL_ADC_Init+0x25c>)
 800157e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001584:	2b00      	cmp	r3, #0
 8001586:	d109      	bne.n	800159c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff fb55 	bl	8000c38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5f 	bl	8001464 <LL_ADC_IsDeepPowerDownEnabled>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d004      	beq.n	80015b6 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff45 	bl	8001440 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff7a 	bl	80014b4 <LL_ADC_IsInternalRegulatorEnabled>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d115      	bne.n	80015f2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff5e 	bl	800148c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015d0:	4b77      	ldr	r3, [pc, #476]	@ (80017b0 <HAL_ADC_Init+0x260>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	4a77      	ldr	r2, [pc, #476]	@ (80017b4 <HAL_ADC_Init+0x264>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	099b      	lsrs	r3, r3, #6
 80015de:	3301      	adds	r3, #1
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015e4:	e002      	b.n	80015ec <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f9      	bne.n	80015e6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff5c 	bl	80014b4 <LL_ADC_IsInternalRegulatorEnabled>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10e      	bne.n	8001620 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001606:	f043 0210 	orr.w	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff6c 	bl	8001502 <LL_ADC_REG_IsConversionOngoing>
 800162a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	2b00      	cmp	r3, #0
 8001636:	f040 8244 	bne.w	8001ac2 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f040 8240 	bne.w	8001ac2 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001646:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800164a:	f043 0202 	orr.w	r2, r3, #2
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff40 	bl	80014dc <LL_ADC_IsEnabled>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d140      	bne.n	80016e4 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <HAL_ADC_Init+0x25c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d028      	beq.n	80016be <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a51      	ldr	r2, [pc, #324]	@ (80017b8 <HAL_ADC_Init+0x268>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d109      	bne.n	800168a <HAL_ADC_Init+0x13a>
 8001676:	4850      	ldr	r0, [pc, #320]	@ (80017b8 <HAL_ADC_Init+0x268>)
 8001678:	f7ff ff30 	bl	80014dc <LL_ADC_IsEnabled>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	bf0c      	ite	eq
 8001682:	2301      	moveq	r3, #1
 8001684:	2300      	movne	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	e008      	b.n	800169c <HAL_ADC_Init+0x14c>
 800168a:	4848      	ldr	r0, [pc, #288]	@ (80017ac <HAL_ADC_Init+0x25c>)
 800168c:	f7ff ff26 	bl	80014dc <LL_ADC_IsEnabled>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	bf0c      	ite	eq
 8001696:	2301      	moveq	r3, #1
 8001698:	2300      	movne	r3, #0
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d021      	beq.n	80016e4 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a44      	ldr	r2, [pc, #272]	@ (80017b8 <HAL_ADC_Init+0x268>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_Init+0x15e>
 80016aa:	4a44      	ldr	r2, [pc, #272]	@ (80017bc <HAL_ADC_Init+0x26c>)
 80016ac:	e000      	b.n	80016b0 <HAL_ADC_Init+0x160>
 80016ae:	4a44      	ldr	r2, [pc, #272]	@ (80017c0 <HAL_ADC_Init+0x270>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4619      	mov	r1, r3
 80016b6:	4610      	mov	r0, r2
 80016b8:	f7ff fe4c 	bl	8001354 <LL_ADC_SetCommonClock>
 80016bc:	e012      	b.n	80016e4 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	4619      	mov	r1, r3
 80016c8:	4610      	mov	r0, r2
 80016ca:	f7ff fe57 	bl	800137c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80016ce:	4b3c      	ldr	r3, [pc, #240]	@ (80017c0 <HAL_ADC_Init+0x270>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80016de:	4938      	ldr	r1, [pc, #224]	@ (80017c0 <HAL_ADC_Init+0x270>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a30      	ldr	r2, [pc, #192]	@ (80017ac <HAL_ADC_Init+0x25c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d010      	beq.n	8001710 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016f4:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80016fa:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001700:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001708:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800170a:	4313      	orrs	r3, r2
 800170c:	623b      	str	r3, [r7, #32]
 800170e:	e030      	b.n	8001772 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7f1b      	ldrb	r3, [r3, #28]
 8001714:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800171c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800171e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001724:	2a00      	cmp	r2, #0
 8001726:	d002      	beq.n	800172e <HAL_ADC_Init+0x1de>
 8001728:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800172c:	e000      	b.n	8001730 <HAL_ADC_Init+0x1e0>
 800172e:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001730:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001736:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	da04      	bge.n	800174a <HAL_ADC_Init+0x1fa>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001748:	e001      	b.n	800174e <HAL_ADC_Init+0x1fe>
 800174a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 800174e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4918      	ldr	r1, [pc, #96]	@ (80017b8 <HAL_ADC_Init+0x268>)
 8001756:	428b      	cmp	r3, r1
 8001758:	d103      	bne.n	8001762 <HAL_ADC_Init+0x212>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001760:	e003      	b.n	800176a <HAL_ADC_Init+0x21a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001768:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800176a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800176c:	6a3a      	ldr	r2, [r7, #32]
 800176e:	4313      	orrs	r3, r2
 8001770:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001778:	2b01      	cmp	r3, #1
 800177a:	d12f      	bne.n	80017dc <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <HAL_ADC_Init+0x25c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d007      	beq.n	8001796 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	3b01      	subs	r3, #1
 800178c:	045b      	lsls	r3, r3, #17
 800178e:	6a3a      	ldr	r2, [r7, #32]
 8001790:	4313      	orrs	r3, r2
 8001792:	623b      	str	r3, [r7, #32]
 8001794:	e022      	b.n	80017dc <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800179c:	2b00      	cmp	r3, #0
 800179e:	d111      	bne.n	80017c4 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a6:	623b      	str	r3, [r7, #32]
 80017a8:	e018      	b.n	80017dc <HAL_ADC_Init+0x28c>
 80017aa:	bf00      	nop
 80017ac:	46021000 	.word	0x46021000
 80017b0:	20000018 	.word	0x20000018
 80017b4:	053e2d63 	.word	0x053e2d63
 80017b8:	42028000 	.word	0x42028000
 80017bc:	42028308 	.word	0x42028308
 80017c0:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80017c8:	f043 0220 	orr.w	r2, r3, #32
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a92      	ldr	r2, [pc, #584]	@ (8001a2c <HAL_ADC_Init+0x4dc>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d018      	beq.n	8001818 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017f2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fa:	4313      	orrs	r3, r2
 80017fc:	6a3a      	ldr	r2, [r7, #32]
 80017fe:	4313      	orrs	r3, r2
 8001800:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	4b89      	ldr	r3, [pc, #548]	@ (8001a30 <HAL_ADC_Init+0x4e0>)
 800180a:	4013      	ands	r3, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	6a39      	ldr	r1, [r7, #32]
 8001812:	430b      	orrs	r3, r1
 8001814:	60d3      	str	r3, [r2, #12]
 8001816:	e031      	b.n	800187c <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181c:	2b00      	cmp	r3, #0
 800181e:	d009      	beq.n	8001834 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001824:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800182c:	4313      	orrs	r3, r2
 800182e:	6a3a      	ldr	r2, [r7, #32]
 8001830:	4313      	orrs	r3, r2
 8001832:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a34 <HAL_ADC_Init+0x4e4>)
 800183c:	4013      	ands	r3, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	6a39      	ldr	r1, [r7, #32]
 8001844:	430b      	orrs	r3, r1
 8001846:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1a      	ldr	r2, [r3, #32]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a6a      	ldr	r2, [pc, #424]	@ (8001a2c <HAL_ADC_Init+0x4dc>)
 8001882:	4293      	cmp	r3, r2
 8001884:	f000 8093 	beq.w	80019ae <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fe38 	bl	8001502 <LL_ADC_REG_IsConversionOngoing>
 8001892:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fe45 	bl	8001528 <LL_ADC_INJ_IsConversionOngoing>
 800189e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d161      	bne.n	800196a <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d15e      	bne.n	800196a <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7f1b      	ldrb	r3, [r3, #28]
 80018b0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4960      	ldr	r1, [pc, #384]	@ (8001a38 <HAL_ADC_Init+0x4e8>)
 80018b8:	428b      	cmp	r3, r1
 80018ba:	d102      	bne.n	80018c2 <HAL_ADC_Init+0x372>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c0:	e002      	b.n	80018c8 <HAL_ADC_Init+0x378>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c6:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018c8:	4313      	orrs	r3, r2
 80018ca:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018d6:	f023 0303 	bic.w	r3, r3, #3
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	6a39      	ldr	r1, [r7, #32]
 80018e0:	430b      	orrs	r3, r1
 80018e2:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d007      	beq.n	80018fc <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4610      	mov	r0, r2
 80018f8:	f7ff fd60 	bl	80013bc <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001902:	2b01      	cmp	r3, #1
 8001904:	d11e      	bne.n	8001944 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800190a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	4b4a      	ldr	r3, [pc, #296]	@ (8001a3c <HAL_ADC_Init+0x4ec>)
 8001914:	4013      	ands	r3, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800191a:	0411      	lsls	r1, r2, #16
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001920:	4311      	orrs	r1, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8001926:	4311      	orrs	r1, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800192c:	4311      	orrs	r1, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001932:	0892      	lsrs	r2, r2, #2
 8001934:	430a      	orrs	r2, r1
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	e007      	b.n	8001954 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691a      	ldr	r2, [r3, #16]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d10c      	bne.n	800198c <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001978:	f023 010f 	bic.w	r1, r3, #15
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	1e5a      	subs	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	631a      	str	r2, [r3, #48]	@ 0x30
 800198a:	e007      	b.n	800199c <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 020f 	bic.w	r2, r2, #15
 800199a:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80019a0:	f023 0303 	bic.w	r3, r3, #3
 80019a4:	f043 0201 	orr.w	r2, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80019ac:	e092      	b.n	8001ad4 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d111      	bne.n	80019dc <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80019c0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80019c6:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80019cc:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	4b17      	ldr	r3, [pc, #92]	@ (8001a40 <HAL_ADC_Init+0x4f0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	69f9      	ldr	r1, [r7, #28]
 80019ec:	430b      	orrs	r3, r1
 80019ee:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f8:	461a      	mov	r2, r3
 80019fa:	2100      	movs	r1, #0
 80019fc:	f7ff fd01 	bl	8001402 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8001a0e:	f7ff fcf8 	bl	8001402 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d114      	bne.n	8001a44 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f062 020f 	orn	r2, r2, #15
 8001a28:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a2a:	e024      	b.n	8001a76 <HAL_ADC_Init+0x526>
 8001a2c:	46021000 	.word	0x46021000
 8001a30:	fff0c013 	.word	0xfff0c013
 8001a34:	ffde800d 	.word	0xffde800d
 8001a38:	42028000 	.word	0x42028000
 8001a3c:	fc00f81e 	.word	0xfc00f81e
 8001a40:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a4c:	d113      	bne.n	8001a76 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	f003 031c 	and.w	r3, r3, #28
 8001a60:	f06f 020f 	mvn.w	r2, #15
 8001a64:	fa02 f103 	lsl.w	r1, r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <HAL_ADC_Init+0x590>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	6a3a      	ldr	r2, [r7, #32]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d10b      	bne.n	8001a9e <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001a90:	f023 0303 	bic.w	r3, r3, #3
 8001a94:	f043 0201 	orr.w	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001a9c:	e01a      	b.n	8001ad4 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001aa2:	f023 0312 	bic.w	r3, r3, #18
 8001aa6:	f043 0210 	orr.w	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001ab2:	f043 0201 	orr.w	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ac0:	e008      	b.n	8001ad4 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001ac6:	f043 0210 	orr.w	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8001ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3728      	adds	r7, #40	@ 0x28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	833ffff3 	.word	0x833ffff3

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db0b      	blt.n	8001b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	4907      	ldr	r1, [pc, #28]	@ (8001b80 <__NVIC_EnableIRQ+0x38>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2001      	movs	r0, #1
 8001b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	@ (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	@ (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	@ 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	@ 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ff4c 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
 8001c60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c62:	f7ff ff63 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001c66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	6978      	ldr	r0, [r7, #20]
 8001c6e:	f7ff ffb3 	bl	8001bd8 <NVIC_EncodePriority>
 8001c72:	4602      	mov	r2, r0
 8001c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff82 	bl	8001b84 <__NVIC_SetPriority>
}
 8001c80:	bf00      	nop
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff56 	bl	8001b48 <__NVIC_EnableIRQ>
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb4:	d301      	bcc.n	8001cba <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00d      	b.n	8001cd6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <HAL_SYSTICK_Config+0x40>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001cc2:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <HAL_SYSTICK_Config+0x40>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_SYSTICK_Config+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a05      	ldr	r2, [pc, #20]	@ (8001ce4 <HAL_SYSTICK_Config+0x40>)
 8001cce:	f043 0303 	orr.w	r3, r3, #3
 8001cd2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e010 	.word	0xe000e010

08001ce8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d844      	bhi.n	8001d80 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cfc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfc:	08001d1f 	.word	0x08001d1f
 8001d00:	08001d3d 	.word	0x08001d3d
 8001d04:	08001d5f 	.word	0x08001d5f
 8001d08:	08001d81 	.word	0x08001d81
 8001d0c:	08001d11 	.word	0x08001d11
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d10:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1e      	ldr	r2, [pc, #120]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6013      	str	r3, [r2, #0]
      break;
 8001d1c:	e031      	b.n	8001d82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1b      	ldr	r2, [pc, #108]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d30:	4a18      	ldr	r2, [pc, #96]	@ (8001d94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d32:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001d3a:	e022      	b.n	8001d82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d3c:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d42:	f023 0304 	bic.w	r3, r3, #4
 8001d46:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001d48:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001d52:	4a10      	ldr	r2, [pc, #64]	@ (8001d94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001d5c:	e011      	b.n	8001d82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a0b      	ldr	r2, [pc, #44]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d70:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001d74:	4a07      	ldr	r2, [pc, #28]	@ (8001d94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d76:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001d7e:	e000      	b.n	8001d82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001d80:	bf00      	nop
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e010 	.word	0xe000e010
 8001d94:	46020c00 	.word	0x46020c00

08001d98 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001d9e:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001daa:	2304      	movs	r3, #4
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	e021      	b.n	8001df4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001db0:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001dba:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001dc2:	d011      	beq.n	8001de8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001dca:	d810      	bhi.n	8001dee <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d004      	beq.n	8001ddc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dd8:	d003      	beq.n	8001de2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001dda:	e008      	b.n	8001dee <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
        break;
 8001de0:	e008      	b.n	8001df4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001de2:	2301      	movs	r3, #1
 8001de4:	607b      	str	r3, [r7, #4]
        break;
 8001de6:	e005      	b.n	8001df4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001de8:	2302      	movs	r3, #2
 8001dea:	607b      	str	r3, [r7, #4]
        break;
 8001dec:	e002      	b.n	8001df4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
        break;
 8001df2:	bf00      	nop
    }
  }
  return systick_source;
 8001df4:	687b      	ldr	r3, [r7, #4]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010
 8001e08:	46020c00 	.word	0x46020c00

08001e0c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001e14:	f7ff fa6e 	bl	80012f4 <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e06b      	b.n	8001efc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d008      	beq.n	8001e42 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2220      	movs	r2, #32
 8001e34:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e05c      	b.n	8001efc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0204 	orr.w	r2, r2, #4
 8001e50:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2205      	movs	r2, #5
 8001e56:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001e5a:	e020      	b.n	8001e9e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001e5c:	f7ff fa4a 	bl	80012f4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b05      	cmp	r3, #5
 8001e68:	d919      	bls.n	8001e9e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6e:	f043 0210 	orr.w	r2, r3, #16
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e8e:	2201      	movs	r2, #1
 8001e90:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e02e      	b.n	8001efc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0d7      	beq.n	8001e5c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0202 	orr.w	r2, r2, #2
 8001eba:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001ecc:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e019      	b.n	8001f4a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d004      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2220      	movs	r2, #32
 8001f26:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e00e      	b.n	8001f4a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f6a:	e1ba      	b.n	80022e2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 81aa 	beq.w	80022dc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a55      	ldr	r2, [pc, #340]	@ (80020e0 <HAL_GPIO_Init+0x188>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d15d      	bne.n	800204c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001f96:	2201      	movs	r2, #1
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0201 	and.w	r2, r3, #1
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69fa      	ldr	r2, [r7, #28]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001fc0:	4a48      	ldr	r2, [pc, #288]	@ (80020e4 <HAL_GPIO_Init+0x18c>)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001fc8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001fca:	4a46      	ldr	r2, [pc, #280]	@ (80020e4 <HAL_GPIO_Init+0x18c>)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220b      	movs	r2, #11
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	4313      	orrs	r3, r2
 800200c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	08da      	lsrs	r2, r3, #3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	3208      	adds	r2, #8
 8002016:	69f9      	ldr	r1, [r7, #28]
 8002018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	4013      	ands	r3, r2
 8002032:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	2202      	movs	r2, #2
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	4313      	orrs	r3, r2
 8002042:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	e067      	b.n	800211c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x104>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b12      	cmp	r3, #18
 800205a:	d145      	bne.n	80020e8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	08da      	lsrs	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3208      	adds	r2, #8
 8002064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002068:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	4013      	ands	r3, r2
 800207e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f003 020f 	and.w	r2, r3, #15
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	4313      	orrs	r3, r2
 8002098:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	69f9      	ldr	r1, [r7, #28]
 80020a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	4013      	ands	r3, r2
 80020be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0203 	and.w	r2, r3, #3
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e01e      	b.n	800211c <HAL_GPIO_Init+0x1c4>
 80020de:	bf00      	nop
 80020e0:	46020000 	.word	0x46020000
 80020e4:	0800ad80 	.word	0x0800ad80
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	4313      	orrs	r3, r2
 8002114:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d00b      	beq.n	800213c <HAL_GPIO_Init+0x1e4>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d007      	beq.n	800213c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002130:	2b11      	cmp	r3, #17
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d130      	bne.n	800219e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	4013      	ands	r3, r2
 8002152:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	4313      	orrs	r3, r2
 8002164:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002172:	2201      	movs	r2, #1
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	4013      	ands	r3, r2
 8002180:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 0201 	and.w	r2, r3, #1
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	4313      	orrs	r3, r2
 8002196:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d017      	beq.n	80021d6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d07c      	beq.n	80022dc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80021e2:	4a47      	ldr	r2, [pc, #284]	@ (8002300 <HAL_GPIO_Init+0x3a8>)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3318      	adds	r3, #24
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	4013      	ands	r3, r2
 8002204:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0a9a      	lsrs	r2, r3, #10
 800220a:	4b3e      	ldr	r3, [pc, #248]	@ (8002304 <HAL_GPIO_Init+0x3ac>)
 800220c:	4013      	ands	r3, r2
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	f002 0203 	and.w	r2, r2, #3
 8002214:	00d2      	lsls	r2, r2, #3
 8002216:	4093      	lsls	r3, r2
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	4313      	orrs	r3, r2
 800221c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800221e:	4938      	ldr	r1, [pc, #224]	@ (8002300 <HAL_GPIO_Init+0x3a8>)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3318      	adds	r3, #24
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800222c:	4b34      	ldr	r3, [pc, #208]	@ (8002300 <HAL_GPIO_Init+0x3a8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	43db      	mvns	r3, r3
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	4013      	ands	r3, r2
 800223a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002250:	4a2b      	ldr	r2, [pc, #172]	@ (8002300 <HAL_GPIO_Init+0x3a8>)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002256:	4b2a      	ldr	r3, [pc, #168]	@ (8002300 <HAL_GPIO_Init+0x3a8>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	43db      	mvns	r3, r3
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	4013      	ands	r3, r2
 8002264:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800227a:	4a21      	ldr	r2, [pc, #132]	@ (8002300 <HAL_GPIO_Init+0x3a8>)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002280:	4b1f      	ldr	r3, [pc, #124]	@ (8002300 <HAL_GPIO_Init+0x3a8>)
 8002282:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002286:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	43db      	mvns	r3, r3
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	4013      	ands	r3, r2
 8002290:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80022a6:	4a16      	ldr	r2, [pc, #88]	@ (8002300 <HAL_GPIO_Init+0x3a8>)
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80022ae:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <HAL_GPIO_Init+0x3a8>)
 80022b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	4013      	ands	r3, r2
 80022be:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80022d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002300 <HAL_GPIO_Init+0x3a8>)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	3301      	adds	r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f47f ae3d 	bne.w	8001f6c <HAL_GPIO_Init+0x14>
  }
}
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
 80022f6:	3724      	adds	r7, #36	@ 0x24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	46022000 	.word	0x46022000
 8002304:	002f7f7f 	.word	0x002f7f7f

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002324:	e002      	b.n	800232c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e007      	b.n	8002366 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002356:	4b07      	ldr	r3, [pc, #28]	@ (8002374 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 0204 	bic.w	r2, r3, #4
 800235e:	4905      	ldr	r1, [pc, #20]	@ (8002374 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40030400 	.word	0x40030400

08002378 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800237c:	4b05      	ldr	r3, [pc, #20]	@ (8002394 <HAL_ICACHE_Enable+0x1c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a04      	ldr	r2, [pc, #16]	@ (8002394 <HAL_ICACHE_Enable+0x1c>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40030400 	.word	0x40030400

08002398 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af02      	add	r7, sp, #8
 800239e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e108      	b.n	80025bc <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d106      	bne.n	80023ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7fe fd61 	bl	8000e8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2203      	movs	r2, #3
 80023ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4a7b      	ldr	r2, [pc, #492]	@ (80025c4 <HAL_PCD_Init+0x22c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d102      	bne.n	80023e0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f007 fadd 	bl	80099a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	7c1a      	ldrb	r2, [r3, #16]
 80023f2:	f88d 2000 	strb.w	r2, [sp]
 80023f6:	3304      	adds	r3, #4
 80023f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023fa:	f007 fa04 	bl	8009806 <USB_CoreInit>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0d5      	b.n	80025bc <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f007 fad5 	bl	80099c6 <USB_SetCurrentMode>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0c6      	b.n	80025bc <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	e04a      	b.n	80024ca <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	3315      	adds	r3, #21
 8002444:	2201      	movs	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3314      	adds	r3, #20
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800245c:	7bfa      	ldrb	r2, [r7, #15]
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	b298      	uxth	r0, r3
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	332e      	adds	r3, #46	@ 0x2e
 8002470:	4602      	mov	r2, r0
 8002472:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	3318      	adds	r3, #24
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	331c      	adds	r3, #28
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	3320      	adds	r3, #32
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	3324      	adds	r3, #36	@ 0x24
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	3301      	adds	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	791b      	ldrb	r3, [r3, #4]
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d3af      	bcc.n	8002434 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	e044      	b.n	8002564 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024da:	7bfa      	ldrb	r2, [r7, #15]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	3301      	adds	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	791b      	ldrb	r3, [r3, #4]
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	429a      	cmp	r2, r3
 800256c:	d3b5      	bcc.n	80024da <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7c1a      	ldrb	r2, [r3, #16]
 8002576:	f88d 2000 	strb.w	r2, [sp]
 800257a:	3304      	adds	r3, #4
 800257c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800257e:	f007 fa6f 	bl	8009a60 <USB_DevInit>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e013      	b.n	80025bc <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7b1b      	ldrb	r3, [r3, #12]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d102      	bne.n	80025b0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 ff3c 	bl	8003428 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f007 fd7d 	bl	800a0b4 <USB_DevDisconnect>

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	42040000 	.word	0x42040000

080025c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b08d      	sub	sp, #52	@ 0x34
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f007 fe1c 	bl	800a21c <USB_GetMode>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 84b9 	bne.w	8002f5e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f007 fd80 	bl	800a0f6 <USB_ReadInterrupts>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 84af 	beq.w	8002f5c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f007 fd6d 	bl	800a0f6 <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b02      	cmp	r3, #2
 8002624:	d107      	bne.n	8002636 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f002 0202 	and.w	r2, r2, #2
 8002634:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f007 fd5b 	bl	800a0f6 <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b10      	cmp	r3, #16
 8002648:	d161      	bne.n	800270e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0210 	bic.w	r2, r2, #16
 8002658:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	f003 020f 	and.w	r2, r3, #15
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	3304      	adds	r3, #4
 8002678:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	0c5b      	lsrs	r3, r3, #17
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	2b02      	cmp	r3, #2
 8002684:	d124      	bne.n	80026d0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d035      	beq.n	80026fe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800269c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	6a38      	ldr	r0, [r7, #32]
 80026a6:	f007 fcad 	bl	800a004 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b6:	441a      	add	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026c8:	441a      	add	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	615a      	str	r2, [r3, #20]
 80026ce:	e016      	b.n	80026fe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	0c5b      	lsrs	r3, r3, #17
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d110      	bne.n	80026fe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026e2:	2208      	movs	r2, #8
 80026e4:	4619      	mov	r1, r3
 80026e6:	6a38      	ldr	r0, [r7, #32]
 80026e8:	f007 fc8c 	bl	800a004 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026f8:	441a      	add	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0210 	orr.w	r2, r2, #16
 800270c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f007 fcef 	bl	800a0f6 <USB_ReadInterrupts>
 8002718:	4603      	mov	r3, r0
 800271a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800271e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002722:	f040 80a7 	bne.w	8002874 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f007 fcf4 	bl	800a11c <USB_ReadDevAllOutEpInterrupt>
 8002734:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002736:	e099      	b.n	800286c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 808e 	beq.w	8002860 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f007 fd18 	bl	800a184 <USB_ReadDevOutEPInterrupt>
 8002754:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00c      	beq.n	800277a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	4413      	add	r3, r2
 8002768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800276c:	461a      	mov	r2, r3
 800276e:	2301      	movs	r3, #1
 8002770:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002772:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fd29 	bl	80031cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00c      	beq.n	800279e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	4413      	add	r3, r2
 800278c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002790:	461a      	mov	r2, r3
 8002792:	2308      	movs	r3, #8
 8002794:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002796:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fdff 	bl	800339c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027b4:	461a      	mov	r2, r3
 80027b6:	2310      	movs	r3, #16
 80027b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d030      	beq.n	8002826 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027cc:	2b80      	cmp	r3, #128	@ 0x80
 80027ce:	d109      	bne.n	80027e4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027e2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	3304      	adds	r3, #4
 80027f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	78db      	ldrb	r3, [r3, #3]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d108      	bne.n	8002814 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2200      	movs	r2, #0
 8002806:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	b2db      	uxtb	r3, r3
 800280c:	4619      	mov	r1, r3
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fbf2 	bl	8002ff8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002820:	461a      	mov	r2, r3
 8002822:	2302      	movs	r3, #2
 8002824:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	4413      	add	r3, r2
 8002838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800283c:	461a      	mov	r2, r3
 800283e:	2320      	movs	r3, #32
 8002840:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d009      	beq.n	8002860 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	4413      	add	r3, r2
 8002854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002858:	461a      	mov	r2, r3
 800285a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800285e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002862:	3301      	adds	r3, #1
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800286c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	f47f af62 	bne.w	8002738 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f007 fc3c 	bl	800a0f6 <USB_ReadInterrupts>
 800287e:	4603      	mov	r3, r0
 8002880:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002884:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002888:	f040 80db 	bne.w	8002a42 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f007 fc5d 	bl	800a150 <USB_ReadDevAllInEpInterrupt>
 8002896:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800289c:	e0cd      	b.n	8002a3a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800289e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80c2 	beq.w	8002a2e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f007 fc83 	bl	800a1c0 <USB_ReadDevInEPInterrupt>
 80028ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d057      	beq.n	8002976 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	2201      	movs	r2, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69f9      	ldr	r1, [r7, #28]
 80028e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028e6:	4013      	ands	r3, r2
 80028e8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028f6:	461a      	mov	r2, r3
 80028f8:	2301      	movs	r3, #1
 80028fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	799b      	ldrb	r3, [r3, #6]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d132      	bne.n	800296a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	3320      	adds	r3, #32
 8002914:	6819      	ldr	r1, [r3, #0]
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4403      	add	r3, r0
 8002924:	331c      	adds	r3, #28
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4419      	add	r1, r3
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4403      	add	r3, r0
 8002938:	3320      	adds	r3, #32
 800293a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	2b00      	cmp	r3, #0
 8002940:	d113      	bne.n	800296a <HAL_PCD_IRQHandler+0x3a2>
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002946:	4613      	mov	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	3324      	adds	r3, #36	@ 0x24
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d108      	bne.n	800296a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002962:	461a      	mov	r2, r3
 8002964:	2101      	movs	r1, #1
 8002966:	f007 fc8b 	bl	800a280 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4619      	mov	r1, r3
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fb03 	bl	8002f7c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800298c:	461a      	mov	r2, r3
 800298e:	2308      	movs	r3, #8
 8002990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029a8:	461a      	mov	r2, r3
 80029aa:	2310      	movs	r3, #16
 80029ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029c4:	461a      	mov	r2, r3
 80029c6:	2340      	movs	r3, #64	@ 0x40
 80029c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d023      	beq.n	8002a1c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029d6:	6a38      	ldr	r0, [r7, #32]
 80029d8:	f007 f98e 	bl	8009cf8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	3310      	adds	r3, #16
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	4413      	add	r3, r2
 80029ec:	3304      	adds	r3, #4
 80029ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	78db      	ldrb	r3, [r3, #3]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d108      	bne.n	8002a0a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2200      	movs	r2, #0
 80029fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	4619      	mov	r1, r3
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fb03 	bl	8003010 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a16:	461a      	mov	r2, r3
 8002a18:	2302      	movs	r3, #2
 8002a1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fb42 	bl	80030b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	3301      	adds	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a36:	085b      	lsrs	r3, r3, #1
 8002a38:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f47f af2e 	bne.w	800289e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f007 fb55 	bl	800a0f6 <USB_ReadInterrupts>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a56:	d122      	bne.n	8002a9e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a66:	f023 0301 	bic.w	r3, r3, #1
 8002a6a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d108      	bne.n	8002a88 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a7e:	2100      	movs	r1, #0
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fcf5 	bl	8003470 <HAL_PCDEx_LPM_Callback>
 8002a86:	e002      	b.n	8002a8e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 faab 	bl	8002fe4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f007 fb27 	bl	800a0f6 <USB_ReadInterrupts>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ab2:	d112      	bne.n	8002ada <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d102      	bne.n	8002aca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fa83 	bl	8002fd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f007 fb09 	bl	800a0f6 <USB_ReadInterrupts>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aee:	d121      	bne.n	8002b34 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002afe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d111      	bne.n	8002b2e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	f003 020f 	and.w	r2, r3, #15
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b24:	2101      	movs	r1, #1
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fca2 	bl	8003470 <HAL_PCDEx_LPM_Callback>
 8002b2c:	e002      	b.n	8002b34 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fa4e 	bl	8002fd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f007 fadc 	bl	800a0f6 <USB_ReadInterrupts>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b48:	f040 80b7 	bne.w	8002cba <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2110      	movs	r1, #16
 8002b66:	4618      	mov	r0, r3
 8002b68:	f007 f8c6 	bl	8009cf8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b70:	e046      	b.n	8002c00 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b84:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b96:	0151      	lsls	r1, r2, #5
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	440a      	add	r2, r1
 8002b9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002ba0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ba4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002bb8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bca:	0151      	lsls	r1, r2, #5
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	440a      	add	r2, r1
 8002bd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bd4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bea:	0151      	lsls	r1, r2, #5
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	440a      	add	r2, r1
 8002bf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bf4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002bf8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	791b      	ldrb	r3, [r3, #4]
 8002c04:	461a      	mov	r2, r3
 8002c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d3b2      	bcc.n	8002b72 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c1a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c1e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7bdb      	ldrb	r3, [r3, #15]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d016      	beq.n	8002c56 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c38:	f043 030b 	orr.w	r3, r3, #11
 8002c3c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c4e:	f043 030b 	orr.w	r3, r3, #11
 8002c52:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c54:	e015      	b.n	8002c82 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c68:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002c6c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c7c:	f043 030b 	orr.w	r3, r3, #11
 8002c80:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c90:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c94:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f007 faeb 	bl	800a280 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f007 fa19 	bl	800a0f6 <USB_ReadInterrupts>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cce:	d123      	bne.n	8002d18 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f007 faaf 	bl	800a238 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f007 f883 	bl	8009dea <USB_GetDevSpeed>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681c      	ldr	r4, [r3, #0]
 8002cf0:	f001 fea6 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 8002cf4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f006 fdaf 	bl	8009860 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f95a 	bl	8002fbc <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f007 f9ea 	bl	800a0f6 <USB_ReadInterrupts>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d10a      	bne.n	8002d42 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f93b 	bl	8002fa8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f002 0208 	and.w	r2, r2, #8
 8002d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f007 f9d5 	bl	800a0f6 <USB_ReadInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d52:	2b80      	cmp	r3, #128	@ 0x80
 8002d54:	d123      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d62:	2301      	movs	r3, #1
 8002d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d66:	e014      	b.n	8002d92 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d105      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f962 	bl	8003050 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	3301      	adds	r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	791b      	ldrb	r3, [r3, #4]
 8002d96:	461a      	mov	r2, r3
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d3e4      	bcc.n	8002d68 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f007 f9a7 	bl	800a0f6 <USB_ReadInterrupts>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002db2:	d13c      	bne.n	8002e2e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002db4:	2301      	movs	r3, #1
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db8:	e02b      	b.n	8002e12 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3318      	adds	r3, #24
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d115      	bne.n	8002e0c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002de0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	da12      	bge.n	8002e0c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	3317      	adds	r3, #23
 8002df6:	2201      	movs	r2, #1
 8002df8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	4619      	mov	r1, r3
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f922 	bl	8003050 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	3301      	adds	r3, #1
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	791b      	ldrb	r3, [r3, #4]
 8002e16:	461a      	mov	r2, r3
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d3cd      	bcc.n	8002dba <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f007 f95f 	bl	800a0f6 <USB_ReadInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e42:	d156      	bne.n	8002ef2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e44:	2301      	movs	r3, #1
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e48:	e045      	b.n	8002ed6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d12e      	bne.n	8002ed0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e72:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	da2b      	bge.n	8002ed0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002e84:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d121      	bne.n	8002ed0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10a      	bne.n	8002ed0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ec8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ecc:	6053      	str	r3, [r2, #4]
            break;
 8002ece:	e008      	b.n	8002ee2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	791b      	ldrb	r3, [r3, #4]
 8002eda:	461a      	mov	r2, r3
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d3b3      	bcc.n	8002e4a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f007 f8fd 	bl	800a0f6 <USB_ReadInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f06:	d10a      	bne.n	8002f1e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f88d 	bl	8003028 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f007 f8e7 	bl	800a0f6 <USB_ReadInterrupts>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d115      	bne.n	8002f5e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f879 	bl	800303c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	e000      	b.n	8002f5e <HAL_PCD_IRQHandler+0x996>
      return;
 8002f5c:	bf00      	nop
    }
  }
}
 8002f5e:	3734      	adds	r7, #52	@ 0x34
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd90      	pop	{r4, r7, pc}

08002f64 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800305c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003060:	2b00      	cmp	r3, #0
 8003062:	da0c      	bge.n	800307e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	f003 020f 	and.w	r2, r3, #15
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	3310      	adds	r3, #16
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	4413      	add	r3, r2
 8003078:	3304      	adds	r3, #4
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	e00c      	b.n	8003098 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	f003 020f 	and.w	r2, r3, #15
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	3304      	adds	r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68f9      	ldr	r1, [r7, #12]
 800309e:	4618      	mov	r0, r3
 80030a0:	f006 fec8 	bl	8009e34 <USB_EPStopXfer>
 80030a4:	4603      	mov	r3, r0
 80030a6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030a8:	7afb      	ldrb	r3, [r7, #11]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08a      	sub	sp, #40	@ 0x28
 80030b6:	af02      	add	r7, sp, #8
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	3310      	adds	r3, #16
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	3304      	adds	r3, #4
 80030d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d901      	bls.n	80030ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e06b      	b.n	80031c2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d902      	bls.n	8003106 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3303      	adds	r3, #3
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800310e:	e02a      	b.n	8003166 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	429a      	cmp	r2, r3
 8003124:	d902      	bls.n	800312c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	3303      	adds	r3, #3
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	68d9      	ldr	r1, [r3, #12]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	4603      	mov	r3, r0
 8003148:	6978      	ldr	r0, [r7, #20]
 800314a:	f006 ff1d 	bl	8009f88 <USB_WritePacket>

    ep->xfer_buff  += len;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	441a      	add	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	441a      	add	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	429a      	cmp	r2, r3
 800317a:	d809      	bhi.n	8003190 <PCD_WriteEmptyTxFifo+0xde>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003184:	429a      	cmp	r2, r3
 8003186:	d203      	bcs.n	8003190 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1bf      	bne.n	8003110 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	d811      	bhi.n	80031c0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	2201      	movs	r2, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	6939      	ldr	r1, [r7, #16]
 80031b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031bc:	4013      	ands	r3, r2
 80031be:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	333c      	adds	r3, #60	@ 0x3c
 80031e4:	3304      	adds	r3, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	799b      	ldrb	r3, [r3, #6]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d17b      	bne.n	80032fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d015      	beq.n	8003238 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	4a61      	ldr	r2, [pc, #388]	@ (8003394 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	f240 80b9 	bls.w	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80b3 	beq.w	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800322e:	461a      	mov	r2, r3
 8003230:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003234:	6093      	str	r3, [r2, #8]
 8003236:	e0a7      	b.n	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800324e:	461a      	mov	r2, r3
 8003250:	2320      	movs	r3, #32
 8003252:	6093      	str	r3, [r2, #8]
 8003254:	e098      	b.n	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800325c:	2b00      	cmp	r3, #0
 800325e:	f040 8093 	bne.w	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	4a4b      	ldr	r2, [pc, #300]	@ (8003394 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d90f      	bls.n	800328a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003280:	461a      	mov	r2, r3
 8003282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003286:	6093      	str	r3, [r2, #8]
 8003288:	e07e      	b.n	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4413      	add	r3, r2
 800329c:	3304      	adds	r3, #4
 800329e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a1a      	ldr	r2, [r3, #32]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	0159      	lsls	r1, r3, #5
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	440b      	add	r3, r1
 80032ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b6:	1ad2      	subs	r2, r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d114      	bne.n	80032ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032d4:	461a      	mov	r2, r3
 80032d6:	2101      	movs	r1, #1
 80032d8:	f006 ffd2 	bl	800a280 <USB_EP0_OutStart>
 80032dc:	e006      	b.n	80032ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	441a      	add	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	4619      	mov	r1, r3
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff fe36 	bl	8002f64 <HAL_PCD_DataOutStageCallback>
 80032f8:	e046      	b.n	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	4a26      	ldr	r2, [pc, #152]	@ (8003398 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d124      	bne.n	800334c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003318:	461a      	mov	r2, r3
 800331a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800331e:	6093      	str	r3, [r2, #8]
 8003320:	e032      	b.n	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	2320      	movs	r3, #32
 800333c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	4619      	mov	r1, r3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff fe0d 	bl	8002f64 <HAL_PCD_DataOutStageCallback>
 800334a:	e01d      	b.n	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d114      	bne.n	800337c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d108      	bne.n	800337c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003374:	461a      	mov	r2, r3
 8003376:	2100      	movs	r1, #0
 8003378:	f006 ff82 	bl	800a280 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	4619      	mov	r1, r3
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff fdee 	bl	8002f64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	4f54300a 	.word	0x4f54300a
 8003398:	4f54310a 	.word	0x4f54310a

0800339c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	333c      	adds	r3, #60	@ 0x3c
 80033b4:	3304      	adds	r3, #4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4a15      	ldr	r2, [pc, #84]	@ (8003424 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d90e      	bls.n	80033f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d009      	beq.n	80033f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033e8:	461a      	mov	r2, r3
 80033ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff fdcf 	bl	8002f94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003424 <PCD_EP_OutSetupPacket_int+0x88>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d90c      	bls.n	8003418 <PCD_EP_OutSetupPacket_int+0x7c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	799b      	ldrb	r3, [r3, #6]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d108      	bne.n	8003418 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003410:	461a      	mov	r2, r3
 8003412:	2101      	movs	r1, #1
 8003414:	f006 ff34 	bl	800a280 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	4f54300a 	.word	0x4f54300a

08003428 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800345a:	f043 0303 	orr.w	r3, r3, #3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003490:	4b39      	ldr	r3, [pc, #228]	@ (8003578 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003498:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d10b      	bne.n	80034ba <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a8:	d905      	bls.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80034aa:	4b33      	ldr	r3, [pc, #204]	@ (8003578 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	4a32      	ldr	r2, [pc, #200]	@ (8003578 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80034b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034b4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e057      	b.n	800356a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c0:	d90a      	bls.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80034c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003578 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003578 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80034d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034d4:	60d3      	str	r3, [r2, #12]
 80034d6:	e007      	b.n	80034e8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80034d8:	4b27      	ldr	r3, [pc, #156]	@ (8003578 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80034e0:	4925      	ldr	r1, [pc, #148]	@ (8003578 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80034e8:	4b24      	ldr	r3, [pc, #144]	@ (800357c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a24      	ldr	r2, [pc, #144]	@ (8003580 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	099b      	lsrs	r3, r3, #6
 80034f4:	2232      	movs	r2, #50	@ 0x32
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	4a21      	ldr	r2, [pc, #132]	@ (8003580 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	099b      	lsrs	r3, r3, #6
 8003502:	3301      	adds	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003506:	e002      	b.n	800350e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3b01      	subs	r3, #1
 800350c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800350e:	4b1a      	ldr	r3, [pc, #104]	@ (8003578 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <HAL_PWREx_ControlVoltageScaling+0x98>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f3      	bne.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01b      	beq.n	800355e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003526:	4b15      	ldr	r3, [pc, #84]	@ (800357c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a15      	ldr	r2, [pc, #84]	@ (8003580 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	099b      	lsrs	r3, r3, #6
 8003532:	2232      	movs	r2, #50	@ 0x32
 8003534:	fb02 f303 	mul.w	r3, r2, r3
 8003538:	4a11      	ldr	r2, [pc, #68]	@ (8003580 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	099b      	lsrs	r3, r3, #6
 8003540:	3301      	adds	r3, #1
 8003542:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003544:	e002      	b.n	800354c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3b01      	subs	r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800354c:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800354e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f3      	bne.n	8003546 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e000      	b.n	800356a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	46020800 	.word	0x46020800
 800357c:	20000018 	.word	0x20000018
 8003580:	10624dd3 	.word	0x10624dd3

08003584 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003588:	4b04      	ldr	r3, [pc, #16]	@ (800359c <HAL_PWREx_GetVoltageRange+0x18>)
 800358a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	46020800 	.word	0x46020800

080035a0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80035a8:	4b22      	ldr	r3, [pc, #136]	@ (8003634 <HAL_PWREx_ConfigSupply+0x94>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a22      	ldr	r2, [pc, #136]	@ (8003638 <HAL_PWREx_ConfigSupply+0x98>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	2232      	movs	r2, #50	@ 0x32
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003638 <HAL_PWREx_ConfigSupply+0x98>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	3301      	adds	r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d113      	bne.n	80035f4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80035cc:	4b1b      	ldr	r3, [pc, #108]	@ (800363c <HAL_PWREx_ConfigSupply+0x9c>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a1a      	ldr	r2, [pc, #104]	@ (800363c <HAL_PWREx_ConfigSupply+0x9c>)
 80035d2:	f023 0302 	bic.w	r3, r3, #2
 80035d6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80035d8:	e002      	b.n	80035e0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3b01      	subs	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80035e0:	4b16      	ldr	r3, [pc, #88]	@ (800363c <HAL_PWREx_ConfigSupply+0x9c>)
 80035e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d116      	bne.n	800361a <HAL_PWREx_ConfigSupply+0x7a>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f3      	bne.n	80035da <HAL_PWREx_ConfigSupply+0x3a>
 80035f2:	e012      	b.n	800361a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80035f4:	4b11      	ldr	r3, [pc, #68]	@ (800363c <HAL_PWREx_ConfigSupply+0x9c>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a10      	ldr	r2, [pc, #64]	@ (800363c <HAL_PWREx_ConfigSupply+0x9c>)
 80035fa:	f043 0302 	orr.w	r3, r3, #2
 80035fe:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003600:	e002      	b.n	8003608 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3b01      	subs	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003608:	4b0c      	ldr	r3, [pc, #48]	@ (800363c <HAL_PWREx_ConfigSupply+0x9c>)
 800360a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <HAL_PWREx_ConfigSupply+0x7a>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f3      	bne.n	8003602 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e000      	b.n	8003626 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20000018 	.word	0x20000018
 8003638:	10624dd3 	.word	0x10624dd3
 800363c:	46020800 	.word	0x46020800

08003640 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003644:	4b05      	ldr	r3, [pc, #20]	@ (800365c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	4a04      	ldr	r2, [pc, #16]	@ (800365c <HAL_PWREx_EnableVddUSB+0x1c>)
 800364a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800364e:	6113      	str	r3, [r2, #16]
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	46020800 	.word	0x46020800

08003660 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003664:	4b05      	ldr	r3, [pc, #20]	@ (800367c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	4a04      	ldr	r2, [pc, #16]	@ (800367c <HAL_PWREx_EnableVddIO2+0x1c>)
 800366a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800366e:	6113      	str	r3, [r2, #16]
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	46020800 	.word	0x46020800

08003680 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003684:	4b05      	ldr	r3, [pc, #20]	@ (800369c <HAL_PWREx_EnableVddA+0x1c>)
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	4a04      	ldr	r2, [pc, #16]	@ (800369c <HAL_PWREx_EnableVddA+0x1c>)
 800368a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800368e:	6113      	str	r3, [r2, #16]
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	46020800 	.word	0x46020800

080036a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08e      	sub	sp, #56	@ 0x38
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f000 bec8 	b.w	800444a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ba:	4b99      	ldr	r3, [pc, #612]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 030c 	and.w	r3, r3, #12
 80036c2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036c4:	4b96      	ldr	r3, [pc, #600]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80036c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 816c 	beq.w	80039b4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_RCC_OscConfig+0x52>
 80036e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e4:	2b0c      	cmp	r3, #12
 80036e6:	f040 80de 	bne.w	80038a6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	f040 80da 	bne.w	80038a6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f000 bea5 	b.w	800444a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003704:	4b86      	ldr	r3, [pc, #536]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d004      	beq.n	800371a <HAL_RCC_OscConfig+0x7a>
 8003710:	4b83      	ldr	r3, [pc, #524]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003718:	e005      	b.n	8003726 <HAL_RCC_OscConfig+0x86>
 800371a:	4b81      	ldr	r3, [pc, #516]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 800371c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003726:	4293      	cmp	r3, r2
 8003728:	d255      	bcs.n	80037d6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800372a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10a      	bne.n	8003746 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	4618      	mov	r0, r3
 8003736:	f001 f9d9 	bl	8004aec <RCC_SetFlashLatencyFromMSIRange>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f000 be82 	b.w	800444a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003746:	4b76      	ldr	r3, [pc, #472]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	4a75      	ldr	r2, [pc, #468]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 800374c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003750:	6093      	str	r3, [r2, #8]
 8003752:	4b73      	ldr	r3, [pc, #460]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	4970      	ldr	r1, [pc, #448]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 8003760:	4313      	orrs	r3, r2
 8003762:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800376c:	d309      	bcc.n	8003782 <HAL_RCC_OscConfig+0xe2>
 800376e:	4b6c      	ldr	r3, [pc, #432]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f023 021f 	bic.w	r2, r3, #31
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	4969      	ldr	r1, [pc, #420]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 800377c:	4313      	orrs	r3, r2
 800377e:	60cb      	str	r3, [r1, #12]
 8003780:	e07e      	b.n	8003880 <HAL_RCC_OscConfig+0x1e0>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	2b00      	cmp	r3, #0
 8003788:	da0a      	bge.n	80037a0 <HAL_RCC_OscConfig+0x100>
 800378a:	4b65      	ldr	r3, [pc, #404]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	015b      	lsls	r3, r3, #5
 8003798:	4961      	ldr	r1, [pc, #388]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 800379a:	4313      	orrs	r3, r2
 800379c:	60cb      	str	r3, [r1, #12]
 800379e:	e06f      	b.n	8003880 <HAL_RCC_OscConfig+0x1e0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a8:	d30a      	bcc.n	80037c0 <HAL_RCC_OscConfig+0x120>
 80037aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	029b      	lsls	r3, r3, #10
 80037b8:	4959      	ldr	r1, [pc, #356]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60cb      	str	r3, [r1, #12]
 80037be:	e05f      	b.n	8003880 <HAL_RCC_OscConfig+0x1e0>
 80037c0:	4b57      	ldr	r3, [pc, #348]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	03db      	lsls	r3, r3, #15
 80037ce:	4954      	ldr	r1, [pc, #336]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60cb      	str	r3, [r1, #12]
 80037d4:	e054      	b.n	8003880 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80037d6:	4b52      	ldr	r3, [pc, #328]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	4a51      	ldr	r2, [pc, #324]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80037dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037e0:	6093      	str	r3, [r2, #8]
 80037e2:	4b4f      	ldr	r3, [pc, #316]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	494c      	ldr	r1, [pc, #304]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80037fc:	d309      	bcc.n	8003812 <HAL_RCC_OscConfig+0x172>
 80037fe:	4b48      	ldr	r3, [pc, #288]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f023 021f 	bic.w	r2, r3, #31
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4945      	ldr	r1, [pc, #276]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 800380c:	4313      	orrs	r3, r2
 800380e:	60cb      	str	r3, [r1, #12]
 8003810:	e028      	b.n	8003864 <HAL_RCC_OscConfig+0x1c4>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	da0a      	bge.n	8003830 <HAL_RCC_OscConfig+0x190>
 800381a:	4b41      	ldr	r3, [pc, #260]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	015b      	lsls	r3, r3, #5
 8003828:	493d      	ldr	r1, [pc, #244]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 800382a:	4313      	orrs	r3, r2
 800382c:	60cb      	str	r3, [r1, #12]
 800382e:	e019      	b.n	8003864 <HAL_RCC_OscConfig+0x1c4>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003838:	d30a      	bcc.n	8003850 <HAL_RCC_OscConfig+0x1b0>
 800383a:	4b39      	ldr	r3, [pc, #228]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	029b      	lsls	r3, r3, #10
 8003848:	4935      	ldr	r1, [pc, #212]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 800384a:	4313      	orrs	r3, r2
 800384c:	60cb      	str	r3, [r1, #12]
 800384e:	e009      	b.n	8003864 <HAL_RCC_OscConfig+0x1c4>
 8003850:	4b33      	ldr	r3, [pc, #204]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	03db      	lsls	r3, r3, #15
 800385e:	4930      	ldr	r1, [pc, #192]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 8003860:	4313      	orrs	r3, r2
 8003862:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f93c 	bl	8004aec <RCC_SetFlashLatencyFromMSIRange>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	f000 bde5 	b.w	800444a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003880:	f001 f8de 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003884:	4b27      	ldr	r3, [pc, #156]	@ (8003924 <HAL_RCC_OscConfig+0x284>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7fd fca9 	bl	80011e0 <HAL_InitTick>
 800388e:	4603      	mov	r3, r0
 8003890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 808a 	beq.w	80039b2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800389e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038a2:	f000 bdd2 	b.w	800444a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d066      	beq.n	800397c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80038ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80038ba:	f7fd fd1b 	bl	80012f4 <HAL_GetTick>
 80038be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80038c0:	e009      	b.n	80038d6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038c2:	f7fd fd17 	bl	80012f4 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d902      	bls.n	80038d6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	f000 bdba 	b.w	800444a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80038d6:	4b12      	ldr	r3, [pc, #72]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0ef      	beq.n	80038c2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80038e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80038e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038ec:	6093      	str	r3, [r2, #8]
 80038ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	4909      	ldr	r1, [pc, #36]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003908:	d30e      	bcc.n	8003928 <HAL_RCC_OscConfig+0x288>
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f023 021f 	bic.w	r2, r3, #31
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	4902      	ldr	r1, [pc, #8]	@ (8003920 <HAL_RCC_OscConfig+0x280>)
 8003918:	4313      	orrs	r3, r2
 800391a:	60cb      	str	r3, [r1, #12]
 800391c:	e04a      	b.n	80039b4 <HAL_RCC_OscConfig+0x314>
 800391e:	bf00      	nop
 8003920:	46020c00 	.word	0x46020c00
 8003924:	2000001c 	.word	0x2000001c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	2b00      	cmp	r3, #0
 800392e:	da0a      	bge.n	8003946 <HAL_RCC_OscConfig+0x2a6>
 8003930:	4b98      	ldr	r3, [pc, #608]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	015b      	lsls	r3, r3, #5
 800393e:	4995      	ldr	r1, [pc, #596]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003940:	4313      	orrs	r3, r2
 8003942:	60cb      	str	r3, [r1, #12]
 8003944:	e036      	b.n	80039b4 <HAL_RCC_OscConfig+0x314>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800394e:	d30a      	bcc.n	8003966 <HAL_RCC_OscConfig+0x2c6>
 8003950:	4b90      	ldr	r3, [pc, #576]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	029b      	lsls	r3, r3, #10
 800395e:	498d      	ldr	r1, [pc, #564]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003960:	4313      	orrs	r3, r2
 8003962:	60cb      	str	r3, [r1, #12]
 8003964:	e026      	b.n	80039b4 <HAL_RCC_OscConfig+0x314>
 8003966:	4b8b      	ldr	r3, [pc, #556]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	03db      	lsls	r3, r3, #15
 8003974:	4987      	ldr	r1, [pc, #540]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003976:	4313      	orrs	r3, r2
 8003978:	60cb      	str	r3, [r1, #12]
 800397a:	e01b      	b.n	80039b4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800397c:	4b85      	ldr	r3, [pc, #532]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a84      	ldr	r2, [pc, #528]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003988:	f7fd fcb4 	bl	80012f4 <HAL_GetTick>
 800398c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800398e:	e009      	b.n	80039a4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003990:	f7fd fcb0 	bl	80012f4 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d902      	bls.n	80039a4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	f000 bd53 	b.w	800444a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80039a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ef      	bne.n	8003990 <HAL_RCC_OscConfig+0x2f0>
 80039b0:	e000      	b.n	80039b4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80039b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 808b 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_OscConfig+0x334>
 80039c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d109      	bne.n	80039e2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d106      	bne.n	80039e2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d17d      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f000 bd34 	b.w	800444a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ea:	d106      	bne.n	80039fa <HAL_RCC_OscConfig+0x35a>
 80039ec:	4b69      	ldr	r3, [pc, #420]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a68      	ldr	r2, [pc, #416]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 80039f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	e041      	b.n	8003a7e <HAL_RCC_OscConfig+0x3de>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a02:	d112      	bne.n	8003a2a <HAL_RCC_OscConfig+0x38a>
 8003a04:	4b63      	ldr	r3, [pc, #396]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a62      	ldr	r2, [pc, #392]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b60      	ldr	r3, [pc, #384]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5f      	ldr	r2, [pc, #380]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a16:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4b5d      	ldr	r3, [pc, #372]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a5c      	ldr	r2, [pc, #368]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	e029      	b.n	8003a7e <HAL_RCC_OscConfig+0x3de>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003a32:	d112      	bne.n	8003a5a <HAL_RCC_OscConfig+0x3ba>
 8003a34:	4b57      	ldr	r3, [pc, #348]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a56      	ldr	r2, [pc, #344]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b54      	ldr	r3, [pc, #336]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a53      	ldr	r2, [pc, #332]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b51      	ldr	r3, [pc, #324]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a50      	ldr	r2, [pc, #320]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	e011      	b.n	8003a7e <HAL_RCC_OscConfig+0x3de>
 8003a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a4d      	ldr	r2, [pc, #308]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	4b4b      	ldr	r3, [pc, #300]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a4a      	ldr	r2, [pc, #296]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	4b48      	ldr	r3, [pc, #288]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a47      	ldr	r2, [pc, #284]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003a78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d014      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003a86:	f7fd fc35 	bl	80012f4 <HAL_GetTick>
 8003a8a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a8c:	e009      	b.n	8003aa2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a8e:	f7fd fc31 	bl	80012f4 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b64      	cmp	r3, #100	@ 0x64
 8003a9a:	d902      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	f000 bcd4 	b.w	800444a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0ef      	beq.n	8003a8e <HAL_RCC_OscConfig+0x3ee>
 8003aae:	e013      	b.n	8003ad8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003ab0:	f7fd fc20 	bl	80012f4 <HAL_GetTick>
 8003ab4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ab6:	e009      	b.n	8003acc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7fd fc1c 	bl	80012f4 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	@ 0x64
 8003ac4:	d902      	bls.n	8003acc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	f000 bcbf 	b.w	800444a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003acc:	4b31      	ldr	r3, [pc, #196]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1ef      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d05f      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d005      	beq.n	8003af6 <HAL_RCC_OscConfig+0x456>
 8003aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aec:	2b0c      	cmp	r3, #12
 8003aee:	d114      	bne.n	8003b1a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d111      	bne.n	8003b1a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d102      	bne.n	8003b04 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f000 bca3 	b.w	800444a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003b04:	4b23      	ldr	r3, [pc, #140]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	4920      	ldr	r1, [pc, #128]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003b18:	e044      	b.n	8003ba4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d024      	beq.n	8003b6c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003b22:	4b1c      	ldr	r3, [pc, #112]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1b      	ldr	r2, [pc, #108]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b2c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b2e:	f7fd fbe1 	bl	80012f4 <HAL_GetTick>
 8003b32:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b34:	e009      	b.n	8003b4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b36:	f7fd fbdd 	bl	80012f4 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d902      	bls.n	8003b4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	f000 bc80 	b.w	800444a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b4a:	4b12      	ldr	r3, [pc, #72]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0ef      	beq.n	8003b36 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003b56:	4b0f      	ldr	r3, [pc, #60]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	041b      	lsls	r3, r3, #16
 8003b64:	490b      	ldr	r1, [pc, #44]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	610b      	str	r3, [r1, #16]
 8003b6a:	e01b      	b.n	8003ba4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003b6c:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a08      	ldr	r2, [pc, #32]	@ (8003b94 <HAL_RCC_OscConfig+0x4f4>)
 8003b72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b76:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b78:	f7fd fbbc 	bl	80012f4 <HAL_GetTick>
 8003b7c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b7e:	e00b      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b80:	f7fd fbb8 	bl	80012f4 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d904      	bls.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	f000 bc5b 	b.w	800444a <HAL_RCC_OscConfig+0xdaa>
 8003b94:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b98:	4baf      	ldr	r3, [pc, #700]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1ed      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80c8 	beq.w	8003d42 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb8:	4ba7      	ldr	r3, [pc, #668]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d111      	bne.n	8003bea <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	4ba4      	ldr	r3, [pc, #656]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bcc:	4aa2      	ldr	r2, [pc, #648]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003bd6:	4ba0      	ldr	r3, [pc, #640]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003be4:	2301      	movs	r3, #1
 8003be6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003bea:	4b9c      	ldr	r3, [pc, #624]	@ (8003e5c <HAL_RCC_OscConfig+0x7bc>)
 8003bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d119      	bne.n	8003c2a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003bf6:	4b99      	ldr	r3, [pc, #612]	@ (8003e5c <HAL_RCC_OscConfig+0x7bc>)
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfa:	4a98      	ldr	r2, [pc, #608]	@ (8003e5c <HAL_RCC_OscConfig+0x7bc>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c02:	f7fd fb77 	bl	80012f4 <HAL_GetTick>
 8003c06:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c08:	e009      	b.n	8003c1e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0a:	f7fd fb73 	bl	80012f4 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d902      	bls.n	8003c1e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	f000 bc16 	b.w	800444a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c1e:	4b8f      	ldr	r3, [pc, #572]	@ (8003e5c <HAL_RCC_OscConfig+0x7bc>)
 8003c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0ef      	beq.n	8003c0a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d05f      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003c32:	4b89      	ldr	r3, [pc, #548]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c38:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d037      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d006      	beq.n	8003c60 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e3f4      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01b      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003c6a:	4b7b      	ldr	r3, [pc, #492]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c70:	4a79      	ldr	r2, [pc, #484]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003c72:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003c76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003c7a:	f7fd fb3b 	bl	80012f4 <HAL_GetTick>
 8003c7e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c82:	f7fd fb37 	bl	80012f4 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b05      	cmp	r3, #5
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e3da      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003c94:	4b70      	ldr	r3, [pc, #448]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1ef      	bne.n	8003c82 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003ca2:	4b6d      	ldr	r3, [pc, #436]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ca8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	4969      	ldr	r1, [pc, #420]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003cb8:	4b67      	ldr	r3, [pc, #412]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cbe:	4a66      	ldr	r2, [pc, #408]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003cc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cc4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003cc8:	f7fd fb14 	bl	80012f4 <HAL_GetTick>
 8003ccc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd0:	f7fd fb10 	bl	80012f4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b05      	cmp	r3, #5
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e3b3      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0ef      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x630>
 8003cf0:	e01b      	b.n	8003d2a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003cf2:	4b59      	ldr	r3, [pc, #356]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cf8:	4a57      	ldr	r2, [pc, #348]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003cfa:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003cfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003d02:	f7fd faf7 	bl	80012f4 <HAL_GetTick>
 8003d06:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0a:	f7fd faf3 	bl	80012f4 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b05      	cmp	r3, #5
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e396      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d1c:	4b4e      	ldr	r3, [pc, #312]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1ef      	bne.n	8003d0a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d2a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d107      	bne.n	8003d42 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d32:	4b49      	ldr	r3, [pc, #292]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d38:	4a47      	ldr	r2, [pc, #284]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003d3a:	f023 0304 	bic.w	r3, r3, #4
 8003d3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8111 	beq.w	8003f72 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d56:	4b40      	ldr	r3, [pc, #256]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d111      	bne.n	8003d88 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d64:	4b3c      	ldr	r3, [pc, #240]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6a:	4a3b      	ldr	r2, [pc, #236]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003d6c:	f043 0304 	orr.w	r3, r3, #4
 8003d70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003d74:	4b38      	ldr	r3, [pc, #224]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d88:	4b34      	ldr	r3, [pc, #208]	@ (8003e5c <HAL_RCC_OscConfig+0x7bc>)
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d118      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003d94:	4b31      	ldr	r3, [pc, #196]	@ (8003e5c <HAL_RCC_OscConfig+0x7bc>)
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d98:	4a30      	ldr	r2, [pc, #192]	@ (8003e5c <HAL_RCC_OscConfig+0x7bc>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da0:	f7fd faa8 	bl	80012f4 <HAL_GetTick>
 8003da4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da8:	f7fd faa4 	bl	80012f4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e347      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003dba:	4b28      	ldr	r3, [pc, #160]	@ (8003e5c <HAL_RCC_OscConfig+0x7bc>)
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01f      	beq.n	8003e12 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d010      	beq.n	8003e00 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003dde:	4b1e      	ldr	r3, [pc, #120]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003de4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003de6:	f043 0304 	orr.w	r3, r3, #4
 8003dea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dee:	4b1a      	ldr	r3, [pc, #104]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003df4:	4a18      	ldr	r2, [pc, #96]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dfe:	e018      	b.n	8003e32 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e00:	4b15      	ldr	r3, [pc, #84]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e06:	4a14      	ldr	r2, [pc, #80]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e10:	e00f      	b.n	8003e32 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e12:	4b11      	ldr	r3, [pc, #68]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e18:	4a0f      	ldr	r2, [pc, #60]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e22:	4b0d      	ldr	r3, [pc, #52]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e28:	4a0b      	ldr	r2, [pc, #44]	@ (8003e58 <HAL_RCC_OscConfig+0x7b8>)
 8003e2a:	f023 0304 	bic.w	r3, r3, #4
 8003e2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d057      	beq.n	8003eea <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003e3a:	f7fd fa5b 	bl	80012f4 <HAL_GetTick>
 8003e3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e40:	e00e      	b.n	8003e60 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7fd fa57 	bl	80012f4 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d905      	bls.n	8003e60 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e2f8      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
 8003e58:	46020c00 	.word	0x46020c00
 8003e5c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e60:	4b9c      	ldr	r3, [pc, #624]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0e9      	beq.n	8003e42 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01b      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003e7a:	4b96      	ldr	r3, [pc, #600]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e80:	4a94      	ldr	r2, [pc, #592]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8c:	f7fd fa32 	bl	80012f4 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e2d3      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ea2:	4b8c      	ldr	r3, [pc, #560]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ed      	beq.n	8003e8c <HAL_RCC_OscConfig+0x7ec>
 8003eb0:	e053      	b.n	8003f5a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003eb2:	4b88      	ldr	r3, [pc, #544]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eb8:	4a86      	ldr	r2, [pc, #536]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ebe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec4:	f7fd fa16 	bl	80012f4 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e2b7      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003eda:	4b7e      	ldr	r3, [pc, #504]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1ed      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x824>
 8003ee8:	e037      	b.n	8003f5a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003eea:	f7fd fa03 	bl	80012f4 <HAL_GetTick>
 8003eee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fd f9ff 	bl	80012f4 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e2a0      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f08:	4b72      	ldr	r3, [pc, #456]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003f0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1ed      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003f16:	4b6f      	ldr	r3, [pc, #444]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01a      	beq.n	8003f5a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f24:	4b6b      	ldr	r3, [pc, #428]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f2a:	4a6a      	ldr	r2, [pc, #424]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003f2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fd f9dd 	bl	80012f4 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e27e      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f4c:	4b61      	ldr	r3, [pc, #388]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003f4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ed      	bne.n	8003f36 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f5a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f62:	4b5c      	ldr	r3, [pc, #368]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f68:	4a5a      	ldr	r2, [pc, #360]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003f6a:	f023 0304 	bic.w	r3, r3, #4
 8003f6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d036      	beq.n	8003fec <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d019      	beq.n	8003fba <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003f86:	4b53      	ldr	r3, [pc, #332]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a52      	ldr	r2, [pc, #328]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003f8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f90:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003f92:	f7fd f9af 	bl	80012f4 <HAL_GetTick>
 8003f96:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f9a:	f7fd f9ab 	bl	80012f4 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e24e      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003fac:	4b49      	ldr	r3, [pc, #292]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0f0      	beq.n	8003f9a <HAL_RCC_OscConfig+0x8fa>
 8003fb8:	e018      	b.n	8003fec <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003fba:	4b46      	ldr	r3, [pc, #280]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a45      	ldr	r2, [pc, #276]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003fc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fc4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003fc6:	f7fd f995 	bl	80012f4 <HAL_GetTick>
 8003fca:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fce:	f7fd f991 	bl	80012f4 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e234      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003fe0:	4b3c      	ldr	r3, [pc, #240]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f0      	bne.n	8003fce <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d036      	beq.n	8004066 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d019      	beq.n	8004034 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004000:	4b34      	ldr	r3, [pc, #208]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a33      	ldr	r2, [pc, #204]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8004006:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800400a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800400c:	f7fd f972 	bl	80012f4 <HAL_GetTick>
 8004010:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004014:	f7fd f96e 	bl	80012f4 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e211      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004026:	4b2b      	ldr	r3, [pc, #172]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x974>
 8004032:	e018      	b.n	8004066 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004034:	4b27      	ldr	r3, [pc, #156]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a26      	ldr	r2, [pc, #152]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 800403a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800403e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004040:	f7fd f958 	bl	80012f4 <HAL_GetTick>
 8004044:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004048:	f7fd f954 	bl	80012f4 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e1f7      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800405a:	4b1e      	ldr	r3, [pc, #120]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d07f      	beq.n	8004172 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004076:	2b00      	cmp	r3, #0
 8004078:	d062      	beq.n	8004140 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800407a:	4b16      	ldr	r3, [pc, #88]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	4a15      	ldr	r2, [pc, #84]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8004080:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004084:	6093      	str	r3, [r2, #8]
 8004086:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	4910      	ldr	r1, [pc, #64]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 8004094:	4313      	orrs	r3, r2
 8004096:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80040a0:	d309      	bcc.n	80040b6 <HAL_RCC_OscConfig+0xa16>
 80040a2:	4b0c      	ldr	r3, [pc, #48]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f023 021f 	bic.w	r2, r3, #31
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	4909      	ldr	r1, [pc, #36]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60cb      	str	r3, [r1, #12]
 80040b4:	e02a      	b.n	800410c <HAL_RCC_OscConfig+0xa6c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	da0c      	bge.n	80040d8 <HAL_RCC_OscConfig+0xa38>
 80040be:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	015b      	lsls	r3, r3, #5
 80040cc:	4901      	ldr	r1, [pc, #4]	@ (80040d4 <HAL_RCC_OscConfig+0xa34>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60cb      	str	r3, [r1, #12]
 80040d2:	e01b      	b.n	800410c <HAL_RCC_OscConfig+0xa6c>
 80040d4:	46020c00 	.word	0x46020c00
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e0:	d30a      	bcc.n	80040f8 <HAL_RCC_OscConfig+0xa58>
 80040e2:	4ba1      	ldr	r3, [pc, #644]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	029b      	lsls	r3, r3, #10
 80040f0:	499d      	ldr	r1, [pc, #628]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60cb      	str	r3, [r1, #12]
 80040f6:	e009      	b.n	800410c <HAL_RCC_OscConfig+0xa6c>
 80040f8:	4b9b      	ldr	r3, [pc, #620]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	03db      	lsls	r3, r3, #15
 8004106:	4998      	ldr	r1, [pc, #608]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004108:	4313      	orrs	r3, r2
 800410a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800410c:	4b96      	ldr	r3, [pc, #600]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a95      	ldr	r2, [pc, #596]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004112:	f043 0310 	orr.w	r3, r3, #16
 8004116:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004118:	f7fd f8ec 	bl	80012f4 <HAL_GetTick>
 800411c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004120:	f7fd f8e8 	bl	80012f4 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e18b      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004132:	4b8d      	ldr	r3, [pc, #564]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0xa80>
 800413e:	e018      	b.n	8004172 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004140:	4b89      	ldr	r3, [pc, #548]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a88      	ldr	r2, [pc, #544]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004146:	f023 0310 	bic.w	r3, r3, #16
 800414a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800414c:	f7fd f8d2 	bl	80012f4 <HAL_GetTick>
 8004150:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004154:	f7fd f8ce 	bl	80012f4 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e171      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004166:	4b80      	ldr	r3, [pc, #512]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8166 	beq.w	8004448 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800417c:	2300      	movs	r3, #0
 800417e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004182:	4b79      	ldr	r3, [pc, #484]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b0c      	cmp	r3, #12
 800418c:	f000 80f2 	beq.w	8004374 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004194:	2b02      	cmp	r3, #2
 8004196:	f040 80c5 	bne.w	8004324 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800419a:	4b73      	ldr	r3, [pc, #460]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a72      	ldr	r2, [pc, #456]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80041a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041a4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041a6:	f7fd f8a5 	bl	80012f4 <HAL_GetTick>
 80041aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ae:	f7fd f8a1 	bl	80012f4 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e144      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041c0:	4b69      	ldr	r3, [pc, #420]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041cc:	4b66      	ldr	r3, [pc, #408]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80041ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d111      	bne.n	80041fe <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80041da:	4b63      	ldr	r3, [pc, #396]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80041dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041e0:	4a61      	ldr	r2, [pc, #388]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80041e2:	f043 0304 	orr.w	r3, r3, #4
 80041e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80041ea:	4b5f      	ldr	r3, [pc, #380]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80041ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80041fe:	4b5b      	ldr	r3, [pc, #364]	@ (800436c <HAL_RCC_OscConfig+0xccc>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004206:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800420a:	d102      	bne.n	8004212 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800420c:	2301      	movs	r3, #1
 800420e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004212:	4b56      	ldr	r3, [pc, #344]	@ (800436c <HAL_RCC_OscConfig+0xccc>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	4a55      	ldr	r2, [pc, #340]	@ (800436c <HAL_RCC_OscConfig+0xccc>)
 8004218:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800421c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800421e:	4b52      	ldr	r3, [pc, #328]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004222:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004226:	f023 0303 	bic.w	r3, r3, #3
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004232:	3a01      	subs	r2, #1
 8004234:	0212      	lsls	r2, r2, #8
 8004236:	4311      	orrs	r1, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800423c:	430a      	orrs	r2, r1
 800423e:	494a      	ldr	r1, [pc, #296]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004240:	4313      	orrs	r3, r2
 8004242:	628b      	str	r3, [r1, #40]	@ 0x28
 8004244:	4b48      	ldr	r3, [pc, #288]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004248:	4b49      	ldr	r3, [pc, #292]	@ (8004370 <HAL_RCC_OscConfig+0xcd0>)
 800424a:	4013      	ands	r3, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004250:	3a01      	subs	r2, #1
 8004252:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800425a:	3a01      	subs	r2, #1
 800425c:	0252      	lsls	r2, r2, #9
 800425e:	b292      	uxth	r2, r2
 8004260:	4311      	orrs	r1, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004266:	3a01      	subs	r2, #1
 8004268:	0412      	lsls	r2, r2, #16
 800426a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800426e:	4311      	orrs	r1, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004274:	3a01      	subs	r2, #1
 8004276:	0612      	lsls	r2, r2, #24
 8004278:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800427c:	430a      	orrs	r2, r1
 800427e:	493a      	ldr	r1, [pc, #232]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004280:	4313      	orrs	r3, r2
 8004282:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004284:	4b38      	ldr	r3, [pc, #224]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004288:	4a37      	ldr	r2, [pc, #220]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 800428a:	f023 0310 	bic.w	r3, r3, #16
 800428e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004294:	4a34      	ldr	r2, [pc, #208]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800429a:	4b33      	ldr	r3, [pc, #204]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 800429c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429e:	4a32      	ldr	r2, [pc, #200]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80042a0:	f043 0310 	orr.w	r3, r3, #16
 80042a4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80042a6:	4b30      	ldr	r3, [pc, #192]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80042a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042aa:	f023 020c 	bic.w	r2, r3, #12
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b2:	492d      	ldr	r1, [pc, #180]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80042b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80042c0:	4b2a      	ldr	r3, [pc, #168]	@ (800436c <HAL_RCC_OscConfig+0xccc>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4a29      	ldr	r2, [pc, #164]	@ (800436c <HAL_RCC_OscConfig+0xccc>)
 80042c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042ca:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80042cc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d107      	bne.n	80042e4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80042d4:	4b24      	ldr	r3, [pc, #144]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80042d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042da:	4a23      	ldr	r2, [pc, #140]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80042dc:	f023 0304 	bic.w	r3, r3, #4
 80042e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80042e4:	4b20      	ldr	r3, [pc, #128]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 80042ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042f0:	f7fd f800 	bl	80012f4 <HAL_GetTick>
 80042f4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f8:	f7fc fffc 	bl	80012f4 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e09f      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800430a:	4b17      	ldr	r3, [pc, #92]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004316:	4b14      	ldr	r3, [pc, #80]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431a:	4a13      	ldr	r2, [pc, #76]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 800431c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004320:	6293      	str	r3, [r2, #40]	@ 0x28
 8004322:	e091      	b.n	8004448 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004324:	4b10      	ldr	r3, [pc, #64]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a0f      	ldr	r2, [pc, #60]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 800432a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800432e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004330:	f7fc ffe0 	bl	80012f4 <HAL_GetTick>
 8004334:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004338:	f7fc ffdc 	bl	80012f4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e07f      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800434a:	4b07      	ldr	r3, [pc, #28]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004356:	4b04      	ldr	r3, [pc, #16]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 8004358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435a:	4a03      	ldr	r2, [pc, #12]	@ (8004368 <HAL_RCC_OscConfig+0xcc8>)
 800435c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004360:	f023 0303 	bic.w	r3, r3, #3
 8004364:	6293      	str	r3, [r2, #40]	@ 0x28
 8004366:	e06f      	b.n	8004448 <HAL_RCC_OscConfig+0xda8>
 8004368:	46020c00 	.word	0x46020c00
 800436c:	46020800 	.word	0x46020800
 8004370:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004374:	4b37      	ldr	r3, [pc, #220]	@ (8004454 <HAL_RCC_OscConfig+0xdb4>)
 8004376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004378:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800437a:	4b36      	ldr	r3, [pc, #216]	@ (8004454 <HAL_RCC_OscConfig+0xdb4>)
 800437c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004384:	2b01      	cmp	r3, #1
 8004386:	d039      	beq.n	80043fc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f003 0203 	and.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d132      	bne.n	80043fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	0a1b      	lsrs	r3, r3, #8
 800439a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d129      	bne.n	80043fc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d122      	bne.n	80043fc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043c0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d11a      	bne.n	80043fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	0a5b      	lsrs	r3, r3, #9
 80043ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d111      	bne.n	80043fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	0c1b      	lsrs	r3, r3, #16
 80043dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d108      	bne.n	80043fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	0e1b      	lsrs	r3, r3, #24
 80043ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e024      	b.n	800444a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004400:	4b14      	ldr	r3, [pc, #80]	@ (8004454 <HAL_RCC_OscConfig+0xdb4>)
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	08db      	lsrs	r3, r3, #3
 8004406:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800440e:	429a      	cmp	r2, r3
 8004410:	d01a      	beq.n	8004448 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004412:	4b10      	ldr	r3, [pc, #64]	@ (8004454 <HAL_RCC_OscConfig+0xdb4>)
 8004414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004416:	4a0f      	ldr	r2, [pc, #60]	@ (8004454 <HAL_RCC_OscConfig+0xdb4>)
 8004418:	f023 0310 	bic.w	r3, r3, #16
 800441c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7fc ff69 	bl	80012f4 <HAL_GetTick>
 8004422:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004424:	bf00      	nop
 8004426:	f7fc ff65 	bl	80012f4 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442e:	4293      	cmp	r3, r2
 8004430:	d0f9      	beq.n	8004426 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004436:	4a07      	ldr	r2, [pc, #28]	@ (8004454 <HAL_RCC_OscConfig+0xdb4>)
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800443c:	4b05      	ldr	r3, [pc, #20]	@ (8004454 <HAL_RCC_OscConfig+0xdb4>)
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	4a04      	ldr	r2, [pc, #16]	@ (8004454 <HAL_RCC_OscConfig+0xdb4>)
 8004442:	f043 0310 	orr.w	r3, r3, #16
 8004446:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3738      	adds	r7, #56	@ 0x38
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	46020c00 	.word	0x46020c00

08004458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e1d9      	b.n	8004820 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800446c:	4b9b      	ldr	r3, [pc, #620]	@ (80046dc <HAL_RCC_ClockConfig+0x284>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d910      	bls.n	800449c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4b98      	ldr	r3, [pc, #608]	@ (80046dc <HAL_RCC_ClockConfig+0x284>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 020f 	bic.w	r2, r3, #15
 8004482:	4996      	ldr	r1, [pc, #600]	@ (80046dc <HAL_RCC_ClockConfig+0x284>)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	4b94      	ldr	r3, [pc, #592]	@ (80046dc <HAL_RCC_ClockConfig+0x284>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d001      	beq.n	800449c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e1c1      	b.n	8004820 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d010      	beq.n	80044ca <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	695a      	ldr	r2, [r3, #20]
 80044ac:	4b8c      	ldr	r3, [pc, #560]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d908      	bls.n	80044ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80044b8:	4b89      	ldr	r3, [pc, #548]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	4986      	ldr	r1, [pc, #536]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d012      	beq.n	80044fc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	4b81      	ldr	r3, [pc, #516]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d909      	bls.n	80044fc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80044e8:	4b7d      	ldr	r3, [pc, #500]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	497a      	ldr	r1, [pc, #488]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d010      	beq.n	800452a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	4b74      	ldr	r3, [pc, #464]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004514:	429a      	cmp	r2, r3
 8004516:	d908      	bls.n	800452a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004518:	4b71      	ldr	r3, [pc, #452]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	496e      	ldr	r1, [pc, #440]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 8004526:	4313      	orrs	r3, r2
 8004528:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d010      	beq.n	8004558 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	4b69      	ldr	r3, [pc, #420]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	429a      	cmp	r2, r3
 8004544:	d908      	bls.n	8004558 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004546:	4b66      	ldr	r3, [pc, #408]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f023 020f 	bic.w	r2, r3, #15
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	4963      	ldr	r1, [pc, #396]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 8004554:	4313      	orrs	r3, r2
 8004556:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 80d2 	beq.w	800470a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004566:	2300      	movs	r3, #0
 8004568:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d143      	bne.n	80045fa <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004572:	4b5b      	ldr	r3, [pc, #364]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 8004574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d110      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004580:	4b57      	ldr	r3, [pc, #348]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 8004582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004586:	4a56      	ldr	r2, [pc, #344]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 8004588:	f043 0304 	orr.w	r3, r3, #4
 800458c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004590:	4b53      	ldr	r3, [pc, #332]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 8004592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800459e:	2301      	movs	r3, #1
 80045a0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80045a2:	f7fc fea7 	bl	80012f4 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80045a8:	4b4e      	ldr	r3, [pc, #312]	@ (80046e4 <HAL_RCC_ClockConfig+0x28c>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00f      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80045b6:	f7fc fe9d 	bl	80012f4 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e12b      	b.n	8004820 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80045c8:	4b46      	ldr	r3, [pc, #280]	@ (80046e4 <HAL_RCC_ClockConfig+0x28c>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80045da:	4b41      	ldr	r3, [pc, #260]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 80045dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e0:	4a3f      	ldr	r2, [pc, #252]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 80045e2:	f023 0304 	bic.w	r3, r3, #4
 80045e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80045ea:	4b3d      	ldr	r3, [pc, #244]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d121      	bne.n	800463a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e112      	b.n	8004820 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d107      	bne.n	8004612 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004602:	4b37      	ldr	r3, [pc, #220]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d115      	bne.n	800463a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e106      	b.n	8004820 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800461a:	4b31      	ldr	r3, [pc, #196]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e0fa      	b.n	8004820 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800462a:	4b2d      	ldr	r3, [pc, #180]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e0f2      	b.n	8004820 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800463a:	4b29      	ldr	r3, [pc, #164]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4926      	ldr	r1, [pc, #152]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 8004648:	4313      	orrs	r3, r2
 800464a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800464c:	f7fc fe52 	bl	80012f4 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b03      	cmp	r3, #3
 8004658:	d112      	bne.n	8004680 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800465a:	e00a      	b.n	8004672 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465c:	f7fc fe4a 	bl	80012f4 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e0d6      	b.n	8004820 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004672:	4b1b      	ldr	r3, [pc, #108]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	2b0c      	cmp	r3, #12
 800467c:	d1ee      	bne.n	800465c <HAL_RCC_ClockConfig+0x204>
 800467e:	e044      	b.n	800470a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d112      	bne.n	80046ae <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004688:	e00a      	b.n	80046a0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468a:	f7fc fe33 	bl	80012f4 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004698:	4293      	cmp	r3, r2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e0bf      	b.n	8004820 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046a0:	4b0f      	ldr	r3, [pc, #60]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	f003 030c 	and.w	r3, r3, #12
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d1ee      	bne.n	800468a <HAL_RCC_ClockConfig+0x232>
 80046ac:	e02d      	b.n	800470a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d123      	bne.n	80046fe <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fc fe1c 	bl	80012f4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e0a8      	b.n	8004820 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046ce:	4b04      	ldr	r3, [pc, #16]	@ (80046e0 <HAL_RCC_ClockConfig+0x288>)
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1ee      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x260>
 80046da:	e016      	b.n	800470a <HAL_RCC_ClockConfig+0x2b2>
 80046dc:	40022000 	.word	0x40022000
 80046e0:	46020c00 	.word	0x46020c00
 80046e4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e8:	f7fc fe04 	bl	80012f4 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e090      	b.n	8004820 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004828 <HAL_RCC_ClockConfig+0x3d0>)
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b04      	cmp	r3, #4
 8004708:	d1ee      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d010      	beq.n	8004738 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	4b43      	ldr	r3, [pc, #268]	@ (8004828 <HAL_RCC_ClockConfig+0x3d0>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	429a      	cmp	r2, r3
 8004724:	d208      	bcs.n	8004738 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004726:	4b40      	ldr	r3, [pc, #256]	@ (8004828 <HAL_RCC_ClockConfig+0x3d0>)
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f023 020f 	bic.w	r2, r3, #15
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	493d      	ldr	r1, [pc, #244]	@ (8004828 <HAL_RCC_ClockConfig+0x3d0>)
 8004734:	4313      	orrs	r3, r2
 8004736:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004738:	4b3c      	ldr	r3, [pc, #240]	@ (800482c <HAL_RCC_ClockConfig+0x3d4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d210      	bcs.n	8004768 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b39      	ldr	r3, [pc, #228]	@ (800482c <HAL_RCC_ClockConfig+0x3d4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 020f 	bic.w	r2, r3, #15
 800474e:	4937      	ldr	r1, [pc, #220]	@ (800482c <HAL_RCC_ClockConfig+0x3d4>)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004756:	4b35      	ldr	r3, [pc, #212]	@ (800482c <HAL_RCC_ClockConfig+0x3d4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e05b      	b.n	8004820 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d010      	beq.n	8004796 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	4b2b      	ldr	r3, [pc, #172]	@ (8004828 <HAL_RCC_ClockConfig+0x3d0>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004780:	429a      	cmp	r2, r3
 8004782:	d208      	bcs.n	8004796 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004784:	4b28      	ldr	r3, [pc, #160]	@ (8004828 <HAL_RCC_ClockConfig+0x3d0>)
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4925      	ldr	r1, [pc, #148]	@ (8004828 <HAL_RCC_ClockConfig+0x3d0>)
 8004792:	4313      	orrs	r3, r2
 8004794:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d012      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	4b20      	ldr	r3, [pc, #128]	@ (8004828 <HAL_RCC_ClockConfig+0x3d0>)
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d209      	bcs.n	80047c8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80047b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004828 <HAL_RCC_ClockConfig+0x3d0>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	4919      	ldr	r1, [pc, #100]	@ (8004828 <HAL_RCC_ClockConfig+0x3d0>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d010      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	695a      	ldr	r2, [r3, #20]
 80047d8:	4b13      	ldr	r3, [pc, #76]	@ (8004828 <HAL_RCC_ClockConfig+0x3d0>)
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d208      	bcs.n	80047f6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80047e4:	4b10      	ldr	r3, [pc, #64]	@ (8004828 <HAL_RCC_ClockConfig+0x3d0>)
 80047e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	490d      	ldr	r1, [pc, #52]	@ (8004828 <HAL_RCC_ClockConfig+0x3d0>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80047f6:	f000 f821 	bl	800483c <HAL_RCC_GetSysClockFreq>
 80047fa:	4602      	mov	r2, r0
 80047fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <HAL_RCC_ClockConfig+0x3d0>)
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	490a      	ldr	r1, [pc, #40]	@ (8004830 <HAL_RCC_ClockConfig+0x3d8>)
 8004806:	5ccb      	ldrb	r3, [r1, r3]
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
 800480c:	4a09      	ldr	r2, [pc, #36]	@ (8004834 <HAL_RCC_ClockConfig+0x3dc>)
 800480e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004810:	4b09      	ldr	r3, [pc, #36]	@ (8004838 <HAL_RCC_ClockConfig+0x3e0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7fc fce3 	bl	80011e0 <HAL_InitTick>
 800481a:	4603      	mov	r3, r0
 800481c:	73fb      	strb	r3, [r7, #15]

  return status;
 800481e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	46020c00 	.word	0x46020c00
 800482c:	40022000 	.word	0x40022000
 8004830:	0800ad28 	.word	0x0800ad28
 8004834:	20000018 	.word	0x20000018
 8004838:	2000001c 	.word	0x2000001c

0800483c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800483c:	b480      	push	{r7}
 800483e:	b08b      	sub	sp, #44	@ 0x2c
 8004840:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800484a:	4b78      	ldr	r3, [pc, #480]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004854:	4b75      	ldr	r3, [pc, #468]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_GetSysClockFreq+0x34>
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b0c      	cmp	r3, #12
 8004868:	d121      	bne.n	80048ae <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d11e      	bne.n	80048ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004870:	4b6e      	ldr	r3, [pc, #440]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d107      	bne.n	800488c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800487c:	4b6b      	ldr	r3, [pc, #428]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800487e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004882:	0b1b      	lsrs	r3, r3, #12
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24
 800488a:	e005      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800488c:	4b67      	ldr	r3, [pc, #412]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	0f1b      	lsrs	r3, r3, #28
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004898:	4a65      	ldr	r2, [pc, #404]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d110      	bne.n	80048ca <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048aa:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048ac:	e00d      	b.n	80048ca <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048ae:	4b5f      	ldr	r3, [pc, #380]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d102      	bne.n	80048c0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048ba:	4b5e      	ldr	r3, [pc, #376]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80048bc:	623b      	str	r3, [r7, #32]
 80048be:	e004      	b.n	80048ca <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d101      	bne.n	80048ca <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80048c8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b0c      	cmp	r3, #12
 80048ce:	f040 80a5 	bne.w	8004a1c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80048d2:	4b56      	ldr	r3, [pc, #344]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80048dc:	4b53      	ldr	r3, [pc, #332]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e0:	0a1b      	lsrs	r3, r3, #8
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	3301      	adds	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80048ea:	4b50      	ldr	r3, [pc, #320]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ee:	091b      	lsrs	r3, r3, #4
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80048f6:	4b4d      	ldr	r3, [pc, #308]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fa:	08db      	lsrs	r3, r3, #3
 80048fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	fb02 f303 	mul.w	r3, r2, r3
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b02      	cmp	r3, #2
 8004916:	d003      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0xe4>
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d022      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x128>
 800491e:	e043      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004a38 <HAL_RCC_GetSysClockFreq+0x1fc>
 800492e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004932:	4b3e      	ldr	r3, [pc, #248]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004942:	ed97 6a01 	vldr	s12, [r7, #4]
 8004946:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004a3c <HAL_RCC_GetSysClockFreq+0x200>
 800494a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800494e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004956:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800495a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004962:	e046      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004a38 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004976:	4b2d      	ldr	r3, [pc, #180]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004986:	ed97 6a01 	vldr	s12, [r7, #4]
 800498a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004a3c <HAL_RCC_GetSysClockFreq+0x200>
 800498e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004992:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800499a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800499e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049a6:	e024      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049d0:	ed97 6a01 	vldr	s12, [r7, #4]
 80049d4:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004a3c <HAL_RCC_GetSysClockFreq+0x200>
 80049d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049f0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80049f2:	4b0e      	ldr	r3, [pc, #56]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f6:	0e1b      	lsrs	r3, r3, #24
 80049f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049fc:	3301      	adds	r3, #1
 80049fe:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a16:	ee17 3a90 	vmov	r3, s15
 8004a1a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	372c      	adds	r7, #44	@ 0x2c
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	46020c00 	.word	0x46020c00
 8004a30:	0800ad40 	.word	0x0800ad40
 8004a34:	00f42400 	.word	0x00f42400
 8004a38:	4b742400 	.word	0x4b742400
 8004a3c:	46000000 	.word	0x46000000

08004a40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004a44:	f7ff fefa 	bl	800483c <HAL_RCC_GetSysClockFreq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b07      	ldr	r3, [pc, #28]	@ (8004a68 <HAL_RCC_GetHCLKFreq+0x28>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	4906      	ldr	r1, [pc, #24]	@ (8004a6c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004a54:	5ccb      	ldrb	r3, [r1, r3]
 8004a56:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5a:	4a05      	ldr	r2, [pc, #20]	@ (8004a70 <HAL_RCC_GetHCLKFreq+0x30>)
 8004a5c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004a5e:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <HAL_RCC_GetHCLKFreq+0x30>)
 8004a60:	681b      	ldr	r3, [r3, #0]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	46020c00 	.word	0x46020c00
 8004a6c:	0800ad28 	.word	0x0800ad28
 8004a70:	20000018 	.word	0x20000018

08004a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004a78:	f7ff ffe2 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4b05      	ldr	r3, [pc, #20]	@ (8004a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	091b      	lsrs	r3, r3, #4
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4903      	ldr	r1, [pc, #12]	@ (8004a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a8a:	5ccb      	ldrb	r3, [r1, r3]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	46020c00 	.word	0x46020c00
 8004a98:	0800ad38 	.word	0x0800ad38

08004a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004aa0:	f7ff ffce 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	4903      	ldr	r1, [pc, #12]	@ (8004ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ab2:	5ccb      	ldrb	r3, [r1, r3]
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	46020c00 	.word	0x46020c00
 8004ac0:	0800ad38 	.word	0x0800ad38

08004ac4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004ac8:	f7ff ffba 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 8004acc:	4602      	mov	r2, r0
 8004ace:	4b05      	ldr	r3, [pc, #20]	@ (8004ae4 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad2:	091b      	lsrs	r3, r3, #4
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	4903      	ldr	r1, [pc, #12]	@ (8004ae8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004ada:	5ccb      	ldrb	r3, [r1, r3]
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	46020c00 	.word	0x46020c00
 8004ae8:	0800ad38 	.word	0x0800ad38

08004aec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004af4:	4b3e      	ldr	r3, [pc, #248]	@ (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b02:	f7fe fd3f 	bl	8003584 <HAL_PWREx_GetVoltageRange>
 8004b06:	6178      	str	r0, [r7, #20]
 8004b08:	e019      	b.n	8004b3e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b0a:	4b39      	ldr	r3, [pc, #228]	@ (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b10:	4a37      	ldr	r2, [pc, #220]	@ (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b12:	f043 0304 	orr.w	r3, r3, #4
 8004b16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004b1a:	4b35      	ldr	r3, [pc, #212]	@ (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b28:	f7fe fd2c 	bl	8003584 <HAL_PWREx_GetVoltageRange>
 8004b2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b2e:	4b30      	ldr	r3, [pc, #192]	@ (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b34:	4a2e      	ldr	r2, [pc, #184]	@ (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b36:	f023 0304 	bic.w	r3, r3, #4
 8004b3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b44:	d003      	beq.n	8004b4e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b4c:	d109      	bne.n	8004b62 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b54:	d202      	bcs.n	8004b5c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004b56:	2301      	movs	r3, #1
 8004b58:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004b5a:	e033      	b.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004b60:	e030      	b.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b68:	d208      	bcs.n	8004b7c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b70:	d102      	bne.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004b72:	2303      	movs	r3, #3
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	e025      	b.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e035      	b.n	8004be8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b82:	d90f      	bls.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b90:	d902      	bls.n	8004b98 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004b92:	2300      	movs	r3, #0
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	e015      	b.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004b98:	2301      	movs	r3, #1
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	e012      	b.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	e00f      	b.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004baa:	d109      	bne.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb2:	d102      	bne.n	8004bba <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	e004      	b.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004bba:	2302      	movs	r3, #2
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	e001      	b.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f023 020f 	bic.w	r2, r3, #15
 8004bcc:	4909      	ldr	r1, [pc, #36]	@ (8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004bd4:	4b07      	ldr	r3, [pc, #28]	@ (8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d001      	beq.n	8004be6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	46020c00 	.word	0x46020c00
 8004bf4:	40022000 	.word	0x40022000

08004bf8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bfc:	b0b8      	sub	sp, #224	@ 0xe0
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c04:	2300      	movs	r3, #0
 8004c06:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	f002 0401 	and.w	r4, r2, #1
 8004c1c:	2500      	movs	r5, #0
 8004c1e:	ea54 0305 	orrs.w	r3, r4, r5
 8004c22:	d00b      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004c24:	4bca      	ldr	r3, [pc, #808]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c2a:	f023 0103 	bic.w	r1, r3, #3
 8004c2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c34:	4ac6      	ldr	r2, [pc, #792]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c36:	430b      	orrs	r3, r1
 8004c38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	f002 0802 	and.w	r8, r2, #2
 8004c48:	f04f 0900 	mov.w	r9, #0
 8004c4c:	ea58 0309 	orrs.w	r3, r8, r9
 8004c50:	d00b      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004c52:	4bbf      	ldr	r3, [pc, #764]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c58:	f023 010c 	bic.w	r1, r3, #12
 8004c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c62:	4abb      	ldr	r2, [pc, #748]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c64:	430b      	orrs	r3, r1
 8004c66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	f002 0a04 	and.w	sl, r2, #4
 8004c76:	f04f 0b00 	mov.w	fp, #0
 8004c7a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004c7e:	d00b      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004c80:	4bb3      	ldr	r3, [pc, #716]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c86:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c90:	4aaf      	ldr	r2, [pc, #700]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c92:	430b      	orrs	r3, r1
 8004c94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f002 0308 	and.w	r3, r2, #8
 8004ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004cae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	d00b      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004cb8:	4ba5      	ldr	r3, [pc, #660]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004cc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc8:	4aa1      	ldr	r2, [pc, #644]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	f002 0310 	and.w	r3, r2, #16
 8004cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004ce6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004cea:	460b      	mov	r3, r1
 8004cec:	4313      	orrs	r3, r2
 8004cee:	d00b      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004cf0:	4b97      	ldr	r3, [pc, #604]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cf6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d00:	4a93      	ldr	r2, [pc, #588]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d02:	430b      	orrs	r3, r1
 8004d04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	f002 0320 	and.w	r3, r2, #32
 8004d14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4313      	orrs	r3, r2
 8004d26:	d00b      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004d28:	4b89      	ldr	r3, [pc, #548]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d2e:	f023 0107 	bic.w	r1, r3, #7
 8004d32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d38:	4a85      	ldr	r2, [pc, #532]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d50:	2300      	movs	r3, #0
 8004d52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d56:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004d60:	4b7b      	ldr	r3, [pc, #492]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d66:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004d6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d70:	4a77      	ldr	r2, [pc, #476]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d72:	430b      	orrs	r3, r1
 8004d74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004d84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004d8e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4313      	orrs	r3, r2
 8004d96:	d00b      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004d98:	4b6d      	ldr	r3, [pc, #436]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004da8:	4a69      	ldr	r2, [pc, #420]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004daa:	430b      	orrs	r3, r1
 8004dac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004db0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004dbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dc6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	d00b      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004dd0:	4b5f      	ldr	r3, [pc, #380]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004dda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de0:	4a5b      	ldr	r2, [pc, #364]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004de2:	430b      	orrs	r3, r1
 8004de4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004de8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004df4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004dfe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e02:	460b      	mov	r3, r1
 8004e04:	4313      	orrs	r3, r2
 8004e06:	d00b      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004e08:	4b51      	ldr	r3, [pc, #324]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e0e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004e12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e18:	4a4d      	ldr	r2, [pc, #308]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e30:	2300      	movs	r3, #0
 8004e32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e36:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	d00b      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004e40:	4b43      	ldr	r3, [pc, #268]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e46:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004e4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e50:	4a3f      	ldr	r2, [pc, #252]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e52:	430b      	orrs	r3, r1
 8004e54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004e64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e6e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004e72:	460b      	mov	r3, r1
 8004e74:	4313      	orrs	r3, r2
 8004e76:	d00b      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004e78:	4b35      	ldr	r3, [pc, #212]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e7e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004e82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e88:	4a31      	ldr	r2, [pc, #196]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004e90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004e9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ea2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	d00c      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004eac:	4b28      	ldr	r3, [pc, #160]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004eb2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004eb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ebe:	4a24      	ldr	r2, [pc, #144]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ece:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004ed2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ed8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004edc:	460b      	mov	r3, r1
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	d04f      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004ee2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eea:	2b80      	cmp	r3, #128	@ 0x80
 8004eec:	d02d      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004eee:	2b80      	cmp	r3, #128	@ 0x80
 8004ef0:	d827      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004ef2:	2b60      	cmp	r3, #96	@ 0x60
 8004ef4:	d02e      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004ef6:	2b60      	cmp	r3, #96	@ 0x60
 8004ef8:	d823      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004efa:	2b40      	cmp	r3, #64	@ 0x40
 8004efc:	d006      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004efe:	2b40      	cmp	r3, #64	@ 0x40
 8004f00:	d81f      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d011      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004f0a:	e01a      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f0c:	4b10      	ldr	r3, [pc, #64]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	4a0f      	ldr	r2, [pc, #60]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f16:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f18:	e01d      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f1e:	3308      	adds	r3, #8
 8004f20:	4618      	mov	r0, r3
 8004f22:	f002 f9d1 	bl	80072c8 <RCCEx_PLL2_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f2c:	e013      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f32:	332c      	adds	r3, #44	@ 0x2c
 8004f34:	4618      	mov	r0, r3
 8004f36:	f002 fa5f 	bl	80073f8 <RCCEx_PLL3_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f40:	e009      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004f48:	e005      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004f4a:	bf00      	nop
 8004f4c:	e003      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004f4e:	bf00      	nop
 8004f50:	46020c00 	.word	0x46020c00
        break;
 8004f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f56:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10d      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004f5e:	4bb6      	ldr	r3, [pc, #728]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f64:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004f68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f70:	4ab1      	ldr	r2, [pc, #708]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f72:	430b      	orrs	r3, r1
 8004f74:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f78:	e003      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f7e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004f8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f90:	2300      	movs	r3, #0
 8004f92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f94:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	d053      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004f9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004faa:	d033      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb0:	d82c      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fb6:	d02f      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004fb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fbc:	d826      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004fbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fc2:	d008      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fc8:	d820      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fd2:	d011      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004fd4:	e01a      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fd6:	4b98      	ldr	r3, [pc, #608]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fda:	4a97      	ldr	r2, [pc, #604]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fe2:	e01a      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fe4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fe8:	3308      	adds	r3, #8
 8004fea:	4618      	mov	r0, r3
 8004fec:	f002 f96c 	bl	80072c8 <RCCEx_PLL2_Config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ff6:	e010      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ff8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ffc:	332c      	adds	r3, #44	@ 0x2c
 8004ffe:	4618      	mov	r0, r3
 8005000:	f002 f9fa 	bl	80073f8 <RCCEx_PLL3_Config>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800500a:	e006      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005012:	e002      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005014:	bf00      	nop
 8005016:	e000      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800501a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10d      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005022:	4b85      	ldr	r3, [pc, #532]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005024:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005028:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800502c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005034:	4a80      	ldr	r2, [pc, #512]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005036:	430b      	orrs	r3, r1
 8005038:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800503c:	e003      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005042:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005046:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005052:	663b      	str	r3, [r7, #96]	@ 0x60
 8005054:	2300      	movs	r3, #0
 8005056:	667b      	str	r3, [r7, #100]	@ 0x64
 8005058:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800505c:	460b      	mov	r3, r1
 800505e:	4313      	orrs	r3, r2
 8005060:	d046      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005062:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005066:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800506a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800506e:	d028      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005070:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005074:	d821      	bhi.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005076:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800507a:	d022      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800507c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005080:	d81b      	bhi.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005082:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005086:	d01c      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005088:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800508c:	d815      	bhi.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800508e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005092:	d008      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005094:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005098:	d80f      	bhi.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d011      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050a2:	d00e      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80050a4:	e009      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050aa:	3308      	adds	r3, #8
 80050ac:	4618      	mov	r0, r3
 80050ae:	f002 f90b 	bl	80072c8 <RCCEx_PLL2_Config>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80050b8:	e004      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80050c0:	e000      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 80050c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10d      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80050cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80050ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050d2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80050d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050de:	4a56      	ldr	r2, [pc, #344]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80050e0:	430b      	orrs	r3, r1
 80050e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80050e6:	e003      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80050ec:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80050f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80050fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050fe:	2300      	movs	r3, #0
 8005100:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005102:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005106:	460b      	mov	r3, r1
 8005108:	4313      	orrs	r3, r2
 800510a:	d03f      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800510c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005114:	2b04      	cmp	r3, #4
 8005116:	d81e      	bhi.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8005118:	a201      	add	r2, pc, #4	@ (adr r2, 8005120 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	0800515f 	.word	0x0800515f
 8005124:	08005135 	.word	0x08005135
 8005128:	08005143 	.word	0x08005143
 800512c:	0800515f 	.word	0x0800515f
 8005130:	0800515f 	.word	0x0800515f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005134:	4b40      	ldr	r3, [pc, #256]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005138:	4a3f      	ldr	r2, [pc, #252]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800513a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800513e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005140:	e00e      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005142:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005146:	332c      	adds	r3, #44	@ 0x2c
 8005148:	4618      	mov	r0, r3
 800514a:	f002 f955 	bl	80073f8 <RCCEx_PLL3_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005154:	e004      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800515c:	e000      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800515e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005160:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10d      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005168:	4b33      	ldr	r3, [pc, #204]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800516a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800516e:	f023 0107 	bic.w	r1, r3, #7
 8005172:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517a:	4a2f      	ldr	r2, [pc, #188]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800517c:	430b      	orrs	r3, r1
 800517e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005182:	e003      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005184:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005188:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800518c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005198:	653b      	str	r3, [r7, #80]	@ 0x50
 800519a:	2300      	movs	r3, #0
 800519c:	657b      	str	r3, [r7, #84]	@ 0x54
 800519e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80051a2:	460b      	mov	r3, r1
 80051a4:	4313      	orrs	r3, r2
 80051a6:	d04d      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80051a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051b4:	d028      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x610>
 80051b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051ba:	d821      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80051bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051c0:	d024      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x614>
 80051c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051c6:	d81b      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80051c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051cc:	d00e      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80051ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051d2:	d815      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01b      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80051d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051dc:	d110      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051de:	4b16      	ldr	r3, [pc, #88]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e2:	4a15      	ldr	r2, [pc, #84]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80051ea:	e012      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051f0:	332c      	adds	r3, #44	@ 0x2c
 80051f2:	4618      	mov	r0, r3
 80051f4:	f002 f900 	bl	80073f8 <RCCEx_PLL3_Config>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80051fe:	e008      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005206:	e004      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005208:	bf00      	nop
 800520a:	e002      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800520c:	bf00      	nop
 800520e:	e000      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005210:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005212:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005216:	2b00      	cmp	r3, #0
 8005218:	d110      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800521a:	4b07      	ldr	r3, [pc, #28]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800521c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005220:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005224:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800522c:	4a02      	ldr	r2, [pc, #8]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800522e:	430b      	orrs	r3, r1
 8005230:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005234:	e006      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005236:	bf00      	nop
 8005238:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005240:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005252:	2300      	movs	r3, #0
 8005254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005256:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800525a:	460b      	mov	r3, r1
 800525c:	4313      	orrs	r3, r2
 800525e:	f000 80b5 	beq.w	80053cc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005262:	2300      	movs	r3, #0
 8005264:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005268:	4b9d      	ldr	r3, [pc, #628]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800526a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d113      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	4b9a      	ldr	r3, [pc, #616]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800527c:	4a98      	ldr	r2, [pc, #608]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800527e:	f043 0304 	orr.w	r3, r3, #4
 8005282:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005286:	4b96      	ldr	r3, [pc, #600]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005294:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8005298:	2301      	movs	r3, #1
 800529a:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800529e:	4b91      	ldr	r3, [pc, #580]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a2:	4a90      	ldr	r2, [pc, #576]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052aa:	f7fc f823 	bl	80012f4 <HAL_GetTick>
 80052ae:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052b2:	e00b      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b4:	f7fc f81e 	bl	80012f4 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d903      	bls.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80052ca:	e005      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052cc:	4b85      	ldr	r3, [pc, #532]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0ed      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 80052d8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d165      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052e0:	4b7f      	ldr	r3, [pc, #508]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80052ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d023      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x746>
 80052f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052fa:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80052fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005302:	4293      	cmp	r3, r2
 8005304:	d01b      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005306:	4b76      	ldr	r3, [pc, #472]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800530c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005310:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005314:	4b72      	ldr	r3, [pc, #456]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800531a:	4a71      	ldr	r2, [pc, #452]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005320:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005324:	4b6e      	ldr	r3, [pc, #440]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800532a:	4a6d      	ldr	r2, [pc, #436]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800532c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005330:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005334:	4a6a      	ldr	r2, [pc, #424]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800533a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800533e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d019      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534a:	f7fb ffd3 	bl	80012f4 <HAL_GetTick>
 800534e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005352:	e00d      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005354:	f7fb ffce 	bl	80012f4 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800535e:	1ad2      	subs	r2, r2, r3
 8005360:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005364:	429a      	cmp	r2, r3
 8005366:	d903      	bls.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 800536e:	e006      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005370:	4b5b      	ldr	r3, [pc, #364]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0ea      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 800537e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10d      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005386:	4b56      	ldr	r3, [pc, #344]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800538c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005390:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005394:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005398:	4a51      	ldr	r2, [pc, #324]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800539a:	430b      	orrs	r3, r1
 800539c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80053a0:	e008      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053a2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80053a6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80053aa:	e003      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ac:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80053b0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053b4:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d107      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053bc:	4b48      	ldr	r3, [pc, #288]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053c2:	4a47      	ldr	r2, [pc, #284]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053c4:	f023 0304 	bic.w	r3, r3, #4
 80053c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80053cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80053d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80053da:	2300      	movs	r3, #0
 80053dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80053de:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80053e2:	460b      	mov	r3, r1
 80053e4:	4313      	orrs	r3, r2
 80053e6:	d042      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80053e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053f0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80053f4:	d022      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x844>
 80053f6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80053fa:	d81b      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80053fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005400:	d011      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005402:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005406:	d815      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005408:	2b00      	cmp	r3, #0
 800540a:	d019      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800540c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005410:	d110      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005412:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005416:	3308      	adds	r3, #8
 8005418:	4618      	mov	r0, r3
 800541a:	f001 ff55 	bl	80072c8 <RCCEx_PLL2_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005424:	e00d      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005426:	4b2e      	ldr	r3, [pc, #184]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542a:	4a2d      	ldr	r2, [pc, #180]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800542c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005430:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005432:	e006      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800543a:	e002      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800543c:	bf00      	nop
 800543e:	e000      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005440:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005442:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10d      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800544a:	4b25      	ldr	r3, [pc, #148]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800544c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005450:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005454:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005458:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800545c:	4a20      	ldr	r2, [pc, #128]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800545e:	430b      	orrs	r3, r1
 8005460:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005464:	e003      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005466:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800546a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800546e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005476:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800547a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800547c:	2300      	movs	r3, #0
 800547e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005480:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005484:	460b      	mov	r3, r1
 8005486:	4313      	orrs	r3, r2
 8005488:	d032      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800548a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800548e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005496:	d00b      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800549c:	d804      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d008      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80054a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054a6:	d007      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80054ae:	e004      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80054b0:	bf00      	nop
 80054b2:	e002      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80054b4:	bf00      	nop
 80054b6:	e000      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80054b8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054ba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d112      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80054c2:	4b07      	ldr	r3, [pc, #28]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054d4:	4a02      	ldr	r2, [pc, #8]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054d6:	430b      	orrs	r3, r1
 80054d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80054dc:	e008      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80054de:	bf00      	nop
 80054e0:	46020c00 	.word	0x46020c00
 80054e4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80054ec:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80054f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80054fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80054fe:	2300      	movs	r3, #0
 8005500:	637b      	str	r3, [r7, #52]	@ 0x34
 8005502:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005506:	460b      	mov	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	d019      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800550c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005510:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005514:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005518:	d105      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800551a:	4b88      	ldr	r3, [pc, #544]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800551c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551e:	4a87      	ldr	r2, [pc, #540]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005524:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005526:	4b85      	ldr	r3, [pc, #532]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005528:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800552c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005530:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005534:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005538:	4a80      	ldr	r2, [pc, #512]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800553a:	430b      	orrs	r3, r1
 800553c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005540:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800554c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800554e:	2300      	movs	r3, #0
 8005550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005552:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005556:	460b      	mov	r3, r1
 8005558:	4313      	orrs	r3, r2
 800555a:	d00c      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800555c:	4b77      	ldr	r3, [pc, #476]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800555e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005562:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005566:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800556a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800556e:	4973      	ldr	r1, [pc, #460]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005576:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005582:	623b      	str	r3, [r7, #32]
 8005584:	2300      	movs	r3, #0
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24
 8005588:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800558c:	460b      	mov	r3, r1
 800558e:	4313      	orrs	r3, r2
 8005590:	d00c      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005592:	4b6a      	ldr	r3, [pc, #424]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005598:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800559c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055a4:	4965      	ldr	r1, [pc, #404]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80055ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80055c2:	460b      	mov	r3, r1
 80055c4:	4313      	orrs	r3, r2
 80055c6:	d00c      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80055c8:	4b5c      	ldr	r3, [pc, #368]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055ce:	f023 0218 	bic.w	r2, r3, #24
 80055d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80055da:	4958      	ldr	r1, [pc, #352]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80055e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ea:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80055ee:	613b      	str	r3, [r7, #16]
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80055f8:	460b      	mov	r3, r1
 80055fa:	4313      	orrs	r3, r2
 80055fc:	d032      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80055fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005602:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005606:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800560a:	d105      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800560c:	4b4b      	ldr	r3, [pc, #300]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800560e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005610:	4a4a      	ldr	r2, [pc, #296]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005616:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005618:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800561c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005620:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005624:	d108      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005626:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800562a:	3308      	adds	r3, #8
 800562c:	4618      	mov	r0, r3
 800562e:	f001 fe4b 	bl	80072c8 <RCCEx_PLL2_Config>
 8005632:	4603      	mov	r3, r0
 8005634:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8005638:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10d      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005640:	4b3e      	ldr	r3, [pc, #248]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005642:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005646:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800564a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800564e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005652:	493a      	ldr	r1, [pc, #232]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800565a:	e003      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005660:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005664:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800567a:	460b      	mov	r3, r1
 800567c:	4313      	orrs	r3, r2
 800567e:	d03a      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005680:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005688:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800568c:	d00e      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800568e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005692:	d815      	bhi.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8005694:	2b00      	cmp	r3, #0
 8005696:	d017      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8005698:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800569c:	d110      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800569e:	4b27      	ldr	r3, [pc, #156]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a2:	4a26      	ldr	r2, [pc, #152]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056a8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80056aa:	e00e      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056b0:	3308      	adds	r3, #8
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 fe08 	bl	80072c8 <RCCEx_PLL2_Config>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80056be:	e004      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80056c6:	e000      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80056c8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80056ca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10d      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80056d2:	4b1a      	ldr	r3, [pc, #104]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80056dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056e4:	4915      	ldr	r1, [pc, #84]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80056ec:	e003      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056f2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80056f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	2300      	movs	r3, #0
 8005706:	607b      	str	r3, [r7, #4]
 8005708:	e9d7 1200 	ldrd	r1, r2, [r7]
 800570c:	460b      	mov	r3, r1
 800570e:	4313      	orrs	r3, r2
 8005710:	d00c      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005712:	4b0a      	ldr	r3, [pc, #40]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005718:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800571c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005720:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005724:	4905      	ldr	r1, [pc, #20]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800572c:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8005730:	4618      	mov	r0, r3
 8005732:	37e0      	adds	r7, #224	@ 0xe0
 8005734:	46bd      	mov	sp, r7
 8005736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800573a:	bf00      	nop
 800573c:	46020c00 	.word	0x46020c00

08005740 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005740:	b480      	push	{r7}
 8005742:	b089      	sub	sp, #36	@ 0x24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005748:	4ba6      	ldr	r3, [pc, #664]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800574a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800574c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005750:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005752:	4ba4      	ldr	r3, [pc, #656]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800575c:	4ba1      	ldr	r3, [pc, #644]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800575e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	3301      	adds	r3, #1
 8005768:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800576a:	4b9e      	ldr	r3, [pc, #632]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800576c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576e:	091b      	lsrs	r3, r3, #4
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005776:	4b9b      	ldr	r3, [pc, #620]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577a:	08db      	lsrs	r3, r3, #3
 800577c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	fb02 f303 	mul.w	r3, r2, r3
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b03      	cmp	r3, #3
 8005796:	d062      	beq.n	800585e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2b03      	cmp	r3, #3
 800579c:	f200 8081 	bhi.w	80058a2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d024      	beq.n	80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d17a      	bne.n	80058a2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80059e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80057ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057be:	4b89      	ldr	r3, [pc, #548]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80057ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80057d2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80059ec <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80057d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80057de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ee:	e08f      	b.n	8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80057f0:	4b7c      	ldr	r3, [pc, #496]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80057fc:	4b79      	ldr	r3, [pc, #484]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	0f1b      	lsrs	r3, r3, #28
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	e006      	b.n	8005816 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005808:	4b76      	ldr	r3, [pc, #472]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800580a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800580e:	041b      	lsls	r3, r3, #16
 8005810:	0f1b      	lsrs	r3, r3, #28
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	4a76      	ldr	r2, [pc, #472]	@ (80059f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800581c:	ee07 3a90 	vmov	s15, r3
 8005820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	ee07 3a90 	vmov	s15, r3
 8005838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800583c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005840:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80059ec <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005844:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005848:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800584c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005850:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005858:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800585c:	e058      	b.n	8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	ee07 3a90 	vmov	s15, r3
 8005864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005868:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80059e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800586c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005870:	4b5c      	ldr	r3, [pc, #368]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005878:	ee07 3a90 	vmov	s15, r3
 800587c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005880:	ed97 6a02 	vldr	s12, [r7, #8]
 8005884:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80059ec <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005888:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800588c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005890:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005894:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058a0:	e036      	b.n	8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80058a2:	4b50      	ldr	r3, [pc, #320]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80058ae:	4b4d      	ldr	r3, [pc, #308]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	0f1b      	lsrs	r3, r3, #28
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	e006      	b.n	80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80058ba:	4b4a      	ldr	r3, [pc, #296]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058c0:	041b      	lsls	r3, r3, #16
 80058c2:	0f1b      	lsrs	r3, r3, #28
 80058c4:	f003 030f 	and.w	r3, r3, #15
 80058c8:	4a49      	ldr	r2, [pc, #292]	@ (80059f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80058ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	ee07 3a90 	vmov	s15, r3
 80058dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80058f2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80059ec <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80058f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005902:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800590e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005910:	4b34      	ldr	r3, [pc, #208]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d017      	beq.n	800594c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800591c:	4b31      	ldr	r3, [pc, #196]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800591e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005920:	0a5b      	lsrs	r3, r3, #9
 8005922:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800592e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005932:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005936:	edd7 6a07 	vldr	s13, [r7, #28]
 800593a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005942:	ee17 2a90 	vmov	r2, s15
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	e002      	b.n	8005952 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005952:	4b24      	ldr	r3, [pc, #144]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d017      	beq.n	800598e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800595e:	4b21      	ldr	r3, [pc, #132]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005962:	0c1b      	lsrs	r3, r3, #16
 8005964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005970:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005974:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005978:	edd7 6a07 	vldr	s13, [r7, #28]
 800597c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005984:	ee17 2a90 	vmov	r2, s15
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	605a      	str	r2, [r3, #4]
 800598c:	e002      	b.n	8005994 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005994:	4b13      	ldr	r3, [pc, #76]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005998:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d017      	beq.n	80059d0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059a0:	4b10      	ldr	r3, [pc, #64]	@ (80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a4:	0e1b      	lsrs	r3, r3, #24
 80059a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80059b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059b6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80059be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059c6:	ee17 2a90 	vmov	r2, s15
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80059ce:	e002      	b.n	80059d6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	609a      	str	r2, [r3, #8]
}
 80059d6:	bf00      	nop
 80059d8:	3724      	adds	r7, #36	@ 0x24
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	46020c00 	.word	0x46020c00
 80059e8:	4b742400 	.word	0x4b742400
 80059ec:	46000000 	.word	0x46000000
 80059f0:	0800ad40 	.word	0x0800ad40

080059f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	@ 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80059fc:	4ba6      	ldr	r3, [pc, #664]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a04:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005a06:	4ba4      	ldr	r3, [pc, #656]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005a10:	4ba1      	ldr	r3, [pc, #644]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	0a1b      	lsrs	r3, r3, #8
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005a1e:	4b9e      	ldr	r3, [pc, #632]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005a2a:	4b9b      	ldr	r3, [pc, #620]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2e:	08db      	lsrs	r3, r3, #3
 8005a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a42:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d062      	beq.n	8005b12 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	f200 8081 	bhi.w	8005b56 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d024      	beq.n	8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d17a      	bne.n	8005b56 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a72:	4b89      	ldr	r3, [pc, #548]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a86:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aa2:	e08f      	b.n	8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005aa4:	4b7c      	ldr	r3, [pc, #496]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005ab0:	4b79      	ldr	r3, [pc, #484]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	0f1b      	lsrs	r3, r3, #28
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	e006      	b.n	8005aca <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005abc:	4b76      	ldr	r3, [pc, #472]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ac2:	041b      	lsls	r3, r3, #16
 8005ac4:	0f1b      	lsrs	r3, r3, #28
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	4a76      	ldr	r2, [pc, #472]	@ (8005ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad0:	ee07 3a90 	vmov	s15, r3
 8005ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	ee07 3a90 	vmov	s15, r3
 8005aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005af4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005af8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b10:	e058      	b.n	8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	ee07 3a90 	vmov	s15, r3
 8005b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b24:	4b5c      	ldr	r3, [pc, #368]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b2c:	ee07 3a90 	vmov	s15, r3
 8005b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b34:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b38:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005b3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b48:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b54:	e036      	b.n	8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005b56:	4b50      	ldr	r3, [pc, #320]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005b62:	4b4d      	ldr	r3, [pc, #308]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	0f1b      	lsrs	r3, r3, #28
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	e006      	b.n	8005b7c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b74:	041b      	lsls	r3, r3, #16
 8005b76:	0f1b      	lsrs	r3, r3, #28
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	4a49      	ldr	r2, [pc, #292]	@ (8005ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	ee07 3a90 	vmov	s15, r3
 8005b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ba6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bc2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005bc4:	4b34      	ldr	r3, [pc, #208]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d017      	beq.n	8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005bd0:	4b31      	ldr	r3, [pc, #196]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd4:	0a5b      	lsrs	r3, r3, #9
 8005bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005be6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf6:	ee17 2a90 	vmov	r2, s15
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e002      	b.n	8005c06 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005c06:	4b24      	ldr	r3, [pc, #144]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d017      	beq.n	8005c42 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c12:	4b21      	ldr	r3, [pc, #132]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c16:	0c1b      	lsrs	r3, r3, #16
 8005c18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c1c:	ee07 3a90 	vmov	s15, r3
 8005c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005c24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c28:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c38:	ee17 2a90 	vmov	r2, s15
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	605a      	str	r2, [r3, #4]
 8005c40:	e002      	b.n	8005c48 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005c48:	4b13      	ldr	r3, [pc, #76]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d017      	beq.n	8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c54:	4b10      	ldr	r3, [pc, #64]	@ (8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c58:	0e1b      	lsrs	r3, r3, #24
 8005c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005c66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c7a:	ee17 2a90 	vmov	r2, s15
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005c82:	e002      	b.n	8005c8a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	609a      	str	r2, [r3, #8]
}
 8005c8a:	bf00      	nop
 8005c8c:	3724      	adds	r7, #36	@ 0x24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	46020c00 	.word	0x46020c00
 8005c9c:	4b742400 	.word	0x4b742400
 8005ca0:	46000000 	.word	0x46000000
 8005ca4:	0800ad40 	.word	0x0800ad40

08005ca8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b089      	sub	sp, #36	@ 0x24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005cb0:	4ba6      	ldr	r3, [pc, #664]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005cba:	4ba4      	ldr	r3, [pc, #656]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005cc4:	4ba1      	ldr	r3, [pc, #644]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc8:	0a1b      	lsrs	r3, r3, #8
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	3301      	adds	r3, #1
 8005cd0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005cd2:	4b9e      	ldr	r3, [pc, #632]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd6:	091b      	lsrs	r3, r3, #4
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005cde:	4b9b      	ldr	r3, [pc, #620]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ce2:	08db      	lsrs	r3, r3, #3
 8005ce4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d062      	beq.n	8005dc6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	f200 8081 	bhi.w	8005e0a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d024      	beq.n	8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d17a      	bne.n	8005e0a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d26:	4b89      	ldr	r3, [pc, #548]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d3a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d52:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005d56:	e08f      	b.n	8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005d58:	4b7c      	ldr	r3, [pc, #496]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005d64:	4b79      	ldr	r3, [pc, #484]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	0f1b      	lsrs	r3, r3, #28
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	e006      	b.n	8005d7e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005d70:	4b76      	ldr	r3, [pc, #472]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d76:	041b      	lsls	r3, r3, #16
 8005d78:	0f1b      	lsrs	r3, r3, #28
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	4a76      	ldr	r2, [pc, #472]	@ (8005f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d84:	ee07 3a90 	vmov	s15, r3
 8005d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	ee07 3a90 	vmov	s15, r3
 8005da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005da8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005dac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dc4:	e058      	b.n	8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	ee07 3a90 	vmov	s15, r3
 8005dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd8:	4b5c      	ldr	r3, [pc, #368]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005de8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dec:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005df8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e08:	e036      	b.n	8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e0a:	4b50      	ldr	r3, [pc, #320]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005e16:	4b4d      	ldr	r3, [pc, #308]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	0f1b      	lsrs	r3, r3, #28
 8005e1c:	f003 030f 	and.w	r3, r3, #15
 8005e20:	e006      	b.n	8005e30 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005e22:	4b4a      	ldr	r3, [pc, #296]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e28:	041b      	lsls	r3, r3, #16
 8005e2a:	0f1b      	lsrs	r3, r3, #28
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	4a49      	ldr	r2, [pc, #292]	@ (8005f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	ee07 3a90 	vmov	s15, r3
 8005e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e5a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e76:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005e78:	4b34      	ldr	r3, [pc, #208]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d017      	beq.n	8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e84:	4b31      	ldr	r3, [pc, #196]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e88:	0a5b      	lsrs	r3, r3, #9
 8005e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005e96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e9a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eaa:	ee17 2a90 	vmov	r2, s15
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	e002      	b.n	8005eba <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005eba:	4b24      	ldr	r3, [pc, #144]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d017      	beq.n	8005ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ec6:	4b21      	ldr	r3, [pc, #132]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eca:	0c1b      	lsrs	r3, r3, #16
 8005ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ed0:	ee07 3a90 	vmov	s15, r3
 8005ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005ed8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005edc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eec:	ee17 2a90 	vmov	r2, s15
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	605a      	str	r2, [r3, #4]
 8005ef4:	e002      	b.n	8005efc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005efc:	4b13      	ldr	r3, [pc, #76]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d017      	beq.n	8005f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f08:	4b10      	ldr	r3, [pc, #64]	@ (8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0c:	0e1b      	lsrs	r3, r3, #24
 8005f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f2e:	ee17 2a90 	vmov	r2, s15
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f36:	e002      	b.n	8005f3e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	609a      	str	r2, [r3, #8]
}
 8005f3e:	bf00      	nop
 8005f40:	3724      	adds	r7, #36	@ 0x24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	46020c00 	.word	0x46020c00
 8005f50:	4b742400 	.word	0x4b742400
 8005f54:	46000000 	.word	0x46000000
 8005f58:	0800ad40 	.word	0x0800ad40

08005f5c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08e      	sub	sp, #56	@ 0x38
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f6a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005f6e:	430b      	orrs	r3, r1
 8005f70:	d145      	bne.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005f72:	4baa      	ldr	r3, [pc, #680]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f7c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005f7e:	4ba7      	ldr	r3, [pc, #668]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d108      	bne.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f92:	d104      	bne.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005f94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f9a:	f001 b987 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005f9e:	4b9f      	ldr	r3, [pc, #636]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fac:	d114      	bne.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fb4:	d110      	bne.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005fb6:	4b99      	ldr	r3, [pc, #612]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fc4:	d103      	bne.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005fc6:	23fa      	movs	r3, #250	@ 0xfa
 8005fc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005fca:	f001 b96f 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005fce:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005fd2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005fd4:	f001 b96a 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005fd8:	4b90      	ldr	r3, [pc, #576]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fe4:	d107      	bne.n	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fec:	d103      	bne.n	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005fee:	4b8c      	ldr	r3, [pc, #560]	@ (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ff2:	f001 b95b 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ffa:	f001 b957 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006002:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006006:	430b      	orrs	r3, r1
 8006008:	d151      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800600a:	4b84      	ldr	r3, [pc, #528]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800600c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006010:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006014:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	2b80      	cmp	r3, #128	@ 0x80
 800601a:	d035      	beq.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800601c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601e:	2b80      	cmp	r3, #128	@ 0x80
 8006020:	d841      	bhi.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006024:	2b60      	cmp	r3, #96	@ 0x60
 8006026:	d02a      	beq.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602a:	2b60      	cmp	r3, #96	@ 0x60
 800602c:	d83b      	bhi.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006030:	2b40      	cmp	r3, #64	@ 0x40
 8006032:	d009      	beq.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006036:	2b40      	cmp	r3, #64	@ 0x40
 8006038:	d835      	bhi.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00c      	beq.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006042:	2b20      	cmp	r3, #32
 8006044:	d012      	beq.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006046:	e02e      	b.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff fb77 	bl	8005740 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006056:	f001 b929 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800605a:	f107 0318 	add.w	r3, r7, #24
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff fcc8 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006068:	f001 b920 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800606c:	f107 030c 	add.w	r3, r7, #12
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff fe19 	bl	8005ca8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800607a:	f001 b917 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800607e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006082:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006084:	f001 b912 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006088:	4b64      	ldr	r3, [pc, #400]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006094:	d103      	bne.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006096:	4b63      	ldr	r3, [pc, #396]	@ (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006098:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800609a:	f001 b907 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060a2:	f001 b903 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060aa:	f001 b8ff 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80060ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b2:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80060b6:	430b      	orrs	r3, r1
 80060b8:	d158      	bne.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80060ba:	4b58      	ldr	r3, [pc, #352]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80060bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060c4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060cc:	d03b      	beq.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80060ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060d4:	d846      	bhi.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060dc:	d02e      	beq.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060e4:	d83e      	bhi.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060ec:	d00b      	beq.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80060ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060f4:	d836      	bhi.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00d      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80060fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006102:	d012      	beq.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006104:	e02e      	b.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff fb18 	bl	8005740 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006114:	f001 b8ca 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006118:	f107 0318 	add.w	r3, r7, #24
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fc69 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006126:	f001 b8c1 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800612a:	f107 030c 	add.w	r3, r7, #12
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff fdba 	bl	8005ca8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006138:	f001 b8b8 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800613c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006140:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006142:	f001 b8b3 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006146:	4b35      	ldr	r3, [pc, #212]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800614e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006152:	d103      	bne.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006154:	4b33      	ldr	r3, [pc, #204]	@ (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006156:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006158:	f001 b8a8 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006160:	f001 b8a4 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006168:	f001 b8a0 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800616c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006170:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006174:	430b      	orrs	r3, r1
 8006176:	d16e      	bne.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006178:	4b28      	ldr	r3, [pc, #160]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800617a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800617e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006182:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800618a:	d034      	beq.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 800618c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006192:	d85c      	bhi.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800619a:	d00b      	beq.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061a2:	d854      	bhi.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80061a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d016      	beq.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061b0:	d009      	beq.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80061b2:	e04c      	b.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff fac1 	bl	8005740 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80061be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061c2:	f001 b873 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061c6:	f107 0318 	add.w	r3, r7, #24
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff fc12 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061d4:	f001 b86a 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80061d8:	4b10      	ldr	r3, [pc, #64]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061e4:	d103      	bne.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 80061e6:	4b10      	ldr	r3, [pc, #64]	@ (8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80061e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80061ea:	f001 b85f 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061f2:	f001 b85b 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80061f6:	4b09      	ldr	r3, [pc, #36]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d121      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006202:	4b06      	ldr	r3, [pc, #24]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00e      	beq.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800620e:	4b03      	ldr	r3, [pc, #12]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	0e1b      	lsrs	r3, r3, #24
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	e00f      	b.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800621a:	bf00      	nop
 800621c:	46020c00 	.word	0x46020c00
 8006220:	0007a120 	.word	0x0007a120
 8006224:	00f42400 	.word	0x00f42400
 8006228:	02dc6c00 	.word	0x02dc6c00
 800622c:	4ba7      	ldr	r3, [pc, #668]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800622e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006232:	041b      	lsls	r3, r3, #16
 8006234:	0e1b      	lsrs	r3, r3, #24
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	4aa5      	ldr	r2, [pc, #660]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800623c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006240:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006242:	f001 b833 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800624a:	f001 b82f 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006252:	f001 b82b 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800625a:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800625e:	430b      	orrs	r3, r1
 8006260:	d17f      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006262:	4b9a      	ldr	r3, [pc, #616]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006264:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800626c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800626e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006270:	2b00      	cmp	r3, #0
 8006272:	d165      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006274:	4b95      	ldr	r3, [pc, #596]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800627a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800627e:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006282:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006286:	d034      	beq.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800628e:	d853      	bhi.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006292:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006296:	d00b      	beq.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800629e:	d84b      	bhi.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80062a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d016      	beq.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80062a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062ac:	d009      	beq.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80062ae:	e043      	b.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff fa43 	bl	8005740 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062bc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80062be:	f000 bff5 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062c2:	f107 0318 	add.w	r3, r7, #24
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff fb94 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80062d0:	f000 bfec 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80062d4:	4b7d      	ldr	r3, [pc, #500]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062e0:	d103      	bne.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 80062e2:	4b7c      	ldr	r3, [pc, #496]	@ (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80062e4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80062e6:	f000 bfe1 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80062ee:	f000 bfdd 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80062f2:	4b76      	ldr	r3, [pc, #472]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d118      	bne.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062fe:	4b73      	ldr	r3, [pc, #460]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800630a:	4b70      	ldr	r3, [pc, #448]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	0e1b      	lsrs	r3, r3, #24
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	e006      	b.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8006316:	4b6d      	ldr	r3, [pc, #436]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800631c:	041b      	lsls	r3, r3, #16
 800631e:	0e1b      	lsrs	r3, r3, #24
 8006320:	f003 030f 	and.w	r3, r3, #15
 8006324:	4a6a      	ldr	r2, [pc, #424]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800632a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800632c:	f000 bfbe 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006334:	f000 bfba 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800633c:	f000 bfb6 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006342:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006346:	d108      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff f9f7 	bl	8005740 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	637b      	str	r3, [r7, #52]	@ 0x34
 8006356:	f000 bfa9 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	637b      	str	r3, [r7, #52]	@ 0x34
 800635e:	f000 bfa5 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006362:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006366:	1e51      	subs	r1, r2, #1
 8006368:	430b      	orrs	r3, r1
 800636a:	d136      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800636c:	4b57      	ldr	r3, [pc, #348]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800636e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637a:	2b00      	cmp	r3, #0
 800637c:	d104      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800637e:	f7fe fb8d 	bl	8004a9c <HAL_RCC_GetPCLK2Freq>
 8006382:	6378      	str	r0, [r7, #52]	@ 0x34
 8006384:	f000 bf92 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	2b01      	cmp	r3, #1
 800638c:	d104      	bne.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800638e:	f7fe fa55 	bl	800483c <HAL_RCC_GetSysClockFreq>
 8006392:	6378      	str	r0, [r7, #52]	@ 0x34
 8006394:	f000 bf8a 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006398:	4b4c      	ldr	r3, [pc, #304]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063a4:	d106      	bne.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d103      	bne.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80063ac:	4b4a      	ldr	r3, [pc, #296]	@ (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80063ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80063b0:	f000 bf7c 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80063b4:	4b45      	ldr	r3, [pc, #276]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d107      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d104      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 80063c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ce:	f000 bf6d 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80063d6:	f000 bf69 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80063da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063de:	1e91      	subs	r1, r2, #2
 80063e0:	430b      	orrs	r3, r1
 80063e2:	d136      	bne.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80063e4:	4b39      	ldr	r3, [pc, #228]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063ea:	f003 030c 	and.w	r3, r3, #12
 80063ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80063f6:	f7fe fb3d 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 80063fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80063fc:	f000 bf56 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	2b04      	cmp	r3, #4
 8006404:	d104      	bne.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006406:	f7fe fa19 	bl	800483c <HAL_RCC_GetSysClockFreq>
 800640a:	6378      	str	r0, [r7, #52]	@ 0x34
 800640c:	f000 bf4e 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006410:	4b2e      	ldr	r3, [pc, #184]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800641c:	d106      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	2b08      	cmp	r3, #8
 8006422:	d103      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006424:	4b2c      	ldr	r3, [pc, #176]	@ (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006426:	637b      	str	r3, [r7, #52]	@ 0x34
 8006428:	f000 bf40 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800642c:	4b27      	ldr	r3, [pc, #156]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800642e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b02      	cmp	r3, #2
 8006438:	d107      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643c:	2b0c      	cmp	r3, #12
 800643e:	d104      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006440:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006444:	637b      	str	r3, [r7, #52]	@ 0x34
 8006446:	f000 bf31 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	637b      	str	r3, [r7, #52]	@ 0x34
 800644e:	f000 bf2d 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006456:	1f11      	subs	r1, r2, #4
 8006458:	430b      	orrs	r3, r1
 800645a:	d13f      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800645c:	4b1b      	ldr	r3, [pc, #108]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800645e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006462:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006466:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646a:	2b00      	cmp	r3, #0
 800646c:	d104      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800646e:	f7fe fb01 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 8006472:	6378      	str	r0, [r7, #52]	@ 0x34
 8006474:	f000 bf1a 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647a:	2b10      	cmp	r3, #16
 800647c:	d104      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800647e:	f7fe f9dd 	bl	800483c <HAL_RCC_GetSysClockFreq>
 8006482:	6378      	str	r0, [r7, #52]	@ 0x34
 8006484:	f000 bf12 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006488:	4b10      	ldr	r3, [pc, #64]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006494:	d106      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	2b20      	cmp	r3, #32
 800649a:	d103      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 800649c:	4b0e      	ldr	r3, [pc, #56]	@ (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800649e:	637b      	str	r3, [r7, #52]	@ 0x34
 80064a0:	f000 bf04 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80064a4:	4b09      	ldr	r3, [pc, #36]	@ (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d107      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80064b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b4:	2b30      	cmp	r3, #48	@ 0x30
 80064b6:	d104      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 80064b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064be:	f000 bef5 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064c6:	f000 bef1 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80064ca:	bf00      	nop
 80064cc:	46020c00 	.word	0x46020c00
 80064d0:	0800ad40 	.word	0x0800ad40
 80064d4:	02dc6c00 	.word	0x02dc6c00
 80064d8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80064dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e0:	f1a2 0108 	sub.w	r1, r2, #8
 80064e4:	430b      	orrs	r3, r1
 80064e6:	d136      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80064e8:	4ba4      	ldr	r3, [pc, #656]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80064ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80064f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80064f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d104      	bne.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80064fa:	f7fe fabb 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 80064fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8006500:	f000 bed4 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006506:	2b40      	cmp	r3, #64	@ 0x40
 8006508:	d104      	bne.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800650a:	f7fe f997 	bl	800483c <HAL_RCC_GetSysClockFreq>
 800650e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006510:	f000 becc 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006514:	4b99      	ldr	r3, [pc, #612]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800651c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006520:	d106      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006524:	2b80      	cmp	r3, #128	@ 0x80
 8006526:	d103      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8006528:	4b95      	ldr	r3, [pc, #596]	@ (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800652a:	637b      	str	r3, [r7, #52]	@ 0x34
 800652c:	f000 bebe 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006530:	4b92      	ldr	r3, [pc, #584]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b02      	cmp	r3, #2
 800653c:	d107      	bne.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	2bc0      	cmp	r3, #192	@ 0xc0
 8006542:	d104      	bne.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006544:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006548:	637b      	str	r3, [r7, #52]	@ 0x34
 800654a:	f000 beaf 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	637b      	str	r3, [r7, #52]	@ 0x34
 8006552:	f000 beab 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800655a:	f1a2 0110 	sub.w	r1, r2, #16
 800655e:	430b      	orrs	r3, r1
 8006560:	d139      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006562:	4b86      	ldr	r3, [pc, #536]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006568:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800656c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800656e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006574:	f7fe fa7e 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 8006578:	6378      	str	r0, [r7, #52]	@ 0x34
 800657a:	f000 be97 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006584:	d104      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006586:	f7fe f959 	bl	800483c <HAL_RCC_GetSysClockFreq>
 800658a:	6378      	str	r0, [r7, #52]	@ 0x34
 800658c:	f000 be8e 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006590:	4b7a      	ldr	r3, [pc, #488]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800659c:	d107      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 800659e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065a4:	d103      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80065a6:	4b76      	ldr	r3, [pc, #472]	@ (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80065a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065aa:	f000 be7f 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80065ae:	4b73      	ldr	r3, [pc, #460]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80065b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d108      	bne.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80065bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065c2:	d104      	bne.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 80065c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ca:	f000 be6f 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d2:	f000 be6b 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80065d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065da:	f1a2 0120 	sub.w	r1, r2, #32
 80065de:	430b      	orrs	r3, r1
 80065e0:	d158      	bne.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80065e2:	4b66      	ldr	r3, [pc, #408]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80065e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80065f4:	f7fe fa66 	bl	8004ac4 <HAL_RCC_GetPCLK3Freq>
 80065f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80065fa:	f000 be57 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80065fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006600:	2b01      	cmp	r3, #1
 8006602:	d104      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006604:	f7fe f91a 	bl	800483c <HAL_RCC_GetSysClockFreq>
 8006608:	6378      	str	r0, [r7, #52]	@ 0x34
 800660a:	f000 be4f 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800660e:	4b5b      	ldr	r3, [pc, #364]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800661a:	d106      	bne.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 800661c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661e:	2b02      	cmp	r3, #2
 8006620:	d103      	bne.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8006622:	4b57      	ldr	r3, [pc, #348]	@ (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006624:	637b      	str	r3, [r7, #52]	@ 0x34
 8006626:	f000 be41 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800662a:	4b54      	ldr	r3, [pc, #336]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800662c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b02      	cmp	r3, #2
 8006636:	d107      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8006638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663a:	2b03      	cmp	r3, #3
 800663c:	d104      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 800663e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006642:	637b      	str	r3, [r7, #52]	@ 0x34
 8006644:	f000 be32 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006648:	4b4c      	ldr	r3, [pc, #304]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b20      	cmp	r3, #32
 8006652:	d11b      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006656:	2b04      	cmp	r3, #4
 8006658:	d118      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800665a:	4b48      	ldr	r3, [pc, #288]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d005      	beq.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8006666:	4b45      	ldr	r3, [pc, #276]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	0e1b      	lsrs	r3, r3, #24
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	e006      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006672:	4b42      	ldr	r3, [pc, #264]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006678:	041b      	lsls	r3, r3, #16
 800667a:	0e1b      	lsrs	r3, r3, #24
 800667c:	f003 030f 	and.w	r3, r3, #15
 8006680:	4a40      	ldr	r2, [pc, #256]	@ (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006686:	637b      	str	r3, [r7, #52]	@ 0x34
 8006688:	f000 be10 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006690:	f000 be0c 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006698:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800669c:	430b      	orrs	r3, r1
 800669e:	d173      	bne.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80066a0:	4b36      	ldr	r3, [pc, #216]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066a6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80066aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80066ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066b2:	d104      	bne.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80066b4:	f7fe f8c2 	bl	800483c <HAL_RCC_GetSysClockFreq>
 80066b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80066ba:	f000 bdf7 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066c4:	d108      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066c6:	f107 0318 	add.w	r3, r7, #24
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff f992 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d4:	f000 bdea 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80066de:	f7fe f9af 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 80066e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80066e4:	f000 bde2 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80066e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066ee:	d122      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80066f0:	4b22      	ldr	r3, [pc, #136]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d118      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066fc:	4b1f      	ldr	r3, [pc, #124]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8006708:	4b1c      	ldr	r3, [pc, #112]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	0e1b      	lsrs	r3, r3, #24
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	e006      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006714:	4b19      	ldr	r3, [pc, #100]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006716:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800671a:	041b      	lsls	r3, r3, #16
 800671c:	0e1b      	lsrs	r3, r3, #24
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	4a18      	ldr	r2, [pc, #96]	@ (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006728:	637b      	str	r3, [r7, #52]	@ 0x34
 800672a:	f000 bdbf 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	637b      	str	r3, [r7, #52]	@ 0x34
 8006732:	f000 bdbb 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006736:	4b11      	ldr	r3, [pc, #68]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800673e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006742:	d107      	bne.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006746:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800674a:	d103      	bne.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 800674c:	4b0c      	ldr	r3, [pc, #48]	@ (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800674e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006750:	f000 bdac 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006754:	4b09      	ldr	r3, [pc, #36]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800675c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006760:	d107      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006768:	d103      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800676a:	4b05      	ldr	r3, [pc, #20]	@ (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800676c:	637b      	str	r3, [r7, #52]	@ 0x34
 800676e:	f000 bd9d 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	637b      	str	r3, [r7, #52]	@ 0x34
 8006776:	f000 bd99 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800677a:	bf00      	nop
 800677c:	46020c00 	.word	0x46020c00
 8006780:	00f42400 	.word	0x00f42400
 8006784:	0800ad40 	.word	0x0800ad40
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800678c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006790:	430b      	orrs	r3, r1
 8006792:	d158      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006794:	4bad      	ldr	r3, [pc, #692]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006796:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80067a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d84b      	bhi.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80067a6:	a201      	add	r2, pc, #4	@ (adr r2, 80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067e5 	.word	0x080067e5
 80067b0:	080067c1 	.word	0x080067c1
 80067b4:	080067d3 	.word	0x080067d3
 80067b8:	080067ef 	.word	0x080067ef
 80067bc:	080067f9 	.word	0x080067f9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe ffbb 	bl	8005740 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067ce:	f000 bd6d 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067d2:	f107 030c 	add.w	r3, r7, #12
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fa66 	bl	8005ca8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067e0:	f000 bd64 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80067e4:	f7fe f92c 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 80067e8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80067ea:	f000 bd5f 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80067ee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80067f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067f4:	f000 bd5a 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80067f8:	4b94      	ldr	r3, [pc, #592]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b20      	cmp	r3, #32
 8006802:	d118      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006804:	4b91      	ldr	r3, [pc, #580]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d005      	beq.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006810:	4b8e      	ldr	r3, [pc, #568]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	0e1b      	lsrs	r3, r3, #24
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	e006      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 800681c:	4b8b      	ldr	r3, [pc, #556]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800681e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006822:	041b      	lsls	r3, r3, #16
 8006824:	0e1b      	lsrs	r3, r3, #24
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	4a89      	ldr	r2, [pc, #548]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800682c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006830:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006832:	f000 bd3b 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800683a:	f000 bd37 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006842:	f000 bd33 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800684a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800684e:	430b      	orrs	r3, r1
 8006850:	d167      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006852:	4b7e      	ldr	r3, [pc, #504]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006858:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800685c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800685e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006860:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006864:	d036      	beq.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8006866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006868:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800686c:	d855      	bhi.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800686e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006870:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006874:	d029      	beq.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006878:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800687c:	d84d      	bhi.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006884:	d013      	beq.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8006886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006888:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800688c:	d845      	bhi.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800688e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006890:	2b00      	cmp	r3, #0
 8006892:	d015      	beq.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800689a:	d13e      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800689c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fe ff4d 	bl	8005740 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068aa:	f000 bcff 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068ae:	f107 030c 	add.w	r3, r7, #12
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff f9f8 	bl	8005ca8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068bc:	f000 bcf6 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80068c0:	f7fe f8be 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 80068c4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80068c6:	f000 bcf1 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80068ca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80068ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068d0:	f000 bcec 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068d4:	4b5d      	ldr	r3, [pc, #372]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0320 	and.w	r3, r3, #32
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d118      	bne.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068e0:	4b5a      	ldr	r3, [pc, #360]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80068ec:	4b57      	ldr	r3, [pc, #348]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	0e1b      	lsrs	r3, r3, #24
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	e006      	b.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80068f8:	4b54      	ldr	r3, [pc, #336]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068fe:	041b      	lsls	r3, r3, #16
 8006900:	0e1b      	lsrs	r3, r3, #24
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	4a52      	ldr	r2, [pc, #328]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800690c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800690e:	f000 bccd 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006916:	f000 bcc9 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800691e:	f000 bcc5 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006926:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800692a:	430b      	orrs	r3, r1
 800692c:	d14c      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800692e:	4b47      	ldr	r3, [pc, #284]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006934:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006938:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006940:	f7fe f898 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 8006944:	6378      	str	r0, [r7, #52]	@ 0x34
 8006946:	f000 bcb1 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006950:	d104      	bne.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006952:	f7fd ff73 	bl	800483c <HAL_RCC_GetSysClockFreq>
 8006956:	6378      	str	r0, [r7, #52]	@ 0x34
 8006958:	f000 bca8 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800695c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006968:	d107      	bne.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800696a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006970:	d103      	bne.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8006972:	4b38      	ldr	r3, [pc, #224]	@ (8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
 8006976:	f000 bc99 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800697a:	4b34      	ldr	r3, [pc, #208]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b20      	cmp	r3, #32
 8006984:	d11c      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8006986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006988:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800698c:	d118      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800698e:	4b2f      	ldr	r3, [pc, #188]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d005      	beq.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800699a:	4b2c      	ldr	r3, [pc, #176]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	0e1b      	lsrs	r3, r3, #24
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	e006      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80069a6:	4b29      	ldr	r3, [pc, #164]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069ac:	041b      	lsls	r3, r3, #16
 80069ae:	0e1b      	lsrs	r3, r3, #24
 80069b0:	f003 030f 	and.w	r3, r3, #15
 80069b4:	4a26      	ldr	r2, [pc, #152]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80069b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80069bc:	f000 bc76 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069c4:	f000 bc72 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80069c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069cc:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80069d0:	430b      	orrs	r3, r1
 80069d2:	d152      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80069d4:	4b1d      	ldr	r3, [pc, #116]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80069de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d104      	bne.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069e6:	f7fe f845 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 80069ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80069ec:	f000 bc5e 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80069f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f6:	d104      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069f8:	f7fd ff20 	bl	800483c <HAL_RCC_GetSysClockFreq>
 80069fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80069fe:	f000 bc55 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006a02:	4b12      	ldr	r3, [pc, #72]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a0e:	d107      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a16:	d103      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8006a18:	4b0e      	ldr	r3, [pc, #56]	@ (8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a1c:	f000 bc46 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006a20:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d122      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a32:	d11e      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a34:	4b05      	ldr	r3, [pc, #20]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006a40:	4b02      	ldr	r3, [pc, #8]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	0e1b      	lsrs	r3, r3, #24
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	e00c      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006a4c:	46020c00 	.word	0x46020c00
 8006a50:	0800ad40 	.word	0x0800ad40
 8006a54:	00f42400 	.word	0x00f42400
 8006a58:	4ba1      	ldr	r3, [pc, #644]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a5e:	041b      	lsls	r3, r3, #16
 8006a60:	0e1b      	lsrs	r3, r3, #24
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	4a9f      	ldr	r2, [pc, #636]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a6e:	f000 bc1d 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a76:	f000 bc19 	b.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a7e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006a82:	430b      	orrs	r3, r1
 8006a84:	d151      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006a86:	4b96      	ldr	r3, [pc, #600]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a8c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a90:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a94:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a96:	d024      	beq.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a9c:	d842      	bhi.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa0:	2b80      	cmp	r3, #128	@ 0x80
 8006aa2:	d00d      	beq.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa6:	2b80      	cmp	r3, #128	@ 0x80
 8006aa8:	d83c      	bhi.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab2:	2b40      	cmp	r3, #64	@ 0x40
 8006ab4:	d011      	beq.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8006ab6:	e035      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006ab8:	f7fe f804 	bl	8004ac4 <HAL_RCC_GetPCLK3Freq>
 8006abc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006abe:	e3f5      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ac0:	4b87      	ldr	r3, [pc, #540]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006acc:	d102      	bne.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8006ace:	4b86      	ldr	r3, [pc, #536]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006ad0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ad2:	e3eb      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ad8:	e3e8      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006ada:	f7fd feaf 	bl	800483c <HAL_RCC_GetSysClockFreq>
 8006ade:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006ae0:	e3e4      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d117      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006aee:	4b7c      	ldr	r3, [pc, #496]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8006afa:	4b79      	ldr	r3, [pc, #484]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	0e1b      	lsrs	r3, r3, #24
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	e006      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006b06:	4b76      	ldr	r3, [pc, #472]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b0c:	041b      	lsls	r3, r3, #16
 8006b0e:	0e1b      	lsrs	r3, r3, #24
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	4a73      	ldr	r2, [pc, #460]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b1a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b1c:	e3c6      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b22:	e3c3      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b28:	e3c0      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b2e:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006b32:	430b      	orrs	r3, r1
 8006b34:	d147      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006b36:	4b6a      	ldr	r3, [pc, #424]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006b40:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d103      	bne.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b48:	f7fd ff94 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 8006b4c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b4e:	e3ad      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b56:	d103      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b58:	f7fd fe70 	bl	800483c <HAL_RCC_GetSysClockFreq>
 8006b5c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b5e:	e3a5      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006b60:	4b5f      	ldr	r3, [pc, #380]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b6c:	d106      	bne.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b74:	d102      	bne.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8006b76:	4b5c      	ldr	r3, [pc, #368]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b7a:	e397      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006b7c:	4b58      	ldr	r3, [pc, #352]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b20      	cmp	r3, #32
 8006b86:	d11b      	bne.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006b8e:	d117      	bne.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b90:	4b53      	ldr	r3, [pc, #332]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d005      	beq.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8006b9c:	4b50      	ldr	r3, [pc, #320]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	0e1b      	lsrs	r3, r3, #24
 8006ba2:	f003 030f 	and.w	r3, r3, #15
 8006ba6:	e006      	b.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bae:	041b      	lsls	r3, r3, #16
 8006bb0:	0e1b      	lsrs	r3, r3, #24
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	4a4b      	ldr	r2, [pc, #300]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bbe:	e375      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc4:	e372      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bca:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	d164      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006bd2:	4b43      	ldr	r3, [pc, #268]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bdc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d120      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006be4:	4b3e      	ldr	r3, [pc, #248]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0320 	and.w	r3, r3, #32
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d117      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d005      	beq.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006bfc:	4b38      	ldr	r3, [pc, #224]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	0e1b      	lsrs	r3, r3, #24
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	e006      	b.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006c08:	4b35      	ldr	r3, [pc, #212]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c0e:	041b      	lsls	r3, r3, #16
 8006c10:	0e1b      	lsrs	r3, r3, #24
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	4a33      	ldr	r2, [pc, #204]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c1e:	e345      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c24:	e342      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006c26:	4b2e      	ldr	r3, [pc, #184]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c34:	d112      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c3c:	d10e      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c3e:	4b28      	ldr	r3, [pc, #160]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c4c:	d102      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006c4e:	23fa      	movs	r3, #250	@ 0xfa
 8006c50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c52:	e32b      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c54:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c5a:	e327      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006c5c:	4b20      	ldr	r3, [pc, #128]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c68:	d106      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c70:	d102      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006c72:	4b1d      	ldr	r3, [pc, #116]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c76:	e319      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006c78:	4b19      	ldr	r3, [pc, #100]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d107      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c8c:	d103      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c94:	e30a      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c9a:	e307      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006ca4:	430b      	orrs	r3, r1
 8006ca6:	d16b      	bne.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006caa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006cb2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d127      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006cba:	4b09      	ldr	r3, [pc, #36]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0320 	and.w	r3, r3, #32
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	d11e      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cc6:	4b06      	ldr	r3, [pc, #24]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00c      	beq.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006cd2:	4b03      	ldr	r3, [pc, #12]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	0e1b      	lsrs	r3, r3, #24
 8006cd8:	f003 030f 	and.w	r3, r3, #15
 8006cdc:	e00d      	b.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006cde:	bf00      	nop
 8006ce0:	46020c00 	.word	0x46020c00
 8006ce4:	0800ad40 	.word	0x0800ad40
 8006ce8:	00f42400 	.word	0x00f42400
 8006cec:	4b94      	ldr	r3, [pc, #592]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cf2:	041b      	lsls	r3, r3, #16
 8006cf4:	0e1b      	lsrs	r3, r3, #24
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	4a92      	ldr	r2, [pc, #584]	@ (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d02:	e2d3      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d08:	e2d0      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006d0a:	4b8d      	ldr	r3, [pc, #564]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d18:	d112      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d20:	d10e      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d22:	4b87      	ldr	r3, [pc, #540]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d30:	d102      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006d32:	23fa      	movs	r3, #250	@ 0xfa
 8006d34:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d36:	e2b9      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006d38:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d3e:	e2b5      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006d40:	4b7f      	ldr	r3, [pc, #508]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d4c:	d106      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d54:	d102      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8006d56:	4b7c      	ldr	r3, [pc, #496]	@ (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d5a:	e2a7      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006d5c:	4b78      	ldr	r3, [pc, #480]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d107      	bne.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d70:	d103      	bne.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d78:	e298      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d7e:	e295      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d84:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	d147      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d92:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006d96:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d103      	bne.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d9e:	f7fd fe69 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 8006da2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006da4:	e282      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006da6:	4b66      	ldr	r3, [pc, #408]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006db0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006db4:	d112      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006dbc:	d10e      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dbe:	4b60      	ldr	r3, [pc, #384]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dcc:	d102      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006dce:	23fa      	movs	r3, #250	@ 0xfa
 8006dd0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dd2:	e26b      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006dd4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006dd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dda:	e267      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006ddc:	4b58      	ldr	r3, [pc, #352]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de8:	d106      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006df0:	d102      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006df2:	4b55      	ldr	r3, [pc, #340]	@ (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df6:	e259      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006df8:	4b51      	ldr	r3, [pc, #324]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006dfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d107      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006e0c:	d103      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e14:	e24a      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e1a:	e247      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e20:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006e24:	430b      	orrs	r3, r1
 8006e26:	d12d      	bne.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006e28:	4b45      	ldr	r3, [pc, #276]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e2e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006e32:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006e34:	4b42      	ldr	r3, [pc, #264]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e40:	d105      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006e48:	4b3f      	ldr	r3, [pc, #252]	@ (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e4c:	e22e      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e54:	d107      	bne.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe fc70 	bl	8005740 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e64:	e222      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e6c:	d107      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e6e:	f107 0318 	add.w	r3, r7, #24
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe fdbe 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e7c:	e216      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e82:	e213      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e88:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	d15d      	bne.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006e90:	4b2b      	ldr	r3, [pc, #172]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e96:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006e9a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ea2:	d028      	beq.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006eaa:	d845      	bhi.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006eb2:	d013      	beq.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006eba:	d83d      	bhi.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d004      	beq.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ec8:	d004      	beq.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8006eca:	e035      	b.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006ecc:	f7fd fde6 	bl	8004a9c <HAL_RCC_GetPCLK2Freq>
 8006ed0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006ed2:	e1eb      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006ed4:	f7fd fcb2 	bl	800483c <HAL_RCC_GetSysClockFreq>
 8006ed8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006eda:	e1e7      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006edc:	4b18      	ldr	r3, [pc, #96]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee8:	d102      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8006eea:	4b17      	ldr	r3, [pc, #92]	@ (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006eec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006eee:	e1dd      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ef4:	e1da      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ef6:	4b12      	ldr	r3, [pc, #72]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	d117      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f02:	4b0f      	ldr	r3, [pc, #60]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d005      	beq.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	0e1b      	lsrs	r3, r3, #24
 8006f14:	f003 030f 	and.w	r3, r3, #15
 8006f18:	e006      	b.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8006f1a:	4b09      	ldr	r3, [pc, #36]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f20:	041b      	lsls	r3, r3, #16
 8006f22:	0e1b      	lsrs	r3, r3, #24
 8006f24:	f003 030f 	and.w	r3, r3, #15
 8006f28:	4a06      	ldr	r2, [pc, #24]	@ (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f30:	e1bc      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f36:	e1b9      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f3c:	e1b6      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006f3e:	bf00      	nop
 8006f40:	46020c00 	.word	0x46020c00
 8006f44:	0800ad40 	.word	0x0800ad40
 8006f48:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f50:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006f54:	430b      	orrs	r3, r1
 8006f56:	d156      	bne.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006f58:	4ba5      	ldr	r3, [pc, #660]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f62:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f6a:	d028      	beq.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f72:	d845      	bhi.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f7a:	d013      	beq.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f82:	d83d      	bhi.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d004      	beq.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f90:	d004      	beq.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006f92:	e035      	b.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006f94:	f7fd fd6e 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 8006f98:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f9a:	e187      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006f9c:	f7fd fc4e 	bl	800483c <HAL_RCC_GetSysClockFreq>
 8006fa0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006fa2:	e183      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fa4:	4b92      	ldr	r3, [pc, #584]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fb0:	d102      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8006fb2:	4b90      	ldr	r3, [pc, #576]	@ (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006fb4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fb6:	e179      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fbc:	e176      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fbe:	4b8c      	ldr	r3, [pc, #560]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d117      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fca:	4b89      	ldr	r3, [pc, #548]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8006fd6:	4b86      	ldr	r3, [pc, #536]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	0e1b      	lsrs	r3, r3, #24
 8006fdc:	f003 030f 	and.w	r3, r3, #15
 8006fe0:	e006      	b.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8006fe2:	4b83      	ldr	r3, [pc, #524]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fe8:	041b      	lsls	r3, r3, #16
 8006fea:	0e1b      	lsrs	r3, r3, #24
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	4a81      	ldr	r2, [pc, #516]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ff8:	e158      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ffe:	e155      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007004:	e152      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800700a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800700e:	430b      	orrs	r3, r1
 8007010:	d177      	bne.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007012:	4b77      	ldr	r3, [pc, #476]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007018:	f003 0318 	and.w	r3, r3, #24
 800701c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	2b18      	cmp	r3, #24
 8007022:	d86b      	bhi.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8007024:	a201      	add	r2, pc, #4	@ (adr r2, 800702c <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8007026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702a:	bf00      	nop
 800702c:	08007091 	.word	0x08007091
 8007030:	080070fd 	.word	0x080070fd
 8007034:	080070fd 	.word	0x080070fd
 8007038:	080070fd 	.word	0x080070fd
 800703c:	080070fd 	.word	0x080070fd
 8007040:	080070fd 	.word	0x080070fd
 8007044:	080070fd 	.word	0x080070fd
 8007048:	080070fd 	.word	0x080070fd
 800704c:	08007099 	.word	0x08007099
 8007050:	080070fd 	.word	0x080070fd
 8007054:	080070fd 	.word	0x080070fd
 8007058:	080070fd 	.word	0x080070fd
 800705c:	080070fd 	.word	0x080070fd
 8007060:	080070fd 	.word	0x080070fd
 8007064:	080070fd 	.word	0x080070fd
 8007068:	080070fd 	.word	0x080070fd
 800706c:	080070a1 	.word	0x080070a1
 8007070:	080070fd 	.word	0x080070fd
 8007074:	080070fd 	.word	0x080070fd
 8007078:	080070fd 	.word	0x080070fd
 800707c:	080070fd 	.word	0x080070fd
 8007080:	080070fd 	.word	0x080070fd
 8007084:	080070fd 	.word	0x080070fd
 8007088:	080070fd 	.word	0x080070fd
 800708c:	080070bb 	.word	0x080070bb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007090:	f7fd fd18 	bl	8004ac4 <HAL_RCC_GetPCLK3Freq>
 8007094:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007096:	e109      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007098:	f7fd fbd0 	bl	800483c <HAL_RCC_GetSysClockFreq>
 800709c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800709e:	e105      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070a0:	4b53      	ldr	r3, [pc, #332]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ac:	d102      	bne.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 80070ae:	4b51      	ldr	r3, [pc, #324]	@ (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80070b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070b2:	e0fb      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070b8:	e0f8      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070ba:	4b4d      	ldr	r3, [pc, #308]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	2b20      	cmp	r3, #32
 80070c4:	d117      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070c6:	4b4a      	ldr	r3, [pc, #296]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 80070d2:	4b47      	ldr	r3, [pc, #284]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	0e1b      	lsrs	r3, r3, #24
 80070d8:	f003 030f 	and.w	r3, r3, #15
 80070dc:	e006      	b.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80070de:	4b44      	ldr	r3, [pc, #272]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070e4:	041b      	lsls	r3, r3, #16
 80070e6:	0e1b      	lsrs	r3, r3, #24
 80070e8:	f003 030f 	and.w	r3, r3, #15
 80070ec:	4a42      	ldr	r2, [pc, #264]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80070ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070f4:	e0da      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070fa:	e0d7      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007100:	e0d4      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007102:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007106:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800710a:	430b      	orrs	r3, r1
 800710c:	d155      	bne.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800710e:	4b38      	ldr	r3, [pc, #224]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007110:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007114:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007118:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800711a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007120:	d013      	beq.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8007122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007124:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007128:	d844      	bhi.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800712a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007130:	d013      	beq.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8007132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007134:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007138:	d83c      	bhi.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	2b00      	cmp	r3, #0
 800713e:	d014      	beq.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8007140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007142:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007146:	d014      	beq.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8007148:	e034      	b.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800714a:	f107 0318 	add.w	r3, r7, #24
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe fc50 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007158:	e0a8      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800715a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800715e:	4618      	mov	r0, r3
 8007160:	f7fe faee 	bl	8005740 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007166:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007168:	e0a0      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800716a:	f7fd fb67 	bl	800483c <HAL_RCC_GetSysClockFreq>
 800716e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007170:	e09c      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007172:	4b1f      	ldr	r3, [pc, #124]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b20      	cmp	r3, #32
 800717c:	d117      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800717e:	4b1c      	ldr	r3, [pc, #112]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d005      	beq.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800718a:	4b19      	ldr	r3, [pc, #100]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	0e1b      	lsrs	r3, r3, #24
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	e006      	b.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8007196:	4b16      	ldr	r3, [pc, #88]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007198:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800719c:	041b      	lsls	r3, r3, #16
 800719e:	0e1b      	lsrs	r3, r3, #24
 80071a0:	f003 030f 	and.w	r3, r3, #15
 80071a4:	4a14      	ldr	r2, [pc, #80]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80071a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071ac:	e07e      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071b2:	e07b      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071b8:	e078      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80071ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071be:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80071c2:	430b      	orrs	r3, r1
 80071c4:	d138      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80071c6:	4b0a      	ldr	r3, [pc, #40]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071d0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80071d2:	4b07      	ldr	r3, [pc, #28]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d10d      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80071e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 80071e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ec:	e05e      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80071ee:	bf00      	nop
 80071f0:	46020c00 	.word	0x46020c00
 80071f4:	00f42400 	.word	0x00f42400
 80071f8:	0800ad40 	.word	0x0800ad40
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80071fc:	4b2e      	ldr	r3, [pc, #184]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80071fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007202:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800720a:	d112      	bne.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 800720c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007212:	d10e      	bne.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007214:	4b28      	ldr	r3, [pc, #160]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800721a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800721e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007222:	d102      	bne.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8007224:	23fa      	movs	r3, #250	@ 0xfa
 8007226:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007228:	e040      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800722a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800722e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007230:	e03c      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	637b      	str	r3, [r7, #52]	@ 0x34
 8007236:	e039      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800723c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007240:	430b      	orrs	r3, r1
 8007242:	d131      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007244:	4b1c      	ldr	r3, [pc, #112]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007246:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800724a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800724e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007250:	4b19      	ldr	r3, [pc, #100]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007258:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800725c:	d105      	bne.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007260:	2b00      	cmp	r3, #0
 8007262:	d102      	bne.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8007264:	4b15      	ldr	r3, [pc, #84]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8007266:	637b      	str	r3, [r7, #52]	@ 0x34
 8007268:	e020      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800726a:	4b13      	ldr	r3, [pc, #76]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007276:	d106      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800727e:	d102      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007280:	4b0f      	ldr	r3, [pc, #60]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8007282:	637b      	str	r3, [r7, #52]	@ 0x34
 8007284:	e012      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007286:	4b0c      	ldr	r3, [pc, #48]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800728e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007292:	d106      	bne.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800729a:	d102      	bne.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 800729c:	4b09      	ldr	r3, [pc, #36]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800729e:	637b      	str	r3, [r7, #52]	@ 0x34
 80072a0:	e004      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072a6:	e001      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80072ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3738      	adds	r7, #56	@ 0x38
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	46020c00 	.word	0x46020c00
 80072bc:	02dc6c00 	.word	0x02dc6c00
 80072c0:	016e3600 	.word	0x016e3600
 80072c4:	00f42400 	.word	0x00f42400

080072c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80072d0:	4b47      	ldr	r3, [pc, #284]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a46      	ldr	r2, [pc, #280]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 80072d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80072da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072dc:	f7fa f80a 	bl	80012f4 <HAL_GetTick>
 80072e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072e2:	e008      	b.n	80072f6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072e4:	f7fa f806 	bl	80012f4 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e077      	b.n	80073e6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072f6:	4b3e      	ldr	r3, [pc, #248]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1f0      	bne.n	80072e4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007302:	4b3b      	ldr	r3, [pc, #236]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 8007304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007306:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800730a:	f023 0303 	bic.w	r3, r3, #3
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	6811      	ldr	r1, [r2, #0]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6852      	ldr	r2, [r2, #4]
 8007316:	3a01      	subs	r2, #1
 8007318:	0212      	lsls	r2, r2, #8
 800731a:	430a      	orrs	r2, r1
 800731c:	4934      	ldr	r1, [pc, #208]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 800731e:	4313      	orrs	r3, r2
 8007320:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007322:	4b33      	ldr	r3, [pc, #204]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 8007324:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007326:	4b33      	ldr	r3, [pc, #204]	@ (80073f4 <RCCEx_PLL2_Config+0x12c>)
 8007328:	4013      	ands	r3, r2
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	6892      	ldr	r2, [r2, #8]
 800732e:	3a01      	subs	r2, #1
 8007330:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	68d2      	ldr	r2, [r2, #12]
 8007338:	3a01      	subs	r2, #1
 800733a:	0252      	lsls	r2, r2, #9
 800733c:	b292      	uxth	r2, r2
 800733e:	4311      	orrs	r1, r2
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6912      	ldr	r2, [r2, #16]
 8007344:	3a01      	subs	r2, #1
 8007346:	0412      	lsls	r2, r2, #16
 8007348:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800734c:	4311      	orrs	r1, r2
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6952      	ldr	r2, [r2, #20]
 8007352:	3a01      	subs	r2, #1
 8007354:	0612      	lsls	r2, r2, #24
 8007356:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800735a:	430a      	orrs	r2, r1
 800735c:	4924      	ldr	r1, [pc, #144]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 800735e:	4313      	orrs	r3, r2
 8007360:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007362:	4b23      	ldr	r3, [pc, #140]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 8007364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007366:	f023 020c 	bic.w	r2, r3, #12
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	4920      	ldr	r1, [pc, #128]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 8007370:	4313      	orrs	r3, r2
 8007372:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007374:	4b1e      	ldr	r3, [pc, #120]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 8007376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	491c      	ldr	r1, [pc, #112]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 800737e:	4313      	orrs	r3, r2
 8007380:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007382:	4b1b      	ldr	r3, [pc, #108]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 8007384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007386:	4a1a      	ldr	r2, [pc, #104]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 8007388:	f023 0310 	bic.w	r3, r3, #16
 800738c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800738e:	4b18      	ldr	r3, [pc, #96]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 8007390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007396:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	69d2      	ldr	r2, [r2, #28]
 800739e:	00d2      	lsls	r2, r2, #3
 80073a0:	4913      	ldr	r1, [pc, #76]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80073a6:	4b12      	ldr	r3, [pc, #72]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 80073a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073aa:	4a11      	ldr	r2, [pc, #68]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 80073ac:	f043 0310 	orr.w	r3, r3, #16
 80073b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80073b2:	4b0f      	ldr	r3, [pc, #60]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a0e      	ldr	r2, [pc, #56]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 80073b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80073bc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80073be:	f7f9 ff99 	bl	80012f4 <HAL_GetTick>
 80073c2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073c4:	e008      	b.n	80073d8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073c6:	f7f9 ff95 	bl	80012f4 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e006      	b.n	80073e6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073d8:	4b05      	ldr	r3, [pc, #20]	@ (80073f0 <RCCEx_PLL2_Config+0x128>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0f0      	beq.n	80073c6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80073e4:	2300      	movs	r3, #0

}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	46020c00 	.word	0x46020c00
 80073f4:	80800000 	.word	0x80800000

080073f8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007400:	4b47      	ldr	r3, [pc, #284]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a46      	ldr	r2, [pc, #280]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 8007406:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800740a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800740c:	f7f9 ff72 	bl	80012f4 <HAL_GetTick>
 8007410:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007412:	e008      	b.n	8007426 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007414:	f7f9 ff6e 	bl	80012f4 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e077      	b.n	8007516 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007426:	4b3e      	ldr	r3, [pc, #248]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1f0      	bne.n	8007414 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007432:	4b3b      	ldr	r3, [pc, #236]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007436:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800743a:	f023 0303 	bic.w	r3, r3, #3
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	6811      	ldr	r1, [r2, #0]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6852      	ldr	r2, [r2, #4]
 8007446:	3a01      	subs	r2, #1
 8007448:	0212      	lsls	r2, r2, #8
 800744a:	430a      	orrs	r2, r1
 800744c:	4934      	ldr	r1, [pc, #208]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 800744e:	4313      	orrs	r3, r2
 8007450:	630b      	str	r3, [r1, #48]	@ 0x30
 8007452:	4b33      	ldr	r3, [pc, #204]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 8007454:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007456:	4b33      	ldr	r3, [pc, #204]	@ (8007524 <RCCEx_PLL3_Config+0x12c>)
 8007458:	4013      	ands	r3, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6892      	ldr	r2, [r2, #8]
 800745e:	3a01      	subs	r2, #1
 8007460:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	68d2      	ldr	r2, [r2, #12]
 8007468:	3a01      	subs	r2, #1
 800746a:	0252      	lsls	r2, r2, #9
 800746c:	b292      	uxth	r2, r2
 800746e:	4311      	orrs	r1, r2
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	6912      	ldr	r2, [r2, #16]
 8007474:	3a01      	subs	r2, #1
 8007476:	0412      	lsls	r2, r2, #16
 8007478:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800747c:	4311      	orrs	r1, r2
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6952      	ldr	r2, [r2, #20]
 8007482:	3a01      	subs	r2, #1
 8007484:	0612      	lsls	r2, r2, #24
 8007486:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800748a:	430a      	orrs	r2, r1
 800748c:	4924      	ldr	r1, [pc, #144]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 800748e:	4313      	orrs	r3, r2
 8007490:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007492:	4b23      	ldr	r3, [pc, #140]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 8007494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007496:	f023 020c 	bic.w	r2, r3, #12
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	4920      	ldr	r1, [pc, #128]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80074a4:	4b1e      	ldr	r3, [pc, #120]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 80074a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	491c      	ldr	r1, [pc, #112]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80074b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b6:	4a1a      	ldr	r2, [pc, #104]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 80074b8:	f023 0310 	bic.w	r3, r3, #16
 80074bc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074be:	4b18      	ldr	r3, [pc, #96]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 80074c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074c6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	69d2      	ldr	r2, [r2, #28]
 80074ce:	00d2      	lsls	r2, r2, #3
 80074d0:	4913      	ldr	r1, [pc, #76]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80074d6:	4b12      	ldr	r3, [pc, #72]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 80074d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074da:	4a11      	ldr	r2, [pc, #68]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 80074dc:	f043 0310 	orr.w	r3, r3, #16
 80074e0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80074e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a0e      	ldr	r2, [pc, #56]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 80074e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074ec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074ee:	f7f9 ff01 	bl	80012f4 <HAL_GetTick>
 80074f2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074f4:	e008      	b.n	8007508 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074f6:	f7f9 fefd 	bl	80012f4 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d901      	bls.n	8007508 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e006      	b.n	8007516 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007508:	4b05      	ldr	r3, [pc, #20]	@ (8007520 <RCCEx_PLL3_Config+0x128>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0f0      	beq.n	80074f6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	46020c00 	.word	0x46020c00
 8007524:	80800000 	.word	0x80800000

08007528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e042      	b.n	80075c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007540:	2b00      	cmp	r3, #0
 8007542:	d106      	bne.n	8007552 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7f9 fbd7 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2224      	movs	r2, #36	@ 0x24
 8007556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0201 	bic.w	r2, r2, #1
 8007568:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fdaa 	bl	80080cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fc05 	bl	8007d88 <UART_SetConfig>
 800757e:	4603      	mov	r3, r0
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e01b      	b.n	80075c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0201 	orr.w	r2, r2, #1
 80075b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fe29 	bl	8008210 <UART_CheckIdleState>
 80075be:	4603      	mov	r3, r0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08a      	sub	sp, #40	@ 0x28
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	4613      	mov	r3, r2
 80075d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075de:	2b20      	cmp	r3, #32
 80075e0:	f040 808b 	bne.w	80076fa <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_UART_Transmit+0x28>
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e083      	b.n	80076fc <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075fe:	2b80      	cmp	r3, #128	@ 0x80
 8007600:	d107      	bne.n	8007612 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007610:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2221      	movs	r2, #33	@ 0x21
 800761e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007622:	f7f9 fe67 	bl	80012f4 <HAL_GetTick>
 8007626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	88fa      	ldrh	r2, [r7, #6]
 800762c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	88fa      	ldrh	r2, [r7, #6]
 8007634:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007640:	d108      	bne.n	8007654 <HAL_UART_Transmit+0x8c>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d104      	bne.n	8007654 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800764a:	2300      	movs	r3, #0
 800764c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	e003      	b.n	800765c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007658:	2300      	movs	r3, #0
 800765a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800765c:	e030      	b.n	80076c0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2200      	movs	r2, #0
 8007666:	2180      	movs	r1, #128	@ 0x80
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fe7b 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d005      	beq.n	8007680 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e03d      	b.n	80076fc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10b      	bne.n	800769e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007694:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	3302      	adds	r3, #2
 800769a:	61bb      	str	r3, [r7, #24]
 800769c:	e007      	b.n	80076ae <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	781a      	ldrb	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	3301      	adds	r3, #1
 80076ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	3b01      	subs	r3, #1
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1c8      	bne.n	800765e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2200      	movs	r2, #0
 80076d4:	2140      	movs	r1, #64	@ 0x40
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fe44 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2220      	movs	r2, #32
 80076e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e006      	b.n	80076fc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	e000      	b.n	80076fc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80076fa:	2302      	movs	r3, #2
  }
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3720      	adds	r7, #32
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08a      	sub	sp, #40	@ 0x28
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	4613      	mov	r3, r2
 8007710:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007718:	2b20      	cmp	r3, #32
 800771a:	d14b      	bne.n	80077b4 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <HAL_UART_Receive_IT+0x24>
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e044      	b.n	80077b6 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773c:	2b40      	cmp	r3, #64	@ 0x40
 800773e:	d107      	bne.n	8007750 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689a      	ldr	r2, [r3, #8]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800774e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a1a      	ldr	r2, [pc, #104]	@ (80077c0 <HAL_UART_Receive_IT+0xbc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d024      	beq.n	80077a4 <HAL_UART_Receive_IT+0xa0>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a19      	ldr	r2, [pc, #100]	@ (80077c4 <HAL_UART_Receive_IT+0xc0>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d01f      	beq.n	80077a4 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d018      	beq.n	80077a4 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	613b      	str	r3, [r7, #16]
   return(result);
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007786:	627b      	str	r3, [r7, #36]	@ 0x24
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	461a      	mov	r2, r3
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	623b      	str	r3, [r7, #32]
 8007792:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	69f9      	ldr	r1, [r7, #28]
 8007796:	6a3a      	ldr	r2, [r7, #32]
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	61bb      	str	r3, [r7, #24]
   return(result);
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e6      	bne.n	8007772 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	461a      	mov	r2, r3
 80077a8:	68b9      	ldr	r1, [r7, #8]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 fe48 	bl	8008440 <UART_Start_Receive_IT>
 80077b0:	4603      	mov	r3, r0
 80077b2:	e000      	b.n	80077b6 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80077b4:	2302      	movs	r3, #2
  }
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3728      	adds	r7, #40	@ 0x28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	46002400 	.word	0x46002400
 80077c4:	56002400 	.word	0x56002400

080077c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b0ae      	sub	sp, #184	@ 0xb8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80077f6:	4013      	ands	r3, r2
 80077f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 80077fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007800:	2b00      	cmp	r3, #0
 8007802:	d11b      	bne.n	800783c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007804:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b00      	cmp	r3, #0
 800780e:	d015      	beq.n	800783c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007810:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007814:	f003 0320 	and.w	r3, r3, #32
 8007818:	2b00      	cmp	r3, #0
 800781a:	d105      	bne.n	8007828 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800781c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d009      	beq.n	800783c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 827e 	beq.w	8007d2e <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
      }
      return;
 800783a:	e278      	b.n	8007d2e <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800783c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 80fd 	beq.w	8007a40 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007846:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800784a:	4b7a      	ldr	r3, [pc, #488]	@ (8007a34 <HAL_UART_IRQHandler+0x26c>)
 800784c:	4013      	ands	r3, r2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007852:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007856:	4b78      	ldr	r3, [pc, #480]	@ (8007a38 <HAL_UART_IRQHandler+0x270>)
 8007858:	4013      	ands	r3, r2
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 80f0 	beq.w	8007a40 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007860:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b00      	cmp	r3, #0
 800786a:	d011      	beq.n	8007890 <HAL_UART_IRQHandler+0xc8>
 800786c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00b      	beq.n	8007890 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2201      	movs	r2, #1
 800787e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007886:	f043 0201 	orr.w	r2, r3, #1
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007890:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d011      	beq.n	80078c0 <HAL_UART_IRQHandler+0xf8>
 800789c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2202      	movs	r2, #2
 80078ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b6:	f043 0204 	orr.w	r2, r3, #4
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d011      	beq.n	80078f0 <HAL_UART_IRQHandler+0x128>
 80078cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00b      	beq.n	80078f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2204      	movs	r2, #4
 80078de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e6:	f043 0202 	orr.w	r2, r3, #2
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d017      	beq.n	800792c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b00      	cmp	r3, #0
 8007906:	d105      	bne.n	8007914 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007908:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800790c:	4b49      	ldr	r3, [pc, #292]	@ (8007a34 <HAL_UART_IRQHandler+0x26c>)
 800790e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2208      	movs	r2, #8
 800791a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007922:	f043 0208 	orr.w	r2, r3, #8
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800792c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007934:	2b00      	cmp	r3, #0
 8007936:	d012      	beq.n	800795e <HAL_UART_IRQHandler+0x196>
 8007938:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800793c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00c      	beq.n	800795e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800794c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007954:	f043 0220 	orr.w	r2, r3, #32
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 81e4 	beq.w	8007d32 <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800796a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800796e:	f003 0320 	and.w	r3, r3, #32
 8007972:	2b00      	cmp	r3, #0
 8007974:	d013      	beq.n	800799e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007976:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b00      	cmp	r3, #0
 8007980:	d105      	bne.n	800798e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d007      	beq.n	800799e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079b2:	2b40      	cmp	r3, #64	@ 0x40
 80079b4:	d005      	beq.n	80079c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d02e      	beq.n	8007a20 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fe5e 	bl	8008684 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d2:	2b40      	cmp	r3, #64	@ 0x40
 80079d4:	d120      	bne.n	8007a18 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d017      	beq.n	8007a10 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079e6:	4a15      	ldr	r2, [pc, #84]	@ (8007a3c <HAL_UART_IRQHandler+0x274>)
 80079e8:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fa fa87 	bl	8001f04 <HAL_DMA_Abort_IT>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d019      	beq.n	8007a30 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a0e:	e00f      	b.n	8007a30 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f9a3 	bl	8007d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a16:	e00b      	b.n	8007a30 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f99f 	bl	8007d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a1e:	e007      	b.n	8007a30 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f99b 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007a2e:	e180      	b.n	8007d32 <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a30:	bf00      	nop
    return;
 8007a32:	e17e      	b.n	8007d32 <HAL_UART_IRQHandler+0x56a>
 8007a34:	10000001 	.word	0x10000001
 8007a38:	04000120 	.word	0x04000120
 8007a3c:	08008751 	.word	0x08008751

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	f040 8129 	bne.w	8007c9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a4e:	f003 0310 	and.w	r3, r3, #16
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 8122 	beq.w	8007c9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007a5c:	f003 0310 	and.w	r3, r3, #16
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 811b 	beq.w	8007c9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2210      	movs	r2, #16
 8007a6c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a78:	2b40      	cmp	r3, #64	@ 0x40
 8007a7a:	f040 8091 	bne.w	8007ba0 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a88:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8007a8c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 8150 	beq.w	8007d36 <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a9c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	f080 8148 	bcs.w	8007d36 <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007aac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab8:	2b81      	cmp	r3, #129	@ 0x81
 8007aba:	d060      	beq.n	8007b7e <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007aca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ad0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ade:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ae2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007aea:	e841 2300 	strex	r3, r2, [r1]
 8007aee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007af0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1e2      	bne.n	8007abc <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3308      	adds	r3, #8
 8007afc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b08:	f023 0301 	bic.w	r3, r3, #1
 8007b0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3308      	adds	r3, #8
 8007b16:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007b1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e3      	bne.n	8007af6 <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2220      	movs	r2, #32
 8007b32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b4c:	f023 0310 	bic.w	r3, r3, #16
 8007b50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e4      	bne.n	8007b3c <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fa f947 	bl	8001e0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2202      	movs	r2, #2
 8007b82:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f8e9 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b9e:	e0ca      	b.n	8007d36 <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 80bc 	beq.w	8007d3a <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 8007bc2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 80b7 	beq.w	8007d3a <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007be0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bf0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e4      	bne.n	8007bcc <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3308      	adds	r3, #8
 8007c08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0c:	e853 3f00 	ldrex	r3, [r3]
 8007c10:	623b      	str	r3, [r7, #32]
   return(result);
 8007c12:	6a3b      	ldr	r3, [r7, #32]
 8007c14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c18:	f023 0301 	bic.w	r3, r3, #1
 8007c1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3308      	adds	r3, #8
 8007c26:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007c2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e1      	bne.n	8007c02 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 0310 	bic.w	r3, r3, #16
 8007c66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007c74:	61fb      	str	r3, [r7, #28]
 8007c76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	69b9      	ldr	r1, [r7, #24]
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	617b      	str	r3, [r7, #20]
   return(result);
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e4      	bne.n	8007c52 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c8e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f86b 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c9a:	e04e      	b.n	8007d3a <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d014      	beq.n	8007cd2 <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007ca8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d105      	bne.n	8007cc0 <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d008      	beq.n	8007cd2 <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d03a      	beq.n	8007d3e <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	4798      	blx	r3
    }
    return;
 8007cd0:	e035      	b.n	8007d3e <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x52a>
 8007cde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fd46 	bl	800877c <UART_EndTransmit_IT>
    return;
 8007cf0:	e026      	b.n	8007d40 <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007cf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <HAL_UART_IRQHandler+0x54a>
 8007cfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007d02:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f001 faa4 	bl	8009258 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d10:	e016      	b.n	8007d40 <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d010      	beq.n	8007d40 <HAL_UART_IRQHandler+0x578>
 8007d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	da0c      	bge.n	8007d40 <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f001 fa8c 	bl	8009244 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d2c:	e008      	b.n	8007d40 <HAL_UART_IRQHandler+0x578>
      return;
 8007d2e:	bf00      	nop
 8007d30:	e006      	b.n	8007d40 <HAL_UART_IRQHandler+0x578>
    return;
 8007d32:	bf00      	nop
 8007d34:	e004      	b.n	8007d40 <HAL_UART_IRQHandler+0x578>
      return;
 8007d36:	bf00      	nop
 8007d38:	e002      	b.n	8007d40 <HAL_UART_IRQHandler+0x578>
      return;
 8007d3a:	bf00      	nop
 8007d3c:	e000      	b.n	8007d40 <HAL_UART_IRQHandler+0x578>
    return;
 8007d3e:	bf00      	nop
  }
}
 8007d40:	37b8      	adds	r7, #184	@ 0xb8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop

08007d48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d8c:	b094      	sub	sp, #80	@ 0x50
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	4b7e      	ldr	r3, [pc, #504]	@ (8007f98 <UART_SetConfig+0x210>)
 8007d9e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	431a      	orrs	r2, r3
 8007daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	431a      	orrs	r2, r3
 8007db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4977      	ldr	r1, [pc, #476]	@ (8007f9c <UART_SetConfig+0x214>)
 8007dc0:	4019      	ands	r1, r3
 8007dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd8:	68d9      	ldr	r1, [r3, #12]
 8007dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	ea40 0301 	orr.w	r3, r0, r1
 8007de2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b6a      	ldr	r3, [pc, #424]	@ (8007f98 <UART_SetConfig+0x210>)
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d009      	beq.n	8007e08 <UART_SetConfig+0x80>
 8007df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	4b69      	ldr	r3, [pc, #420]	@ (8007fa0 <UART_SetConfig+0x218>)
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d004      	beq.n	8007e08 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e00:	6a1a      	ldr	r2, [r3, #32]
 8007e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e04:	4313      	orrs	r3, r2
 8007e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007e12:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8007e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e26:	f023 000f 	bic.w	r0, r3, #15
 8007e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e2c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	ea40 0301 	orr.w	r3, r0, r1
 8007e36:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	4b59      	ldr	r3, [pc, #356]	@ (8007fa4 <UART_SetConfig+0x21c>)
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d102      	bne.n	8007e48 <UART_SetConfig+0xc0>
 8007e42:	2301      	movs	r3, #1
 8007e44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e46:	e029      	b.n	8007e9c <UART_SetConfig+0x114>
 8007e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	4b56      	ldr	r3, [pc, #344]	@ (8007fa8 <UART_SetConfig+0x220>)
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d102      	bne.n	8007e58 <UART_SetConfig+0xd0>
 8007e52:	2302      	movs	r3, #2
 8007e54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e56:	e021      	b.n	8007e9c <UART_SetConfig+0x114>
 8007e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	4b53      	ldr	r3, [pc, #332]	@ (8007fac <UART_SetConfig+0x224>)
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d102      	bne.n	8007e68 <UART_SetConfig+0xe0>
 8007e62:	2304      	movs	r3, #4
 8007e64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e66:	e019      	b.n	8007e9c <UART_SetConfig+0x114>
 8007e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	4b50      	ldr	r3, [pc, #320]	@ (8007fb0 <UART_SetConfig+0x228>)
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d102      	bne.n	8007e78 <UART_SetConfig+0xf0>
 8007e72:	2308      	movs	r3, #8
 8007e74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e76:	e011      	b.n	8007e9c <UART_SetConfig+0x114>
 8007e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8007fb4 <UART_SetConfig+0x22c>)
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d102      	bne.n	8007e88 <UART_SetConfig+0x100>
 8007e82:	2310      	movs	r3, #16
 8007e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e86:	e009      	b.n	8007e9c <UART_SetConfig+0x114>
 8007e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	4b42      	ldr	r3, [pc, #264]	@ (8007f98 <UART_SetConfig+0x210>)
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d102      	bne.n	8007e98 <UART_SetConfig+0x110>
 8007e92:	2320      	movs	r3, #32
 8007e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e96:	e001      	b.n	8007e9c <UART_SetConfig+0x114>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8007f98 <UART_SetConfig+0x210>)
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d005      	beq.n	8007eb2 <UART_SetConfig+0x12a>
 8007ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8007fa0 <UART_SetConfig+0x218>)
 8007eac:	429a      	cmp	r2, r3
 8007eae:	f040 8085 	bne.w	8007fbc <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007eb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	623b      	str	r3, [r7, #32]
 8007eb8:	627a      	str	r2, [r7, #36]	@ 0x24
 8007eba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007ebe:	f7fe f84d 	bl	8005f5c <HAL_RCCEx_GetPeriphCLKFreq>
 8007ec2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 80e8 	beq.w	800809c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed0:	4a39      	ldr	r2, [pc, #228]	@ (8007fb8 <UART_SetConfig+0x230>)
 8007ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007eda:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ede:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	4413      	add	r3, r2
 8007eea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d305      	bcc.n	8007efc <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ef6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d903      	bls.n	8007f04 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007f02:	e048      	b.n	8007f96 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f06:	2200      	movs	r2, #0
 8007f08:	61bb      	str	r3, [r7, #24]
 8007f0a:	61fa      	str	r2, [r7, #28]
 8007f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f10:	4a29      	ldr	r2, [pc, #164]	@ (8007fb8 <UART_SetConfig+0x230>)
 8007f12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2200      	movs	r2, #0
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	617a      	str	r2, [r7, #20]
 8007f1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007f26:	f7f8 f9a7 	bl	8000278 <__aeabi_uldivmod>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4610      	mov	r0, r2
 8007f30:	4619      	mov	r1, r3
 8007f32:	f04f 0200 	mov.w	r2, #0
 8007f36:	f04f 0300 	mov.w	r3, #0
 8007f3a:	020b      	lsls	r3, r1, #8
 8007f3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f40:	0202      	lsls	r2, r0, #8
 8007f42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f44:	6849      	ldr	r1, [r1, #4]
 8007f46:	0849      	lsrs	r1, r1, #1
 8007f48:	2000      	movs	r0, #0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	eb12 0804 	adds.w	r8, r2, r4
 8007f52:	eb43 0905 	adc.w	r9, r3, r5
 8007f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	60bb      	str	r3, [r7, #8]
 8007f5e:	60fa      	str	r2, [r7, #12]
 8007f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f64:	4640      	mov	r0, r8
 8007f66:	4649      	mov	r1, r9
 8007f68:	f7f8 f986 	bl	8000278 <__aeabi_uldivmod>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4613      	mov	r3, r2
 8007f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f7a:	d308      	bcc.n	8007f8e <UART_SetConfig+0x206>
 8007f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f82:	d204      	bcs.n	8007f8e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007f8a:	60da      	str	r2, [r3, #12]
 8007f8c:	e003      	b.n	8007f96 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8007f94:	e082      	b.n	800809c <UART_SetConfig+0x314>
 8007f96:	e081      	b.n	800809c <UART_SetConfig+0x314>
 8007f98:	46002400 	.word	0x46002400
 8007f9c:	cfff69f3 	.word	0xcfff69f3
 8007fa0:	56002400 	.word	0x56002400
 8007fa4:	40013800 	.word	0x40013800
 8007fa8:	40004400 	.word	0x40004400
 8007fac:	40004800 	.word	0x40004800
 8007fb0:	40004c00 	.word	0x40004c00
 8007fb4:	40005000 	.word	0x40005000
 8007fb8:	0800ae00 	.word	0x0800ae00
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fc4:	d13c      	bne.n	8008040 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fc8:	2200      	movs	r2, #0
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	607a      	str	r2, [r7, #4]
 8007fce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fd2:	f7fd ffc3 	bl	8005f5c <HAL_RCCEx_GetPeriphCLKFreq>
 8007fd6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d05e      	beq.n	800809c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe2:	4a39      	ldr	r2, [pc, #228]	@ (80080c8 <UART_SetConfig+0x340>)
 8007fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fec:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ff0:	005a      	lsls	r2, r3, #1
 8007ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	085b      	lsrs	r3, r3, #1
 8007ff8:	441a      	add	r2, r3
 8007ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008002:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008006:	2b0f      	cmp	r3, #15
 8008008:	d916      	bls.n	8008038 <UART_SetConfig+0x2b0>
 800800a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800800c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008010:	d212      	bcs.n	8008038 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008014:	b29b      	uxth	r3, r3
 8008016:	f023 030f 	bic.w	r3, r3, #15
 800801a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800801c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800801e:	085b      	lsrs	r3, r3, #1
 8008020:	b29b      	uxth	r3, r3
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	b29a      	uxth	r2, r3
 8008028:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800802a:	4313      	orrs	r3, r2
 800802c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800802e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008034:	60da      	str	r2, [r3, #12]
 8008036:	e031      	b.n	800809c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800803e:	e02d      	b.n	800809c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008042:	2200      	movs	r2, #0
 8008044:	469a      	mov	sl, r3
 8008046:	4693      	mov	fp, r2
 8008048:	4650      	mov	r0, sl
 800804a:	4659      	mov	r1, fp
 800804c:	f7fd ff86 	bl	8005f5c <HAL_RCCEx_GetPeriphCLKFreq>
 8008050:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008054:	2b00      	cmp	r3, #0
 8008056:	d021      	beq.n	800809c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805c:	4a1a      	ldr	r2, [pc, #104]	@ (80080c8 <UART_SetConfig+0x340>)
 800805e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008062:	461a      	mov	r2, r3
 8008064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008066:	fbb3 f2f2 	udiv	r2, r3, r2
 800806a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	085b      	lsrs	r3, r3, #1
 8008070:	441a      	add	r2, r3
 8008072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	fbb2 f3f3 	udiv	r3, r2, r3
 800807a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800807c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800807e:	2b0f      	cmp	r3, #15
 8008080:	d909      	bls.n	8008096 <UART_SetConfig+0x30e>
 8008082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008088:	d205      	bcs.n	8008096 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800808a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800808c:	b29a      	uxth	r2, r3
 800808e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60da      	str	r2, [r3, #12]
 8008094:	e002      	b.n	800809c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800809c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800809e:	2201      	movs	r2, #1
 80080a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80080a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a6:	2201      	movs	r2, #1
 80080a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ae:	2200      	movs	r2, #0
 80080b0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80080b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b4:	2200      	movs	r2, #0
 80080b6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80080b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3750      	adds	r7, #80	@ 0x50
 80080c0:	46bd      	mov	sp, r7
 80080c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080c6:	bf00      	nop
 80080c8:	0800ae00 	.word	0x0800ae00

080080cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d8:	f003 0308 	and.w	r3, r3, #8
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00a      	beq.n	80080f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00a      	beq.n	800813a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813e:	f003 0304 	and.w	r3, r3, #4
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	430a      	orrs	r2, r1
 800815a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008160:	f003 0310 	and.w	r3, r3, #16
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00a      	beq.n	800817e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01a      	beq.n	80081e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081ca:	d10a      	bne.n	80081e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	430a      	orrs	r2, r1
 8008202:	605a      	str	r2, [r3, #4]
  }
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b098      	sub	sp, #96	@ 0x60
 8008214:	af02      	add	r7, sp, #8
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008220:	f7f9 f868 	bl	80012f4 <HAL_GetTick>
 8008224:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0308 	and.w	r3, r3, #8
 8008230:	2b08      	cmp	r3, #8
 8008232:	d12f      	bne.n	8008294 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008234:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800823c:	2200      	movs	r2, #0
 800823e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f88e 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d022      	beq.n	8008294 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800825c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008262:	653b      	str	r3, [r7, #80]	@ 0x50
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800826c:	647b      	str	r3, [r7, #68]	@ 0x44
 800826e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800827a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e6      	bne.n	800824e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2220      	movs	r2, #32
 8008284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e063      	b.n	800835c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0304 	and.w	r3, r3, #4
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d149      	bne.n	8008336 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082aa:	2200      	movs	r2, #0
 80082ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f857 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d03c      	beq.n	8008336 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	e853 3f00 	ldrex	r3, [r3]
 80082c8:	623b      	str	r3, [r7, #32]
   return(result);
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082da:	633b      	str	r3, [r7, #48]	@ 0x30
 80082dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082e2:	e841 2300 	strex	r3, r2, [r1]
 80082e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1e6      	bne.n	80082bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3308      	adds	r3, #8
 80082f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f023 0301 	bic.w	r3, r3, #1
 8008304:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3308      	adds	r3, #8
 800830c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800830e:	61fa      	str	r2, [r7, #28]
 8008310:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	69b9      	ldr	r1, [r7, #24]
 8008314:	69fa      	ldr	r2, [r7, #28]
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	617b      	str	r3, [r7, #20]
   return(result);
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e5      	bne.n	80082ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2220      	movs	r2, #32
 8008326:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e012      	b.n	800835c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2220      	movs	r2, #32
 800833a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2220      	movs	r2, #32
 8008342:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3758      	adds	r7, #88	@ 0x58
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	4613      	mov	r3, r2
 8008372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008374:	e04f      	b.n	8008416 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837c:	d04b      	beq.n	8008416 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800837e:	f7f8 ffb9 	bl	80012f4 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	429a      	cmp	r2, r3
 800838c:	d302      	bcc.n	8008394 <UART_WaitOnFlagUntilTimeout+0x30>
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e04e      	b.n	8008436 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0304 	and.w	r3, r3, #4
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d037      	beq.n	8008416 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b80      	cmp	r3, #128	@ 0x80
 80083aa:	d034      	beq.n	8008416 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b40      	cmp	r3, #64	@ 0x40
 80083b0:	d031      	beq.n	8008416 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	f003 0308 	and.w	r3, r3, #8
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d110      	bne.n	80083e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2208      	movs	r2, #8
 80083c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 f95b 	bl	8008684 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2208      	movs	r2, #8
 80083d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e029      	b.n	8008436 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083f0:	d111      	bne.n	8008416 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 f941 	bl	8008684 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2220      	movs	r2, #32
 8008406:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e00f      	b.n	8008436 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69da      	ldr	r2, [r3, #28]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	4013      	ands	r3, r2
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	429a      	cmp	r2, r3
 8008424:	bf0c      	ite	eq
 8008426:	2301      	moveq	r3, #1
 8008428:	2300      	movne	r3, #0
 800842a:	b2db      	uxtb	r3, r3
 800842c:	461a      	mov	r2, r3
 800842e:	79fb      	ldrb	r3, [r7, #7]
 8008430:	429a      	cmp	r2, r3
 8008432:	d0a0      	beq.n	8008376 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008440:	b480      	push	{r7}
 8008442:	b0a3      	sub	sp, #140	@ 0x8c
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	4613      	mov	r3, r2
 800844c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	88fa      	ldrh	r2, [r7, #6]
 8008458:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	88fa      	ldrh	r2, [r7, #6]
 8008460:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008472:	d10e      	bne.n	8008492 <UART_Start_Receive_IT+0x52>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d105      	bne.n	8008488 <UART_Start_Receive_IT+0x48>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008482:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008486:	e02d      	b.n	80084e4 <UART_Start_Receive_IT+0xa4>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	22ff      	movs	r2, #255	@ 0xff
 800848c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008490:	e028      	b.n	80084e4 <UART_Start_Receive_IT+0xa4>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10d      	bne.n	80084b6 <UART_Start_Receive_IT+0x76>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d104      	bne.n	80084ac <UART_Start_Receive_IT+0x6c>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	22ff      	movs	r2, #255	@ 0xff
 80084a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084aa:	e01b      	b.n	80084e4 <UART_Start_Receive_IT+0xa4>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	227f      	movs	r2, #127	@ 0x7f
 80084b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084b4:	e016      	b.n	80084e4 <UART_Start_Receive_IT+0xa4>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084be:	d10d      	bne.n	80084dc <UART_Start_Receive_IT+0x9c>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d104      	bne.n	80084d2 <UART_Start_Receive_IT+0x92>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	227f      	movs	r2, #127	@ 0x7f
 80084cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084d0:	e008      	b.n	80084e4 <UART_Start_Receive_IT+0xa4>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	223f      	movs	r2, #63	@ 0x3f
 80084d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084da:	e003      	b.n	80084e4 <UART_Start_Receive_IT+0xa4>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2222      	movs	r2, #34	@ 0x22
 80084f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3308      	adds	r3, #8
 80084fa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084fe:	e853 3f00 	ldrex	r3, [r3]
 8008502:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008504:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008506:	f043 0301 	orr.w	r3, r3, #1
 800850a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3308      	adds	r3, #8
 8008514:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008518:	673a      	str	r2, [r7, #112]	@ 0x70
 800851a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800851e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008520:	e841 2300 	strex	r3, r2, [r1]
 8008524:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008526:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e3      	bne.n	80084f4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008534:	d14f      	bne.n	80085d6 <UART_Start_Receive_IT+0x196>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800853c:	88fa      	ldrh	r2, [r7, #6]
 800853e:	429a      	cmp	r2, r3
 8008540:	d349      	bcc.n	80085d6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800854a:	d107      	bne.n	800855c <UART_Start_Receive_IT+0x11c>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d103      	bne.n	800855c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4a47      	ldr	r2, [pc, #284]	@ (8008674 <UART_Start_Receive_IT+0x234>)
 8008558:	675a      	str	r2, [r3, #116]	@ 0x74
 800855a:	e002      	b.n	8008562 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4a46      	ldr	r2, [pc, #280]	@ (8008678 <UART_Start_Receive_IT+0x238>)
 8008560:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d01a      	beq.n	80085a0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008572:	e853 3f00 	ldrex	r3, [r3]
 8008576:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800857a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800857e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800858c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800858e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008590:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008592:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008594:	e841 2300 	strex	r3, r2, [r1]
 8008598:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800859a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e4      	bne.n	800856a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3308      	adds	r3, #8
 80085a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085aa:	e853 3f00 	ldrex	r3, [r3]
 80085ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3308      	adds	r3, #8
 80085be:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80085c0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80085c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80085c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085c8:	e841 2300 	strex	r3, r2, [r1]
 80085cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80085ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e5      	bne.n	80085a0 <UART_Start_Receive_IT+0x160>
 80085d4:	e046      	b.n	8008664 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085de:	d107      	bne.n	80085f0 <UART_Start_Receive_IT+0x1b0>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d103      	bne.n	80085f0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	4a24      	ldr	r2, [pc, #144]	@ (800867c <UART_Start_Receive_IT+0x23c>)
 80085ec:	675a      	str	r2, [r3, #116]	@ 0x74
 80085ee:	e002      	b.n	80085f6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4a23      	ldr	r2, [pc, #140]	@ (8008680 <UART_Start_Receive_IT+0x240>)
 80085f4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d019      	beq.n	8008632 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008606:	e853 3f00 	ldrex	r3, [r3]
 800860a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008612:	677b      	str	r3, [r7, #116]	@ 0x74
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	461a      	mov	r2, r3
 800861a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800861c:	637b      	str	r3, [r7, #52]	@ 0x34
 800861e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008620:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008622:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008624:	e841 2300 	strex	r3, r2, [r1]
 8008628:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800862a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1e6      	bne.n	80085fe <UART_Start_Receive_IT+0x1be>
 8008630:	e018      	b.n	8008664 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	e853 3f00 	ldrex	r3, [r3]
 800863e:	613b      	str	r3, [r7, #16]
   return(result);
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	f043 0320 	orr.w	r3, r3, #32
 8008646:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	461a      	mov	r2, r3
 800864e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008650:	623b      	str	r3, [r7, #32]
 8008652:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008654:	69f9      	ldr	r1, [r7, #28]
 8008656:	6a3a      	ldr	r2, [r7, #32]
 8008658:	e841 2300 	strex	r3, r2, [r1]
 800865c:	61bb      	str	r3, [r7, #24]
   return(result);
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e6      	bne.n	8008632 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	378c      	adds	r7, #140	@ 0x8c
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	08008ecd 	.word	0x08008ecd
 8008678:	08008b5d 	.word	0x08008b5d
 800867c:	08008999 	.word	0x08008999
 8008680:	080087d5 	.word	0x080087d5

08008684 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008684:	b480      	push	{r7}
 8008686:	b095      	sub	sp, #84	@ 0x54
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800869a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80086ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e6      	bne.n	800868c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3308      	adds	r3, #8
 80086c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086d4:	f023 0301 	bic.w	r3, r3, #1
 80086d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3308      	adds	r3, #8
 80086e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086ea:	e841 2300 	strex	r3, r2, [r1]
 80086ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e3      	bne.n	80086be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d118      	bne.n	8008730 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	60bb      	str	r3, [r7, #8]
   return(result);
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f023 0310 	bic.w	r3, r3, #16
 8008712:	647b      	str	r3, [r7, #68]	@ 0x44
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800871c:	61bb      	str	r3, [r7, #24]
 800871e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6979      	ldr	r1, [r7, #20]
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	613b      	str	r3, [r7, #16]
   return(result);
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e6      	bne.n	80086fe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2220      	movs	r2, #32
 8008734:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008744:	bf00      	nop
 8008746:	3754      	adds	r7, #84	@ 0x54
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800875c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff faf4 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008774:	bf00      	nop
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b088      	sub	sp, #32
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	e853 3f00 	ldrex	r3, [r3]
 8008790:	60bb      	str	r3, [r7, #8]
   return(result);
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008798:	61fb      	str	r3, [r7, #28]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	61bb      	str	r3, [r7, #24]
 80087a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a6:	6979      	ldr	r1, [r7, #20]
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	613b      	str	r3, [r7, #16]
   return(result);
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1e6      	bne.n	8008784 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7ff fabf 	bl	8007d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ca:	bf00      	nop
 80087cc:	3720      	adds	r7, #32
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b09c      	sub	sp, #112	@ 0x70
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80087e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087ec:	2b22      	cmp	r3, #34	@ 0x22
 80087ee:	f040 80c3 	bne.w	8008978 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008800:	b2d9      	uxtb	r1, r3
 8008802:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008806:	b2da      	uxtb	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800880c:	400a      	ands	r2, r1
 800880e:	b2d2      	uxtb	r2, r2
 8008810:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008822:	b29b      	uxth	r3, r3
 8008824:	3b01      	subs	r3, #1
 8008826:	b29a      	uxth	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008834:	b29b      	uxth	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	f040 80a6 	bne.w	8008988 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800884a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800884c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008850:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800885a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800885c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008860:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008862:	e841 2300 	strex	r3, r2, [r1]
 8008866:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e6      	bne.n	800883c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3308      	adds	r3, #8
 8008874:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008878:	e853 3f00 	ldrex	r3, [r3]
 800887c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800887e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008880:	f023 0301 	bic.w	r3, r3, #1
 8008884:	667b      	str	r3, [r7, #100]	@ 0x64
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	3308      	adds	r3, #8
 800888c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800888e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008890:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008892:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008894:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008896:	e841 2300 	strex	r3, r2, [r1]
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800889c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1e5      	bne.n	800886e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a35      	ldr	r2, [pc, #212]	@ (8008990 <UART_RxISR_8BIT+0x1bc>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d024      	beq.n	800890a <UART_RxISR_8BIT+0x136>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a33      	ldr	r2, [pc, #204]	@ (8008994 <UART_RxISR_8BIT+0x1c0>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d01f      	beq.n	800890a <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d018      	beq.n	800890a <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	623b      	str	r3, [r7, #32]
   return(result);
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80088f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e6      	bne.n	80088d8 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800890e:	2b01      	cmp	r3, #1
 8008910:	d12e      	bne.n	8008970 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	60fb      	str	r3, [r7, #12]
   return(result);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f023 0310 	bic.w	r3, r3, #16
 800892c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	461a      	mov	r2, r3
 8008934:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008936:	61fb      	str	r3, [r7, #28]
 8008938:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893a:	69b9      	ldr	r1, [r7, #24]
 800893c:	69fa      	ldr	r2, [r7, #28]
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	617b      	str	r3, [r7, #20]
   return(result);
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1e6      	bne.n	8008918 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	f003 0310 	and.w	r3, r3, #16
 8008954:	2b10      	cmp	r3, #16
 8008956:	d103      	bne.n	8008960 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2210      	movs	r2, #16
 800895e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff fa01 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800896e:	e00b      	b.n	8008988 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7f7 fe45 	bl	8000600 <HAL_UART_RxCpltCallback>
}
 8008976:	e007      	b.n	8008988 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699a      	ldr	r2, [r3, #24]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f042 0208 	orr.w	r2, r2, #8
 8008986:	619a      	str	r2, [r3, #24]
}
 8008988:	bf00      	nop
 800898a:	3770      	adds	r7, #112	@ 0x70
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	46002400 	.word	0x46002400
 8008994:	56002400 	.word	0x56002400

08008998 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b09c      	sub	sp, #112	@ 0x70
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80089a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089b0:	2b22      	cmp	r3, #34	@ 0x22
 80089b2:	f040 80c3 	bne.w	8008b3c <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80089c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80089ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80089ce:	4013      	ands	r3, r2
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089da:	1c9a      	adds	r2, r3, #2
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	3b01      	subs	r3, #1
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f040 80a6 	bne.w	8008b4c <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a08:	e853 3f00 	ldrex	r3, [r3]
 8008a0c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a14:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a20:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a26:	e841 2300 	strex	r3, r2, [r1]
 8008a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e6      	bne.n	8008a00 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3308      	adds	r3, #8
 8008a38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a3c:	e853 3f00 	ldrex	r3, [r3]
 8008a40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	f023 0301 	bic.w	r3, r3, #1
 8008a48:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3308      	adds	r3, #8
 8008a50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008a52:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a5a:	e841 2300 	strex	r3, r2, [r1]
 8008a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e5      	bne.n	8008a32 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a35      	ldr	r2, [pc, #212]	@ (8008b54 <UART_RxISR_16BIT+0x1bc>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d024      	beq.n	8008ace <UART_RxISR_16BIT+0x136>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a33      	ldr	r2, [pc, #204]	@ (8008b58 <UART_RxISR_16BIT+0x1c0>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d01f      	beq.n	8008ace <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d018      	beq.n	8008ace <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008abc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e6      	bne.n	8008a9c <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d12e      	bne.n	8008b34 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f023 0310 	bic.w	r3, r3, #16
 8008af0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	461a      	mov	r2, r3
 8008af8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008afa:	61bb      	str	r3, [r7, #24]
 8008afc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	6979      	ldr	r1, [r7, #20]
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	e841 2300 	strex	r3, r2, [r1]
 8008b06:	613b      	str	r3, [r7, #16]
   return(result);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e6      	bne.n	8008adc <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f003 0310 	and.w	r3, r3, #16
 8008b18:	2b10      	cmp	r3, #16
 8008b1a:	d103      	bne.n	8008b24 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2210      	movs	r2, #16
 8008b22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff f91f 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b32:	e00b      	b.n	8008b4c <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7f7 fd63 	bl	8000600 <HAL_UART_RxCpltCallback>
}
 8008b3a:	e007      	b.n	8008b4c <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699a      	ldr	r2, [r3, #24]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0208 	orr.w	r2, r2, #8
 8008b4a:	619a      	str	r2, [r3, #24]
}
 8008b4c:	bf00      	nop
 8008b4e:	3770      	adds	r7, #112	@ 0x70
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	46002400 	.word	0x46002400
 8008b58:	56002400 	.word	0x56002400

08008b5c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b0ac      	sub	sp, #176	@ 0xb0
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b6a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	69db      	ldr	r3, [r3, #28]
 8008b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b92:	2b22      	cmp	r3, #34	@ 0x22
 8008b94:	f040 8187 	bne.w	8008ea6 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008b9e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ba2:	e12a      	b.n	8008dfa <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008baa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008bb2:	b2d9      	uxtb	r1, r3
 8008bb4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bbe:	400a      	ands	r2, r1
 8008bc0:	b2d2      	uxtb	r2, r2
 8008bc2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bee:	f003 0307 	and.w	r3, r3, #7
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d053      	beq.n	8008c9e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d011      	beq.n	8008c26 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00b      	beq.n	8008c26 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2201      	movs	r2, #1
 8008c14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c1c:	f043 0201 	orr.w	r2, r3, #1
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c2a:	f003 0302 	and.w	r3, r3, #2
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d011      	beq.n	8008c56 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00b      	beq.n	8008c56 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2202      	movs	r2, #2
 8008c44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c4c:	f043 0204 	orr.w	r2, r3, #4
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c5a:	f003 0304 	and.w	r3, r3, #4
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d011      	beq.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00b      	beq.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2204      	movs	r2, #4
 8008c74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c7c:	f043 0202 	orr.w	r2, r3, #2
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d006      	beq.n	8008c9e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff f863 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f040 80a7 	bne.w	8008dfa <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008cd0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008cd4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008cdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e4      	bne.n	8008cac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008cf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cf8:	f023 0301 	bic.w	r3, r3, #1
 8008cfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3308      	adds	r3, #8
 8008d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d0a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008d0c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008d10:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008d18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e1      	bne.n	8008ce2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2220      	movs	r2, #32
 8008d22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a62      	ldr	r2, [pc, #392]	@ (8008ec0 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d026      	beq.n	8008d8a <UART_RxISR_8BIT_FIFOEN+0x22e>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a60      	ldr	r2, [pc, #384]	@ (8008ec4 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d021      	beq.n	8008d8a <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d01a      	beq.n	8008d8a <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008d62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	461a      	mov	r2, r3
 8008d72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008d76:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d78:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008d7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008d7e:	e841 2300 	strex	r3, r2, [r1]
 8008d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1e4      	bne.n	8008d54 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d130      	bne.n	8008df4 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da0:	e853 3f00 	ldrex	r3, [r3]
 8008da4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da8:	f023 0310 	bic.w	r3, r3, #16
 8008dac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	461a      	mov	r2, r3
 8008db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008dba:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008dc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008dc2:	e841 2300 	strex	r3, r2, [r1]
 8008dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1e4      	bne.n	8008d98 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	f003 0310 	and.w	r3, r3, #16
 8008dd8:	2b10      	cmp	r3, #16
 8008dda:	d103      	bne.n	8008de4 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2210      	movs	r2, #16
 8008de2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7fe ffbf 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
 8008df2:	e002      	b.n	8008dfa <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7f7 fc03 	bl	8000600 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008dfa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d006      	beq.n	8008e10 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 8008e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f47f aeca 	bne.w	8008ba4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e16:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e1a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d049      	beq.n	8008eb6 <UART_RxISR_8BIT_FIFOEN+0x35a>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e28:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d242      	bcs.n	8008eb6 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3308      	adds	r3, #8
 8008e36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	e853 3f00 	ldrex	r3, [r3]
 8008e3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008e54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e5c:	e841 2300 	strex	r3, r2, [r1]
 8008e60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1e3      	bne.n	8008e30 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a17      	ldr	r2, [pc, #92]	@ (8008ec8 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8008e6c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	e853 3f00 	ldrex	r3, [r3]
 8008e7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f043 0320 	orr.w	r3, r3, #32
 8008e82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008e90:	61bb      	str	r3, [r7, #24]
 8008e92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	6979      	ldr	r1, [r7, #20]
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e4      	bne.n	8008e6e <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ea4:	e007      	b.n	8008eb6 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	699a      	ldr	r2, [r3, #24]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f042 0208 	orr.w	r2, r2, #8
 8008eb4:	619a      	str	r2, [r3, #24]
}
 8008eb6:	bf00      	nop
 8008eb8:	37b0      	adds	r7, #176	@ 0xb0
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	46002400 	.word	0x46002400
 8008ec4:	56002400 	.word	0x56002400
 8008ec8:	080087d5 	.word	0x080087d5

08008ecc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b0ae      	sub	sp, #184	@ 0xb8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008eda:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f02:	2b22      	cmp	r3, #34	@ 0x22
 8008f04:	f040 818b 	bne.w	800921e <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f0e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f12:	e12e      	b.n	8009172 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008f26:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008f2a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008f2e:	4013      	ands	r3, r2
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f3c:	1c9a      	adds	r2, r3, #2
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f62:	f003 0307 	and.w	r3, r3, #7
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d053      	beq.n	8009012 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d011      	beq.n	8008f9a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00b      	beq.n	8008f9a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2201      	movs	r2, #1
 8008f88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f90:	f043 0201 	orr.w	r2, r3, #1
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f9e:	f003 0302 	and.w	r3, r3, #2
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d011      	beq.n	8008fca <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00b      	beq.n	8008fca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fc0:	f043 0204 	orr.w	r2, r3, #4
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fce:	f003 0304 	and.w	r3, r3, #4
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d011      	beq.n	8008ffa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008fd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00b      	beq.n	8008ffa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2204      	movs	r2, #4
 8008fe8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ff0:	f043 0202 	orr.w	r2, r3, #2
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009000:	2b00      	cmp	r3, #0
 8009002:	d006      	beq.n	8009012 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7fe fea9 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009018:	b29b      	uxth	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	f040 80a9 	bne.w	8009172 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800902e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009034:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	461a      	mov	r2, r3
 800903e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009042:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009046:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009048:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800904a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009054:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e2      	bne.n	8009020 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3308      	adds	r3, #8
 8009060:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800906a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800906c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009070:	f023 0301 	bic.w	r3, r3, #1
 8009074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3308      	adds	r3, #8
 800907e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009082:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009084:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009088:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e1      	bne.n	800905a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2220      	movs	r2, #32
 800909a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a62      	ldr	r2, [pc, #392]	@ (8009238 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d026      	beq.n	8009102 <UART_RxISR_16BIT_FIFOEN+0x236>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a60      	ldr	r2, [pc, #384]	@ (800923c <UART_RxISR_16BIT_FIFOEN+0x370>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d021      	beq.n	8009102 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d01a      	beq.n	8009102 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80090e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	461a      	mov	r2, r3
 80090ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80090ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e4      	bne.n	80090cc <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009106:	2b01      	cmp	r3, #1
 8009108:	d130      	bne.n	800916c <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009118:	e853 3f00 	ldrex	r3, [r3]
 800911c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800911e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009120:	f023 0310 	bic.w	r3, r3, #16
 8009124:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	461a      	mov	r2, r3
 800912e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009132:	647b      	str	r3, [r7, #68]	@ 0x44
 8009134:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009138:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800913a:	e841 2300 	strex	r3, r2, [r1]
 800913e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1e4      	bne.n	8009110 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	f003 0310 	and.w	r3, r3, #16
 8009150:	2b10      	cmp	r3, #16
 8009152:	d103      	bne.n	800915c <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2210      	movs	r2, #16
 800915a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009162:	4619      	mov	r1, r3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7fe fe03 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
 800916a:	e002      	b.n	8009172 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7f7 fa47 	bl	8000600 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009172:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009176:	2b00      	cmp	r3, #0
 8009178:	d006      	beq.n	8009188 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800917a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800917e:	f003 0320 	and.w	r3, r3, #32
 8009182:	2b00      	cmp	r3, #0
 8009184:	f47f aec6 	bne.w	8008f14 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800918e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009192:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009196:	2b00      	cmp	r3, #0
 8009198:	d049      	beq.n	800922e <UART_RxISR_16BIT_FIFOEN+0x362>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091a0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d242      	bcs.n	800922e <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3308      	adds	r3, #8
 80091ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	623b      	str	r3, [r7, #32]
   return(result);
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3308      	adds	r3, #8
 80091c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80091cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80091ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091d4:	e841 2300 	strex	r3, r2, [r1]
 80091d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1e3      	bne.n	80091a8 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a17      	ldr	r2, [pc, #92]	@ (8009240 <UART_RxISR_16BIT_FIFOEN+0x374>)
 80091e4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f043 0320 	orr.w	r3, r3, #32
 80091fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009208:	61fb      	str	r3, [r7, #28]
 800920a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920c:	69b9      	ldr	r1, [r7, #24]
 800920e:	69fa      	ldr	r2, [r7, #28]
 8009210:	e841 2300 	strex	r3, r2, [r1]
 8009214:	617b      	str	r3, [r7, #20]
   return(result);
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e4      	bne.n	80091e6 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800921c:	e007      	b.n	800922e <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	699a      	ldr	r2, [r3, #24]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f042 0208 	orr.w	r2, r2, #8
 800922c:	619a      	str	r2, [r3, #24]
}
 800922e:	bf00      	nop
 8009230:	37b8      	adds	r7, #184	@ 0xb8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	46002400 	.word	0x46002400
 800923c:	56002400 	.word	0x56002400
 8009240:	08008999 	.word	0x08008999

08009244 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800927a:	2b01      	cmp	r3, #1
 800927c:	d101      	bne.n	8009282 <HAL_UARTEx_DisableFifoMode+0x16>
 800927e:	2302      	movs	r3, #2
 8009280:	e027      	b.n	80092d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2224      	movs	r2, #36	@ 0x24
 800928e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f022 0201 	bic.w	r2, r2, #1
 80092a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80092b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2220      	movs	r2, #32
 80092c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d101      	bne.n	80092f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092f2:	2302      	movs	r3, #2
 80092f4:	e02d      	b.n	8009352 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2224      	movs	r2, #36	@ 0x24
 8009302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0201 	bic.w	r2, r2, #1
 800931c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f850 	bl	80093d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2220      	movs	r2, #32
 8009344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800936a:	2b01      	cmp	r3, #1
 800936c:	d101      	bne.n	8009372 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800936e:	2302      	movs	r3, #2
 8009370:	e02d      	b.n	80093ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2224      	movs	r2, #36	@ 0x24
 800937e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f022 0201 	bic.w	r2, r2, #1
 8009398:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f812 	bl	80093d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2220      	movs	r2, #32
 80093c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d108      	bne.n	80093fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093f8:	e031      	b.n	800945e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093fa:	2308      	movs	r3, #8
 80093fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093fe:	2308      	movs	r3, #8
 8009400:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	0e5b      	lsrs	r3, r3, #25
 800940a:	b2db      	uxtb	r3, r3
 800940c:	f003 0307 	and.w	r3, r3, #7
 8009410:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	0f5b      	lsrs	r3, r3, #29
 800941a:	b2db      	uxtb	r3, r3
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009422:	7bbb      	ldrb	r3, [r7, #14]
 8009424:	7b3a      	ldrb	r2, [r7, #12]
 8009426:	4911      	ldr	r1, [pc, #68]	@ (800946c <UARTEx_SetNbDataToProcess+0x94>)
 8009428:	5c8a      	ldrb	r2, [r1, r2]
 800942a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800942e:	7b3a      	ldrb	r2, [r7, #12]
 8009430:	490f      	ldr	r1, [pc, #60]	@ (8009470 <UARTEx_SetNbDataToProcess+0x98>)
 8009432:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009434:	fb93 f3f2 	sdiv	r3, r3, r2
 8009438:	b29a      	uxth	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	7b7a      	ldrb	r2, [r7, #13]
 8009444:	4909      	ldr	r1, [pc, #36]	@ (800946c <UARTEx_SetNbDataToProcess+0x94>)
 8009446:	5c8a      	ldrb	r2, [r1, r2]
 8009448:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800944c:	7b7a      	ldrb	r2, [r7, #13]
 800944e:	4908      	ldr	r1, [pc, #32]	@ (8009470 <UARTEx_SetNbDataToProcess+0x98>)
 8009450:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009452:	fb93 f3f2 	sdiv	r3, r3, r2
 8009456:	b29a      	uxth	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800945e:	bf00      	nop
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	0800ae18 	.word	0x0800ae18
 8009470:	0800ae20 	.word	0x0800ae20

08009474 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009474:	b480      	push	{r7}
 8009476:	b08b      	sub	sp, #44	@ 0x2c
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	fa93 f3a3 	rbit	r3, r3
 800948e:	613b      	str	r3, [r7, #16]
  return result;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800949a:	2320      	movs	r3, #32
 800949c:	e003      	b.n	80094a6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	fab3 f383 	clz	r3, r3
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	005b      	lsls	r3, r3, #1
 80094a8:	2103      	movs	r1, #3
 80094aa:	fa01 f303 	lsl.w	r3, r1, r3
 80094ae:	43db      	mvns	r3, r3
 80094b0:	401a      	ands	r2, r3
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	fa93 f3a3 	rbit	r3, r3
 80094bc:	61fb      	str	r3, [r7, #28]
  return result;
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80094c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80094c8:	2320      	movs	r3, #32
 80094ca:	e003      	b.n	80094d4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80094cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ce:	fab3 f383 	clz	r3, r3
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	fa01 f303 	lsl.w	r3, r1, r3
 80094dc:	431a      	orrs	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 80094e2:	bf00      	nop
 80094e4:	372c      	adds	r7, #44	@ 0x2c
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b085      	sub	sp, #20
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	60f8      	str	r0, [r7, #12]
 80094f6:	60b9      	str	r1, [r7, #8]
 80094f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	43db      	mvns	r3, r3
 8009502:	401a      	ands	r2, r3
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	fb01 f303 	mul.w	r3, r1, r3
 800950c:	431a      	orrs	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	605a      	str	r2, [r3, #4]
}
 8009512:	bf00      	nop
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800951e:	b480      	push	{r7}
 8009520:	b08b      	sub	sp, #44	@ 0x2c
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	689a      	ldr	r2, [r3, #8]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	fa93 f3a3 	rbit	r3, r3
 8009538:	613b      	str	r3, [r7, #16]
  return result;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009544:	2320      	movs	r3, #32
 8009546:	e003      	b.n	8009550 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	fab3 f383 	clz	r3, r3
 800954e:	b2db      	uxtb	r3, r3
 8009550:	005b      	lsls	r3, r3, #1
 8009552:	2103      	movs	r1, #3
 8009554:	fa01 f303 	lsl.w	r3, r1, r3
 8009558:	43db      	mvns	r3, r3
 800955a:	401a      	ands	r2, r3
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	fa93 f3a3 	rbit	r3, r3
 8009566:	61fb      	str	r3, [r7, #28]
  return result;
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800956c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009572:	2320      	movs	r3, #32
 8009574:	e003      	b.n	800957e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009578:	fab3 f383 	clz	r3, r3
 800957c:	b2db      	uxtb	r3, r3
 800957e:	005b      	lsls	r3, r3, #1
 8009580:	6879      	ldr	r1, [r7, #4]
 8009582:	fa01 f303 	lsl.w	r3, r1, r3
 8009586:	431a      	orrs	r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 800958c:	bf00      	nop
 800958e:	372c      	adds	r7, #44	@ 0x2c
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009598:	b480      	push	{r7}
 800959a:	b08b      	sub	sp, #44	@ 0x2c
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	fa93 f3a3 	rbit	r3, r3
 80095b2:	613b      	str	r3, [r7, #16]
  return result;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d101      	bne.n	80095c2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80095be:	2320      	movs	r3, #32
 80095c0:	e003      	b.n	80095ca <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	fab3 f383 	clz	r3, r3
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	2103      	movs	r1, #3
 80095ce:	fa01 f303 	lsl.w	r3, r1, r3
 80095d2:	43db      	mvns	r3, r3
 80095d4:	401a      	ands	r2, r3
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	fa93 f3a3 	rbit	r3, r3
 80095e0:	61fb      	str	r3, [r7, #28]
  return result;
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80095e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80095ec:	2320      	movs	r3, #32
 80095ee:	e003      	b.n	80095f8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80095f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f2:	fab3 f383 	clz	r3, r3
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	005b      	lsls	r3, r3, #1
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009600:	431a      	orrs	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 8009606:	bf00      	nop
 8009608:	372c      	adds	r7, #44	@ 0x2c
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009612:	b480      	push	{r7}
 8009614:	b08b      	sub	sp, #44	@ 0x2c
 8009616:	af00      	add	r7, sp, #0
 8009618:	60f8      	str	r0, [r7, #12]
 800961a:	60b9      	str	r1, [r7, #8]
 800961c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6a1a      	ldr	r2, [r3, #32]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	fa93 f3a3 	rbit	r3, r3
 800962c:	613b      	str	r3, [r7, #16]
  return result;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009638:	2320      	movs	r3, #32
 800963a:	e003      	b.n	8009644 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	fab3 f383 	clz	r3, r3
 8009642:	b2db      	uxtb	r3, r3
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	210f      	movs	r1, #15
 8009648:	fa01 f303 	lsl.w	r3, r1, r3
 800964c:	43db      	mvns	r3, r3
 800964e:	401a      	ands	r2, r3
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	fa93 f3a3 	rbit	r3, r3
 800965a:	61fb      	str	r3, [r7, #28]
  return result;
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009666:	2320      	movs	r3, #32
 8009668:	e003      	b.n	8009672 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966c:	fab3 f383 	clz	r3, r3
 8009670:	b2db      	uxtb	r3, r3
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	6879      	ldr	r1, [r7, #4]
 8009676:	fa01 f303 	lsl.w	r3, r1, r3
 800967a:	431a      	orrs	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 8009680:	bf00      	nop
 8009682:	372c      	adds	r7, #44	@ 0x2c
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800968c:	b480      	push	{r7}
 800968e:	b08b      	sub	sp, #44	@ 0x2c
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	0a1b      	lsrs	r3, r3, #8
 80096a0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	fa93 f3a3 	rbit	r3, r3
 80096a8:	613b      	str	r3, [r7, #16]
  return result;
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80096b4:	2320      	movs	r3, #32
 80096b6:	e003      	b.n	80096c0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	fab3 f383 	clz	r3, r3
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	210f      	movs	r1, #15
 80096c4:	fa01 f303 	lsl.w	r3, r1, r3
 80096c8:	43db      	mvns	r3, r3
 80096ca:	401a      	ands	r2, r3
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	0a1b      	lsrs	r3, r3, #8
 80096d0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	fa93 f3a3 	rbit	r3, r3
 80096d8:	61fb      	str	r3, [r7, #28]
  return result;
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80096de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80096e4:	2320      	movs	r3, #32
 80096e6:	e003      	b.n	80096f0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80096e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ea:	fab3 f383 	clz	r3, r3
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	6879      	ldr	r1, [r7, #4]
 80096f4:	fa01 f303 	lsl.w	r3, r1, r3
 80096f8:	431a      	orrs	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 80096fe:	bf00      	nop
 8009700:	372c      	adds	r7, #44	@ 0x2c
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b08a      	sub	sp, #40	@ 0x28
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	fa93 f3a3 	rbit	r3, r3
 8009720:	617b      	str	r3, [r7, #20]
  return result;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <LL_GPIO_Init+0x26>
    return 32U;
 800972c:	2320      	movs	r3, #32
 800972e:	e003      	b.n	8009738 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	fab3 f383 	clz	r3, r3
 8009736:	b2db      	uxtb	r3, r3
 8009738:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800973a:	e058      	b.n	80097ee <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	2101      	movs	r1, #1
 8009742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009744:	fa01 f303 	lsl.w	r3, r1, r3
 8009748:	4013      	ands	r3, r2
 800974a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d04a      	beq.n	80097e8 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d003      	beq.n	8009762 <LL_GPIO_Init+0x58>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	2b02      	cmp	r3, #2
 8009760:	d10e      	bne.n	8009780 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	461a      	mov	r2, r3
 8009768:	6a39      	ldr	r1, [r7, #32]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff fed7 	bl	800951e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	6819      	ldr	r1, [r3, #0]
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	461a      	mov	r2, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff feb7 	bl	80094ee <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	461a      	mov	r2, r3
 8009786:	6a39      	ldr	r1, [r7, #32]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7ff ff05 	bl	8009598 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2b02      	cmp	r3, #2
 8009794:	d121      	bne.n	80097da <LL_GPIO_Init+0xd0>
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	fa93 f3a3 	rbit	r3, r3
 80097a0:	60bb      	str	r3, [r7, #8]
  return result;
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d101      	bne.n	80097b0 <LL_GPIO_Init+0xa6>
    return 32U;
 80097ac:	2320      	movs	r3, #32
 80097ae:	e003      	b.n	80097b8 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	fab3 f383 	clz	r3, r3
 80097b6:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 80097b8:	2b07      	cmp	r3, #7
 80097ba:	d807      	bhi.n	80097cc <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	461a      	mov	r2, r3
 80097c2:	6a39      	ldr	r1, [r7, #32]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff ff24 	bl	8009612 <LL_GPIO_SetAFPin_0_7>
 80097ca:	e006      	b.n	80097da <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	695b      	ldr	r3, [r3, #20]
 80097d0:	461a      	mov	r2, r3
 80097d2:	6a39      	ldr	r1, [r7, #32]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff ff59 	bl	800968c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	461a      	mov	r2, r3
 80097e0:	6a39      	ldr	r1, [r7, #32]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7ff fe46 	bl	8009474 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80097e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ea:	3301      	adds	r3, #1
 80097ec:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f4:	fa22 f303 	lsr.w	r3, r2, r3
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d19f      	bne.n	800973c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3728      	adds	r7, #40	@ 0x28
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009806:	b084      	sub	sp, #16
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	f107 001c 	add.w	r0, r7, #28
 8009814:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fd89 	bl	800a33c <USB_CoreReset>
 800982a:	4603      	mov	r3, r0
 800982c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800982e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009832:	2b00      	cmp	r3, #0
 8009834:	d106      	bne.n	8009844 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800983a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	639a      	str	r2, [r3, #56]	@ 0x38
 8009842:	e005      	b.n	8009850 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009848:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800985c:	b004      	add	sp, #16
 800985e:	4770      	bx	lr

08009860 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	4613      	mov	r3, r2
 800986c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800986e:	79fb      	ldrb	r3, [r7, #7]
 8009870:	2b02      	cmp	r3, #2
 8009872:	d165      	bne.n	8009940 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	4a41      	ldr	r2, [pc, #260]	@ (800997c <USB_SetTurnaroundTime+0x11c>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d906      	bls.n	800988a <USB_SetTurnaroundTime+0x2a>
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	4a40      	ldr	r2, [pc, #256]	@ (8009980 <USB_SetTurnaroundTime+0x120>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d202      	bcs.n	800988a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009884:	230f      	movs	r3, #15
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	e062      	b.n	8009950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	4a3c      	ldr	r2, [pc, #240]	@ (8009980 <USB_SetTurnaroundTime+0x120>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d306      	bcc.n	80098a0 <USB_SetTurnaroundTime+0x40>
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	4a3b      	ldr	r2, [pc, #236]	@ (8009984 <USB_SetTurnaroundTime+0x124>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d202      	bcs.n	80098a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800989a:	230e      	movs	r3, #14
 800989c:	617b      	str	r3, [r7, #20]
 800989e:	e057      	b.n	8009950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	4a38      	ldr	r2, [pc, #224]	@ (8009984 <USB_SetTurnaroundTime+0x124>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d306      	bcc.n	80098b6 <USB_SetTurnaroundTime+0x56>
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	4a37      	ldr	r2, [pc, #220]	@ (8009988 <USB_SetTurnaroundTime+0x128>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d202      	bcs.n	80098b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80098b0:	230d      	movs	r3, #13
 80098b2:	617b      	str	r3, [r7, #20]
 80098b4:	e04c      	b.n	8009950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	4a33      	ldr	r2, [pc, #204]	@ (8009988 <USB_SetTurnaroundTime+0x128>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d306      	bcc.n	80098cc <USB_SetTurnaroundTime+0x6c>
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	4a32      	ldr	r2, [pc, #200]	@ (800998c <USB_SetTurnaroundTime+0x12c>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d802      	bhi.n	80098cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80098c6:	230c      	movs	r3, #12
 80098c8:	617b      	str	r3, [r7, #20]
 80098ca:	e041      	b.n	8009950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	4a2f      	ldr	r2, [pc, #188]	@ (800998c <USB_SetTurnaroundTime+0x12c>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d906      	bls.n	80098e2 <USB_SetTurnaroundTime+0x82>
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	4a2e      	ldr	r2, [pc, #184]	@ (8009990 <USB_SetTurnaroundTime+0x130>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d802      	bhi.n	80098e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80098dc:	230b      	movs	r3, #11
 80098de:	617b      	str	r3, [r7, #20]
 80098e0:	e036      	b.n	8009950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	4a2a      	ldr	r2, [pc, #168]	@ (8009990 <USB_SetTurnaroundTime+0x130>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d906      	bls.n	80098f8 <USB_SetTurnaroundTime+0x98>
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	4a29      	ldr	r2, [pc, #164]	@ (8009994 <USB_SetTurnaroundTime+0x134>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d802      	bhi.n	80098f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80098f2:	230a      	movs	r3, #10
 80098f4:	617b      	str	r3, [r7, #20]
 80098f6:	e02b      	b.n	8009950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	4a26      	ldr	r2, [pc, #152]	@ (8009994 <USB_SetTurnaroundTime+0x134>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d906      	bls.n	800990e <USB_SetTurnaroundTime+0xae>
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	4a25      	ldr	r2, [pc, #148]	@ (8009998 <USB_SetTurnaroundTime+0x138>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d202      	bcs.n	800990e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009908:	2309      	movs	r3, #9
 800990a:	617b      	str	r3, [r7, #20]
 800990c:	e020      	b.n	8009950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	4a21      	ldr	r2, [pc, #132]	@ (8009998 <USB_SetTurnaroundTime+0x138>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d306      	bcc.n	8009924 <USB_SetTurnaroundTime+0xc4>
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	4a20      	ldr	r2, [pc, #128]	@ (800999c <USB_SetTurnaroundTime+0x13c>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d802      	bhi.n	8009924 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800991e:	2308      	movs	r3, #8
 8009920:	617b      	str	r3, [r7, #20]
 8009922:	e015      	b.n	8009950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	4a1d      	ldr	r2, [pc, #116]	@ (800999c <USB_SetTurnaroundTime+0x13c>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d906      	bls.n	800993a <USB_SetTurnaroundTime+0xda>
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	4a1c      	ldr	r2, [pc, #112]	@ (80099a0 <USB_SetTurnaroundTime+0x140>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d202      	bcs.n	800993a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009934:	2307      	movs	r3, #7
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	e00a      	b.n	8009950 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800993a:	2306      	movs	r3, #6
 800993c:	617b      	str	r3, [r7, #20]
 800993e:	e007      	b.n	8009950 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009940:	79fb      	ldrb	r3, [r7, #7]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d102      	bne.n	800994c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009946:	2309      	movs	r3, #9
 8009948:	617b      	str	r3, [r7, #20]
 800994a:	e001      	b.n	8009950 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800994c:	2309      	movs	r3, #9
 800994e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	68da      	ldr	r2, [r3, #12]
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	029b      	lsls	r3, r3, #10
 8009964:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009968:	431a      	orrs	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	371c      	adds	r7, #28
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	00d8acbf 	.word	0x00d8acbf
 8009980:	00e4e1c0 	.word	0x00e4e1c0
 8009984:	00f42400 	.word	0x00f42400
 8009988:	01067380 	.word	0x01067380
 800998c:	011a499f 	.word	0x011a499f
 8009990:	01312cff 	.word	0x01312cff
 8009994:	014ca43f 	.word	0x014ca43f
 8009998:	016e3600 	.word	0x016e3600
 800999c:	01a6ab1f 	.word	0x01a6ab1f
 80099a0:	01e84800 	.word	0x01e84800

080099a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f023 0201 	bic.w	r2, r3, #1
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b084      	sub	sp, #16
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
 80099ce:	460b      	mov	r3, r1
 80099d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80099d2:	2300      	movs	r3, #0
 80099d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80099e2:	78fb      	ldrb	r3, [r7, #3]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d115      	bne.n	8009a14 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80099f4:	200a      	movs	r0, #10
 80099f6:	f7f7 fc89 	bl	800130c <HAL_Delay>
      ms += 10U;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	330a      	adds	r3, #10
 80099fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fc0b 	bl	800a21c <USB_GetMode>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d01e      	beq.n	8009a4a <USB_SetCurrentMode+0x84>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009a10:	d9f0      	bls.n	80099f4 <USB_SetCurrentMode+0x2e>
 8009a12:	e01a      	b.n	8009a4a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d115      	bne.n	8009a46 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009a26:	200a      	movs	r0, #10
 8009a28:	f7f7 fc70 	bl	800130c <HAL_Delay>
      ms += 10U;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	330a      	adds	r3, #10
 8009a30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fbf2 	bl	800a21c <USB_GetMode>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d005      	beq.n	8009a4a <USB_SetCurrentMode+0x84>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2bc7      	cmp	r3, #199	@ 0xc7
 8009a42:	d9f0      	bls.n	8009a26 <USB_SetCurrentMode+0x60>
 8009a44:	e001      	b.n	8009a4a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e005      	b.n	8009a56 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2bc8      	cmp	r3, #200	@ 0xc8
 8009a4e:	d101      	bne.n	8009a54 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	e000      	b.n	8009a56 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
	...

08009a60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a60:	b084      	sub	sp, #16
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b086      	sub	sp, #24
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	613b      	str	r3, [r7, #16]
 8009a7e:	e009      	b.n	8009a94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	3340      	adds	r3, #64	@ 0x40
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	3301      	adds	r3, #1
 8009a92:	613b      	str	r3, [r7, #16]
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	2b0e      	cmp	r3, #14
 8009a98:	d9f2      	bls.n	8009a80 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009a9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d11c      	bne.n	8009adc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ab0:	f043 0302 	orr.w	r3, r3, #2
 8009ab4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	e005      	b.n	8009ae8 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ae0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009aee:	461a      	mov	r2, r3
 8009af0:	2300      	movs	r3, #0
 8009af2:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009af4:	2103      	movs	r1, #3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f95e 	bl	8009db8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009afc:	2110      	movs	r1, #16
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f8fa 	bl	8009cf8 <USB_FlushTxFifo>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f924 	bl	8009d5c <USB_FlushRxFifo>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b24:	461a      	mov	r2, r3
 8009b26:	2300      	movs	r3, #0
 8009b28:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b30:	461a      	mov	r2, r3
 8009b32:	2300      	movs	r3, #0
 8009b34:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	2300      	movs	r3, #0
 8009b40:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b42:	2300      	movs	r3, #0
 8009b44:	613b      	str	r3, [r7, #16]
 8009b46:	e043      	b.n	8009bd0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	015a      	lsls	r2, r3, #5
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b5e:	d118      	bne.n	8009b92 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10a      	bne.n	8009b7c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	015a      	lsls	r2, r3, #5
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b72:	461a      	mov	r2, r3
 8009b74:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009b78:	6013      	str	r3, [r2, #0]
 8009b7a:	e013      	b.n	8009ba4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	015a      	lsls	r2, r3, #5
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b88:	461a      	mov	r2, r3
 8009b8a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009b8e:	6013      	str	r3, [r2, #0]
 8009b90:	e008      	b.n	8009ba4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	015a      	lsls	r2, r3, #5
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	4413      	add	r3, r2
 8009b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	015a      	lsls	r2, r3, #5
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	4413      	add	r3, r2
 8009bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	015a      	lsls	r2, r3, #5
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009bc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	613b      	str	r3, [r7, #16]
 8009bd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d3b5      	bcc.n	8009b48 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bdc:	2300      	movs	r3, #0
 8009bde:	613b      	str	r3, [r7, #16]
 8009be0:	e043      	b.n	8009c6a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bf8:	d118      	bne.n	8009c2c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10a      	bne.n	8009c16 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	015a      	lsls	r2, r3, #5
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4413      	add	r3, r2
 8009c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	e013      	b.n	8009c3e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c22:	461a      	mov	r2, r3
 8009c24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009c28:	6013      	str	r3, [r2, #0]
 8009c2a:	e008      	b.n	8009c3e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	015a      	lsls	r2, r3, #5
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	4413      	add	r3, r2
 8009c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c38:	461a      	mov	r2, r3
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009c62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	3301      	adds	r3, #1
 8009c68:	613b      	str	r3, [r7, #16]
 8009c6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c6e:	461a      	mov	r2, r3
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d3b5      	bcc.n	8009be2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c88:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009c96:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009c98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d105      	bne.n	8009cac <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	f043 0210 	orr.w	r2, r3, #16
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	699a      	ldr	r2, [r3, #24]
 8009cb0:	4b10      	ldr	r3, [pc, #64]	@ (8009cf4 <USB_DevInit+0x294>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009cb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d005      	beq.n	8009ccc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	699b      	ldr	r3, [r3, #24]
 8009cc4:	f043 0208 	orr.w	r2, r3, #8
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009ccc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d107      	bne.n	8009ce4 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009cdc:	f043 0304 	orr.w	r3, r3, #4
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3718      	adds	r7, #24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009cf0:	b004      	add	sp, #16
 8009cf2:	4770      	bx	lr
 8009cf4:	803c3800 	.word	0x803c3800

08009cf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d02:	2300      	movs	r3, #0
 8009d04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d12:	d901      	bls.n	8009d18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e01b      	b.n	8009d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	daf2      	bge.n	8009d06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009d20:	2300      	movs	r3, #0
 8009d22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	019b      	lsls	r3, r3, #6
 8009d28:	f043 0220 	orr.w	r2, r3, #32
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3301      	adds	r3, #1
 8009d34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d3c:	d901      	bls.n	8009d42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e006      	b.n	8009d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	f003 0320 	and.w	r3, r3, #32
 8009d4a:	2b20      	cmp	r3, #32
 8009d4c:	d0f0      	beq.n	8009d30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d64:	2300      	movs	r3, #0
 8009d66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d74:	d901      	bls.n	8009d7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009d76:	2303      	movs	r3, #3
 8009d78:	e018      	b.n	8009dac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	daf2      	bge.n	8009d68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009d82:	2300      	movs	r3, #0
 8009d84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2210      	movs	r2, #16
 8009d8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d98:	d901      	bls.n	8009d9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e006      	b.n	8009dac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	f003 0310 	and.w	r3, r3, #16
 8009da6:	2b10      	cmp	r3, #16
 8009da8:	d0f0      	beq.n	8009d8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	78fb      	ldrb	r3, [r7, #3]
 8009dd2:	68f9      	ldr	r1, [r7, #12]
 8009dd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b087      	sub	sp, #28
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f003 0306 	and.w	r3, r3, #6
 8009e02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d102      	bne.n	8009e10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	75fb      	strb	r3, [r7, #23]
 8009e0e:	e00a      	b.n	8009e26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d002      	beq.n	8009e1c <USB_GetDevSpeed+0x32>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b06      	cmp	r3, #6
 8009e1a:	d102      	bne.n	8009e22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	75fb      	strb	r3, [r7, #23]
 8009e20:	e001      	b.n	8009e26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009e22:	230f      	movs	r3, #15
 8009e24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	371c      	adds	r7, #28
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b087      	sub	sp, #28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	785b      	ldrb	r3, [r3, #1]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d14a      	bne.n	8009ee8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e6a:	f040 8086 	bne.w	8009f7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	7812      	ldrb	r2, [r2, #0]
 8009e82:	0151      	lsls	r1, r2, #5
 8009e84:	693a      	ldr	r2, [r7, #16]
 8009e86:	440a      	add	r2, r1
 8009e88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	7812      	ldrb	r2, [r2, #0]
 8009ea6:	0151      	lsls	r1, r2, #5
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	440a      	add	r2, r1
 8009eac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009eb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009eb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d902      	bls.n	8009ecc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8009eca:	e056      	b.n	8009f7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	015a      	lsls	r2, r3, #5
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ee4:	d0e7      	beq.n	8009eb6 <USB_EPStopXfer+0x82>
 8009ee6:	e048      	b.n	8009f7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	015a      	lsls	r2, r3, #5
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f00:	d13b      	bne.n	8009f7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	7812      	ldrb	r2, [r2, #0]
 8009f16:	0151      	lsls	r1, r2, #5
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	440a      	add	r2, r1
 8009f1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	015a      	lsls	r2, r3, #5
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	7812      	ldrb	r2, [r2, #0]
 8009f3a:	0151      	lsls	r1, r2, #5
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	440a      	add	r2, r1
 8009f40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d902      	bls.n	8009f60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f5e:	e00c      	b.n	8009f7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f78:	d0e7      	beq.n	8009f4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	371c      	adds	r7, #28
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b089      	sub	sp, #36	@ 0x24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	4611      	mov	r1, r2
 8009f94:	461a      	mov	r2, r3
 8009f96:	460b      	mov	r3, r1
 8009f98:	71fb      	strb	r3, [r7, #7]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009fa6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d123      	bne.n	8009ff6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009fae:	88bb      	ldrh	r3, [r7, #4]
 8009fb0:	3303      	adds	r3, #3
 8009fb2:	089b      	lsrs	r3, r3, #2
 8009fb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61bb      	str	r3, [r7, #24]
 8009fba:	e018      	b.n	8009fee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009fbc:	79fb      	ldrb	r3, [r7, #7]
 8009fbe:	031a      	lsls	r2, r3, #12
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fc8:	461a      	mov	r2, r3
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	3301      	adds	r3, #1
 8009fec:	61bb      	str	r3, [r7, #24]
 8009fee:	69ba      	ldr	r2, [r7, #24]
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d3e2      	bcc.n	8009fbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3724      	adds	r7, #36	@ 0x24
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a004:	b480      	push	{r7}
 800a006:	b08b      	sub	sp, #44	@ 0x2c
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	4613      	mov	r3, r2
 800a010:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a01a:	88fb      	ldrh	r3, [r7, #6]
 800a01c:	089b      	lsrs	r3, r3, #2
 800a01e:	b29b      	uxth	r3, r3
 800a020:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a022:	88fb      	ldrh	r3, [r7, #6]
 800a024:	f003 0303 	and.w	r3, r3, #3
 800a028:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a02a:	2300      	movs	r3, #0
 800a02c:	623b      	str	r3, [r7, #32]
 800a02e:	e014      	b.n	800a05a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03e:	3301      	adds	r3, #1
 800a040:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a044:	3301      	adds	r3, #1
 800a046:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04a:	3301      	adds	r3, #1
 800a04c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a050:	3301      	adds	r3, #1
 800a052:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	3301      	adds	r3, #1
 800a058:	623b      	str	r3, [r7, #32]
 800a05a:	6a3a      	ldr	r2, [r7, #32]
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d3e6      	bcc.n	800a030 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a062:	8bfb      	ldrh	r3, [r7, #30]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d01e      	beq.n	800a0a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a072:	461a      	mov	r2, r3
 800a074:	f107 0310 	add.w	r3, r7, #16
 800a078:	6812      	ldr	r2, [r2, #0]
 800a07a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	b2db      	uxtb	r3, r3
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	fa22 f303 	lsr.w	r3, r2, r3
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08c:	701a      	strb	r2, [r3, #0]
      i++;
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	3301      	adds	r3, #1
 800a092:	623b      	str	r3, [r7, #32]
      pDest++;
 800a094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a096:	3301      	adds	r3, #1
 800a098:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a09a:	8bfb      	ldrh	r3, [r7, #30]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a0a0:	8bfb      	ldrh	r3, [r7, #30]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1ea      	bne.n	800a07c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	372c      	adds	r7, #44	@ 0x2c
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a0ce:	f023 0303 	bic.w	r3, r3, #3
 800a0d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0e2:	f043 0302 	orr.w	r3, r3, #2
 800a0e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b085      	sub	sp, #20
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	4013      	ands	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a10e:	68fb      	ldr	r3, [r7, #12]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	4013      	ands	r3, r2
 800a13e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	0c1b      	lsrs	r3, r3, #16
}
 800a144:	4618      	mov	r0, r3
 800a146:	3714      	adds	r7, #20
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	4013      	ands	r3, r2
 800a172:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	b29b      	uxth	r3, r3
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	460b      	mov	r3, r1
 800a18e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a194:	78fb      	ldrb	r3, [r7, #3]
 800a196:	015a      	lsls	r2, r3, #5
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1aa:	695b      	ldr	r3, [r3, #20]
 800a1ac:	68ba      	ldr	r2, [r7, #8]
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a1b2:	68bb      	ldr	r3, [r7, #8]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1e2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a1e4:	78fb      	ldrb	r3, [r7, #3]
 800a1e6:	f003 030f 	and.w	r3, r3, #15
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f0:	01db      	lsls	r3, r3, #7
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a1fa:	78fb      	ldrb	r3, [r7, #3]
 800a1fc:	015a      	lsls	r2, r3, #5
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	4413      	add	r3, r2
 800a202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	4013      	ands	r3, r2
 800a20c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a20e:	68bb      	ldr	r3, [r7, #8]
}
 800a210:	4618      	mov	r0, r3
 800a212:	371c      	adds	r7, #28
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	f003 0301 	and.w	r3, r3, #1
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a252:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a256:	f023 0307 	bic.w	r3, r3, #7
 800a25a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a26a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a26e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3714      	adds	r7, #20
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
	...

0800a280 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	460b      	mov	r3, r1
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	333c      	adds	r3, #60	@ 0x3c
 800a296:	3304      	adds	r3, #4
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	4a26      	ldr	r2, [pc, #152]	@ (800a338 <USB_EP0_OutStart+0xb8>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d90a      	bls.n	800a2ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2b4:	d101      	bne.n	800a2ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e037      	b.n	800a32a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2e8:	f043 0318 	orr.w	r3, r3, #24
 800a2ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2fc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a300:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a302:	7afb      	ldrb	r3, [r7, #11]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d10f      	bne.n	800a328 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a30e:	461a      	mov	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a322:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a326:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	371c      	adds	r7, #28
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	4f54300a 	.word	0x4f54300a

0800a33c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a344:	2300      	movs	r3, #0
 800a346:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	3301      	adds	r3, #1
 800a34c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a354:	d901      	bls.n	800a35a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a356:	2303      	movs	r3, #3
 800a358:	e01b      	b.n	800a392 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	daf2      	bge.n	800a348 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a362:	2300      	movs	r3, #0
 800a364:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	f043 0201 	orr.w	r2, r3, #1
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	3301      	adds	r3, #1
 800a376:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a37e:	d901      	bls.n	800a384 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a380:	2303      	movs	r3, #3
 800a382:	e006      	b.n	800a392 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d0f0      	beq.n	800a372 <USB_CoreReset+0x36>

  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
	...

0800a3a0 <siprintf>:
 800a3a0:	b40e      	push	{r1, r2, r3}
 800a3a2:	b500      	push	{lr}
 800a3a4:	b09c      	sub	sp, #112	@ 0x70
 800a3a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a3aa:	ab1d      	add	r3, sp, #116	@ 0x74
 800a3ac:	9002      	str	r0, [sp, #8]
 800a3ae:	9006      	str	r0, [sp, #24]
 800a3b0:	9107      	str	r1, [sp, #28]
 800a3b2:	9104      	str	r1, [sp, #16]
 800a3b4:	4808      	ldr	r0, [pc, #32]	@ (800a3d8 <siprintf+0x38>)
 800a3b6:	4909      	ldr	r1, [pc, #36]	@ (800a3dc <siprintf+0x3c>)
 800a3b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3bc:	9105      	str	r1, [sp, #20]
 800a3be:	a902      	add	r1, sp, #8
 800a3c0:	6800      	ldr	r0, [r0, #0]
 800a3c2:	9301      	str	r3, [sp, #4]
 800a3c4:	f000 f994 	bl	800a6f0 <_svfiprintf_r>
 800a3c8:	9b02      	ldr	r3, [sp, #8]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	701a      	strb	r2, [r3, #0]
 800a3ce:	b01c      	add	sp, #112	@ 0x70
 800a3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3d4:	b003      	add	sp, #12
 800a3d6:	4770      	bx	lr
 800a3d8:	20000024 	.word	0x20000024
 800a3dc:	ffff0208 	.word	0xffff0208

0800a3e0 <memset>:
 800a3e0:	4402      	add	r2, r0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d100      	bne.n	800a3ea <memset+0xa>
 800a3e8:	4770      	bx	lr
 800a3ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a3ee:	e7f9      	b.n	800a3e4 <memset+0x4>

0800a3f0 <__errno>:
 800a3f0:	4b01      	ldr	r3, [pc, #4]	@ (800a3f8 <__errno+0x8>)
 800a3f2:	6818      	ldr	r0, [r3, #0]
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	20000024 	.word	0x20000024

0800a3fc <__libc_init_array>:
 800a3fc:	b570      	push	{r4, r5, r6, lr}
 800a3fe:	4d0d      	ldr	r5, [pc, #52]	@ (800a434 <__libc_init_array+0x38>)
 800a400:	2600      	movs	r6, #0
 800a402:	4c0d      	ldr	r4, [pc, #52]	@ (800a438 <__libc_init_array+0x3c>)
 800a404:	1b64      	subs	r4, r4, r5
 800a406:	10a4      	asrs	r4, r4, #2
 800a408:	42a6      	cmp	r6, r4
 800a40a:	d109      	bne.n	800a420 <__libc_init_array+0x24>
 800a40c:	4d0b      	ldr	r5, [pc, #44]	@ (800a43c <__libc_init_array+0x40>)
 800a40e:	2600      	movs	r6, #0
 800a410:	4c0b      	ldr	r4, [pc, #44]	@ (800a440 <__libc_init_array+0x44>)
 800a412:	f000 fc77 	bl	800ad04 <_init>
 800a416:	1b64      	subs	r4, r4, r5
 800a418:	10a4      	asrs	r4, r4, #2
 800a41a:	42a6      	cmp	r6, r4
 800a41c:	d105      	bne.n	800a42a <__libc_init_array+0x2e>
 800a41e:	bd70      	pop	{r4, r5, r6, pc}
 800a420:	f855 3b04 	ldr.w	r3, [r5], #4
 800a424:	3601      	adds	r6, #1
 800a426:	4798      	blx	r3
 800a428:	e7ee      	b.n	800a408 <__libc_init_array+0xc>
 800a42a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a42e:	3601      	adds	r6, #1
 800a430:	4798      	blx	r3
 800a432:	e7f2      	b.n	800a41a <__libc_init_array+0x1e>
 800a434:	0800ae64 	.word	0x0800ae64
 800a438:	0800ae64 	.word	0x0800ae64
 800a43c:	0800ae64 	.word	0x0800ae64
 800a440:	0800ae68 	.word	0x0800ae68

0800a444 <__retarget_lock_acquire_recursive>:
 800a444:	4770      	bx	lr

0800a446 <__retarget_lock_release_recursive>:
 800a446:	4770      	bx	lr

0800a448 <_free_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4605      	mov	r5, r0
 800a44c:	2900      	cmp	r1, #0
 800a44e:	d041      	beq.n	800a4d4 <_free_r+0x8c>
 800a450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a454:	1f0c      	subs	r4, r1, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	bfb8      	it	lt
 800a45a:	18e4      	addlt	r4, r4, r3
 800a45c:	f000 f8e0 	bl	800a620 <__malloc_lock>
 800a460:	4a1d      	ldr	r2, [pc, #116]	@ (800a4d8 <_free_r+0x90>)
 800a462:	6813      	ldr	r3, [r2, #0]
 800a464:	b933      	cbnz	r3, 800a474 <_free_r+0x2c>
 800a466:	6063      	str	r3, [r4, #4]
 800a468:	6014      	str	r4, [r2, #0]
 800a46a:	4628      	mov	r0, r5
 800a46c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a470:	f000 b8dc 	b.w	800a62c <__malloc_unlock>
 800a474:	42a3      	cmp	r3, r4
 800a476:	d908      	bls.n	800a48a <_free_r+0x42>
 800a478:	6820      	ldr	r0, [r4, #0]
 800a47a:	1821      	adds	r1, r4, r0
 800a47c:	428b      	cmp	r3, r1
 800a47e:	bf01      	itttt	eq
 800a480:	6819      	ldreq	r1, [r3, #0]
 800a482:	685b      	ldreq	r3, [r3, #4]
 800a484:	1809      	addeq	r1, r1, r0
 800a486:	6021      	streq	r1, [r4, #0]
 800a488:	e7ed      	b.n	800a466 <_free_r+0x1e>
 800a48a:	461a      	mov	r2, r3
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	b10b      	cbz	r3, 800a494 <_free_r+0x4c>
 800a490:	42a3      	cmp	r3, r4
 800a492:	d9fa      	bls.n	800a48a <_free_r+0x42>
 800a494:	6811      	ldr	r1, [r2, #0]
 800a496:	1850      	adds	r0, r2, r1
 800a498:	42a0      	cmp	r0, r4
 800a49a:	d10b      	bne.n	800a4b4 <_free_r+0x6c>
 800a49c:	6820      	ldr	r0, [r4, #0]
 800a49e:	4401      	add	r1, r0
 800a4a0:	1850      	adds	r0, r2, r1
 800a4a2:	6011      	str	r1, [r2, #0]
 800a4a4:	4283      	cmp	r3, r0
 800a4a6:	d1e0      	bne.n	800a46a <_free_r+0x22>
 800a4a8:	6818      	ldr	r0, [r3, #0]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	4408      	add	r0, r1
 800a4ae:	6053      	str	r3, [r2, #4]
 800a4b0:	6010      	str	r0, [r2, #0]
 800a4b2:	e7da      	b.n	800a46a <_free_r+0x22>
 800a4b4:	d902      	bls.n	800a4bc <_free_r+0x74>
 800a4b6:	230c      	movs	r3, #12
 800a4b8:	602b      	str	r3, [r5, #0]
 800a4ba:	e7d6      	b.n	800a46a <_free_r+0x22>
 800a4bc:	6820      	ldr	r0, [r4, #0]
 800a4be:	1821      	adds	r1, r4, r0
 800a4c0:	428b      	cmp	r3, r1
 800a4c2:	bf02      	ittt	eq
 800a4c4:	6819      	ldreq	r1, [r3, #0]
 800a4c6:	685b      	ldreq	r3, [r3, #4]
 800a4c8:	1809      	addeq	r1, r1, r0
 800a4ca:	6063      	str	r3, [r4, #4]
 800a4cc:	bf08      	it	eq
 800a4ce:	6021      	streq	r1, [r4, #0]
 800a4d0:	6054      	str	r4, [r2, #4]
 800a4d2:	e7ca      	b.n	800a46a <_free_r+0x22>
 800a4d4:	bd38      	pop	{r3, r4, r5, pc}
 800a4d6:	bf00      	nop
 800a4d8:	2000088c 	.word	0x2000088c

0800a4dc <sbrk_aligned>:
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	4e0f      	ldr	r6, [pc, #60]	@ (800a51c <sbrk_aligned+0x40>)
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	6831      	ldr	r1, [r6, #0]
 800a4e6:	b911      	cbnz	r1, 800a4ee <sbrk_aligned+0x12>
 800a4e8:	f000 fbaa 	bl	800ac40 <_sbrk_r>
 800a4ec:	6030      	str	r0, [r6, #0]
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	f000 fba5 	bl	800ac40 <_sbrk_r>
 800a4f6:	1c43      	adds	r3, r0, #1
 800a4f8:	d103      	bne.n	800a502 <sbrk_aligned+0x26>
 800a4fa:	f04f 34ff 	mov.w	r4, #4294967295
 800a4fe:	4620      	mov	r0, r4
 800a500:	bd70      	pop	{r4, r5, r6, pc}
 800a502:	1cc4      	adds	r4, r0, #3
 800a504:	f024 0403 	bic.w	r4, r4, #3
 800a508:	42a0      	cmp	r0, r4
 800a50a:	d0f8      	beq.n	800a4fe <sbrk_aligned+0x22>
 800a50c:	1a21      	subs	r1, r4, r0
 800a50e:	4628      	mov	r0, r5
 800a510:	f000 fb96 	bl	800ac40 <_sbrk_r>
 800a514:	3001      	adds	r0, #1
 800a516:	d1f2      	bne.n	800a4fe <sbrk_aligned+0x22>
 800a518:	e7ef      	b.n	800a4fa <sbrk_aligned+0x1e>
 800a51a:	bf00      	nop
 800a51c:	20000888 	.word	0x20000888

0800a520 <_malloc_r>:
 800a520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a524:	1ccd      	adds	r5, r1, #3
 800a526:	4606      	mov	r6, r0
 800a528:	f025 0503 	bic.w	r5, r5, #3
 800a52c:	3508      	adds	r5, #8
 800a52e:	2d0c      	cmp	r5, #12
 800a530:	bf38      	it	cc
 800a532:	250c      	movcc	r5, #12
 800a534:	2d00      	cmp	r5, #0
 800a536:	db01      	blt.n	800a53c <_malloc_r+0x1c>
 800a538:	42a9      	cmp	r1, r5
 800a53a:	d904      	bls.n	800a546 <_malloc_r+0x26>
 800a53c:	230c      	movs	r3, #12
 800a53e:	6033      	str	r3, [r6, #0]
 800a540:	2000      	movs	r0, #0
 800a542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a546:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a61c <_malloc_r+0xfc>
 800a54a:	f000 f869 	bl	800a620 <__malloc_lock>
 800a54e:	f8d8 3000 	ldr.w	r3, [r8]
 800a552:	461c      	mov	r4, r3
 800a554:	bb44      	cbnz	r4, 800a5a8 <_malloc_r+0x88>
 800a556:	4629      	mov	r1, r5
 800a558:	4630      	mov	r0, r6
 800a55a:	f7ff ffbf 	bl	800a4dc <sbrk_aligned>
 800a55e:	1c43      	adds	r3, r0, #1
 800a560:	4604      	mov	r4, r0
 800a562:	d158      	bne.n	800a616 <_malloc_r+0xf6>
 800a564:	f8d8 4000 	ldr.w	r4, [r8]
 800a568:	4627      	mov	r7, r4
 800a56a:	2f00      	cmp	r7, #0
 800a56c:	d143      	bne.n	800a5f6 <_malloc_r+0xd6>
 800a56e:	2c00      	cmp	r4, #0
 800a570:	d04b      	beq.n	800a60a <_malloc_r+0xea>
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	4639      	mov	r1, r7
 800a576:	4630      	mov	r0, r6
 800a578:	eb04 0903 	add.w	r9, r4, r3
 800a57c:	f000 fb60 	bl	800ac40 <_sbrk_r>
 800a580:	4581      	cmp	r9, r0
 800a582:	d142      	bne.n	800a60a <_malloc_r+0xea>
 800a584:	6821      	ldr	r1, [r4, #0]
 800a586:	4630      	mov	r0, r6
 800a588:	1a6d      	subs	r5, r5, r1
 800a58a:	4629      	mov	r1, r5
 800a58c:	f7ff ffa6 	bl	800a4dc <sbrk_aligned>
 800a590:	3001      	adds	r0, #1
 800a592:	d03a      	beq.n	800a60a <_malloc_r+0xea>
 800a594:	6823      	ldr	r3, [r4, #0]
 800a596:	442b      	add	r3, r5
 800a598:	6023      	str	r3, [r4, #0]
 800a59a:	f8d8 3000 	ldr.w	r3, [r8]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	bb62      	cbnz	r2, 800a5fc <_malloc_r+0xdc>
 800a5a2:	f8c8 7000 	str.w	r7, [r8]
 800a5a6:	e00f      	b.n	800a5c8 <_malloc_r+0xa8>
 800a5a8:	6822      	ldr	r2, [r4, #0]
 800a5aa:	1b52      	subs	r2, r2, r5
 800a5ac:	d420      	bmi.n	800a5f0 <_malloc_r+0xd0>
 800a5ae:	2a0b      	cmp	r2, #11
 800a5b0:	d917      	bls.n	800a5e2 <_malloc_r+0xc2>
 800a5b2:	1961      	adds	r1, r4, r5
 800a5b4:	42a3      	cmp	r3, r4
 800a5b6:	6025      	str	r5, [r4, #0]
 800a5b8:	bf18      	it	ne
 800a5ba:	6059      	strne	r1, [r3, #4]
 800a5bc:	6863      	ldr	r3, [r4, #4]
 800a5be:	bf08      	it	eq
 800a5c0:	f8c8 1000 	streq.w	r1, [r8]
 800a5c4:	5162      	str	r2, [r4, r5]
 800a5c6:	604b      	str	r3, [r1, #4]
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f000 f82f 	bl	800a62c <__malloc_unlock>
 800a5ce:	f104 000b 	add.w	r0, r4, #11
 800a5d2:	1d23      	adds	r3, r4, #4
 800a5d4:	f020 0007 	bic.w	r0, r0, #7
 800a5d8:	1ac2      	subs	r2, r0, r3
 800a5da:	bf1c      	itt	ne
 800a5dc:	1a1b      	subne	r3, r3, r0
 800a5de:	50a3      	strne	r3, [r4, r2]
 800a5e0:	e7af      	b.n	800a542 <_malloc_r+0x22>
 800a5e2:	6862      	ldr	r2, [r4, #4]
 800a5e4:	42a3      	cmp	r3, r4
 800a5e6:	bf0c      	ite	eq
 800a5e8:	f8c8 2000 	streq.w	r2, [r8]
 800a5ec:	605a      	strne	r2, [r3, #4]
 800a5ee:	e7eb      	b.n	800a5c8 <_malloc_r+0xa8>
 800a5f0:	4623      	mov	r3, r4
 800a5f2:	6864      	ldr	r4, [r4, #4]
 800a5f4:	e7ae      	b.n	800a554 <_malloc_r+0x34>
 800a5f6:	463c      	mov	r4, r7
 800a5f8:	687f      	ldr	r7, [r7, #4]
 800a5fa:	e7b6      	b.n	800a56a <_malloc_r+0x4a>
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	42a3      	cmp	r3, r4
 800a602:	d1fb      	bne.n	800a5fc <_malloc_r+0xdc>
 800a604:	2300      	movs	r3, #0
 800a606:	6053      	str	r3, [r2, #4]
 800a608:	e7de      	b.n	800a5c8 <_malloc_r+0xa8>
 800a60a:	230c      	movs	r3, #12
 800a60c:	4630      	mov	r0, r6
 800a60e:	6033      	str	r3, [r6, #0]
 800a610:	f000 f80c 	bl	800a62c <__malloc_unlock>
 800a614:	e794      	b.n	800a540 <_malloc_r+0x20>
 800a616:	6005      	str	r5, [r0, #0]
 800a618:	e7d6      	b.n	800a5c8 <_malloc_r+0xa8>
 800a61a:	bf00      	nop
 800a61c:	2000088c 	.word	0x2000088c

0800a620 <__malloc_lock>:
 800a620:	4801      	ldr	r0, [pc, #4]	@ (800a628 <__malloc_lock+0x8>)
 800a622:	f7ff bf0f 	b.w	800a444 <__retarget_lock_acquire_recursive>
 800a626:	bf00      	nop
 800a628:	20000884 	.word	0x20000884

0800a62c <__malloc_unlock>:
 800a62c:	4801      	ldr	r0, [pc, #4]	@ (800a634 <__malloc_unlock+0x8>)
 800a62e:	f7ff bf0a 	b.w	800a446 <__retarget_lock_release_recursive>
 800a632:	bf00      	nop
 800a634:	20000884 	.word	0x20000884

0800a638 <__ssputs_r>:
 800a638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a63c:	461f      	mov	r7, r3
 800a63e:	688e      	ldr	r6, [r1, #8]
 800a640:	4682      	mov	sl, r0
 800a642:	460c      	mov	r4, r1
 800a644:	42be      	cmp	r6, r7
 800a646:	4690      	mov	r8, r2
 800a648:	680b      	ldr	r3, [r1, #0]
 800a64a:	d82d      	bhi.n	800a6a8 <__ssputs_r+0x70>
 800a64c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a650:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a654:	d026      	beq.n	800a6a4 <__ssputs_r+0x6c>
 800a656:	6965      	ldr	r5, [r4, #20]
 800a658:	6909      	ldr	r1, [r1, #16]
 800a65a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a65e:	eba3 0901 	sub.w	r9, r3, r1
 800a662:	1c7b      	adds	r3, r7, #1
 800a664:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a668:	444b      	add	r3, r9
 800a66a:	106d      	asrs	r5, r5, #1
 800a66c:	429d      	cmp	r5, r3
 800a66e:	bf38      	it	cc
 800a670:	461d      	movcc	r5, r3
 800a672:	0553      	lsls	r3, r2, #21
 800a674:	d527      	bpl.n	800a6c6 <__ssputs_r+0x8e>
 800a676:	4629      	mov	r1, r5
 800a678:	f7ff ff52 	bl	800a520 <_malloc_r>
 800a67c:	4606      	mov	r6, r0
 800a67e:	b360      	cbz	r0, 800a6da <__ssputs_r+0xa2>
 800a680:	464a      	mov	r2, r9
 800a682:	6921      	ldr	r1, [r4, #16]
 800a684:	f000 fafa 	bl	800ac7c <memcpy>
 800a688:	89a3      	ldrh	r3, [r4, #12]
 800a68a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a68e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a692:	81a3      	strh	r3, [r4, #12]
 800a694:	6126      	str	r6, [r4, #16]
 800a696:	444e      	add	r6, r9
 800a698:	6165      	str	r5, [r4, #20]
 800a69a:	eba5 0509 	sub.w	r5, r5, r9
 800a69e:	6026      	str	r6, [r4, #0]
 800a6a0:	463e      	mov	r6, r7
 800a6a2:	60a5      	str	r5, [r4, #8]
 800a6a4:	42be      	cmp	r6, r7
 800a6a6:	d900      	bls.n	800a6aa <__ssputs_r+0x72>
 800a6a8:	463e      	mov	r6, r7
 800a6aa:	4632      	mov	r2, r6
 800a6ac:	4641      	mov	r1, r8
 800a6ae:	6820      	ldr	r0, [r4, #0]
 800a6b0:	f000 faac 	bl	800ac0c <memmove>
 800a6b4:	68a3      	ldr	r3, [r4, #8]
 800a6b6:	2000      	movs	r0, #0
 800a6b8:	1b9b      	subs	r3, r3, r6
 800a6ba:	60a3      	str	r3, [r4, #8]
 800a6bc:	6823      	ldr	r3, [r4, #0]
 800a6be:	4433      	add	r3, r6
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c6:	462a      	mov	r2, r5
 800a6c8:	f000 fae5 	bl	800ac96 <_realloc_r>
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d1e0      	bne.n	800a694 <__ssputs_r+0x5c>
 800a6d2:	6921      	ldr	r1, [r4, #16]
 800a6d4:	4650      	mov	r0, sl
 800a6d6:	f7ff feb7 	bl	800a448 <_free_r>
 800a6da:	230c      	movs	r3, #12
 800a6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e0:	f8ca 3000 	str.w	r3, [sl]
 800a6e4:	89a3      	ldrh	r3, [r4, #12]
 800a6e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6ea:	81a3      	strh	r3, [r4, #12]
 800a6ec:	e7e9      	b.n	800a6c2 <__ssputs_r+0x8a>
	...

0800a6f0 <_svfiprintf_r>:
 800a6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f4:	4698      	mov	r8, r3
 800a6f6:	898b      	ldrh	r3, [r1, #12]
 800a6f8:	b09d      	sub	sp, #116	@ 0x74
 800a6fa:	4607      	mov	r7, r0
 800a6fc:	061b      	lsls	r3, r3, #24
 800a6fe:	460d      	mov	r5, r1
 800a700:	4614      	mov	r4, r2
 800a702:	d510      	bpl.n	800a726 <_svfiprintf_r+0x36>
 800a704:	690b      	ldr	r3, [r1, #16]
 800a706:	b973      	cbnz	r3, 800a726 <_svfiprintf_r+0x36>
 800a708:	2140      	movs	r1, #64	@ 0x40
 800a70a:	f7ff ff09 	bl	800a520 <_malloc_r>
 800a70e:	6028      	str	r0, [r5, #0]
 800a710:	6128      	str	r0, [r5, #16]
 800a712:	b930      	cbnz	r0, 800a722 <_svfiprintf_r+0x32>
 800a714:	230c      	movs	r3, #12
 800a716:	603b      	str	r3, [r7, #0]
 800a718:	f04f 30ff 	mov.w	r0, #4294967295
 800a71c:	b01d      	add	sp, #116	@ 0x74
 800a71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a722:	2340      	movs	r3, #64	@ 0x40
 800a724:	616b      	str	r3, [r5, #20]
 800a726:	2300      	movs	r3, #0
 800a728:	f8cd 800c 	str.w	r8, [sp, #12]
 800a72c:	f04f 0901 	mov.w	r9, #1
 800a730:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800a8d4 <_svfiprintf_r+0x1e4>
 800a734:	9309      	str	r3, [sp, #36]	@ 0x24
 800a736:	2320      	movs	r3, #32
 800a738:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a73c:	2330      	movs	r3, #48	@ 0x30
 800a73e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a742:	4623      	mov	r3, r4
 800a744:	469a      	mov	sl, r3
 800a746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a74a:	b10a      	cbz	r2, 800a750 <_svfiprintf_r+0x60>
 800a74c:	2a25      	cmp	r2, #37	@ 0x25
 800a74e:	d1f9      	bne.n	800a744 <_svfiprintf_r+0x54>
 800a750:	ebba 0b04 	subs.w	fp, sl, r4
 800a754:	d00b      	beq.n	800a76e <_svfiprintf_r+0x7e>
 800a756:	465b      	mov	r3, fp
 800a758:	4622      	mov	r2, r4
 800a75a:	4629      	mov	r1, r5
 800a75c:	4638      	mov	r0, r7
 800a75e:	f7ff ff6b 	bl	800a638 <__ssputs_r>
 800a762:	3001      	adds	r0, #1
 800a764:	f000 80a7 	beq.w	800a8b6 <_svfiprintf_r+0x1c6>
 800a768:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a76a:	445a      	add	r2, fp
 800a76c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a76e:	f89a 3000 	ldrb.w	r3, [sl]
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 809f 	beq.w	800a8b6 <_svfiprintf_r+0x1c6>
 800a778:	2300      	movs	r3, #0
 800a77a:	f04f 32ff 	mov.w	r2, #4294967295
 800a77e:	f10a 0a01 	add.w	sl, sl, #1
 800a782:	9304      	str	r3, [sp, #16]
 800a784:	9307      	str	r3, [sp, #28]
 800a786:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a78a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a78c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a790:	4654      	mov	r4, sl
 800a792:	2205      	movs	r2, #5
 800a794:	484f      	ldr	r0, [pc, #316]	@ (800a8d4 <_svfiprintf_r+0x1e4>)
 800a796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a79a:	f000 fa61 	bl	800ac60 <memchr>
 800a79e:	9a04      	ldr	r2, [sp, #16]
 800a7a0:	b9d8      	cbnz	r0, 800a7da <_svfiprintf_r+0xea>
 800a7a2:	06d0      	lsls	r0, r2, #27
 800a7a4:	bf44      	itt	mi
 800a7a6:	2320      	movmi	r3, #32
 800a7a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7ac:	0711      	lsls	r1, r2, #28
 800a7ae:	bf44      	itt	mi
 800a7b0:	232b      	movmi	r3, #43	@ 0x2b
 800a7b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7bc:	d015      	beq.n	800a7ea <_svfiprintf_r+0xfa>
 800a7be:	9a07      	ldr	r2, [sp, #28]
 800a7c0:	4654      	mov	r4, sl
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	f04f 0c0a 	mov.w	ip, #10
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7ce:	3b30      	subs	r3, #48	@ 0x30
 800a7d0:	2b09      	cmp	r3, #9
 800a7d2:	d94b      	bls.n	800a86c <_svfiprintf_r+0x17c>
 800a7d4:	b1b0      	cbz	r0, 800a804 <_svfiprintf_r+0x114>
 800a7d6:	9207      	str	r2, [sp, #28]
 800a7d8:	e014      	b.n	800a804 <_svfiprintf_r+0x114>
 800a7da:	eba0 0308 	sub.w	r3, r0, r8
 800a7de:	46a2      	mov	sl, r4
 800a7e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	9304      	str	r3, [sp, #16]
 800a7e8:	e7d2      	b.n	800a790 <_svfiprintf_r+0xa0>
 800a7ea:	9b03      	ldr	r3, [sp, #12]
 800a7ec:	1d19      	adds	r1, r3, #4
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	9103      	str	r1, [sp, #12]
 800a7f4:	bfbb      	ittet	lt
 800a7f6:	425b      	neglt	r3, r3
 800a7f8:	f042 0202 	orrlt.w	r2, r2, #2
 800a7fc:	9307      	strge	r3, [sp, #28]
 800a7fe:	9307      	strlt	r3, [sp, #28]
 800a800:	bfb8      	it	lt
 800a802:	9204      	strlt	r2, [sp, #16]
 800a804:	7823      	ldrb	r3, [r4, #0]
 800a806:	2b2e      	cmp	r3, #46	@ 0x2e
 800a808:	d10a      	bne.n	800a820 <_svfiprintf_r+0x130>
 800a80a:	7863      	ldrb	r3, [r4, #1]
 800a80c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a80e:	d132      	bne.n	800a876 <_svfiprintf_r+0x186>
 800a810:	9b03      	ldr	r3, [sp, #12]
 800a812:	3402      	adds	r4, #2
 800a814:	1d1a      	adds	r2, r3, #4
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a81c:	9203      	str	r2, [sp, #12]
 800a81e:	9305      	str	r3, [sp, #20]
 800a820:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a8e4 <_svfiprintf_r+0x1f4>
 800a824:	2203      	movs	r2, #3
 800a826:	7821      	ldrb	r1, [r4, #0]
 800a828:	4650      	mov	r0, sl
 800a82a:	f000 fa19 	bl	800ac60 <memchr>
 800a82e:	b138      	cbz	r0, 800a840 <_svfiprintf_r+0x150>
 800a830:	eba0 000a 	sub.w	r0, r0, sl
 800a834:	2240      	movs	r2, #64	@ 0x40
 800a836:	9b04      	ldr	r3, [sp, #16]
 800a838:	3401      	adds	r4, #1
 800a83a:	4082      	lsls	r2, r0
 800a83c:	4313      	orrs	r3, r2
 800a83e:	9304      	str	r3, [sp, #16]
 800a840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a844:	2206      	movs	r2, #6
 800a846:	4824      	ldr	r0, [pc, #144]	@ (800a8d8 <_svfiprintf_r+0x1e8>)
 800a848:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a84c:	f000 fa08 	bl	800ac60 <memchr>
 800a850:	2800      	cmp	r0, #0
 800a852:	d036      	beq.n	800a8c2 <_svfiprintf_r+0x1d2>
 800a854:	4b21      	ldr	r3, [pc, #132]	@ (800a8dc <_svfiprintf_r+0x1ec>)
 800a856:	bb1b      	cbnz	r3, 800a8a0 <_svfiprintf_r+0x1b0>
 800a858:	9b03      	ldr	r3, [sp, #12]
 800a85a:	3307      	adds	r3, #7
 800a85c:	f023 0307 	bic.w	r3, r3, #7
 800a860:	3308      	adds	r3, #8
 800a862:	9303      	str	r3, [sp, #12]
 800a864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a866:	4433      	add	r3, r6
 800a868:	9309      	str	r3, [sp, #36]	@ 0x24
 800a86a:	e76a      	b.n	800a742 <_svfiprintf_r+0x52>
 800a86c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a870:	460c      	mov	r4, r1
 800a872:	2001      	movs	r0, #1
 800a874:	e7a8      	b.n	800a7c8 <_svfiprintf_r+0xd8>
 800a876:	2300      	movs	r3, #0
 800a878:	3401      	adds	r4, #1
 800a87a:	f04f 0c0a 	mov.w	ip, #10
 800a87e:	4619      	mov	r1, r3
 800a880:	9305      	str	r3, [sp, #20]
 800a882:	4620      	mov	r0, r4
 800a884:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a888:	3a30      	subs	r2, #48	@ 0x30
 800a88a:	2a09      	cmp	r2, #9
 800a88c:	d903      	bls.n	800a896 <_svfiprintf_r+0x1a6>
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d0c6      	beq.n	800a820 <_svfiprintf_r+0x130>
 800a892:	9105      	str	r1, [sp, #20]
 800a894:	e7c4      	b.n	800a820 <_svfiprintf_r+0x130>
 800a896:	fb0c 2101 	mla	r1, ip, r1, r2
 800a89a:	4604      	mov	r4, r0
 800a89c:	2301      	movs	r3, #1
 800a89e:	e7f0      	b.n	800a882 <_svfiprintf_r+0x192>
 800a8a0:	ab03      	add	r3, sp, #12
 800a8a2:	462a      	mov	r2, r5
 800a8a4:	a904      	add	r1, sp, #16
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e0 <_svfiprintf_r+0x1f0>)
 800a8ac:	f3af 8000 	nop.w
 800a8b0:	1c42      	adds	r2, r0, #1
 800a8b2:	4606      	mov	r6, r0
 800a8b4:	d1d6      	bne.n	800a864 <_svfiprintf_r+0x174>
 800a8b6:	89ab      	ldrh	r3, [r5, #12]
 800a8b8:	065b      	lsls	r3, r3, #25
 800a8ba:	f53f af2d 	bmi.w	800a718 <_svfiprintf_r+0x28>
 800a8be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8c0:	e72c      	b.n	800a71c <_svfiprintf_r+0x2c>
 800a8c2:	ab03      	add	r3, sp, #12
 800a8c4:	462a      	mov	r2, r5
 800a8c6:	a904      	add	r1, sp, #16
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	9300      	str	r3, [sp, #0]
 800a8cc:	4b04      	ldr	r3, [pc, #16]	@ (800a8e0 <_svfiprintf_r+0x1f0>)
 800a8ce:	f000 f87d 	bl	800a9cc <_printf_i>
 800a8d2:	e7ed      	b.n	800a8b0 <_svfiprintf_r+0x1c0>
 800a8d4:	0800ae28 	.word	0x0800ae28
 800a8d8:	0800ae32 	.word	0x0800ae32
 800a8dc:	00000000 	.word	0x00000000
 800a8e0:	0800a639 	.word	0x0800a639
 800a8e4:	0800ae2e 	.word	0x0800ae2e

0800a8e8 <_printf_common>:
 800a8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	4698      	mov	r8, r3
 800a8f0:	688a      	ldr	r2, [r1, #8]
 800a8f2:	4607      	mov	r7, r0
 800a8f4:	690b      	ldr	r3, [r1, #16]
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	bfb8      	it	lt
 800a900:	4613      	movlt	r3, r2
 800a902:	6033      	str	r3, [r6, #0]
 800a904:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a908:	b10a      	cbz	r2, 800a90e <_printf_common+0x26>
 800a90a:	3301      	adds	r3, #1
 800a90c:	6033      	str	r3, [r6, #0]
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	0699      	lsls	r1, r3, #26
 800a912:	bf42      	ittt	mi
 800a914:	6833      	ldrmi	r3, [r6, #0]
 800a916:	3302      	addmi	r3, #2
 800a918:	6033      	strmi	r3, [r6, #0]
 800a91a:	6825      	ldr	r5, [r4, #0]
 800a91c:	f015 0506 	ands.w	r5, r5, #6
 800a920:	d106      	bne.n	800a930 <_printf_common+0x48>
 800a922:	f104 0a19 	add.w	sl, r4, #25
 800a926:	68e3      	ldr	r3, [r4, #12]
 800a928:	6832      	ldr	r2, [r6, #0]
 800a92a:	1a9b      	subs	r3, r3, r2
 800a92c:	42ab      	cmp	r3, r5
 800a92e:	dc2b      	bgt.n	800a988 <_printf_common+0xa0>
 800a930:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a934:	6822      	ldr	r2, [r4, #0]
 800a936:	3b00      	subs	r3, #0
 800a938:	bf18      	it	ne
 800a93a:	2301      	movne	r3, #1
 800a93c:	0692      	lsls	r2, r2, #26
 800a93e:	d430      	bmi.n	800a9a2 <_printf_common+0xba>
 800a940:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a944:	4641      	mov	r1, r8
 800a946:	4638      	mov	r0, r7
 800a948:	47c8      	blx	r9
 800a94a:	3001      	adds	r0, #1
 800a94c:	d023      	beq.n	800a996 <_printf_common+0xae>
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	341a      	adds	r4, #26
 800a952:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a956:	f003 0306 	and.w	r3, r3, #6
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	bf0a      	itet	eq
 800a95e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a962:	2500      	movne	r5, #0
 800a964:	6833      	ldreq	r3, [r6, #0]
 800a966:	f04f 0600 	mov.w	r6, #0
 800a96a:	bf08      	it	eq
 800a96c:	1aed      	subeq	r5, r5, r3
 800a96e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a972:	bf08      	it	eq
 800a974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a978:	4293      	cmp	r3, r2
 800a97a:	bfc4      	itt	gt
 800a97c:	1a9b      	subgt	r3, r3, r2
 800a97e:	18ed      	addgt	r5, r5, r3
 800a980:	42b5      	cmp	r5, r6
 800a982:	d11a      	bne.n	800a9ba <_printf_common+0xd2>
 800a984:	2000      	movs	r0, #0
 800a986:	e008      	b.n	800a99a <_printf_common+0xb2>
 800a988:	2301      	movs	r3, #1
 800a98a:	4652      	mov	r2, sl
 800a98c:	4641      	mov	r1, r8
 800a98e:	4638      	mov	r0, r7
 800a990:	47c8      	blx	r9
 800a992:	3001      	adds	r0, #1
 800a994:	d103      	bne.n	800a99e <_printf_common+0xb6>
 800a996:	f04f 30ff 	mov.w	r0, #4294967295
 800a99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a99e:	3501      	adds	r5, #1
 800a9a0:	e7c1      	b.n	800a926 <_printf_common+0x3e>
 800a9a2:	18e1      	adds	r1, r4, r3
 800a9a4:	1c5a      	adds	r2, r3, #1
 800a9a6:	2030      	movs	r0, #48	@ 0x30
 800a9a8:	3302      	adds	r3, #2
 800a9aa:	4422      	add	r2, r4
 800a9ac:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a9b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a9b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a9b8:	e7c2      	b.n	800a940 <_printf_common+0x58>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	4622      	mov	r2, r4
 800a9be:	4641      	mov	r1, r8
 800a9c0:	4638      	mov	r0, r7
 800a9c2:	47c8      	blx	r9
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	d0e6      	beq.n	800a996 <_printf_common+0xae>
 800a9c8:	3601      	adds	r6, #1
 800a9ca:	e7d9      	b.n	800a980 <_printf_common+0x98>

0800a9cc <_printf_i>:
 800a9cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d0:	7e0f      	ldrb	r7, [r1, #24]
 800a9d2:	4691      	mov	r9, r2
 800a9d4:	4680      	mov	r8, r0
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	2f78      	cmp	r7, #120	@ 0x78
 800a9da:	469a      	mov	sl, r3
 800a9dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a9de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a9e2:	d807      	bhi.n	800a9f4 <_printf_i+0x28>
 800a9e4:	2f62      	cmp	r7, #98	@ 0x62
 800a9e6:	d80a      	bhi.n	800a9fe <_printf_i+0x32>
 800a9e8:	2f00      	cmp	r7, #0
 800a9ea:	f000 80d2 	beq.w	800ab92 <_printf_i+0x1c6>
 800a9ee:	2f58      	cmp	r7, #88	@ 0x58
 800a9f0:	f000 80b9 	beq.w	800ab66 <_printf_i+0x19a>
 800a9f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a9fc:	e03a      	b.n	800aa74 <_printf_i+0xa8>
 800a9fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa02:	2b15      	cmp	r3, #21
 800aa04:	d8f6      	bhi.n	800a9f4 <_printf_i+0x28>
 800aa06:	a101      	add	r1, pc, #4	@ (adr r1, 800aa0c <_printf_i+0x40>)
 800aa08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa0c:	0800aa65 	.word	0x0800aa65
 800aa10:	0800aa79 	.word	0x0800aa79
 800aa14:	0800a9f5 	.word	0x0800a9f5
 800aa18:	0800a9f5 	.word	0x0800a9f5
 800aa1c:	0800a9f5 	.word	0x0800a9f5
 800aa20:	0800a9f5 	.word	0x0800a9f5
 800aa24:	0800aa79 	.word	0x0800aa79
 800aa28:	0800a9f5 	.word	0x0800a9f5
 800aa2c:	0800a9f5 	.word	0x0800a9f5
 800aa30:	0800a9f5 	.word	0x0800a9f5
 800aa34:	0800a9f5 	.word	0x0800a9f5
 800aa38:	0800ab79 	.word	0x0800ab79
 800aa3c:	0800aaa3 	.word	0x0800aaa3
 800aa40:	0800ab33 	.word	0x0800ab33
 800aa44:	0800a9f5 	.word	0x0800a9f5
 800aa48:	0800a9f5 	.word	0x0800a9f5
 800aa4c:	0800ab9b 	.word	0x0800ab9b
 800aa50:	0800a9f5 	.word	0x0800a9f5
 800aa54:	0800aaa3 	.word	0x0800aaa3
 800aa58:	0800a9f5 	.word	0x0800a9f5
 800aa5c:	0800a9f5 	.word	0x0800a9f5
 800aa60:	0800ab3b 	.word	0x0800ab3b
 800aa64:	6833      	ldr	r3, [r6, #0]
 800aa66:	1d1a      	adds	r2, r3, #4
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6032      	str	r2, [r6, #0]
 800aa6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa74:	2301      	movs	r3, #1
 800aa76:	e09d      	b.n	800abb4 <_printf_i+0x1e8>
 800aa78:	6833      	ldr	r3, [r6, #0]
 800aa7a:	6820      	ldr	r0, [r4, #0]
 800aa7c:	1d19      	adds	r1, r3, #4
 800aa7e:	6031      	str	r1, [r6, #0]
 800aa80:	0606      	lsls	r6, r0, #24
 800aa82:	d501      	bpl.n	800aa88 <_printf_i+0xbc>
 800aa84:	681d      	ldr	r5, [r3, #0]
 800aa86:	e003      	b.n	800aa90 <_printf_i+0xc4>
 800aa88:	0645      	lsls	r5, r0, #25
 800aa8a:	d5fb      	bpl.n	800aa84 <_printf_i+0xb8>
 800aa8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa90:	2d00      	cmp	r5, #0
 800aa92:	da03      	bge.n	800aa9c <_printf_i+0xd0>
 800aa94:	232d      	movs	r3, #45	@ 0x2d
 800aa96:	426d      	negs	r5, r5
 800aa98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa9c:	4859      	ldr	r0, [pc, #356]	@ (800ac04 <_printf_i+0x238>)
 800aa9e:	230a      	movs	r3, #10
 800aaa0:	e011      	b.n	800aac6 <_printf_i+0xfa>
 800aaa2:	6821      	ldr	r1, [r4, #0]
 800aaa4:	6833      	ldr	r3, [r6, #0]
 800aaa6:	0608      	lsls	r0, r1, #24
 800aaa8:	f853 5b04 	ldr.w	r5, [r3], #4
 800aaac:	d402      	bmi.n	800aab4 <_printf_i+0xe8>
 800aaae:	0649      	lsls	r1, r1, #25
 800aab0:	bf48      	it	mi
 800aab2:	b2ad      	uxthmi	r5, r5
 800aab4:	2f6f      	cmp	r7, #111	@ 0x6f
 800aab6:	6033      	str	r3, [r6, #0]
 800aab8:	4852      	ldr	r0, [pc, #328]	@ (800ac04 <_printf_i+0x238>)
 800aaba:	bf14      	ite	ne
 800aabc:	230a      	movne	r3, #10
 800aabe:	2308      	moveq	r3, #8
 800aac0:	2100      	movs	r1, #0
 800aac2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aac6:	6866      	ldr	r6, [r4, #4]
 800aac8:	2e00      	cmp	r6, #0
 800aaca:	60a6      	str	r6, [r4, #8]
 800aacc:	bfa2      	ittt	ge
 800aace:	6821      	ldrge	r1, [r4, #0]
 800aad0:	f021 0104 	bicge.w	r1, r1, #4
 800aad4:	6021      	strge	r1, [r4, #0]
 800aad6:	b90d      	cbnz	r5, 800aadc <_printf_i+0x110>
 800aad8:	2e00      	cmp	r6, #0
 800aada:	d04b      	beq.n	800ab74 <_printf_i+0x1a8>
 800aadc:	4616      	mov	r6, r2
 800aade:	fbb5 f1f3 	udiv	r1, r5, r3
 800aae2:	fb03 5711 	mls	r7, r3, r1, r5
 800aae6:	5dc7      	ldrb	r7, [r0, r7]
 800aae8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aaec:	462f      	mov	r7, r5
 800aaee:	460d      	mov	r5, r1
 800aaf0:	42bb      	cmp	r3, r7
 800aaf2:	d9f4      	bls.n	800aade <_printf_i+0x112>
 800aaf4:	2b08      	cmp	r3, #8
 800aaf6:	d10b      	bne.n	800ab10 <_printf_i+0x144>
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	07df      	lsls	r7, r3, #31
 800aafc:	d508      	bpl.n	800ab10 <_printf_i+0x144>
 800aafe:	6923      	ldr	r3, [r4, #16]
 800ab00:	6861      	ldr	r1, [r4, #4]
 800ab02:	4299      	cmp	r1, r3
 800ab04:	bfde      	ittt	le
 800ab06:	2330      	movle	r3, #48	@ 0x30
 800ab08:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab10:	1b92      	subs	r2, r2, r6
 800ab12:	6122      	str	r2, [r4, #16]
 800ab14:	464b      	mov	r3, r9
 800ab16:	aa03      	add	r2, sp, #12
 800ab18:	4621      	mov	r1, r4
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	f8cd a000 	str.w	sl, [sp]
 800ab20:	f7ff fee2 	bl	800a8e8 <_printf_common>
 800ab24:	3001      	adds	r0, #1
 800ab26:	d14a      	bne.n	800abbe <_printf_i+0x1f2>
 800ab28:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2c:	b004      	add	sp, #16
 800ab2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	f043 0320 	orr.w	r3, r3, #32
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	2778      	movs	r7, #120	@ 0x78
 800ab3c:	4832      	ldr	r0, [pc, #200]	@ (800ac08 <_printf_i+0x23c>)
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab44:	061f      	lsls	r7, r3, #24
 800ab46:	6831      	ldr	r1, [r6, #0]
 800ab48:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab4c:	d402      	bmi.n	800ab54 <_printf_i+0x188>
 800ab4e:	065f      	lsls	r7, r3, #25
 800ab50:	bf48      	it	mi
 800ab52:	b2ad      	uxthmi	r5, r5
 800ab54:	6031      	str	r1, [r6, #0]
 800ab56:	07d9      	lsls	r1, r3, #31
 800ab58:	bf44      	itt	mi
 800ab5a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab5e:	6023      	strmi	r3, [r4, #0]
 800ab60:	b11d      	cbz	r5, 800ab6a <_printf_i+0x19e>
 800ab62:	2310      	movs	r3, #16
 800ab64:	e7ac      	b.n	800aac0 <_printf_i+0xf4>
 800ab66:	4827      	ldr	r0, [pc, #156]	@ (800ac04 <_printf_i+0x238>)
 800ab68:	e7e9      	b.n	800ab3e <_printf_i+0x172>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	f023 0320 	bic.w	r3, r3, #32
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	e7f6      	b.n	800ab62 <_printf_i+0x196>
 800ab74:	4616      	mov	r6, r2
 800ab76:	e7bd      	b.n	800aaf4 <_printf_i+0x128>
 800ab78:	6833      	ldr	r3, [r6, #0]
 800ab7a:	6825      	ldr	r5, [r4, #0]
 800ab7c:	1d18      	adds	r0, r3, #4
 800ab7e:	6961      	ldr	r1, [r4, #20]
 800ab80:	6030      	str	r0, [r6, #0]
 800ab82:	062e      	lsls	r6, r5, #24
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	d501      	bpl.n	800ab8c <_printf_i+0x1c0>
 800ab88:	6019      	str	r1, [r3, #0]
 800ab8a:	e002      	b.n	800ab92 <_printf_i+0x1c6>
 800ab8c:	0668      	lsls	r0, r5, #25
 800ab8e:	d5fb      	bpl.n	800ab88 <_printf_i+0x1bc>
 800ab90:	8019      	strh	r1, [r3, #0]
 800ab92:	2300      	movs	r3, #0
 800ab94:	4616      	mov	r6, r2
 800ab96:	6123      	str	r3, [r4, #16]
 800ab98:	e7bc      	b.n	800ab14 <_printf_i+0x148>
 800ab9a:	6833      	ldr	r3, [r6, #0]
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	1d1a      	adds	r2, r3, #4
 800aba0:	6032      	str	r2, [r6, #0]
 800aba2:	681e      	ldr	r6, [r3, #0]
 800aba4:	6862      	ldr	r2, [r4, #4]
 800aba6:	4630      	mov	r0, r6
 800aba8:	f000 f85a 	bl	800ac60 <memchr>
 800abac:	b108      	cbz	r0, 800abb2 <_printf_i+0x1e6>
 800abae:	1b80      	subs	r0, r0, r6
 800abb0:	6060      	str	r0, [r4, #4]
 800abb2:	6863      	ldr	r3, [r4, #4]
 800abb4:	6123      	str	r3, [r4, #16]
 800abb6:	2300      	movs	r3, #0
 800abb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abbc:	e7aa      	b.n	800ab14 <_printf_i+0x148>
 800abbe:	6923      	ldr	r3, [r4, #16]
 800abc0:	4632      	mov	r2, r6
 800abc2:	4649      	mov	r1, r9
 800abc4:	4640      	mov	r0, r8
 800abc6:	47d0      	blx	sl
 800abc8:	3001      	adds	r0, #1
 800abca:	d0ad      	beq.n	800ab28 <_printf_i+0x15c>
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	079b      	lsls	r3, r3, #30
 800abd0:	d413      	bmi.n	800abfa <_printf_i+0x22e>
 800abd2:	68e0      	ldr	r0, [r4, #12]
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	4298      	cmp	r0, r3
 800abd8:	bfb8      	it	lt
 800abda:	4618      	movlt	r0, r3
 800abdc:	e7a6      	b.n	800ab2c <_printf_i+0x160>
 800abde:	2301      	movs	r3, #1
 800abe0:	4632      	mov	r2, r6
 800abe2:	4649      	mov	r1, r9
 800abe4:	4640      	mov	r0, r8
 800abe6:	47d0      	blx	sl
 800abe8:	3001      	adds	r0, #1
 800abea:	d09d      	beq.n	800ab28 <_printf_i+0x15c>
 800abec:	3501      	adds	r5, #1
 800abee:	68e3      	ldr	r3, [r4, #12]
 800abf0:	9903      	ldr	r1, [sp, #12]
 800abf2:	1a5b      	subs	r3, r3, r1
 800abf4:	42ab      	cmp	r3, r5
 800abf6:	dcf2      	bgt.n	800abde <_printf_i+0x212>
 800abf8:	e7eb      	b.n	800abd2 <_printf_i+0x206>
 800abfa:	2500      	movs	r5, #0
 800abfc:	f104 0619 	add.w	r6, r4, #25
 800ac00:	e7f5      	b.n	800abee <_printf_i+0x222>
 800ac02:	bf00      	nop
 800ac04:	0800ae39 	.word	0x0800ae39
 800ac08:	0800ae4a 	.word	0x0800ae4a

0800ac0c <memmove>:
 800ac0c:	4288      	cmp	r0, r1
 800ac0e:	b510      	push	{r4, lr}
 800ac10:	eb01 0402 	add.w	r4, r1, r2
 800ac14:	d902      	bls.n	800ac1c <memmove+0x10>
 800ac16:	4284      	cmp	r4, r0
 800ac18:	4623      	mov	r3, r4
 800ac1a:	d807      	bhi.n	800ac2c <memmove+0x20>
 800ac1c:	1e43      	subs	r3, r0, #1
 800ac1e:	42a1      	cmp	r1, r4
 800ac20:	d008      	beq.n	800ac34 <memmove+0x28>
 800ac22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac2a:	e7f8      	b.n	800ac1e <memmove+0x12>
 800ac2c:	4402      	add	r2, r0
 800ac2e:	4601      	mov	r1, r0
 800ac30:	428a      	cmp	r2, r1
 800ac32:	d100      	bne.n	800ac36 <memmove+0x2a>
 800ac34:	bd10      	pop	{r4, pc}
 800ac36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac3e:	e7f7      	b.n	800ac30 <memmove+0x24>

0800ac40 <_sbrk_r>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	2300      	movs	r3, #0
 800ac44:	4d05      	ldr	r5, [pc, #20]	@ (800ac5c <_sbrk_r+0x1c>)
 800ac46:	4604      	mov	r4, r0
 800ac48:	4608      	mov	r0, r1
 800ac4a:	602b      	str	r3, [r5, #0]
 800ac4c:	f7f6 fa00 	bl	8001050 <_sbrk>
 800ac50:	1c43      	adds	r3, r0, #1
 800ac52:	d102      	bne.n	800ac5a <_sbrk_r+0x1a>
 800ac54:	682b      	ldr	r3, [r5, #0]
 800ac56:	b103      	cbz	r3, 800ac5a <_sbrk_r+0x1a>
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	20000880 	.word	0x20000880

0800ac60 <memchr>:
 800ac60:	b2c9      	uxtb	r1, r1
 800ac62:	4603      	mov	r3, r0
 800ac64:	4402      	add	r2, r0
 800ac66:	b510      	push	{r4, lr}
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	d101      	bne.n	800ac72 <memchr+0x12>
 800ac6e:	2000      	movs	r0, #0
 800ac70:	e003      	b.n	800ac7a <memchr+0x1a>
 800ac72:	7804      	ldrb	r4, [r0, #0]
 800ac74:	3301      	adds	r3, #1
 800ac76:	428c      	cmp	r4, r1
 800ac78:	d1f6      	bne.n	800ac68 <memchr+0x8>
 800ac7a:	bd10      	pop	{r4, pc}

0800ac7c <memcpy>:
 800ac7c:	440a      	add	r2, r1
 800ac7e:	1e43      	subs	r3, r0, #1
 800ac80:	4291      	cmp	r1, r2
 800ac82:	d100      	bne.n	800ac86 <memcpy+0xa>
 800ac84:	4770      	bx	lr
 800ac86:	b510      	push	{r4, lr}
 800ac88:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac8c:	4291      	cmp	r1, r2
 800ac8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac92:	d1f9      	bne.n	800ac88 <memcpy+0xc>
 800ac94:	bd10      	pop	{r4, pc}

0800ac96 <_realloc_r>:
 800ac96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9a:	4680      	mov	r8, r0
 800ac9c:	4615      	mov	r5, r2
 800ac9e:	460c      	mov	r4, r1
 800aca0:	b921      	cbnz	r1, 800acac <_realloc_r+0x16>
 800aca2:	4611      	mov	r1, r2
 800aca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aca8:	f7ff bc3a 	b.w	800a520 <_malloc_r>
 800acac:	b92a      	cbnz	r2, 800acba <_realloc_r+0x24>
 800acae:	f7ff fbcb 	bl	800a448 <_free_r>
 800acb2:	2400      	movs	r4, #0
 800acb4:	4620      	mov	r0, r4
 800acb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acba:	f000 f81a 	bl	800acf2 <_malloc_usable_size_r>
 800acbe:	4285      	cmp	r5, r0
 800acc0:	4606      	mov	r6, r0
 800acc2:	d802      	bhi.n	800acca <_realloc_r+0x34>
 800acc4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800acc8:	d8f4      	bhi.n	800acb4 <_realloc_r+0x1e>
 800acca:	4629      	mov	r1, r5
 800accc:	4640      	mov	r0, r8
 800acce:	f7ff fc27 	bl	800a520 <_malloc_r>
 800acd2:	4607      	mov	r7, r0
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d0ec      	beq.n	800acb2 <_realloc_r+0x1c>
 800acd8:	42b5      	cmp	r5, r6
 800acda:	462a      	mov	r2, r5
 800acdc:	4621      	mov	r1, r4
 800acde:	bf28      	it	cs
 800ace0:	4632      	movcs	r2, r6
 800ace2:	f7ff ffcb 	bl	800ac7c <memcpy>
 800ace6:	4621      	mov	r1, r4
 800ace8:	4640      	mov	r0, r8
 800acea:	463c      	mov	r4, r7
 800acec:	f7ff fbac 	bl	800a448 <_free_r>
 800acf0:	e7e0      	b.n	800acb4 <_realloc_r+0x1e>

0800acf2 <_malloc_usable_size_r>:
 800acf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acf6:	1f18      	subs	r0, r3, #4
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	bfbc      	itt	lt
 800acfc:	580b      	ldrlt	r3, [r1, r0]
 800acfe:	18c0      	addlt	r0, r0, r3
 800ad00:	4770      	bx	lr
	...

0800ad04 <_init>:
 800ad04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad06:	bf00      	nop
 800ad08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0a:	bc08      	pop	{r3}
 800ad0c:	469e      	mov	lr, r3
 800ad0e:	4770      	bx	lr

0800ad10 <_fini>:
 800ad10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad12:	bf00      	nop
 800ad14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad16:	bc08      	pop	{r3}
 800ad18:	469e      	mov	lr, r3
 800ad1a:	4770      	bx	lr
