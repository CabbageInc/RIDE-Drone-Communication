
RIDE_Drone_Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba4  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015b  0800addc  0800addc  0000bddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800af38  0800af38  0000bf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800af40  0800af40  0000bf40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800af44  0800af44  0000bf44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  20000000  0800af48  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000081c  20000078  0800afc0  0000c078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000894  0800afc0  0000c894  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018d03  00000000  00000000  0000c0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003014  00000000  00000000  00024db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001330  00000000  00000000  00027dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ebe  00000000  00000000  000290f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036c36  00000000  00000000  00029fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018c9b  00000000  00000000  00060bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015abe2  00000000  00000000  00079887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d4469  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000056dc  00000000  00000000  001d44ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  001d9b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000078 	.word	0x20000078
 8000254:	00000000 	.word	0x00000000
 8000258:	0800adc4 	.word	0x0800adc4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000007c 	.word	0x2000007c
 8000274:	0800adc4 	.word	0x0800adc4

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b97e 	b.w	800059c <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	460c      	mov	r4, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14d      	bne.n	8000360 <__udivmoddi4+0xa8>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	460f      	mov	r7, r1
 80002c8:	4684      	mov	ip, r0
 80002ca:	4696      	mov	lr, r2
 80002cc:	fab2 f382 	clz	r3, r2
 80002d0:	d960      	bls.n	8000394 <__udivmoddi4+0xdc>
 80002d2:	b14b      	cbz	r3, 80002e8 <__udivmoddi4+0x30>
 80002d4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002d8:	f1c3 0220 	rsb	r2, r3, #32
 80002dc:	409f      	lsls	r7, r3
 80002de:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e2:	fa20 f202 	lsr.w	r2, r0, r2
 80002e6:	4317      	orrs	r7, r2
 80002e8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002ec:	fa1f f48e 	uxth.w	r4, lr
 80002f0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002f8:	fb06 7711 	mls	r7, r6, r1, r7
 80002fc:	fb01 f004 	mul.w	r0, r1, r4
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x62>
 8000308:	eb1e 0202 	adds.w	r2, lr, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x60>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 812d 	bhi.w	8000572 <__udivmoddi4+0x2ba>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fa1f fc8c 	uxth.w	ip, ip
 8000320:	fbb2 f0f6 	udiv	r0, r2, r6
 8000324:	fb06 2210 	mls	r2, r6, r0, r2
 8000328:	fb00 f404 	mul.w	r4, r0, r4
 800032c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000330:	4564      	cmp	r4, ip
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x8e>
 8000334:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x8c>
 800033e:	4564      	cmp	r4, ip
 8000340:	f200 811a 	bhi.w	8000578 <__udivmoddi4+0x2c0>
 8000344:	4610      	mov	r0, r2
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	ebac 0c04 	sub.w	ip, ip, r4
 800034e:	2100      	movs	r1, #0
 8000350:	b125      	cbz	r5, 800035c <__udivmoddi4+0xa4>
 8000352:	fa2c f303 	lsr.w	r3, ip, r3
 8000356:	2200      	movs	r2, #0
 8000358:	e9c5 3200 	strd	r3, r2, [r5]
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	428b      	cmp	r3, r1
 8000362:	d905      	bls.n	8000370 <__udivmoddi4+0xb8>
 8000364:	b10d      	cbz	r5, 800036a <__udivmoddi4+0xb2>
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	2100      	movs	r1, #0
 800036c:	4608      	mov	r0, r1
 800036e:	e7f5      	b.n	800035c <__udivmoddi4+0xa4>
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14d      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000378:	42a3      	cmp	r3, r4
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2aa>
 800037e:	4290      	cmp	r0, r2
 8000380:	f080 80ef 	bcs.w	8000562 <__udivmoddi4+0x2aa>
 8000384:	4606      	mov	r6, r0
 8000386:	4623      	mov	r3, r4
 8000388:	4608      	mov	r0, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0e6      	beq.n	800035c <__udivmoddi4+0xa4>
 800038e:	e9c5 6300 	strd	r6, r3, [r5]
 8000392:	e7e3      	b.n	800035c <__udivmoddi4+0xa4>
 8000394:	2b00      	cmp	r3, #0
 8000396:	f040 80a2 	bne.w	80004de <__udivmoddi4+0x226>
 800039a:	1a8a      	subs	r2, r1, r2
 800039c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a0:	fa1f f68e 	uxth.w	r6, lr
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003aa:	fb07 2014 	mls	r0, r7, r4, r2
 80003ae:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b6:	fb06 f004 	mul.w	r0, r6, r4
 80003ba:	4290      	cmp	r0, r2
 80003bc:	d90f      	bls.n	80003de <__udivmoddi4+0x126>
 80003be:	eb1e 0202 	adds.w	r2, lr, r2
 80003c2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	4290      	cmp	r0, r2
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80c8 	beq.w	800056c <__udivmoddi4+0x2b4>
 80003dc:	4644      	mov	r4, r8
 80003de:	1a12      	subs	r2, r2, r0
 80003e0:	fa1f fc8c 	uxth.w	ip, ip
 80003e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e8:	fb07 2210 	mls	r2, r7, r0, r2
 80003ec:	fb00 f606 	mul.w	r6, r0, r6
 80003f0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f4:	4566      	cmp	r6, ip
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x152>
 80003f8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x150>
 8000402:	4566      	cmp	r6, ip
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2c6>
 8000408:	4610      	mov	r0, r2
 800040a:	ebac 0c06 	sub.w	ip, ip, r6
 800040e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa04 fe01 	lsl.w	lr, r4, r1
 800041e:	fa22 f706 	lsr.w	r7, r2, r6
 8000422:	fa20 fc06 	lsr.w	ip, r0, r6
 8000426:	40f4      	lsrs	r4, r6
 8000428:	408a      	lsls	r2, r1
 800042a:	431f      	orrs	r7, r3
 800042c:	ea4e 030c 	orr.w	r3, lr, ip
 8000430:	fa00 fe01 	lsl.w	lr, r0, r1
 8000434:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fa1f fc87 	uxth.w	ip, r7
 8000440:	fbb4 f0f8 	udiv	r0, r4, r8
 8000444:	fb08 4410 	mls	r4, r8, r0, r4
 8000448:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044c:	fb00 f90c 	mul.w	r9, r0, ip
 8000450:	45a1      	cmp	r9, r4
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1ba>
 8000454:	193c      	adds	r4, r7, r4
 8000456:	f100 3aff 	add.w	sl, r0, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a1      	cmp	r9, r4
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b8>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 8093 	beq.w	8000596 <__udivmoddi4+0x2de>
 8000470:	4650      	mov	r0, sl
 8000472:	eba4 0409 	sub.w	r4, r4, r9
 8000476:	fa1f f983 	uxth.w	r9, r3
 800047a:	fbb4 f3f8 	udiv	r3, r4, r8
 800047e:	fb08 4413 	mls	r4, r8, r3, r4
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	45a4      	cmp	ip, r4
 800048c:	d906      	bls.n	800049c <__udivmoddi4+0x1e4>
 800048e:	193c      	adds	r4, r7, r4
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295
 8000494:	d201      	bcs.n	800049a <__udivmoddi4+0x1e2>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d87a      	bhi.n	8000590 <__udivmoddi4+0x2d8>
 800049a:	4643      	mov	r3, r8
 800049c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a0:	eba4 040c 	sub.w	r4, r4, ip
 80004a4:	fba0 9802 	umull	r9, r8, r0, r2
 80004a8:	4544      	cmp	r4, r8
 80004aa:	46cc      	mov	ip, r9
 80004ac:	4643      	mov	r3, r8
 80004ae:	d302      	bcc.n	80004b6 <__udivmoddi4+0x1fe>
 80004b0:	d106      	bne.n	80004c0 <__udivmoddi4+0x208>
 80004b2:	45ce      	cmp	lr, r9
 80004b4:	d204      	bcs.n	80004c0 <__udivmoddi4+0x208>
 80004b6:	3801      	subs	r0, #1
 80004b8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004bc:	eb68 0307 	sbc.w	r3, r8, r7
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x222>
 80004c2:	ebbe 020c 	subs.w	r2, lr, ip
 80004c6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ca:	fa04 f606 	lsl.w	r6, r4, r6
 80004ce:	fa22 f301 	lsr.w	r3, r2, r1
 80004d2:	40cc      	lsrs	r4, r1
 80004d4:	431e      	orrs	r6, r3
 80004d6:	e9c5 6400 	strd	r6, r4, [r5]
 80004da:	2100      	movs	r1, #0
 80004dc:	e73e      	b.n	800035c <__udivmoddi4+0xa4>
 80004de:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e2:	f1c3 0120 	rsb	r1, r3, #32
 80004e6:	fa04 f203 	lsl.w	r2, r4, r3
 80004ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ee:	40cc      	lsrs	r4, r1
 80004f0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f4:	fa20 f101 	lsr.w	r1, r0, r1
 80004f8:	fa1f f68e 	uxth.w	r6, lr
 80004fc:	fbb4 f0f7 	udiv	r0, r4, r7
 8000500:	430a      	orrs	r2, r1
 8000502:	fb07 4410 	mls	r4, r7, r0, r4
 8000506:	0c11      	lsrs	r1, r2, #16
 8000508:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800050c:	fb00 f406 	mul.w	r4, r0, r6
 8000510:	428c      	cmp	r4, r1
 8000512:	d90e      	bls.n	8000532 <__udivmoddi4+0x27a>
 8000514:	eb1e 0101 	adds.w	r1, lr, r1
 8000518:	f100 38ff 	add.w	r8, r0, #4294967295
 800051c:	bf2c      	ite	cs
 800051e:	f04f 0901 	movcs.w	r9, #1
 8000522:	f04f 0900 	movcc.w	r9, #0
 8000526:	428c      	cmp	r4, r1
 8000528:	d902      	bls.n	8000530 <__udivmoddi4+0x278>
 800052a:	f1b9 0f00 	cmp.w	r9, #0
 800052e:	d02c      	beq.n	800058a <__udivmoddi4+0x2d2>
 8000530:	4640      	mov	r0, r8
 8000532:	1b09      	subs	r1, r1, r4
 8000534:	b292      	uxth	r2, r2
 8000536:	fbb1 f4f7 	udiv	r4, r1, r7
 800053a:	fb07 1114 	mls	r1, r7, r4, r1
 800053e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000542:	fb04 f106 	mul.w	r1, r4, r6
 8000546:	4291      	cmp	r1, r2
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x2a2>
 800054a:	eb1e 0202 	adds.w	r2, lr, r2
 800054e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000552:	d201      	bcs.n	8000558 <__udivmoddi4+0x2a0>
 8000554:	4291      	cmp	r1, r2
 8000556:	d815      	bhi.n	8000584 <__udivmoddi4+0x2cc>
 8000558:	4644      	mov	r4, r8
 800055a:	1a52      	subs	r2, r2, r1
 800055c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000560:	e721      	b.n	80003a6 <__udivmoddi4+0xee>
 8000562:	1a86      	subs	r6, r0, r2
 8000564:	eb64 0303 	sbc.w	r3, r4, r3
 8000568:	2001      	movs	r0, #1
 800056a:	e70e      	b.n	800038a <__udivmoddi4+0xd2>
 800056c:	3c02      	subs	r4, #2
 800056e:	4472      	add	r2, lr
 8000570:	e735      	b.n	80003de <__udivmoddi4+0x126>
 8000572:	3902      	subs	r1, #2
 8000574:	4472      	add	r2, lr
 8000576:	e6d0      	b.n	800031a <__udivmoddi4+0x62>
 8000578:	44f4      	add	ip, lr
 800057a:	3802      	subs	r0, #2
 800057c:	e6e3      	b.n	8000346 <__udivmoddi4+0x8e>
 800057e:	44f4      	add	ip, lr
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x152>
 8000584:	3c02      	subs	r4, #2
 8000586:	4472      	add	r2, lr
 8000588:	e7e7      	b.n	800055a <__udivmoddi4+0x2a2>
 800058a:	3802      	subs	r0, #2
 800058c:	4471      	add	r1, lr
 800058e:	e7d0      	b.n	8000532 <__udivmoddi4+0x27a>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e782      	b.n	800049c <__udivmoddi4+0x1e4>
 8000596:	3802      	subs	r0, #2
 8000598:	443c      	add	r4, r7
 800059a:	e76a      	b.n	8000472 <__udivmoddi4+0x1ba>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80005a8:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80005ae:	4909      	ldr	r1, [pc, #36]	@ (80005d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c4:	68fb      	ldr	r3, [r7, #12]
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	46020c00 	.word	0x46020c00

080005d8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005e0:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <LL_APB1_GRP2_EnableClock+0x34>)
 80005e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005e6:	4909      	ldr	r1, [pc, #36]	@ (800060c <LL_APB1_GRP2_EnableClock+0x34>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <LL_APB1_GRP2_EnableClock+0x34>)
 80005f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4013      	ands	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fc:	68fb      	ldr	r3, [r7, #12]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	46020c00 	.word	0x46020c00

08000610 <HAL_UART_RxCpltCallback>:
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* Callback for when data is received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000614:	b089      	sub	sp, #36	@ 0x24
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a45      	ldr	r2, [pc, #276]	@ (8000734 <HAL_UART_RxCpltCallback+0x124>)
 8000620:	4293      	cmp	r3, r2
 8000622:	f040 8082 	bne.w	800072a <HAL_UART_RxCpltCallback+0x11a>
 8000626:	466b      	mov	r3, sp
 8000628:	461e      	mov	r6, r3
        // Store received byte in buffer for later use
        for(int i = 0; i<sizeof(newRxData); i++){
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
 800062e:	e00b      	b.n	8000648 <HAL_UART_RxCpltCallback+0x38>
        	rxData[i] = newRxData[i];
 8000630:	4a41      	ldr	r2, [pc, #260]	@ (8000738 <HAL_UART_RxCpltCallback+0x128>)
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	4413      	add	r3, r2
 8000636:	7819      	ldrb	r1, [r3, #0]
 8000638:	4a40      	ldr	r2, [pc, #256]	@ (800073c <HAL_UART_RxCpltCallback+0x12c>)
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	4413      	add	r3, r2
 800063e:	460a      	mov	r2, r1
 8000640:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i<sizeof(newRxData); i++){
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	3301      	adds	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	69fb      	ldr	r3, [r7, #28]
 800064a:	2b0a      	cmp	r3, #10
 800064c:	d9f0      	bls.n	8000630 <HAL_UART_RxCpltCallback+0x20>
        }

        const char *output = "Received Acknowledgment: ";
 800064e:	4b3c      	ldr	r3, [pc, #240]	@ (8000740 <HAL_UART_RxCpltCallback+0x130>)
 8000650:	617b      	str	r3, [r7, #20]
        HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), 1000);
 8000652:	6978      	ldr	r0, [r7, #20]
 8000654:	f7ff fe10 	bl	8000278 <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	b29a      	uxth	r2, r3
 800065c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000660:	6979      	ldr	r1, [r7, #20]
 8000662:	4838      	ldr	r0, [pc, #224]	@ (8000744 <HAL_UART_RxCpltCallback+0x134>)
 8000664:	f007 f810 	bl	8007688 <HAL_UART_Transmit>

        size_t msgLength = sizeof(rxData) / sizeof(rxData[0]);
 8000668:	230b      	movs	r3, #11
 800066a:	613b      	str	r3, [r7, #16]
        char msg[msgLength * 2 + 1];
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	1c59      	adds	r1, r3, #1
 8000672:	460b      	mov	r3, r1
 8000674:	3b01      	subs	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	2300      	movs	r3, #0
 800067a:	4688      	mov	r8, r1
 800067c:	4699      	mov	r9, r3
 800067e:	f04f 0200 	mov.w	r2, #0
 8000682:	f04f 0300 	mov.w	r3, #0
 8000686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800068a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800068e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000692:	2300      	movs	r3, #0
 8000694:	460c      	mov	r4, r1
 8000696:	461d      	mov	r5, r3
 8000698:	f04f 0200 	mov.w	r2, #0
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	00eb      	lsls	r3, r5, #3
 80006a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006a6:	00e2      	lsls	r2, r4, #3
 80006a8:	1dcb      	adds	r3, r1, #7
 80006aa:	08db      	lsrs	r3, r3, #3
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	ebad 0d03 	sub.w	sp, sp, r3
 80006b2:	466b      	mov	r3, sp
 80006b4:	3300      	adds	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]

        for(size_t i = 0; i<msgLength; i++){
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	e00e      	b.n	80006dc <HAL_UART_RxCpltCallback+0xcc>
        	sprintf(msg + (i*2), "%02X", rxData[i]);
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	18d0      	adds	r0, r2, r3
 80006c6:	4a1d      	ldr	r2, [pc, #116]	@ (800073c <HAL_UART_RxCpltCallback+0x12c>)
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	491d      	ldr	r1, [pc, #116]	@ (8000748 <HAL_UART_RxCpltCallback+0x138>)
 80006d2:	f009 fec5 	bl	800a460 <siprintf>
        for(size_t i = 0; i<msgLength; i++){
 80006d6:	69bb      	ldr	r3, [r7, #24]
 80006d8:	3301      	adds	r3, #1
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69ba      	ldr	r2, [r7, #24]
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d3ec      	bcc.n	80006be <HAL_UART_RxCpltCallback+0xae>
        }
        msg[msgLength*2] = '\0';
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	2100      	movs	r1, #0
 80006ec:	54d1      	strb	r1, [r2, r3]

        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 80006ee:	68b8      	ldr	r0, [r7, #8]
 80006f0:	f7ff fdc2 	bl	8000278 <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fc:	68b9      	ldr	r1, [r7, #8]
 80006fe:	4811      	ldr	r0, [pc, #68]	@ (8000744 <HAL_UART_RxCpltCallback+0x134>)
 8000700:	f006 ffc2 	bl	8007688 <HAL_UART_Transmit>

        output = "\r\n";
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <HAL_UART_RxCpltCallback+0x13c>)
 8000706:	617b      	str	r3, [r7, #20]
        HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), 1000);
 8000708:	6978      	ldr	r0, [r7, #20]
 800070a:	f7ff fdb5 	bl	8000278 <strlen>
 800070e:	4603      	mov	r3, r0
 8000710:	b29a      	uxth	r2, r3
 8000712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000716:	6979      	ldr	r1, [r7, #20]
 8000718:	480a      	ldr	r0, [pc, #40]	@ (8000744 <HAL_UART_RxCpltCallback+0x134>)
 800071a:	f006 ffb5 	bl	8007688 <HAL_UART_Transmit>

        HAL_UART_Receive_IT(&huart2, newRxData, 11);
 800071e:	220b      	movs	r2, #11
 8000720:	4905      	ldr	r1, [pc, #20]	@ (8000738 <HAL_UART_RxCpltCallback+0x128>)
 8000722:	480b      	ldr	r0, [pc, #44]	@ (8000750 <HAL_UART_RxCpltCallback+0x140>)
 8000724:	f007 f84e 	bl	80077c4 <HAL_UART_Receive_IT>
 8000728:	46b5      	mov	sp, r6
    }
}
 800072a:	bf00      	nop
 800072c:	3724      	adds	r7, #36	@ 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000734:	40004400 	.word	0x40004400
 8000738:	20000738 	.word	0x20000738
 800073c:	2000072c 	.word	0x2000072c
 8000740:	0800addc 	.word	0x0800addc
 8000744:	20000120 	.word	0x20000120
 8000748:	0800adf8 	.word	0x0800adf8
 800074c:	0800ae00 	.word	0x0800ae00
 8000750:	200001b4 	.word	0x200001b4

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fd72 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f828 	bl	80007b0 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000760:	f000 f88a 	bl	8000878 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f000 f9ee 	bl	8000b44 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000768:	f000 f894 	bl	8000894 <MX_ADC1_Init>
  MX_ICACHE_Init();
 800076c:	f000 f8d6 	bl	800091c <MX_ICACHE_Init>
  MX_UCPD1_Init();
 8000770:	f000 f8e8 	bl	8000944 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000774:	f000 f9b4 	bl	8000ae0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 8000778:	f000 f91a 	bl	80009b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800077c:	f000 f964 	bl	8000a48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, newRxData, 11);
 8000780:	220b      	movs	r2, #11
 8000782:	4908      	ldr	r1, [pc, #32]	@ (80007a4 <main+0x50>)
 8000784:	4808      	ldr	r0, [pc, #32]	@ (80007a8 <main+0x54>)
 8000786:	f007 f81d 	bl	80077c4 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_UART_Transmit(&huart2, txData, sizeof(txData), 1000);
 800078a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078e:	2219      	movs	r2, #25
 8000790:	4906      	ldr	r1, [pc, #24]	@ (80007ac <main+0x58>)
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <main+0x54>)
 8000794:	f006 ff78 	bl	8007688 <HAL_UART_Transmit>

	HAL_Delay(3000);
 8000798:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800079c:	f000 fe16 	bl	80013cc <HAL_Delay>
	HAL_UART_Transmit(&huart2, txData, sizeof(txData), 1000);
 80007a0:	bf00      	nop
 80007a2:	e7f2      	b.n	800078a <main+0x36>
 80007a4:	20000738 	.word	0x20000738
 80007a8:	200001b4 	.word	0x200001b4
 80007ac:	20000000 	.word	0x20000000

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b09e      	sub	sp, #120	@ 0x78
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	2260      	movs	r2, #96	@ 0x60
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f009 fe6e 	bl	800a4a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
 80007d2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007d4:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80007d8:	f002 feb6 	bl	8003548 <HAL_PWREx_ControlVoltageScaling>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80007e2:	f000 fa65 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80007e6:	2332      	movs	r3, #50	@ 0x32
 80007e8:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f6:	2310      	movs	r3, #16
 80007f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007fa:	2301      	movs	r3, #1
 80007fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007fe:	2310      	movs	r3, #16
 8000800:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000802:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800080c:	2301      	movs	r3, #1
 800080e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000818:	2350      	movs	r3, #80	@ 0x50
 800081a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000828:	2300      	movs	r3, #0
 800082a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	4618      	mov	r0, r3
 8000836:	f002 ff93 	bl	8003760 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000840:	f000 fa36 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	231f      	movs	r3, #31
 8000846:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000848:	2303      	movs	r3, #3
 800084a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2104      	movs	r1, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fe59 	bl	8004518 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800086c:	f000 fa20 	bl	8000cb0 <Error_Handler>
  }
}
 8000870:	bf00      	nop
 8000872:	3778      	adds	r7, #120	@ 0x78
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800087c:	f002 ff50 	bl	8003720 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000880:	2002      	movs	r0, #2
 8000882:	f002 feed 	bl	8003660 <HAL_PWREx_ConfigSupply>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800088c:	f000 fa10 	bl	8000cb0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000898:	4b1e      	ldr	r3, [pc, #120]	@ (8000914 <MX_ADC1_Init+0x80>)
 800089a:	4a1f      	ldr	r2, [pc, #124]	@ (8000918 <MX_ADC1_Init+0x84>)
 800089c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800089e:	4b1d      	ldr	r3, [pc, #116]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b6:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008b8:	2204      	movs	r2, #4
 80008ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008be:	2200      	movs	r2, #0
 80008c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80008ca:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d0:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_ADC1_Init+0x80>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_ADC1_Init+0x80>)
 8000902:	f000 fe85 	bl	8001610 <HAL_ADC_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 800090c:	f000 f9d0 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000094 	.word	0x20000094
 8000918:	42028000 	.word	0x42028000

0800091c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 fd69 	bl	80023f8 <HAL_ICACHE_ConfigAssociativityMode>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800092c:	f000 f9c0 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000930:	f001 fd82 	bl	8002438 <HAL_ICACHE_Enable>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800093a:	f000 f9b9 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800095a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800095e:	f7ff fe3b 	bl	80005d8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000962:	2002      	movs	r0, #2
 8000964:	f7ff fe1c 	bl	80005a0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000968:	2001      	movs	r0, #1
 800096a:	f7ff fe19 	bl	80005a0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800096e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000972:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000974:	2303      	movs	r3, #3
 8000976:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4809      	ldr	r0, [pc, #36]	@ (80009a8 <MX_UCPD1_Init+0x64>)
 8000982:	f008 ff22 	bl	80097ca <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800098a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800098c:	2303      	movs	r3, #3
 800098e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	4804      	ldr	r0, [pc, #16]	@ (80009ac <MX_UCPD1_Init+0x68>)
 800099a:	f008 ff16 	bl	80097ca <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	42020400 	.word	0x42020400
 80009ac:	42020000 	.word	0x42020000

080009b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b4:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009b6:	4a23      	ldr	r2, [pc, #140]	@ (8000a44 <MX_USART1_UART_Init+0x94>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ba:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e6:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f2:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f8:	4811      	ldr	r0, [pc, #68]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 80009fa:	f006 fdf5 	bl	80075e8 <HAL_UART_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a04:	f000 f954 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	480d      	ldr	r0, [pc, #52]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 8000a0c:	f008 fcc7 	bl	800939e <HAL_UARTEx_SetTxFifoThreshold>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a16:	f000 f94b 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4808      	ldr	r0, [pc, #32]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 8000a1e:	f008 fcfc 	bl	800941a <HAL_UARTEx_SetRxFifoThreshold>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a28:	f000 f942 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <MX_USART1_UART_Init+0x90>)
 8000a2e:	f008 fc7d 	bl	800932c <HAL_UARTEx_DisableFifoMode>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a38:	f000 f93a 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000120 	.word	0x20000120
 8000a44:	40013800 	.word	0x40013800

08000a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a4e:	4a23      	ldr	r2, [pc, #140]	@ (8000adc <MX_USART2_UART_Init+0x94>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a90:	4811      	ldr	r0, [pc, #68]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a92:	f006 fda9 	bl	80075e8 <HAL_UART_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a9c:	f000 f908 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000aa4:	f008 fc7b 	bl	800939e <HAL_UARTEx_SetTxFifoThreshold>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000aae:	f000 f8ff 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4808      	ldr	r0, [pc, #32]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000ab6:	f008 fcb0 	bl	800941a <HAL_UARTEx_SetRxFifoThreshold>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac0:	f000 f8f6 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	@ (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000ac6:	f008 fc31 	bl	800932c <HAL_UARTEx_DisableFifoMode>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad0:	f000 f8ee 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200001b4 	.word	0x200001b4
 8000adc:	40004400 	.word	0x40004400

08000ae0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae6:	4a16      	ldr	r2, [pc, #88]	@ (8000b40 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000aea:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aec:	2206      	movs	r2, #6
 8000aee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af2:	2202      	movs	r2, #2
 8000af4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af8:	2202      	movs	r2, #2
 8000afa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b14:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b28:	f001 fc96 	bl	8002458 <HAL_PCD_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b32:	f000 f8bd 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000248 	.word	0x20000248
 8000b40:	42040000 	.word	0x42040000

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	4b50      	ldr	r3, [pc, #320]	@ (8000c9c <MX_GPIO_Init+0x158>)
 8000b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b60:	4a4e      	ldr	r2, [pc, #312]	@ (8000c9c <MX_GPIO_Init+0x158>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b6a:	4b4c      	ldr	r3, [pc, #304]	@ (8000c9c <MX_GPIO_Init+0x158>)
 8000b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b48      	ldr	r3, [pc, #288]	@ (8000c9c <MX_GPIO_Init+0x158>)
 8000b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b7e:	4a47      	ldr	r2, [pc, #284]	@ (8000c9c <MX_GPIO_Init+0x158>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b88:	4b44      	ldr	r3, [pc, #272]	@ (8000c9c <MX_GPIO_Init+0x158>)
 8000b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b41      	ldr	r3, [pc, #260]	@ (8000c9c <MX_GPIO_Init+0x158>)
 8000b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b9c:	4a3f      	ldr	r2, [pc, #252]	@ (8000c9c <MX_GPIO_Init+0x158>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8000c9c <MX_GPIO_Init+0x158>)
 8000ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb4:	4b39      	ldr	r3, [pc, #228]	@ (8000c9c <MX_GPIO_Init+0x158>)
 8000bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bba:	4a38      	ldr	r2, [pc, #224]	@ (8000c9c <MX_GPIO_Init+0x158>)
 8000bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bc4:	4b35      	ldr	r3, [pc, #212]	@ (8000c9c <MX_GPIO_Init+0x158>)
 8000bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	4832      	ldr	r0, [pc, #200]	@ (8000ca0 <MX_GPIO_Init+0x15c>)
 8000bd8:	f001 fbf6 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2180      	movs	r1, #128	@ 0x80
 8000be0:	4830      	ldr	r0, [pc, #192]	@ (8000ca4 <MX_GPIO_Init+0x160>)
 8000be2:	f001 fbf1 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	21a0      	movs	r1, #160	@ 0xa0
 8000bea:	482f      	ldr	r0, [pc, #188]	@ (8000ca8 <MX_GPIO_Init+0x164>)
 8000bec:	f001 fbec 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8000cac <MX_GPIO_Init+0x168>)
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4827      	ldr	r0, [pc, #156]	@ (8000ca4 <MX_GPIO_Init+0x160>)
 8000c06:	f001 fa07 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000c0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4822      	ldr	r0, [pc, #136]	@ (8000ca8 <MX_GPIO_Init+0x164>)
 8000c20:	f001 f9fa 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c24:	2304      	movs	r3, #4
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c30:	2302      	movs	r3, #2
 8000c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4819      	ldr	r0, [pc, #100]	@ (8000ca0 <MX_GPIO_Init+0x15c>)
 8000c3c:	f001 f9ec 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c40:	2380      	movs	r3, #128	@ 0x80
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4813      	ldr	r0, [pc, #76]	@ (8000ca4 <MX_GPIO_Init+0x160>)
 8000c58:	f001 f9de 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000c5c:	2320      	movs	r3, #32
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	@ (8000ca8 <MX_GPIO_Init+0x164>)
 8000c74:	f001 f9d0 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000c78:	2380      	movs	r3, #128	@ 0x80
 8000c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c84:	2302      	movs	r3, #2
 8000c86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <MX_GPIO_Init+0x164>)
 8000c90:	f001 f9c2 	bl	8002018 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	@ 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	46020c00 	.word	0x46020c00
 8000ca0:	42021800 	.word	0x42021800
 8000ca4:	42020800 	.word	0x42020800
 8000ca8:	42020400 	.word	0x42020400
 8000cac:	10210000 	.word	0x10210000

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <Error_Handler+0x8>

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <HAL_MspInit+0x38>)
 8000cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <HAL_MspInit+0x38>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <HAL_MspInit+0x38>)
 8000cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000ce0:	f002 fd2e 	bl	8003740 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000ce4:	2004      	movs	r0, #4
 8000ce6:	f001 f80a 	bl	8001cfe <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	46020c00 	.word	0x46020c00

08000cf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0ba      	sub	sp, #232	@ 0xe8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	22c0      	movs	r2, #192	@ 0xc0
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f009 fbc1 	bl	800a4a0 <memset>
  if(hadc->Instance==ADC1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a24      	ldr	r2, [pc, #144]	@ (8000db4 <HAL_ADC_MspInit+0xbc>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d140      	bne.n	8000daa <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000d28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000d34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4618      	mov	r0, r3
 8000d42:	f003 ffb9 	bl	8004cb8 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000d4c:	f7ff ffb0 	bl	8000cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <HAL_ADC_MspInit+0xc0>)
 8000d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d56:	4a18      	ldr	r2, [pc, #96]	@ (8000db8 <HAL_ADC_MspInit+0xc0>)
 8000d58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d60:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <HAL_ADC_MspInit+0xc0>)
 8000d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_ADC_MspInit+0xc0>)
 8000d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d74:	4a10      	ldr	r2, [pc, #64]	@ (8000db8 <HAL_ADC_MspInit+0xc0>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <HAL_ADC_MspInit+0xc0>)
 8000d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d92:	2303      	movs	r3, #3
 8000d94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <HAL_ADC_MspInit+0xc4>)
 8000da6:	f001 f937 	bl	8002018 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000daa:	bf00      	nop
 8000dac:	37e8      	adds	r7, #232	@ 0xe8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	42028000 	.word	0x42028000
 8000db8:	46020c00 	.word	0x46020c00
 8000dbc:	42020800 	.word	0x42020800

08000dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b0bc      	sub	sp, #240	@ 0xf0
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	22c0      	movs	r2, #192	@ 0xc0
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f009 fb5d 	bl	800a4a0 <memset>
  if(huart->Instance==USART1)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a54      	ldr	r2, [pc, #336]	@ (8000f3c <HAL_UART_MspInit+0x17c>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d14e      	bne.n	8000e8e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000df0:	f04f 0201 	mov.w	r2, #1
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 ff57 	bl	8004cb8 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000e10:	f7ff ff4e 	bl	8000cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e14:	4b4a      	ldr	r3, [pc, #296]	@ (8000f40 <HAL_UART_MspInit+0x180>)
 8000e16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e1a:	4a49      	ldr	r2, [pc, #292]	@ (8000f40 <HAL_UART_MspInit+0x180>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e20:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000e24:	4b46      	ldr	r3, [pc, #280]	@ (8000f40 <HAL_UART_MspInit+0x180>)
 8000e26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <HAL_UART_MspInit+0x180>)
 8000e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e38:	4a41      	ldr	r2, [pc, #260]	@ (8000f40 <HAL_UART_MspInit+0x180>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e42:	4b3f      	ldr	r3, [pc, #252]	@ (8000f40 <HAL_UART_MspInit+0x180>)
 8000e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000e50:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e74:	4619      	mov	r1, r3
 8000e76:	4833      	ldr	r0, [pc, #204]	@ (8000f44 <HAL_UART_MspInit+0x184>)
 8000e78:	f001 f8ce 	bl	8002018 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	203d      	movs	r0, #61	@ 0x3d
 8000e82:	f000 ff47 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e86:	203d      	movs	r0, #61	@ 0x3d
 8000e88:	f000 ff5e 	bl	8001d48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e8c:	e051      	b.n	8000f32 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART2)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a2d      	ldr	r2, [pc, #180]	@ (8000f48 <HAL_UART_MspInit+0x188>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d14c      	bne.n	8000f32 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e98:	f04f 0202 	mov.w	r2, #2
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 ff03 	bl	8004cb8 <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8000eb8:	f7ff fefa 	bl	8000cb0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ebc:	4b20      	ldr	r3, [pc, #128]	@ (8000f40 <HAL_UART_MspInit+0x180>)
 8000ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8000f40 <HAL_UART_MspInit+0x180>)
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <HAL_UART_MspInit+0x180>)
 8000ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <HAL_UART_MspInit+0x180>)
 8000edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ee0:	4a17      	ldr	r2, [pc, #92]	@ (8000f40 <HAL_UART_MspInit+0x180>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <HAL_UART_MspInit+0x180>)
 8000eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ef8:	230c      	movs	r3, #12
 8000efa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f10:	2307      	movs	r3, #7
 8000f12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4809      	ldr	r0, [pc, #36]	@ (8000f44 <HAL_UART_MspInit+0x184>)
 8000f1e:	f001 f87b 	bl	8002018 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	203e      	movs	r0, #62	@ 0x3e
 8000f28:	f000 fef4 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f2c:	203e      	movs	r0, #62	@ 0x3e
 8000f2e:	f000 ff0b 	bl	8001d48 <HAL_NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	37f0      	adds	r7, #240	@ 0xf0
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40013800 	.word	0x40013800
 8000f40:	46020c00 	.word	0x46020c00
 8000f44:	42020000 	.word	0x42020000
 8000f48:	40004400 	.word	0x40004400

08000f4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0bc      	sub	sp, #240	@ 0xf0
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f64:	f107 0318 	add.w	r3, r7, #24
 8000f68:	22c0      	movs	r2, #192	@ 0xc0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f009 fa97 	bl	800a4a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a3c      	ldr	r2, [pc, #240]	@ (8001068 <HAL_PCD_MspInit+0x11c>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d171      	bne.n	8001060 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f7c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8e:	f107 0318 	add.w	r3, r7, #24
 8000f92:	4618      	mov	r0, r3
 8000f94:	f003 fe90 	bl	8004cb8 <HAL_RCCEx_PeriphCLKConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000f9e:	f7ff fe87 	bl	8000cb0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b32      	ldr	r3, [pc, #200]	@ (800106c <HAL_PCD_MspInit+0x120>)
 8000fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa8:	4a30      	ldr	r2, [pc, #192]	@ (800106c <HAL_PCD_MspInit+0x120>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800106c <HAL_PCD_MspInit+0x120>)
 8000fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000fc0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000fda:	230a      	movs	r3, #10
 8000fdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4822      	ldr	r0, [pc, #136]	@ (8001070 <HAL_PCD_MspInit+0x124>)
 8000fe8:	f001 f816 	bl	8002018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000fec:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <HAL_PCD_MspInit+0x120>)
 8000fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800106c <HAL_PCD_MspInit+0x120>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <HAL_PCD_MspInit+0x120>)
 8000ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800100a:	4b18      	ldr	r3, [pc, #96]	@ (800106c <HAL_PCD_MspInit+0x120>)
 800100c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	2b00      	cmp	r3, #0
 8001016:	d119      	bne.n	800104c <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	4b14      	ldr	r3, [pc, #80]	@ (800106c <HAL_PCD_MspInit+0x120>)
 800101a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800101e:	4a13      	ldr	r2, [pc, #76]	@ (800106c <HAL_PCD_MspInit+0x120>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001028:	4b10      	ldr	r3, [pc, #64]	@ (800106c <HAL_PCD_MspInit+0x120>)
 800102a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001036:	f002 fb63 	bl	8003700 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <HAL_PCD_MspInit+0x120>)
 800103c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001040:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <HAL_PCD_MspInit+0x120>)
 8001042:	f023 0304 	bic.w	r3, r3, #4
 8001046:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800104a:	e001      	b.n	8001050 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800104c:	f002 fb58 	bl	8003700 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	2049      	movs	r0, #73	@ 0x49
 8001056:	f000 fe5d 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800105a:	2049      	movs	r0, #73	@ 0x49
 800105c:	f000 fe74 	bl	8001d48 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001060:	bf00      	nop
 8001062:	37f0      	adds	r7, #240	@ 0xf0
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	42040000 	.word	0x42040000
 800106c:	46020c00 	.word	0x46020c00
 8001070:	42020000 	.word	0x42020000

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <NMI_Handler+0x4>

0800107c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <MemManage_Handler+0x4>

0800108c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <UsageFault_Handler+0x4>

0800109c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ca:	f000 f95f 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <USART1_IRQHandler+0x10>)
 80010da:	f006 fbd5 	bl	8007888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000120 	.word	0x20000120

080010e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <USART2_IRQHandler+0x10>)
 80010ee:	f006 fbcb 	bl	8007888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001b4 	.word	0x200001b4

080010fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <OTG_FS_IRQHandler+0x10>)
 8001102:	f001 fac1 	bl	8002688 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000248 	.word	0x20000248

08001110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001118:	4a14      	ldr	r2, [pc, #80]	@ (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001124:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	@ (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001140:	f009 f9b6 	bl	800a4b0 <__errno>
 8001144:	4603      	mov	r3, r0
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e009      	b.n	8001164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001156:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a05      	ldr	r2, [pc, #20]	@ (8001174 <_sbrk+0x64>)
 8001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200c0000 	.word	0x200c0000
 8001170:	00000400 	.word	0x00000400
 8001174:	20000744 	.word	0x20000744
 8001178:	20000898 	.word	0x20000898

0800117c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <SystemInit+0x68>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001186:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <SystemInit+0x68>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001190:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <SystemInit+0x6c>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001196:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <SystemInit+0x6c>)
 8001198:	2200      	movs	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <SystemInit+0x6c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80011a2:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <SystemInit+0x6c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <SystemInit+0x6c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0e      	ldr	r2, [pc, #56]	@ (80011e8 <SystemInit+0x6c>)
 80011ae:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80011b2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80011b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80011b8:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <SystemInit+0x6c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <SystemInit+0x6c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <SystemInit+0x6c>)
 80011c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80011ca:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <SystemInit+0x6c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <SystemInit+0x68>)
 80011d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011d6:	609a      	str	r2, [r3, #8]
  #endif
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	46020c00 	.word	0x46020c00

080011ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001224 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011f0:	f7ff ffc4 	bl	800117c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011f6:	e003      	b.n	8001200 <LoopCopyDataInit>

080011f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011fe:	3104      	adds	r1, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001200:	480a      	ldr	r0, [pc, #40]	@ (800122c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001204:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001206:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001208:	d3f6      	bcc.n	80011f8 <CopyDataInit>
	ldr	r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <LoopForever+0x12>)
	b	LoopFillZerobss
 800120c:	e002      	b.n	8001214 <LoopFillZerobss>

0800120e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800120e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001210:	f842 3b04 	str.w	r3, [r2], #4

08001214 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <LoopForever+0x16>)
	cmp	r2, r3
 8001216:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001218:	d3f9      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f009 f94f 	bl	800a4bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121e:	f7ff fa99 	bl	8000754 <main>

08001222 <LoopForever>:

LoopForever:
    b LoopForever
 8001222:	e7fe      	b.n	8001222 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001224:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001228:	0800af48 	.word	0x0800af48
	ldr	r0, =_sdata
 800122c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001230:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8001234:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001238:	20000894 	.word	0x20000894

0800123c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_IRQHandler>
	...

08001240 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <HAL_Init+0x50>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a11      	ldr	r2, [pc, #68]	@ (8001290 <HAL_Init+0x50>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 fd54 	bl	8001cfe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001256:	f003 fb51 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 800125a:	4602      	mov	r2, r0
 800125c:	4b0d      	ldr	r3, [pc, #52]	@ (8001294 <HAL_Init+0x54>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	f003 030f 	and.w	r3, r3, #15
 8001264:	490c      	ldr	r1, [pc, #48]	@ (8001298 <HAL_Init+0x58>)
 8001266:	5ccb      	ldrb	r3, [r1, r3]
 8001268:	fa22 f303 	lsr.w	r3, r2, r3
 800126c:	4a0b      	ldr	r2, [pc, #44]	@ (800129c <HAL_Init+0x5c>)
 800126e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001270:	2004      	movs	r0, #4
 8001272:	f000 fd99 	bl	8001da8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001276:	2000      	movs	r0, #0
 8001278:	f000 f812 	bl	80012a0 <HAL_InitTick>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e002      	b.n	800128c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001286:	f7ff fd19 	bl	8000cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40022000 	.word	0x40022000
 8001294:	46020c00 	.word	0x46020c00
 8001298:	0800ae04 	.word	0x0800ae04
 800129c:	2000001c 	.word	0x2000001c

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80012ac:	4b33      	ldr	r3, [pc, #204]	@ (800137c <HAL_InitTick+0xdc>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e05c      	b.n	8001372 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80012b8:	4b31      	ldr	r3, [pc, #196]	@ (8001380 <HAL_InitTick+0xe0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d10c      	bne.n	80012de <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80012c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <HAL_InitTick+0xe4>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b2c      	ldr	r3, [pc, #176]	@ (800137c <HAL_InitTick+0xdc>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	e037      	b.n	800134e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80012de:	f000 fdbb 	bl	8001e58 <HAL_SYSTICK_GetCLKSourceConfig>
 80012e2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d023      	beq.n	8001332 <HAL_InitTick+0x92>
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d82d      	bhi.n	800134c <HAL_InitTick+0xac>
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_InitTick+0x5e>
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d00d      	beq.n	8001318 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80012fc:	e026      	b.n	800134c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80012fe:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <HAL_InitTick+0xe4>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <HAL_InitTick+0xdc>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800130c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001310:	fbb2 f3f3 	udiv	r3, r2, r3
 8001314:	60fb      	str	r3, [r7, #12]
        break;
 8001316:	e01a      	b.n	800134e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001318:	4b18      	ldr	r3, [pc, #96]	@ (800137c <HAL_InitTick+0xdc>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001322:	fbb3 f3f2 	udiv	r3, r3, r2
 8001326:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	60fb      	str	r3, [r7, #12]
        break;
 8001330:	e00d      	b.n	800134e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001332:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_InitTick+0xdc>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001340:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001344:	fbb2 f3f3 	udiv	r3, r2, r3
 8001348:	60fb      	str	r3, [r7, #12]
        break;
 800134a:	e000      	b.n	800134e <HAL_InitTick+0xae>
        break;
 800134c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 fd08 	bl	8001d64 <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e009      	b.n	8001372 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135e:	2200      	movs	r2, #0
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	f04f 30ff 	mov.w	r0, #4294967295
 8001366:	f000 fcd5 	bl	8001d14 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800136a:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <HAL_InitTick+0xe8>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000024 	.word	0x20000024
 8001380:	e000e010 	.word	0xe000e010
 8001384:	2000001c 	.word	0x2000001c
 8001388:	20000020 	.word	0x20000020

0800138c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000024 	.word	0x20000024
 80013b0:	20000748 	.word	0x20000748

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000748 	.word	0x20000748

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff ffee 	bl	80013b4 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <HAL_Delay+0x44>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f2:	bf00      	nop
 80013f4:	f7ff ffde 	bl	80013b4 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000024 	.word	0x20000024

08001414 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	601a      	str	r2, [r3, #0]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <LL_ADC_SetResolution+0x3c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d104      	bne.n	800145c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	3b01      	subs	r3, #1
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f023 020c 	bic.w	r2, r3, #12
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	60da      	str	r2, [r3, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	46021000 	.word	0x46021000

0800147c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800148e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	2a00      	cmp	r2, #0
 80014a6:	d002      	beq.n	80014ae <LL_ADC_SetGainCompensation+0x32>
 80014a8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80014ac:	e000      	b.n	80014b0 <LL_ADC_SetGainCompensation+0x34>
 80014ae:	2200      	movs	r2, #0
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b085      	sub	sp, #20
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2107      	movs	r1, #7
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	401a      	ands	r2, r3
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	431a      	orrs	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001510:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6093      	str	r3, [r2, #8]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001538:	d101      	bne.n	800153e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800155c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001560:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	609a      	str	r2, [r3, #8]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001584:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001588:	d101      	bne.n	800158e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <LL_ADC_IsEnabled+0x18>
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <LL_ADC_IsEnabled+0x1a>
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d101      	bne.n	80015da <LL_ADC_REG_IsConversionOngoing+0x18>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d101      	bne.n	8001600 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	@ 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e2b3      	b.n	8001b98 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a8b      	ldr	r2, [pc, #556]	@ (800186c <HAL_ADC_Init+0x25c>)
 800163e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001644:	2b00      	cmp	r3, #0
 8001646:	d109      	bne.n	800165c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fb55 	bl	8000cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5f 	bl	8001524 <LL_ADC_IsDeepPowerDownEnabled>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d004      	beq.n	8001676 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff45 	bl	8001500 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff7a 	bl	8001574 <LL_ADC_IsInternalRegulatorEnabled>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d115      	bne.n	80016b2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff5e 	bl	800154c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001690:	4b77      	ldr	r3, [pc, #476]	@ (8001870 <HAL_ADC_Init+0x260>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	099b      	lsrs	r3, r3, #6
 8001696:	4a77      	ldr	r2, [pc, #476]	@ (8001874 <HAL_ADC_Init+0x264>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	3301      	adds	r3, #1
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016a4:	e002      	b.n	80016ac <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f9      	bne.n	80016a6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff5c 	bl	8001574 <LL_ADC_IsInternalRegulatorEnabled>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10e      	bne.n	80016e0 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80016c6:	f043 0210 	orr.w	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff6c 	bl	80015c2 <LL_ADC_REG_IsConversionOngoing>
 80016ea:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f040 8244 	bne.w	8001b82 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f040 8240 	bne.w	8001b82 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001706:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800170a:	f043 0202 	orr.w	r2, r3, #2
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff40 	bl	800159c <LL_ADC_IsEnabled>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d140      	bne.n	80017a4 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a51      	ldr	r2, [pc, #324]	@ (800186c <HAL_ADC_Init+0x25c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d028      	beq.n	800177e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a51      	ldr	r2, [pc, #324]	@ (8001878 <HAL_ADC_Init+0x268>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d109      	bne.n	800174a <HAL_ADC_Init+0x13a>
 8001736:	4850      	ldr	r0, [pc, #320]	@ (8001878 <HAL_ADC_Init+0x268>)
 8001738:	f7ff ff30 	bl	800159c <LL_ADC_IsEnabled>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	bf0c      	ite	eq
 8001742:	2301      	moveq	r3, #1
 8001744:	2300      	movne	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	e008      	b.n	800175c <HAL_ADC_Init+0x14c>
 800174a:	4848      	ldr	r0, [pc, #288]	@ (800186c <HAL_ADC_Init+0x25c>)
 800174c:	f7ff ff26 	bl	800159c <LL_ADC_IsEnabled>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	bf0c      	ite	eq
 8001756:	2301      	moveq	r3, #1
 8001758:	2300      	movne	r3, #0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d021      	beq.n	80017a4 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a44      	ldr	r2, [pc, #272]	@ (8001878 <HAL_ADC_Init+0x268>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d101      	bne.n	800176e <HAL_ADC_Init+0x15e>
 800176a:	4a44      	ldr	r2, [pc, #272]	@ (800187c <HAL_ADC_Init+0x26c>)
 800176c:	e000      	b.n	8001770 <HAL_ADC_Init+0x160>
 800176e:	4a44      	ldr	r2, [pc, #272]	@ (8001880 <HAL_ADC_Init+0x270>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4619      	mov	r1, r3
 8001776:	4610      	mov	r0, r2
 8001778:	f7ff fe4c 	bl	8001414 <LL_ADC_SetCommonClock>
 800177c:	e012      	b.n	80017a4 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	4619      	mov	r1, r3
 8001788:	4610      	mov	r0, r2
 800178a:	f7ff fe57 	bl	800143c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800178e:	4b3c      	ldr	r3, [pc, #240]	@ (8001880 <HAL_ADC_Init+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800179e:	4938      	ldr	r1, [pc, #224]	@ (8001880 <HAL_ADC_Init+0x270>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a30      	ldr	r2, [pc, #192]	@ (800186c <HAL_ADC_Init+0x25c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d010      	beq.n	80017d0 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017b4:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80017ba:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80017c0:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80017c8:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80017ca:	4313      	orrs	r3, r2
 80017cc:	623b      	str	r3, [r7, #32]
 80017ce:	e030      	b.n	8001832 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7f1b      	ldrb	r3, [r3, #28]
 80017d4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017dc:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017de:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80017e4:	2a00      	cmp	r2, #0
 80017e6:	d002      	beq.n	80017ee <HAL_ADC_Init+0x1de>
 80017e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017ec:	e000      	b.n	80017f0 <HAL_ADC_Init+0x1e0>
 80017ee:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017f0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80017f6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da04      	bge.n	800180a <HAL_ADC_Init+0x1fa>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001808:	e001      	b.n	800180e <HAL_ADC_Init+0x1fe>
 800180a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 800180e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4918      	ldr	r1, [pc, #96]	@ (8001878 <HAL_ADC_Init+0x268>)
 8001816:	428b      	cmp	r3, r1
 8001818:	d103      	bne.n	8001822 <HAL_ADC_Init+0x212>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001820:	e003      	b.n	800182a <HAL_ADC_Init+0x21a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001828:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800182a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800182c:	6a3a      	ldr	r2, [r7, #32]
 800182e:	4313      	orrs	r3, r2
 8001830:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001838:	2b01      	cmp	r3, #1
 800183a:	d12f      	bne.n	800189c <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <HAL_ADC_Init+0x25c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d007      	beq.n	8001856 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	3b01      	subs	r3, #1
 800184c:	045b      	lsls	r3, r3, #17
 800184e:	6a3a      	ldr	r2, [r7, #32]
 8001850:	4313      	orrs	r3, r2
 8001852:	623b      	str	r3, [r7, #32]
 8001854:	e022      	b.n	800189c <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800185c:	2b00      	cmp	r3, #0
 800185e:	d111      	bne.n	8001884 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001866:	623b      	str	r3, [r7, #32]
 8001868:	e018      	b.n	800189c <HAL_ADC_Init+0x28c>
 800186a:	bf00      	nop
 800186c:	46021000 	.word	0x46021000
 8001870:	2000001c 	.word	0x2000001c
 8001874:	053e2d63 	.word	0x053e2d63
 8001878:	42028000 	.word	0x42028000
 800187c:	42028308 	.word	0x42028308
 8001880:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001888:	f043 0220 	orr.w	r2, r3, #32
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a92      	ldr	r2, [pc, #584]	@ (8001aec <HAL_ADC_Init+0x4dc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d018      	beq.n	80018d8 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ba:	4313      	orrs	r3, r2
 80018bc:	6a3a      	ldr	r2, [r7, #32]
 80018be:	4313      	orrs	r3, r2
 80018c0:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	4b89      	ldr	r3, [pc, #548]	@ (8001af0 <HAL_ADC_Init+0x4e0>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	6a39      	ldr	r1, [r7, #32]
 80018d2:	430b      	orrs	r3, r1
 80018d4:	60d3      	str	r3, [r2, #12]
 80018d6:	e031      	b.n	800193c <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d009      	beq.n	80018f4 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018e4:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ec:	4313      	orrs	r3, r2
 80018ee:	6a3a      	ldr	r2, [r7, #32]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	4b7e      	ldr	r3, [pc, #504]	@ (8001af4 <HAL_ADC_Init+0x4e4>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	6a39      	ldr	r1, [r7, #32]
 8001904:	430b      	orrs	r3, r1
 8001906:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1a      	ldr	r2, [r3, #32]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001926:	2b00      	cmp	r3, #0
 8001928:	d008      	beq.n	800193c <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6a      	ldr	r2, [pc, #424]	@ (8001aec <HAL_ADC_Init+0x4dc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	f000 8093 	beq.w	8001a6e <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fe38 	bl	80015c2 <LL_ADC_REG_IsConversionOngoing>
 8001952:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fe45 	bl	80015e8 <LL_ADC_INJ_IsConversionOngoing>
 800195e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d161      	bne.n	8001a2a <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d15e      	bne.n	8001a2a <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7f1b      	ldrb	r3, [r3, #28]
 8001970:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4960      	ldr	r1, [pc, #384]	@ (8001af8 <HAL_ADC_Init+0x4e8>)
 8001978:	428b      	cmp	r3, r1
 800197a:	d102      	bne.n	8001982 <HAL_ADC_Init+0x372>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001980:	e002      	b.n	8001988 <HAL_ADC_Init+0x378>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001986:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001988:	4313      	orrs	r3, r2
 800198a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001996:	f023 0303 	bic.w	r3, r3, #3
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	6a39      	ldr	r1, [r7, #32]
 80019a0:	430b      	orrs	r3, r1
 80019a2:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d007      	beq.n	80019bc <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f7ff fd60 	bl	800147c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d11e      	bne.n	8001a04 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ca:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691a      	ldr	r2, [r3, #16]
 80019d2:	4b4a      	ldr	r3, [pc, #296]	@ (8001afc <HAL_ADC_Init+0x4ec>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80019da:	0411      	lsls	r1, r2, #16
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019e0:	4311      	orrs	r1, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80019e6:	4311      	orrs	r1, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80019ec:	4311      	orrs	r1, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80019f2:	0892      	lsrs	r2, r2, #2
 80019f4:	430a      	orrs	r2, r1
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0201 	orr.w	r2, r2, #1
 8001a00:	611a      	str	r2, [r3, #16]
 8001a02:	e007      	b.n	8001a14 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d10c      	bne.n	8001a4c <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a38:	f023 010f 	bic.w	r1, r3, #15
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a40:	1e5a      	subs	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a4a:	e007      	b.n	8001a5c <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 020f 	bic.w	r2, r2, #15
 8001a5a:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001a60:	f023 0303 	bic.w	r3, r3, #3
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001a6c:	e092      	b.n	8001b94 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d111      	bne.n	8001a9c <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001a80:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8001a86:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8001a8c:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691a      	ldr	r2, [r3, #16]
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <HAL_ADC_Init+0x4f0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	69f9      	ldr	r1, [r7, #28]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2100      	movs	r1, #0
 8001abc:	f7ff fd01 	bl	80014c2 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8001ace:	f7ff fcf8 	bl	80014c2 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d114      	bne.n	8001b04 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f062 020f 	orn	r2, r2, #15
 8001ae8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001aea:	e024      	b.n	8001b36 <HAL_ADC_Init+0x526>
 8001aec:	46021000 	.word	0x46021000
 8001af0:	fff0c013 	.word	0xfff0c013
 8001af4:	ffde800d 	.word	0xffde800d
 8001af8:	42028000 	.word	0x42028000
 8001afc:	fc00f81e 	.word	0xfc00f81e
 8001b00:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b0c:	d113      	bne.n	8001b36 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	f003 031c 	and.w	r3, r3, #28
 8001b20:	f06f 020f 	mvn.w	r2, #15
 8001b24:	fa02 f103 	lsl.w	r1, r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ba0 <HAL_ADC_Init+0x590>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	6a3a      	ldr	r2, [r7, #32]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d10b      	bne.n	8001b5e <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b50:	f023 0303 	bic.w	r3, r3, #3
 8001b54:	f043 0201 	orr.w	r2, r3, #1
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001b5c:	e01a      	b.n	8001b94 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b62:	f023 0312 	bic.w	r3, r3, #18
 8001b66:	f043 0210 	orr.w	r2, r3, #16
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001b80:	e008      	b.n	8001b94 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b86:	f043 0210 	orr.w	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8001b94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3728      	adds	r7, #40	@ 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	833ffff3 	.word	0x833ffff3

08001ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd6:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	60d3      	str	r3, [r2, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf0:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	f003 0307 	and.w	r3, r3, #7
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	db0b      	blt.n	8001c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	4907      	ldr	r1, [pc, #28]	@ (8001c40 <__NVIC_EnableIRQ+0x38>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	2001      	movs	r0, #1
 8001c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000e100 	.word	0xe000e100

08001c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	db0a      	blt.n	8001c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	490c      	ldr	r1, [pc, #48]	@ (8001c90 <__NVIC_SetPriority+0x4c>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	0112      	lsls	r2, r2, #4
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	440b      	add	r3, r1
 8001c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c6c:	e00a      	b.n	8001c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4908      	ldr	r1, [pc, #32]	@ (8001c94 <__NVIC_SetPriority+0x50>)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	3b04      	subs	r3, #4
 8001c7c:	0112      	lsls	r2, r2, #4
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	440b      	add	r3, r1
 8001c82:	761a      	strb	r2, [r3, #24]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000e100 	.word	0xe000e100
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	@ 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f1c3 0307 	rsb	r3, r3, #7
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	bf28      	it	cs
 8001cb6:	2304      	movcs	r3, #4
 8001cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	2b06      	cmp	r3, #6
 8001cc0:	d902      	bls.n	8001cc8 <NVIC_EncodePriority+0x30>
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3b03      	subs	r3, #3
 8001cc6:	e000      	b.n	8001cca <NVIC_EncodePriority+0x32>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	401a      	ands	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	43d9      	mvns	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	4313      	orrs	r3, r2
         );
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3724      	adds	r7, #36	@ 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ff4c 	bl	8001ba4 <__NVIC_SetPriorityGrouping>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d22:	f7ff ff63 	bl	8001bec <__NVIC_GetPriorityGrouping>
 8001d26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	68b9      	ldr	r1, [r7, #8]
 8001d2c:	6978      	ldr	r0, [r7, #20]
 8001d2e:	f7ff ffb3 	bl	8001c98 <NVIC_EncodePriority>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff82 	bl	8001c44 <__NVIC_SetPriority>
}
 8001d40:	bf00      	nop
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff56 	bl	8001c08 <__NVIC_EnableIRQ>
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d74:	d301      	bcc.n	8001d7a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00d      	b.n	8001d96 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001da4 <HAL_SYSTICK_Config+0x40>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001d82:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <HAL_SYSTICK_Config+0x40>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_SYSTICK_Config+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <HAL_SYSTICK_Config+0x40>)
 8001d8e:	f043 0303 	orr.w	r3, r3, #3
 8001d92:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d844      	bhi.n	8001e40 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001db6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dbc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbc:	08001ddf 	.word	0x08001ddf
 8001dc0:	08001dfd 	.word	0x08001dfd
 8001dc4:	08001e1f 	.word	0x08001e1f
 8001dc8:	08001e41 	.word	0x08001e41
 8001dcc:	08001dd1 	.word	0x08001dd1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8001e50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6013      	str	r3, [r2, #0]
      break;
 8001ddc:	e031      	b.n	8001e42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001dde:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001dea:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df0:	4a18      	ldr	r2, [pc, #96]	@ (8001e54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001df2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001df6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001dfa:	e022      	b.n	8001e42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001dfc:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a13      	ldr	r2, [pc, #76]	@ (8001e50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e02:	f023 0304 	bic.w	r3, r3, #4
 8001e06:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e0e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001e12:	4a10      	ldr	r2, [pc, #64]	@ (8001e54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001e1c:	e011      	b.n	8001e42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a0b      	ldr	r2, [pc, #44]	@ (8001e50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e24:	f023 0304 	bic.w	r3, r3, #4
 8001e28:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e30:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001e34:	4a07      	ldr	r2, [pc, #28]	@ (8001e54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001e3e:	e000      	b.n	8001e42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001e40:	bf00      	nop
  }
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010
 8001e54:	46020c00 	.word	0x46020c00

08001e58 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001e5e:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	e021      	b.n	8001eb4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001e70:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e76:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001e7a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e82:	d011      	beq.n	8001ea8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e8a:	d810      	bhi.n	8001eae <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e98:	d003      	beq.n	8001ea2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001e9a:	e008      	b.n	8001eae <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	607b      	str	r3, [r7, #4]
        break;
 8001ea0:	e008      	b.n	8001eb4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	607b      	str	r3, [r7, #4]
        break;
 8001ea6:	e005      	b.n	8001eb4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	607b      	str	r3, [r7, #4]
        break;
 8001eac:	e002      	b.n	8001eb4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
        break;
 8001eb2:	bf00      	nop
    }
  }
  return systick_source;
 8001eb4:	687b      	ldr	r3, [r7, #4]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e010 	.word	0xe000e010
 8001ec8:	46020c00 	.word	0x46020c00

08001ecc <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001ed4:	f7ff fa6e 	bl	80013b4 <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e06b      	b.n	8001fbc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d008      	beq.n	8001f02 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e05c      	b.n	8001fbc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0204 	orr.w	r2, r2, #4
 8001f10:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2205      	movs	r2, #5
 8001f16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001f1a:	e020      	b.n	8001f5e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001f1c:	f7ff fa4a 	bl	80013b4 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d919      	bls.n	8001f5e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2e:	f043 0210 	orr.w	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2203      	movs	r2, #3
 8001f3a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f4e:	2201      	movs	r2, #1
 8001f50:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e02e      	b.n	8001fbc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0d7      	beq.n	8001f1c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0202 	orr.w	r2, r2, #2
 8001f7a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001f8c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e019      	b.n	800200a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d004      	beq.n	8001fec <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e00e      	b.n	800200a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2204      	movs	r2, #4
 8001ff0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	@ 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800202a:	e1ba      	b.n	80023a2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 81aa 	beq.w	800239c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a55      	ldr	r2, [pc, #340]	@ (80021a0 <HAL_GPIO_Init+0x188>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d15d      	bne.n	800210c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002056:	2201      	movs	r2, #1
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	4013      	ands	r3, r2
 8002064:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0201 	and.w	r2, r3, #1
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	4313      	orrs	r3, r2
 8002078:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002080:	4a48      	ldr	r2, [pc, #288]	@ (80021a4 <HAL_GPIO_Init+0x18c>)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002088:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800208a:	4a46      	ldr	r2, [pc, #280]	@ (80021a4 <HAL_GPIO_Init+0x18c>)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	3208      	adds	r2, #8
 800209e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	220b      	movs	r2, #11
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	3208      	adds	r2, #8
 80020d6:	69f9      	ldr	r1, [r7, #28]
 80020d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	2202      	movs	r2, #2
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	4313      	orrs	r3, r2
 8002102:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	e067      	b.n	80021dc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x104>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b12      	cmp	r3, #18
 800211a:	d145      	bne.n	80021a8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002128:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	220f      	movs	r2, #15
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	4013      	ands	r3, r2
 800213e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f003 020f 	and.w	r2, r3, #15
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	4313      	orrs	r3, r2
 8002158:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3208      	adds	r2, #8
 8002162:	69f9      	ldr	r1, [r7, #28]
 8002164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	4013      	ands	r3, r2
 800217e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0203 	and.w	r2, r3, #3
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	4313      	orrs	r3, r2
 8002194:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e01e      	b.n	80021dc <HAL_GPIO_Init+0x1c4>
 800219e:	bf00      	nop
 80021a0:	46020000 	.word	0x46020000
 80021a4:	0800ae5c 	.word	0x0800ae5c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	4013      	ands	r3, r2
 80021be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0203 	and.w	r2, r3, #3
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d00b      	beq.n	80021fc <HAL_GPIO_Init+0x1e4>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d007      	beq.n	80021fc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021f0:	2b11      	cmp	r3, #17
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b12      	cmp	r3, #18
 80021fa:	d130      	bne.n	800225e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	4013      	ands	r3, r2
 8002212:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	4313      	orrs	r3, r2
 8002224:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002232:	2201      	movs	r2, #1
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	4013      	ands	r3, r2
 8002240:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	f003 0201 	and.w	r2, r3, #1
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	4313      	orrs	r3, r2
 8002256:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d017      	beq.n	8002296 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	4013      	ands	r3, r2
 800227c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	4313      	orrs	r3, r2
 800228e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d07c      	beq.n	800239c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80022a2:	4a47      	ldr	r2, [pc, #284]	@ (80023c0 <HAL_GPIO_Init+0x3a8>)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3318      	adds	r3, #24
 80022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	0a9a      	lsrs	r2, r3, #10
 80022ca:	4b3e      	ldr	r3, [pc, #248]	@ (80023c4 <HAL_GPIO_Init+0x3ac>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	f002 0203 	and.w	r2, r2, #3
 80022d4:	00d2      	lsls	r2, r2, #3
 80022d6:	4093      	lsls	r3, r2
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80022de:	4938      	ldr	r1, [pc, #224]	@ (80023c0 <HAL_GPIO_Init+0x3a8>)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3318      	adds	r3, #24
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80022ec:	4b34      	ldr	r3, [pc, #208]	@ (80023c0 <HAL_GPIO_Init+0x3a8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002310:	4a2b      	ldr	r2, [pc, #172]	@ (80023c0 <HAL_GPIO_Init+0x3a8>)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002316:	4b2a      	ldr	r3, [pc, #168]	@ (80023c0 <HAL_GPIO_Init+0x3a8>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43db      	mvns	r3, r3
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	4013      	ands	r3, r2
 8002324:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800233a:	4a21      	ldr	r2, [pc, #132]	@ (80023c0 <HAL_GPIO_Init+0x3a8>)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002340:	4b1f      	ldr	r3, [pc, #124]	@ (80023c0 <HAL_GPIO_Init+0x3a8>)
 8002342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002346:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	43db      	mvns	r3, r3
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	4013      	ands	r3, r2
 8002350:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002366:	4a16      	ldr	r2, [pc, #88]	@ (80023c0 <HAL_GPIO_Init+0x3a8>)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800236e:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <HAL_GPIO_Init+0x3a8>)
 8002370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002374:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	4013      	ands	r3, r2
 800237e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002394:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <HAL_GPIO_Init+0x3a8>)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3301      	adds	r3, #1
 80023a0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f47f ae3d 	bne.w	800202c <HAL_GPIO_Init+0x14>
  }
}
 80023b2:	bf00      	nop
 80023b4:	bf00      	nop
 80023b6:	3724      	adds	r7, #36	@ 0x24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	46022000 	.word	0x46022000
 80023c4:	002f7f7f 	.word	0x002f7f7f

080023c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d8:	787b      	ldrb	r3, [r7, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80023e4:	e002      	b.n	80023ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002404:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e007      	b.n	8002426 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002416:	4b07      	ldr	r3, [pc, #28]	@ (8002434 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 0204 	bic.w	r2, r3, #4
 800241e:	4905      	ldr	r1, [pc, #20]	@ (8002434 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	40030400 	.word	0x40030400

08002438 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800243c:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <HAL_ICACHE_Enable+0x1c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a04      	ldr	r2, [pc, #16]	@ (8002454 <HAL_ICACHE_Enable+0x1c>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40030400 	.word	0x40030400

08002458 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af02      	add	r7, sp, #8
 800245e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e108      	b.n	800267c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d106      	bne.n	800248a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7fe fd61 	bl	8000f4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2203      	movs	r2, #3
 800248e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	4a7b      	ldr	r2, [pc, #492]	@ (8002684 <HAL_PCD_Init+0x22c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d102      	bne.n	80024a0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f007 fadd 	bl	8009a64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7c1a      	ldrb	r2, [r3, #16]
 80024b2:	f88d 2000 	strb.w	r2, [sp]
 80024b6:	3304      	adds	r3, #4
 80024b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ba:	f007 fa04 	bl	80098c6 <USB_CoreInit>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0d5      	b.n	800267c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f007 fad5 	bl	8009a86 <USB_SetCurrentMode>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2202      	movs	r2, #2
 80024e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0c6      	b.n	800267c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e04a      	b.n	800258a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	3315      	adds	r3, #21
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	3314      	adds	r3, #20
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	b298      	uxth	r0, r3
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	332e      	adds	r3, #46	@ 0x2e
 8002530:	4602      	mov	r2, r0
 8002532:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	3318      	adds	r3, #24
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	331c      	adds	r3, #28
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	3320      	adds	r3, #32
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	3324      	adds	r3, #36	@ 0x24
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	3301      	adds	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	791b      	ldrb	r3, [r3, #4]
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	429a      	cmp	r2, r3
 8002592:	d3af      	bcc.n	80024f4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	e044      	b.n	8002624 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	3301      	adds	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	791b      	ldrb	r3, [r3, #4]
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	429a      	cmp	r2, r3
 800262c:	d3b5      	bcc.n	800259a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7c1a      	ldrb	r2, [r3, #16]
 8002636:	f88d 2000 	strb.w	r2, [sp]
 800263a:	3304      	adds	r3, #4
 800263c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800263e:	f007 fa6f 	bl	8009b20 <USB_DevInit>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e013      	b.n	800267c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7b1b      	ldrb	r3, [r3, #12]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d102      	bne.n	8002670 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 ff3c 	bl	80034e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f007 fd7d 	bl	800a174 <USB_DevDisconnect>

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	42040000 	.word	0x42040000

08002688 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b08d      	sub	sp, #52	@ 0x34
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f007 fe1c 	bl	800a2dc <USB_GetMode>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f040 84b9 	bne.w	800301e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f007 fd80 	bl	800a1b6 <USB_ReadInterrupts>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 84af 	beq.w	800301c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	0a1b      	lsrs	r3, r3, #8
 80026c8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f007 fd6d 	bl	800a1b6 <USB_ReadInterrupts>
 80026dc:	4603      	mov	r3, r0
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d107      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f002 0202 	and.w	r2, r2, #2
 80026f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f007 fd5b 	bl	800a1b6 <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b10      	cmp	r3, #16
 8002708:	d161      	bne.n	80027ce <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0210 	bic.w	r2, r2, #16
 8002718:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f003 020f 	and.w	r2, r3, #15
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	3304      	adds	r3, #4
 8002738:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	0c5b      	lsrs	r3, r3, #17
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	2b02      	cmp	r3, #2
 8002744:	d124      	bne.n	8002790 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d035      	beq.n	80027be <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800275c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002760:	b29b      	uxth	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	6a38      	ldr	r0, [r7, #32]
 8002766:	f007 fcad 	bl	800a0c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002776:	441a      	add	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002788:	441a      	add	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	615a      	str	r2, [r3, #20]
 800278e:	e016      	b.n	80027be <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	0c5b      	lsrs	r3, r3, #17
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	2b06      	cmp	r3, #6
 800279a:	d110      	bne.n	80027be <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027a2:	2208      	movs	r2, #8
 80027a4:	4619      	mov	r1, r3
 80027a6:	6a38      	ldr	r0, [r7, #32]
 80027a8:	f007 fc8c 	bl	800a0c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027b8:	441a      	add	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699a      	ldr	r2, [r3, #24]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0210 	orr.w	r2, r2, #16
 80027cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f007 fcef 	bl	800a1b6 <USB_ReadInterrupts>
 80027d8:	4603      	mov	r3, r0
 80027da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027de:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027e2:	f040 80a7 	bne.w	8002934 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f007 fcf4 	bl	800a1dc <USB_ReadDevAllOutEpInterrupt>
 80027f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80027f6:	e099      	b.n	800292c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 808e 	beq.w	8002920 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f007 fd18 	bl	800a244 <USB_ReadDevOutEPInterrupt>
 8002814:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00c      	beq.n	800283a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800282c:	461a      	mov	r2, r3
 800282e:	2301      	movs	r3, #1
 8002830:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002832:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 fd29 	bl	800328c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00c      	beq.n	800285e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002850:	461a      	mov	r2, r3
 8002852:	2308      	movs	r3, #8
 8002854:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002856:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fdff 	bl	800345c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002874:	461a      	mov	r2, r3
 8002876:	2310      	movs	r3, #16
 8002878:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d030      	beq.n	80028e6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800288c:	2b80      	cmp	r3, #128	@ 0x80
 800288e:	d109      	bne.n	80028a4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800289e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028a2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80028a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	3304      	adds	r3, #4
 80028b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	78db      	ldrb	r3, [r3, #3]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d108      	bne.n	80028d4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2200      	movs	r2, #0
 80028c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	4619      	mov	r1, r3
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fbf2 	bl	80030b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e0:	461a      	mov	r2, r3
 80028e2:	2302      	movs	r3, #2
 80028e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028fc:	461a      	mov	r2, r3
 80028fe:	2320      	movs	r3, #32
 8002900:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d009      	beq.n	8002920 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	4413      	add	r3, r2
 8002914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002918:	461a      	mov	r2, r3
 800291a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800291e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	3301      	adds	r3, #1
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002928:	085b      	lsrs	r3, r3, #1
 800292a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800292c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292e:	2b00      	cmp	r3, #0
 8002930:	f47f af62 	bne.w	80027f8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f007 fc3c 	bl	800a1b6 <USB_ReadInterrupts>
 800293e:	4603      	mov	r3, r0
 8002940:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002944:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002948:	f040 80db 	bne.w	8002b02 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f007 fc5d 	bl	800a210 <USB_ReadDevAllInEpInterrupt>
 8002956:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800295c:	e0cd      	b.n	8002afa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800295e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80c2 	beq.w	8002aee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f007 fc83 	bl	800a280 <USB_ReadDevInEPInterrupt>
 800297a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d057      	beq.n	8002a36 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	2201      	movs	r2, #1
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800299a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69f9      	ldr	r1, [r7, #28]
 80029a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80029a6:	4013      	ands	r3, r2
 80029a8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029b6:	461a      	mov	r2, r3
 80029b8:	2301      	movs	r3, #1
 80029ba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	799b      	ldrb	r3, [r3, #6]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d132      	bne.n	8002a2a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	3320      	adds	r3, #32
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4403      	add	r3, r0
 80029e4:	331c      	adds	r3, #28
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4419      	add	r1, r3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4403      	add	r3, r0
 80029f8:	3320      	adds	r3, #32
 80029fa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d113      	bne.n	8002a2a <HAL_PCD_IRQHandler+0x3a2>
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	3324      	adds	r3, #36	@ 0x24
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d108      	bne.n	8002a2a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a22:	461a      	mov	r2, r3
 8002a24:	2101      	movs	r1, #1
 8002a26:	f007 fc8b 	bl	800a340 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fb03 	bl	800303c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2308      	movs	r3, #8
 8002a50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a84:	461a      	mov	r2, r3
 8002a86:	2340      	movs	r3, #64	@ 0x40
 8002a88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d023      	beq.n	8002adc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a96:	6a38      	ldr	r0, [r7, #32]
 8002a98:	f007 f98e 	bl	8009db8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	3310      	adds	r3, #16
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	3304      	adds	r3, #4
 8002aae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	78db      	ldrb	r3, [r3, #3]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d108      	bne.n	8002aca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2200      	movs	r2, #0
 8002abc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fb03 	bl	80030d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2302      	movs	r3, #2
 8002ada:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ae6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fb42 	bl	8003172 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	3301      	adds	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f47f af2e 	bne.w	800295e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f007 fb55 	bl	800a1b6 <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b16:	d122      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d108      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b3e:	2100      	movs	r1, #0
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fcf5 	bl	8003530 <HAL_PCDEx_LPM_Callback>
 8002b46:	e002      	b.n	8002b4e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 faab 	bl	80030a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f007 fb27 	bl	800a1b6 <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b72:	d112      	bne.n	8002b9a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d102      	bne.n	8002b8a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fa83 	bl	8003090 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f007 fb09 	bl	800a1b6 <USB_ReadInterrupts>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002baa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bae:	d121      	bne.n	8002bf4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002bbe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d111      	bne.n	8002bee <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	f003 020f 	and.w	r2, r3, #15
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002be4:	2101      	movs	r1, #1
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fca2 	bl	8003530 <HAL_PCDEx_LPM_Callback>
 8002bec:	e002      	b.n	8002bf4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fa4e 	bl	8003090 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f007 fadc 	bl	800a1b6 <USB_ReadInterrupts>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c08:	f040 80b7 	bne.w	8002d7a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2110      	movs	r1, #16
 8002c26:	4618      	mov	r0, r3
 8002c28:	f007 f8c6 	bl	8009db8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c30:	e046      	b.n	8002cc0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c44:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c56:	0151      	lsls	r1, r2, #5
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	440a      	add	r2, r1
 8002c5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c72:	461a      	mov	r2, r3
 8002c74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c78:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c8a:	0151      	lsls	r1, r2, #5
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	440a      	add	r2, r1
 8002c90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002caa:	0151      	lsls	r1, r2, #5
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	440a      	add	r2, r1
 8002cb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cb4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002cb8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	791b      	ldrb	r3, [r3, #4]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d3b2      	bcc.n	8002c32 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cda:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002cde:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7bdb      	ldrb	r3, [r3, #15]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d016      	beq.n	8002d16 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cf8:	f043 030b 	orr.w	r3, r3, #11
 8002cfc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d0e:	f043 030b 	orr.w	r3, r3, #11
 8002d12:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d14:	e015      	b.n	8002d42 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d28:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d2c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d3c:	f043 030b 	orr.w	r3, r3, #11
 8002d40:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d50:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d54:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d64:	461a      	mov	r2, r3
 8002d66:	f007 faeb 	bl	800a340 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f007 fa19 	bl	800a1b6 <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d8e:	d123      	bne.n	8002dd8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f007 faaf 	bl	800a2f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f007 f883 	bl	8009eaa <USB_GetDevSpeed>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461a      	mov	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681c      	ldr	r4, [r3, #0]
 8002db0:	f001 fea6 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8002db4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f006 fdaf 	bl	8009920 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f95a 	bl	800307c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f007 f9ea 	bl	800a1b6 <USB_ReadInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d10a      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f93b 	bl	8003068 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f002 0208 	and.w	r2, r2, #8
 8002e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f007 f9d5 	bl	800a1b6 <USB_ReadInterrupts>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e12:	2b80      	cmp	r3, #128	@ 0x80
 8002e14:	d123      	bne.n	8002e5e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e22:	2301      	movs	r3, #1
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e26:	e014      	b.n	8002e52 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d105      	bne.n	8002e4c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	4619      	mov	r1, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f962 	bl	8003110 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	3301      	adds	r3, #1
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	791b      	ldrb	r3, [r3, #4]
 8002e56:	461a      	mov	r2, r3
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d3e4      	bcc.n	8002e28 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f007 f9a7 	bl	800a1b6 <USB_ReadInterrupts>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e72:	d13c      	bne.n	8002eee <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e74:	2301      	movs	r3, #1
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e78:	e02b      	b.n	8002ed2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3318      	adds	r3, #24
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d115      	bne.n	8002ecc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ea0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	da12      	bge.n	8002ecc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3317      	adds	r3, #23
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f922 	bl	8003110 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	3301      	adds	r3, #1
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	791b      	ldrb	r3, [r3, #4]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d3cd      	bcc.n	8002e7a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002eec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f007 f95f 	bl	800a1b6 <USB_ReadInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002efe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f02:	d156      	bne.n	8002fb2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f04:	2301      	movs	r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f08:	e045      	b.n	8002f96 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d12e      	bne.n	8002f90 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f32:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	da2b      	bge.n	8002f90 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f44:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d121      	bne.n	8002f90 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f5e:	2201      	movs	r2, #1
 8002f60:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f8c:	6053      	str	r3, [r2, #4]
            break;
 8002f8e:	e008      	b.n	8002fa2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	3301      	adds	r3, #1
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	791b      	ldrb	r3, [r3, #4]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d3b3      	bcc.n	8002f0a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f007 f8fd 	bl	800a1b6 <USB_ReadInterrupts>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc6:	d10a      	bne.n	8002fde <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f88d 	bl	80030e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f007 f8e7 	bl	800a1b6 <USB_ReadInterrupts>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d115      	bne.n	800301e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f879 	bl	80030fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	e000      	b.n	800301e <HAL_PCD_IRQHandler+0x996>
      return;
 800301c:	bf00      	nop
    }
  }
}
 800301e:	3734      	adds	r7, #52	@ 0x34
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}

08003024 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800311c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003120:	2b00      	cmp	r3, #0
 8003122:	da0c      	bge.n	800313e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	f003 020f 	and.w	r2, r3, #15
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	3310      	adds	r3, #16
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	4413      	add	r3, r2
 8003138:	3304      	adds	r3, #4
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	e00c      	b.n	8003158 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	f003 020f 	and.w	r2, r3, #15
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	3304      	adds	r3, #4
 8003156:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68f9      	ldr	r1, [r7, #12]
 800315e:	4618      	mov	r0, r3
 8003160:	f006 fec8 	bl	8009ef4 <USB_EPStopXfer>
 8003164:	4603      	mov	r3, r0
 8003166:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003168:	7afb      	ldrb	r3, [r7, #11]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b08a      	sub	sp, #40	@ 0x28
 8003176:	af02      	add	r7, sp, #8
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	3310      	adds	r3, #16
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	3304      	adds	r3, #4
 8003198:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d901      	bls.n	80031aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e06b      	b.n	8003282 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d902      	bls.n	80031c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3303      	adds	r3, #3
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031ce:	e02a      	b.n	8003226 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d902      	bls.n	80031ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	3303      	adds	r3, #3
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68d9      	ldr	r1, [r3, #12]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	4603      	mov	r3, r0
 8003208:	6978      	ldr	r0, [r7, #20]
 800320a:	f006 ff1d 	bl	800a048 <USB_WritePacket>

    ep->xfer_buff  += len;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	441a      	add	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	441a      	add	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	429a      	cmp	r2, r3
 800323a:	d809      	bhi.n	8003250 <PCD_WriteEmptyTxFifo+0xde>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003244:	429a      	cmp	r2, r3
 8003246:	d203      	bcs.n	8003250 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1bf      	bne.n	80031d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	429a      	cmp	r2, r3
 800325a:	d811      	bhi.n	8003280 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	2201      	movs	r2, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	43db      	mvns	r3, r3
 8003276:	6939      	ldr	r1, [r7, #16]
 8003278:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800327c:	4013      	ands	r3, r2
 800327e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	333c      	adds	r3, #60	@ 0x3c
 80032a4:	3304      	adds	r3, #4
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	799b      	ldrb	r3, [r3, #6]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d17b      	bne.n	80033ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d015      	beq.n	80032f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4a61      	ldr	r2, [pc, #388]	@ (8003454 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	f240 80b9 	bls.w	8003448 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80b3 	beq.w	8003448 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ee:	461a      	mov	r2, r3
 80032f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032f4:	6093      	str	r3, [r2, #8]
 80032f6:	e0a7      	b.n	8003448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800330e:	461a      	mov	r2, r3
 8003310:	2320      	movs	r3, #32
 8003312:	6093      	str	r3, [r2, #8]
 8003314:	e098      	b.n	8003448 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 8093 	bne.w	8003448 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	4a4b      	ldr	r2, [pc, #300]	@ (8003454 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d90f      	bls.n	800334a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003340:	461a      	mov	r2, r3
 8003342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003346:	6093      	str	r3, [r2, #8]
 8003348:	e07e      	b.n	8003448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	4413      	add	r3, r2
 800335c:	3304      	adds	r3, #4
 800335e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a1a      	ldr	r2, [r3, #32]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	0159      	lsls	r1, r3, #5
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	440b      	add	r3, r1
 800336c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003376:	1ad2      	subs	r2, r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d114      	bne.n	80033ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003394:	461a      	mov	r2, r3
 8003396:	2101      	movs	r1, #1
 8003398:	f006 ffd2 	bl	800a340 <USB_EP0_OutStart>
 800339c:	e006      	b.n	80033ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	441a      	add	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	4619      	mov	r1, r3
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff fe36 	bl	8003024 <HAL_PCD_DataOutStageCallback>
 80033b8:	e046      	b.n	8003448 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	4a26      	ldr	r2, [pc, #152]	@ (8003458 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d124      	bne.n	800340c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d8:	461a      	mov	r2, r3
 80033da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033de:	6093      	str	r3, [r2, #8]
 80033e0:	e032      	b.n	8003448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033f8:	461a      	mov	r2, r3
 80033fa:	2320      	movs	r3, #32
 80033fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	4619      	mov	r1, r3
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff fe0d 	bl	8003024 <HAL_PCD_DataOutStageCallback>
 800340a:	e01d      	b.n	8003448 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d114      	bne.n	800343c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d108      	bne.n	800343c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003434:	461a      	mov	r2, r3
 8003436:	2100      	movs	r1, #0
 8003438:	f006 ff82 	bl	800a340 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	4619      	mov	r1, r3
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff fdee 	bl	8003024 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	4f54300a 	.word	0x4f54300a
 8003458:	4f54310a 	.word	0x4f54310a

0800345c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	333c      	adds	r3, #60	@ 0x3c
 8003474:	3304      	adds	r3, #4
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4a15      	ldr	r2, [pc, #84]	@ (80034e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d90e      	bls.n	80034b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003498:	2b00      	cmp	r3, #0
 800349a:	d009      	beq.n	80034b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a8:	461a      	mov	r2, r3
 80034aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff fdcf 	bl	8003054 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4a0a      	ldr	r2, [pc, #40]	@ (80034e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d90c      	bls.n	80034d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	799b      	ldrb	r3, [r3, #6]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d108      	bne.n	80034d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034d0:	461a      	mov	r2, r3
 80034d2:	2101      	movs	r1, #1
 80034d4:	f006 ff34 	bl	800a340 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	4f54300a 	.word	0x4f54300a

080034e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800351a:	f043 0303 	orr.w	r3, r3, #3
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003550:	4b39      	ldr	r3, [pc, #228]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003554:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003558:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	429a      	cmp	r2, r3
 8003560:	d10b      	bne.n	800357a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003568:	d905      	bls.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800356a:	4b33      	ldr	r3, [pc, #204]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	4a32      	ldr	r2, [pc, #200]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003574:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e057      	b.n	800362a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003580:	d90a      	bls.n	8003598 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003582:	4b2d      	ldr	r3, [pc, #180]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4313      	orrs	r3, r2
 800358e:	4a2a      	ldr	r2, [pc, #168]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003594:	60d3      	str	r3, [r2, #12]
 8003596:	e007      	b.n	80035a8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003598:	4b27      	ldr	r3, [pc, #156]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80035a0:	4925      	ldr	r1, [pc, #148]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80035a8:	4b24      	ldr	r3, [pc, #144]	@ (800363c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a24      	ldr	r2, [pc, #144]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	2232      	movs	r2, #50	@ 0x32
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	4a21      	ldr	r2, [pc, #132]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	3301      	adds	r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80035c6:	e002      	b.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80035ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_PWREx_ControlVoltageScaling+0x98>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f3      	bne.n	80035c8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01b      	beq.n	800361e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80035e6:	4b15      	ldr	r3, [pc, #84]	@ (800363c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a15      	ldr	r2, [pc, #84]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	099b      	lsrs	r3, r3, #6
 80035f2:	2232      	movs	r2, #50	@ 0x32
 80035f4:	fb02 f303 	mul.w	r3, r2, r3
 80035f8:	4a11      	ldr	r2, [pc, #68]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	099b      	lsrs	r3, r3, #6
 8003600:	3301      	adds	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003604:	e002      	b.n	800360c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3b01      	subs	r3, #1
 800360a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800360c:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800360e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003610:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f3      	bne.n	8003606 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e000      	b.n	800362a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	46020800 	.word	0x46020800
 800363c:	2000001c 	.word	0x2000001c
 8003640:	10624dd3 	.word	0x10624dd3

08003644 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003648:	4b04      	ldr	r3, [pc, #16]	@ (800365c <HAL_PWREx_GetVoltageRange+0x18>)
 800364a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	46020800 	.word	0x46020800

08003660 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003668:	4b22      	ldr	r3, [pc, #136]	@ (80036f4 <HAL_PWREx_ConfigSupply+0x94>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a22      	ldr	r2, [pc, #136]	@ (80036f8 <HAL_PWREx_ConfigSupply+0x98>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	099b      	lsrs	r3, r3, #6
 8003674:	2232      	movs	r2, #50	@ 0x32
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	4a1f      	ldr	r2, [pc, #124]	@ (80036f8 <HAL_PWREx_ConfigSupply+0x98>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	3301      	adds	r3, #1
 8003684:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d113      	bne.n	80036b4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800368c:	4b1b      	ldr	r3, [pc, #108]	@ (80036fc <HAL_PWREx_ConfigSupply+0x9c>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a1a      	ldr	r2, [pc, #104]	@ (80036fc <HAL_PWREx_ConfigSupply+0x9c>)
 8003692:	f023 0302 	bic.w	r3, r3, #2
 8003696:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003698:	e002      	b.n	80036a0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3b01      	subs	r3, #1
 800369e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80036a0:	4b16      	ldr	r3, [pc, #88]	@ (80036fc <HAL_PWREx_ConfigSupply+0x9c>)
 80036a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d116      	bne.n	80036da <HAL_PWREx_ConfigSupply+0x7a>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f3      	bne.n	800369a <HAL_PWREx_ConfigSupply+0x3a>
 80036b2:	e012      	b.n	80036da <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80036b4:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <HAL_PWREx_ConfigSupply+0x9c>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a10      	ldr	r2, [pc, #64]	@ (80036fc <HAL_PWREx_ConfigSupply+0x9c>)
 80036ba:	f043 0302 	orr.w	r3, r3, #2
 80036be:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80036c0:	e002      	b.n	80036c8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80036c8:	4b0c      	ldr	r3, [pc, #48]	@ (80036fc <HAL_PWREx_ConfigSupply+0x9c>)
 80036ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <HAL_PWREx_ConfigSupply+0x7a>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f3      	bne.n	80036c2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e000      	b.n	80036e6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	2000001c 	.word	0x2000001c
 80036f8:	10624dd3 	.word	0x10624dd3
 80036fc:	46020800 	.word	0x46020800

08003700 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003704:	4b05      	ldr	r3, [pc, #20]	@ (800371c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	4a04      	ldr	r2, [pc, #16]	@ (800371c <HAL_PWREx_EnableVddUSB+0x1c>)
 800370a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800370e:	6113      	str	r3, [r2, #16]
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	46020800 	.word	0x46020800

08003720 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4a04      	ldr	r2, [pc, #16]	@ (800373c <HAL_PWREx_EnableVddIO2+0x1c>)
 800372a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800372e:	6113      	str	r3, [r2, #16]
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	46020800 	.word	0x46020800

08003740 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <HAL_PWREx_EnableVddA+0x1c>)
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	4a04      	ldr	r2, [pc, #16]	@ (800375c <HAL_PWREx_EnableVddA+0x1c>)
 800374a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800374e:	6113      	str	r3, [r2, #16]
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	46020800 	.word	0x46020800

08003760 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	@ 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003768:	2300      	movs	r3, #0
 800376a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	f000 bec8 	b.w	800450a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377a:	4b99      	ldr	r3, [pc, #612]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003784:	4b96      	ldr	r3, [pc, #600]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 816c 	beq.w	8003a74 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800379c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <HAL_RCC_OscConfig+0x52>
 80037a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a4:	2b0c      	cmp	r3, #12
 80037a6:	f040 80de 	bne.w	8003966 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	f040 80da 	bne.w	8003966 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f000 bea5 	b.w	800450a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037c4:	4b86      	ldr	r3, [pc, #536]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <HAL_RCC_OscConfig+0x7a>
 80037d0:	4b83      	ldr	r3, [pc, #524]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80037d8:	e005      	b.n	80037e6 <HAL_RCC_OscConfig+0x86>
 80037da:	4b81      	ldr	r3, [pc, #516]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80037dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d255      	bcs.n	8003896 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 f9d9 	bl	8004bac <RCC_SetFlashLatencyFromMSIRange>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	f000 be82 	b.w	800450a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003806:	4b76      	ldr	r3, [pc, #472]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	4a75      	ldr	r2, [pc, #468]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800380c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003810:	6093      	str	r3, [r2, #8]
 8003812:	4b73      	ldr	r3, [pc, #460]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	4970      	ldr	r1, [pc, #448]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003820:	4313      	orrs	r3, r2
 8003822:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800382c:	d309      	bcc.n	8003842 <HAL_RCC_OscConfig+0xe2>
 800382e:	4b6c      	ldr	r3, [pc, #432]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f023 021f 	bic.w	r2, r3, #31
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4969      	ldr	r1, [pc, #420]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800383c:	4313      	orrs	r3, r2
 800383e:	60cb      	str	r3, [r1, #12]
 8003840:	e07e      	b.n	8003940 <HAL_RCC_OscConfig+0x1e0>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	2b00      	cmp	r3, #0
 8003848:	da0a      	bge.n	8003860 <HAL_RCC_OscConfig+0x100>
 800384a:	4b65      	ldr	r3, [pc, #404]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	015b      	lsls	r3, r3, #5
 8003858:	4961      	ldr	r1, [pc, #388]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800385a:	4313      	orrs	r3, r2
 800385c:	60cb      	str	r3, [r1, #12]
 800385e:	e06f      	b.n	8003940 <HAL_RCC_OscConfig+0x1e0>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003868:	d30a      	bcc.n	8003880 <HAL_RCC_OscConfig+0x120>
 800386a:	4b5d      	ldr	r3, [pc, #372]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	029b      	lsls	r3, r3, #10
 8003878:	4959      	ldr	r1, [pc, #356]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800387a:	4313      	orrs	r3, r2
 800387c:	60cb      	str	r3, [r1, #12]
 800387e:	e05f      	b.n	8003940 <HAL_RCC_OscConfig+0x1e0>
 8003880:	4b57      	ldr	r3, [pc, #348]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	03db      	lsls	r3, r3, #15
 800388e:	4954      	ldr	r1, [pc, #336]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003890:	4313      	orrs	r3, r2
 8003892:	60cb      	str	r3, [r1, #12]
 8003894:	e054      	b.n	8003940 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003896:	4b52      	ldr	r3, [pc, #328]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	4a51      	ldr	r2, [pc, #324]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800389c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038a0:	6093      	str	r3, [r2, #8]
 80038a2:	4b4f      	ldr	r3, [pc, #316]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ae:	494c      	ldr	r1, [pc, #304]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80038bc:	d309      	bcc.n	80038d2 <HAL_RCC_OscConfig+0x172>
 80038be:	4b48      	ldr	r3, [pc, #288]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f023 021f 	bic.w	r2, r3, #31
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	4945      	ldr	r1, [pc, #276]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60cb      	str	r3, [r1, #12]
 80038d0:	e028      	b.n	8003924 <HAL_RCC_OscConfig+0x1c4>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	da0a      	bge.n	80038f0 <HAL_RCC_OscConfig+0x190>
 80038da:	4b41      	ldr	r3, [pc, #260]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	015b      	lsls	r3, r3, #5
 80038e8:	493d      	ldr	r1, [pc, #244]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60cb      	str	r3, [r1, #12]
 80038ee:	e019      	b.n	8003924 <HAL_RCC_OscConfig+0x1c4>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f8:	d30a      	bcc.n	8003910 <HAL_RCC_OscConfig+0x1b0>
 80038fa:	4b39      	ldr	r3, [pc, #228]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	029b      	lsls	r3, r3, #10
 8003908:	4935      	ldr	r1, [pc, #212]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800390a:	4313      	orrs	r3, r2
 800390c:	60cb      	str	r3, [r1, #12]
 800390e:	e009      	b.n	8003924 <HAL_RCC_OscConfig+0x1c4>
 8003910:	4b33      	ldr	r3, [pc, #204]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	03db      	lsls	r3, r3, #15
 800391e:	4930      	ldr	r1, [pc, #192]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003920:	4313      	orrs	r3, r2
 8003922:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	4618      	mov	r0, r3
 8003930:	f001 f93c 	bl	8004bac <RCC_SetFlashLatencyFromMSIRange>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f000 bde5 	b.w	800450a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003940:	f001 f8de 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003944:	4b27      	ldr	r3, [pc, #156]	@ (80039e4 <HAL_RCC_OscConfig+0x284>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7fd fca9 	bl	80012a0 <HAL_InitTick>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 808a 	beq.w	8003a72 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800395e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003962:	f000 bdd2 	b.w	800450a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d066      	beq.n	8003a3c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800396e:	4b1c      	ldr	r3, [pc, #112]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1b      	ldr	r2, [pc, #108]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800397a:	f7fd fd1b 	bl	80013b4 <HAL_GetTick>
 800397e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003980:	e009      	b.n	8003996 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003982:	f7fd fd17 	bl	80013b4 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d902      	bls.n	8003996 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	f000 bdba 	b.w	800450a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003996:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ef      	beq.n	8003982 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80039a2:	4b0f      	ldr	r3, [pc, #60]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	4a0e      	ldr	r2, [pc, #56]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80039a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039ac:	6093      	str	r3, [r2, #8]
 80039ae:	4b0c      	ldr	r3, [pc, #48]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ba:	4909      	ldr	r1, [pc, #36]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80039c8:	d30e      	bcc.n	80039e8 <HAL_RCC_OscConfig+0x288>
 80039ca:	4b05      	ldr	r3, [pc, #20]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f023 021f 	bic.w	r2, r3, #31
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	4902      	ldr	r1, [pc, #8]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	60cb      	str	r3, [r1, #12]
 80039dc:	e04a      	b.n	8003a74 <HAL_RCC_OscConfig+0x314>
 80039de:	bf00      	nop
 80039e0:	46020c00 	.word	0x46020c00
 80039e4:	20000020 	.word	0x20000020
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	da0a      	bge.n	8003a06 <HAL_RCC_OscConfig+0x2a6>
 80039f0:	4b98      	ldr	r3, [pc, #608]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	015b      	lsls	r3, r3, #5
 80039fe:	4995      	ldr	r1, [pc, #596]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60cb      	str	r3, [r1, #12]
 8003a04:	e036      	b.n	8003a74 <HAL_RCC_OscConfig+0x314>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a0e:	d30a      	bcc.n	8003a26 <HAL_RCC_OscConfig+0x2c6>
 8003a10:	4b90      	ldr	r3, [pc, #576]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	029b      	lsls	r3, r3, #10
 8003a1e:	498d      	ldr	r1, [pc, #564]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60cb      	str	r3, [r1, #12]
 8003a24:	e026      	b.n	8003a74 <HAL_RCC_OscConfig+0x314>
 8003a26:	4b8b      	ldr	r3, [pc, #556]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	03db      	lsls	r3, r3, #15
 8003a34:	4987      	ldr	r1, [pc, #540]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60cb      	str	r3, [r1, #12]
 8003a3a:	e01b      	b.n	8003a74 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003a3c:	4b85      	ldr	r3, [pc, #532]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a84      	ldr	r2, [pc, #528]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a48:	f7fd fcb4 	bl	80013b4 <HAL_GetTick>
 8003a4c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a4e:	e009      	b.n	8003a64 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a50:	f7fd fcb0 	bl	80013b4 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d902      	bls.n	8003a64 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	f000 bd53 	b.w	800450a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a64:	4b7b      	ldr	r3, [pc, #492]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1ef      	bne.n	8003a50 <HAL_RCC_OscConfig+0x2f0>
 8003a70:	e000      	b.n	8003a74 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003a72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 808b 	beq.w	8003b98 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_OscConfig+0x334>
 8003a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8a:	2b0c      	cmp	r3, #12
 8003a8c:	d109      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d106      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d17d      	bne.n	8003b98 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f000 bd34 	b.w	800450a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aaa:	d106      	bne.n	8003aba <HAL_RCC_OscConfig+0x35a>
 8003aac:	4b69      	ldr	r3, [pc, #420]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a68      	ldr	r2, [pc, #416]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	e041      	b.n	8003b3e <HAL_RCC_OscConfig+0x3de>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ac2:	d112      	bne.n	8003aea <HAL_RCC_OscConfig+0x38a>
 8003ac4:	4b63      	ldr	r3, [pc, #396]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a62      	ldr	r2, [pc, #392]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003aca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b60      	ldr	r3, [pc, #384]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a5f      	ldr	r2, [pc, #380]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003ad6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	4b5d      	ldr	r3, [pc, #372]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a5c      	ldr	r2, [pc, #368]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003ae2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	e029      	b.n	8003b3e <HAL_RCC_OscConfig+0x3de>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003af2:	d112      	bne.n	8003b1a <HAL_RCC_OscConfig+0x3ba>
 8003af4:	4b57      	ldr	r3, [pc, #348]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a56      	ldr	r2, [pc, #344]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003afa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4b54      	ldr	r3, [pc, #336]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a53      	ldr	r2, [pc, #332]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003b06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b51      	ldr	r3, [pc, #324]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a50      	ldr	r2, [pc, #320]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	e011      	b.n	8003b3e <HAL_RCC_OscConfig+0x3de>
 8003b1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a4d      	ldr	r2, [pc, #308]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b4b      	ldr	r3, [pc, #300]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a4a      	ldr	r2, [pc, #296]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003b2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	4b48      	ldr	r3, [pc, #288]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a47      	ldr	r2, [pc, #284]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003b38:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d014      	beq.n	8003b70 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003b46:	f7fd fc35 	bl	80013b4 <HAL_GetTick>
 8003b4a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4c:	e009      	b.n	8003b62 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b4e:	f7fd fc31 	bl	80013b4 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b64      	cmp	r3, #100	@ 0x64
 8003b5a:	d902      	bls.n	8003b62 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	f000 bcd4 	b.w	800450a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b62:	4b3c      	ldr	r3, [pc, #240]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0ef      	beq.n	8003b4e <HAL_RCC_OscConfig+0x3ee>
 8003b6e:	e013      	b.n	8003b98 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003b70:	f7fd fc20 	bl	80013b4 <HAL_GetTick>
 8003b74:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b76:	e009      	b.n	8003b8c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b78:	f7fd fc1c 	bl	80013b4 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	@ 0x64
 8003b84:	d902      	bls.n	8003b8c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	f000 bcbf 	b.w	800450a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b8c:	4b31      	ldr	r3, [pc, #196]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ef      	bne.n	8003b78 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d05f      	beq.n	8003c64 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d005      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x456>
 8003baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	d114      	bne.n	8003bda <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d111      	bne.n	8003bda <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f000 bca3 	b.w	800450a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003bc4:	4b23      	ldr	r3, [pc, #140]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	041b      	lsls	r3, r3, #16
 8003bd2:	4920      	ldr	r1, [pc, #128]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003bd8:	e044      	b.n	8003c64 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d024      	beq.n	8003c2c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003be2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003bee:	f7fd fbe1 	bl	80013b4 <HAL_GetTick>
 8003bf2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bf4:	e009      	b.n	8003c0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf6:	f7fd fbdd 	bl	80013b4 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d902      	bls.n	8003c0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	f000 bc80 	b.w	800450a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c0a:	4b12      	ldr	r3, [pc, #72]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0ef      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b0f      	ldr	r3, [pc, #60]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	490b      	ldr	r1, [pc, #44]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	610b      	str	r3, [r1, #16]
 8003c2a:	e01b      	b.n	8003c64 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003c2c:	4b09      	ldr	r3, [pc, #36]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a08      	ldr	r2, [pc, #32]	@ (8003c54 <HAL_RCC_OscConfig+0x4f4>)
 8003c32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c36:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c38:	f7fd fbbc 	bl	80013b4 <HAL_GetTick>
 8003c3c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c40:	f7fd fbb8 	bl	80013b4 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d904      	bls.n	8003c58 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	f000 bc5b 	b.w	800450a <HAL_RCC_OscConfig+0xdaa>
 8003c54:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c58:	4baf      	ldr	r3, [pc, #700]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1ed      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80c8 	beq.w	8003e02 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003c72:	2300      	movs	r3, #0
 8003c74:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c78:	4ba7      	ldr	r3, [pc, #668]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d111      	bne.n	8003caa <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c86:	4ba4      	ldr	r3, [pc, #656]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c8c:	4aa2      	ldr	r2, [pc, #648]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003c8e:	f043 0304 	orr.w	r3, r3, #4
 8003c92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c96:	4ba0      	ldr	r3, [pc, #640]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003caa:	4b9c      	ldr	r3, [pc, #624]	@ (8003f1c <HAL_RCC_OscConfig+0x7bc>)
 8003cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d119      	bne.n	8003cea <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003cb6:	4b99      	ldr	r3, [pc, #612]	@ (8003f1c <HAL_RCC_OscConfig+0x7bc>)
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	4a98      	ldr	r2, [pc, #608]	@ (8003f1c <HAL_RCC_OscConfig+0x7bc>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc2:	f7fd fb77 	bl	80013b4 <HAL_GetTick>
 8003cc6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cc8:	e009      	b.n	8003cde <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cca:	f7fd fb73 	bl	80013b4 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d902      	bls.n	8003cde <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	f000 bc16 	b.w	800450a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cde:	4b8f      	ldr	r3, [pc, #572]	@ (8003f1c <HAL_RCC_OscConfig+0x7bc>)
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0ef      	beq.n	8003cca <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d05f      	beq.n	8003db2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003cf2:	4b89      	ldr	r3, [pc, #548]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cf8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d037      	beq.n	8003d78 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d006      	beq.n	8003d20 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e3f4      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01b      	beq.n	8003d62 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003d2a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d30:	4a79      	ldr	r2, [pc, #484]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003d32:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003d36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003d3a:	f7fd fb3b 	bl	80013b4 <HAL_GetTick>
 8003d3e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fd fb37 	bl	80013b4 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b05      	cmp	r3, #5
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e3da      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d54:	4b70      	ldr	r3, [pc, #448]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003d56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1ef      	bne.n	8003d42 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003d62:	4b6d      	ldr	r3, [pc, #436]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d68:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	4969      	ldr	r1, [pc, #420]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003d78:	4b67      	ldr	r3, [pc, #412]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d7e:	4a66      	ldr	r2, [pc, #408]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003d80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003d88:	f7fd fb14 	bl	80013b4 <HAL_GetTick>
 8003d8c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d90:	f7fd fb10 	bl	80013b4 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b05      	cmp	r3, #5
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e3b3      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003da2:	4b5d      	ldr	r3, [pc, #372]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0ef      	beq.n	8003d90 <HAL_RCC_OscConfig+0x630>
 8003db0:	e01b      	b.n	8003dea <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003db2:	4b59      	ldr	r3, [pc, #356]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003db8:	4a57      	ldr	r2, [pc, #348]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003dba:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003dbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003dc2:	f7fd faf7 	bl	80013b4 <HAL_GetTick>
 8003dc6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dca:	f7fd faf3 	bl	80013b4 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b05      	cmp	r3, #5
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e396      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ddc:	4b4e      	ldr	r3, [pc, #312]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003dde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003de2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1ef      	bne.n	8003dca <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df2:	4b49      	ldr	r3, [pc, #292]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003df8:	4a47      	ldr	r2, [pc, #284]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003dfa:	f023 0304 	bic.w	r3, r3, #4
 8003dfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8111 	beq.w	8004032 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e16:	4b40      	ldr	r3, [pc, #256]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d111      	bne.n	8003e48 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e24:	4b3c      	ldr	r3, [pc, #240]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e2a:	4a3b      	ldr	r2, [pc, #236]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003e2c:	f043 0304 	orr.w	r3, r3, #4
 8003e30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003e34:	4b38      	ldr	r3, [pc, #224]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e48:	4b34      	ldr	r3, [pc, #208]	@ (8003f1c <HAL_RCC_OscConfig+0x7bc>)
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d118      	bne.n	8003e86 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e54:	4b31      	ldr	r3, [pc, #196]	@ (8003f1c <HAL_RCC_OscConfig+0x7bc>)
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	4a30      	ldr	r2, [pc, #192]	@ (8003f1c <HAL_RCC_OscConfig+0x7bc>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e60:	f7fd faa8 	bl	80013b4 <HAL_GetTick>
 8003e64:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e68:	f7fd faa4 	bl	80013b4 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e347      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e7a:	4b28      	ldr	r3, [pc, #160]	@ (8003f1c <HAL_RCC_OscConfig+0x7bc>)
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01f      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d010      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003eae:	4b1a      	ldr	r3, [pc, #104]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eb4:	4a18      	ldr	r2, [pc, #96]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ebe:	e018      	b.n	8003ef2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ec0:	4b15      	ldr	r3, [pc, #84]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003ec2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ec6:	4a14      	ldr	r2, [pc, #80]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ed0:	e00f      	b.n	8003ef2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ed2:	4b11      	ldr	r3, [pc, #68]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ed8:	4a0f      	ldr	r2, [pc, #60]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8003f18 <HAL_RCC_OscConfig+0x7b8>)
 8003eea:	f023 0304 	bic.w	r3, r3, #4
 8003eee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d057      	beq.n	8003faa <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003efa:	f7fd fa5b 	bl	80013b4 <HAL_GetTick>
 8003efe:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f00:	e00e      	b.n	8003f20 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f02:	f7fd fa57 	bl	80013b4 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d905      	bls.n	8003f20 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e2f8      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
 8003f18:	46020c00 	.word	0x46020c00
 8003f1c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f20:	4b9c      	ldr	r3, [pc, #624]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8003f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0e9      	beq.n	8003f02 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01b      	beq.n	8003f72 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f3a:	4b96      	ldr	r3, [pc, #600]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8003f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f40:	4a94      	ldr	r2, [pc, #592]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8003f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4c:	f7fd fa32 	bl	80013b4 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e2d3      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f62:	4b8c      	ldr	r3, [pc, #560]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8003f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0ed      	beq.n	8003f4c <HAL_RCC_OscConfig+0x7ec>
 8003f70:	e053      	b.n	800401a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f72:	4b88      	ldr	r3, [pc, #544]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8003f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f78:	4a86      	ldr	r2, [pc, #536]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8003f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f7fd fa16 	bl	80013b4 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e2b7      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f9a:	4b7e      	ldr	r3, [pc, #504]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8003f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1ed      	bne.n	8003f84 <HAL_RCC_OscConfig+0x824>
 8003fa8:	e037      	b.n	800401a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003faa:	f7fd fa03 	bl	80013b4 <HAL_GetTick>
 8003fae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fb0:	e00a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fd f9ff 	bl	80013b4 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e2a0      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fc8:	4b72      	ldr	r3, [pc, #456]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8003fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1ed      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003fd6:	4b6f      	ldr	r3, [pc, #444]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8003fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01a      	beq.n	800401a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003fe4:	4b6b      	ldr	r3, [pc, #428]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8003fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fea:	4a6a      	ldr	r2, [pc, #424]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8003fec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ff0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ff4:	e00a      	b.n	800400c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff6:	f7fd f9dd 	bl	80013b4 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004004:	4293      	cmp	r3, r2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e27e      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800400c:	4b61      	ldr	r3, [pc, #388]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 800400e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004012:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1ed      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800401a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800401e:	2b01      	cmp	r3, #1
 8004020:	d107      	bne.n	8004032 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004022:	4b5c      	ldr	r3, [pc, #368]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8004024:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004028:	4a5a      	ldr	r2, [pc, #360]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 800402a:	f023 0304 	bic.w	r3, r3, #4
 800402e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d036      	beq.n	80040ac <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d019      	beq.n	800407a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004046:	4b53      	ldr	r3, [pc, #332]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a52      	ldr	r2, [pc, #328]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 800404c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004050:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004052:	f7fd f9af 	bl	80013b4 <HAL_GetTick>
 8004056:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800405a:	f7fd f9ab 	bl	80013b4 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e24e      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800406c:	4b49      	ldr	r3, [pc, #292]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f0      	beq.n	800405a <HAL_RCC_OscConfig+0x8fa>
 8004078:	e018      	b.n	80040ac <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800407a:	4b46      	ldr	r3, [pc, #280]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a45      	ldr	r2, [pc, #276]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8004080:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004084:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004086:	f7fd f995 	bl	80013b4 <HAL_GetTick>
 800408a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800408e:	f7fd f991 	bl	80013b4 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e234      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80040a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1f0      	bne.n	800408e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d036      	beq.n	8004126 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d019      	beq.n	80040f4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80040c0:	4b34      	ldr	r3, [pc, #208]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a33      	ldr	r2, [pc, #204]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 80040c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040ca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040cc:	f7fd f972 	bl	80013b4 <HAL_GetTick>
 80040d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80040d4:	f7fd f96e 	bl	80013b4 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e211      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80040e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x974>
 80040f2:	e018      	b.n	8004126 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80040f4:	4b27      	ldr	r3, [pc, #156]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a26      	ldr	r2, [pc, #152]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 80040fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004100:	f7fd f958 	bl	80013b4 <HAL_GetTick>
 8004104:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004108:	f7fd f954 	bl	80013b4 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e1f7      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800411a:	4b1e      	ldr	r3, [pc, #120]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d07f      	beq.n	8004232 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004136:	2b00      	cmp	r3, #0
 8004138:	d062      	beq.n	8004200 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800413a:	4b16      	ldr	r3, [pc, #88]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	4a15      	ldr	r2, [pc, #84]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8004140:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004144:	6093      	str	r3, [r2, #8]
 8004146:	4b13      	ldr	r3, [pc, #76]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004152:	4910      	ldr	r1, [pc, #64]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004160:	d309      	bcc.n	8004176 <HAL_RCC_OscConfig+0xa16>
 8004162:	4b0c      	ldr	r3, [pc, #48]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f023 021f 	bic.w	r2, r3, #31
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	4909      	ldr	r1, [pc, #36]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8004170:	4313      	orrs	r3, r2
 8004172:	60cb      	str	r3, [r1, #12]
 8004174:	e02a      	b.n	80041cc <HAL_RCC_OscConfig+0xa6c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	2b00      	cmp	r3, #0
 800417c:	da0c      	bge.n	8004198 <HAL_RCC_OscConfig+0xa38>
 800417e:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	015b      	lsls	r3, r3, #5
 800418c:	4901      	ldr	r1, [pc, #4]	@ (8004194 <HAL_RCC_OscConfig+0xa34>)
 800418e:	4313      	orrs	r3, r2
 8004190:	60cb      	str	r3, [r1, #12]
 8004192:	e01b      	b.n	80041cc <HAL_RCC_OscConfig+0xa6c>
 8004194:	46020c00 	.word	0x46020c00
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a0:	d30a      	bcc.n	80041b8 <HAL_RCC_OscConfig+0xa58>
 80041a2:	4ba1      	ldr	r3, [pc, #644]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	029b      	lsls	r3, r3, #10
 80041b0:	499d      	ldr	r1, [pc, #628]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60cb      	str	r3, [r1, #12]
 80041b6:	e009      	b.n	80041cc <HAL_RCC_OscConfig+0xa6c>
 80041b8:	4b9b      	ldr	r3, [pc, #620]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	03db      	lsls	r3, r3, #15
 80041c6:	4998      	ldr	r1, [pc, #608]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80041cc:	4b96      	ldr	r3, [pc, #600]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a95      	ldr	r2, [pc, #596]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80041d2:	f043 0310 	orr.w	r3, r3, #16
 80041d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80041d8:	f7fd f8ec 	bl	80013b4 <HAL_GetTick>
 80041dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80041e0:	f7fd f8e8 	bl	80013b4 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e18b      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80041f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0xa80>
 80041fe:	e018      	b.n	8004232 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004200:	4b89      	ldr	r3, [pc, #548]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a88      	ldr	r2, [pc, #544]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004206:	f023 0310 	bic.w	r3, r3, #16
 800420a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800420c:	f7fd f8d2 	bl	80013b4 <HAL_GetTick>
 8004210:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004214:	f7fd f8ce 	bl	80013b4 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e171      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004226:	4b80      	ldr	r3, [pc, #512]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8166 	beq.w	8004508 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800423c:	2300      	movs	r3, #0
 800423e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004242:	4b79      	ldr	r3, [pc, #484]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b0c      	cmp	r3, #12
 800424c:	f000 80f2 	beq.w	8004434 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004254:	2b02      	cmp	r3, #2
 8004256:	f040 80c5 	bne.w	80043e4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800425a:	4b73      	ldr	r3, [pc, #460]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a72      	ldr	r2, [pc, #456]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004260:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004264:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004266:	f7fd f8a5 	bl	80013b4 <HAL_GetTick>
 800426a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426e:	f7fd f8a1 	bl	80013b4 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e144      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004280:	4b69      	ldr	r3, [pc, #420]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f0      	bne.n	800426e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800428c:	4b66      	ldr	r3, [pc, #408]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 800428e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d111      	bne.n	80042be <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800429a:	4b63      	ldr	r3, [pc, #396]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 800429c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042a0:	4a61      	ldr	r2, [pc, #388]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80042a2:	f043 0304 	orr.w	r3, r3, #4
 80042a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80042aa:	4b5f      	ldr	r3, [pc, #380]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80042ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80042be:	4b5b      	ldr	r3, [pc, #364]	@ (800442c <HAL_RCC_OscConfig+0xccc>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042ca:	d102      	bne.n	80042d2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80042d2:	4b56      	ldr	r3, [pc, #344]	@ (800442c <HAL_RCC_OscConfig+0xccc>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	4a55      	ldr	r2, [pc, #340]	@ (800442c <HAL_RCC_OscConfig+0xccc>)
 80042d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042dc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80042de:	4b52      	ldr	r3, [pc, #328]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80042e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042e6:	f023 0303 	bic.w	r3, r3, #3
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80042f2:	3a01      	subs	r2, #1
 80042f4:	0212      	lsls	r2, r2, #8
 80042f6:	4311      	orrs	r1, r2
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80042fc:	430a      	orrs	r2, r1
 80042fe:	494a      	ldr	r1, [pc, #296]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004300:	4313      	orrs	r3, r2
 8004302:	628b      	str	r3, [r1, #40]	@ 0x28
 8004304:	4b48      	ldr	r3, [pc, #288]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004306:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004308:	4b49      	ldr	r3, [pc, #292]	@ (8004430 <HAL_RCC_OscConfig+0xcd0>)
 800430a:	4013      	ands	r3, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004310:	3a01      	subs	r2, #1
 8004312:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800431a:	3a01      	subs	r2, #1
 800431c:	0252      	lsls	r2, r2, #9
 800431e:	b292      	uxth	r2, r2
 8004320:	4311      	orrs	r1, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004326:	3a01      	subs	r2, #1
 8004328:	0412      	lsls	r2, r2, #16
 800432a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004334:	3a01      	subs	r2, #1
 8004336:	0612      	lsls	r2, r2, #24
 8004338:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800433c:	430a      	orrs	r2, r1
 800433e:	493a      	ldr	r1, [pc, #232]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004340:	4313      	orrs	r3, r2
 8004342:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004344:	4b38      	ldr	r3, [pc, #224]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004348:	4a37      	ldr	r2, [pc, #220]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 800434a:	f023 0310 	bic.w	r3, r3, #16
 800434e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004354:	4a34      	ldr	r2, [pc, #208]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800435a:	4b33      	ldr	r3, [pc, #204]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 800435c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435e:	4a32      	ldr	r2, [pc, #200]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004360:	f043 0310 	orr.w	r3, r3, #16
 8004364:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004366:	4b30      	ldr	r3, [pc, #192]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436a:	f023 020c 	bic.w	r2, r3, #12
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004372:	492d      	ldr	r1, [pc, #180]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004374:	4313      	orrs	r3, r2
 8004376:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004378:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800437c:	2b01      	cmp	r3, #1
 800437e:	d105      	bne.n	800438c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004380:	4b2a      	ldr	r3, [pc, #168]	@ (800442c <HAL_RCC_OscConfig+0xccc>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a29      	ldr	r2, [pc, #164]	@ (800442c <HAL_RCC_OscConfig+0xccc>)
 8004386:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800438a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800438c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004390:	2b01      	cmp	r3, #1
 8004392:	d107      	bne.n	80043a4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004394:	4b24      	ldr	r3, [pc, #144]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004396:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800439a:	4a23      	ldr	r2, [pc, #140]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 800439c:	f023 0304 	bic.w	r3, r3, #4
 80043a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80043a4:	4b20      	ldr	r3, [pc, #128]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80043aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043ae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043b0:	f7fd f800 	bl	80013b4 <HAL_GetTick>
 80043b4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b8:	f7fc fffc 	bl	80013b4 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e09f      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043ca:	4b17      	ldr	r3, [pc, #92]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f0      	beq.n	80043b8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043d6:	4b14      	ldr	r3, [pc, #80]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80043d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043da:	4a13      	ldr	r2, [pc, #76]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80043dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043e0:	6293      	str	r3, [r2, #40]	@ 0x28
 80043e2:	e091      	b.n	8004508 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80043e4:	4b10      	ldr	r3, [pc, #64]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a0f      	ldr	r2, [pc, #60]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 80043ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043f0:	f7fc ffe0 	bl	80013b4 <HAL_GetTick>
 80043f4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fc ffdc 	bl	80013b4 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e07f      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800440a:	4b07      	ldr	r3, [pc, #28]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004416:	4b04      	ldr	r3, [pc, #16]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 8004418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441a:	4a03      	ldr	r2, [pc, #12]	@ (8004428 <HAL_RCC_OscConfig+0xcc8>)
 800441c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004420:	f023 0303 	bic.w	r3, r3, #3
 8004424:	6293      	str	r3, [r2, #40]	@ 0x28
 8004426:	e06f      	b.n	8004508 <HAL_RCC_OscConfig+0xda8>
 8004428:	46020c00 	.word	0x46020c00
 800442c:	46020800 	.word	0x46020800
 8004430:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004434:	4b37      	ldr	r3, [pc, #220]	@ (8004514 <HAL_RCC_OscConfig+0xdb4>)
 8004436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004438:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800443a:	4b36      	ldr	r3, [pc, #216]	@ (8004514 <HAL_RCC_OscConfig+0xdb4>)
 800443c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004444:	2b01      	cmp	r3, #1
 8004446:	d039      	beq.n	80044bc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f003 0203 	and.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d132      	bne.n	80044bc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d129      	bne.n	80044bc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d122      	bne.n	80044bc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004480:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d11a      	bne.n	80044bc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	0a5b      	lsrs	r3, r3, #9
 800448a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004492:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d111      	bne.n	80044bc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	0c1b      	lsrs	r3, r3, #16
 800449c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d108      	bne.n	80044bc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	0e1b      	lsrs	r3, r3, #24
 80044ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e024      	b.n	800450a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80044c0:	4b14      	ldr	r3, [pc, #80]	@ (8004514 <HAL_RCC_OscConfig+0xdb4>)
 80044c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c4:	08db      	lsrs	r3, r3, #3
 80044c6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d01a      	beq.n	8004508 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80044d2:	4b10      	ldr	r3, [pc, #64]	@ (8004514 <HAL_RCC_OscConfig+0xdb4>)
 80044d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d6:	4a0f      	ldr	r2, [pc, #60]	@ (8004514 <HAL_RCC_OscConfig+0xdb4>)
 80044d8:	f023 0310 	bic.w	r3, r3, #16
 80044dc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fc ff69 	bl	80013b4 <HAL_GetTick>
 80044e2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80044e4:	bf00      	nop
 80044e6:	f7fc ff65 	bl	80013b4 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d0f9      	beq.n	80044e6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f6:	4a07      	ldr	r2, [pc, #28]	@ (8004514 <HAL_RCC_OscConfig+0xdb4>)
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80044fc:	4b05      	ldr	r3, [pc, #20]	@ (8004514 <HAL_RCC_OscConfig+0xdb4>)
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	4a04      	ldr	r2, [pc, #16]	@ (8004514 <HAL_RCC_OscConfig+0xdb4>)
 8004502:	f043 0310 	orr.w	r3, r3, #16
 8004506:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3738      	adds	r7, #56	@ 0x38
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	46020c00 	.word	0x46020c00

08004518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e1d9      	b.n	80048e0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800452c:	4b9b      	ldr	r3, [pc, #620]	@ (800479c <HAL_RCC_ClockConfig+0x284>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d910      	bls.n	800455c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453a:	4b98      	ldr	r3, [pc, #608]	@ (800479c <HAL_RCC_ClockConfig+0x284>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 020f 	bic.w	r2, r3, #15
 8004542:	4996      	ldr	r1, [pc, #600]	@ (800479c <HAL_RCC_ClockConfig+0x284>)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454a:	4b94      	ldr	r3, [pc, #592]	@ (800479c <HAL_RCC_ClockConfig+0x284>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e1c1      	b.n	80048e0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695a      	ldr	r2, [r3, #20]
 800456c:	4b8c      	ldr	r3, [pc, #560]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004574:	429a      	cmp	r2, r3
 8004576:	d908      	bls.n	800458a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004578:	4b89      	ldr	r3, [pc, #548]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	4986      	ldr	r1, [pc, #536]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 8004586:	4313      	orrs	r3, r2
 8004588:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d012      	beq.n	80045bc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	4b81      	ldr	r3, [pc, #516]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d909      	bls.n	80045bc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80045a8:	4b7d      	ldr	r3, [pc, #500]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	497a      	ldr	r1, [pc, #488]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d010      	beq.n	80045ea <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	4b74      	ldr	r3, [pc, #464]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d908      	bls.n	80045ea <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80045d8:	4b71      	ldr	r3, [pc, #452]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	496e      	ldr	r1, [pc, #440]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d010      	beq.n	8004618 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	4b69      	ldr	r3, [pc, #420]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	429a      	cmp	r2, r3
 8004604:	d908      	bls.n	8004618 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004606:	4b66      	ldr	r3, [pc, #408]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f023 020f 	bic.w	r2, r3, #15
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	4963      	ldr	r1, [pc, #396]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 8004614:	4313      	orrs	r3, r2
 8004616:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80d2 	beq.w	80047ca <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004626:	2300      	movs	r3, #0
 8004628:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b03      	cmp	r3, #3
 8004630:	d143      	bne.n	80046ba <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004632:	4b5b      	ldr	r3, [pc, #364]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 8004634:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d110      	bne.n	8004662 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004640:	4b57      	ldr	r3, [pc, #348]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 8004642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004646:	4a56      	ldr	r2, [pc, #344]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 8004648:	f043 0304 	orr.w	r3, r3, #4
 800464c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004650:	4b53      	ldr	r3, [pc, #332]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 8004652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800465e:	2301      	movs	r3, #1
 8004660:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004662:	f7fc fea7 	bl	80013b4 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004668:	4b4e      	ldr	r3, [pc, #312]	@ (80047a4 <HAL_RCC_ClockConfig+0x28c>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00f      	beq.n	8004694 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004674:	e008      	b.n	8004688 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004676:	f7fc fe9d 	bl	80013b4 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e12b      	b.n	80048e0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004688:	4b46      	ldr	r3, [pc, #280]	@ (80047a4 <HAL_RCC_ClockConfig+0x28c>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004694:	7dfb      	ldrb	r3, [r7, #23]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d107      	bne.n	80046aa <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800469a:	4b41      	ldr	r3, [pc, #260]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 800469c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046a0:	4a3f      	ldr	r2, [pc, #252]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 80046a2:	f023 0304 	bic.w	r3, r3, #4
 80046a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80046aa:	4b3d      	ldr	r3, [pc, #244]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d121      	bne.n	80046fa <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e112      	b.n	80048e0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d107      	bne.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046c2:	4b37      	ldr	r3, [pc, #220]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d115      	bne.n	80046fa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e106      	b.n	80048e0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d107      	bne.n	80046ea <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80046da:	4b31      	ldr	r3, [pc, #196]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e0fa      	b.n	80048e0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ea:	4b2d      	ldr	r3, [pc, #180]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e0f2      	b.n	80048e0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80046fa:	4b29      	ldr	r3, [pc, #164]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f023 0203 	bic.w	r2, r3, #3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4926      	ldr	r1, [pc, #152]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 8004708:	4313      	orrs	r3, r2
 800470a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800470c:	f7fc fe52 	bl	80013b4 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d112      	bne.n	8004740 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800471a:	e00a      	b.n	8004732 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800471c:	f7fc fe4a 	bl	80013b4 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e0d6      	b.n	80048e0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004732:	4b1b      	ldr	r3, [pc, #108]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b0c      	cmp	r3, #12
 800473c:	d1ee      	bne.n	800471c <HAL_RCC_ClockConfig+0x204>
 800473e:	e044      	b.n	80047ca <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d112      	bne.n	800476e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004748:	e00a      	b.n	8004760 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800474a:	f7fc fe33 	bl	80013b4 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e0bf      	b.n	80048e0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004760:	4b0f      	ldr	r3, [pc, #60]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f003 030c 	and.w	r3, r3, #12
 8004768:	2b08      	cmp	r3, #8
 800476a:	d1ee      	bne.n	800474a <HAL_RCC_ClockConfig+0x232>
 800476c:	e02d      	b.n	80047ca <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d123      	bne.n	80047be <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004776:	e00a      	b.n	800478e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004778:	f7fc fe1c 	bl	80013b4 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e0a8      	b.n	80048e0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800478e:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <HAL_RCC_ClockConfig+0x288>)
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1ee      	bne.n	8004778 <HAL_RCC_ClockConfig+0x260>
 800479a:	e016      	b.n	80047ca <HAL_RCC_ClockConfig+0x2b2>
 800479c:	40022000 	.word	0x40022000
 80047a0:	46020c00 	.word	0x46020c00
 80047a4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a8:	f7fc fe04 	bl	80013b4 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e090      	b.n	80048e0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80047be:	4b4a      	ldr	r3, [pc, #296]	@ (80048e8 <HAL_RCC_ClockConfig+0x3d0>)
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d1ee      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d010      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	4b43      	ldr	r3, [pc, #268]	@ (80048e8 <HAL_RCC_ClockConfig+0x3d0>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d208      	bcs.n	80047f8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80047e6:	4b40      	ldr	r3, [pc, #256]	@ (80048e8 <HAL_RCC_ClockConfig+0x3d0>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f023 020f 	bic.w	r2, r3, #15
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	493d      	ldr	r1, [pc, #244]	@ (80048e8 <HAL_RCC_ClockConfig+0x3d0>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047f8:	4b3c      	ldr	r3, [pc, #240]	@ (80048ec <HAL_RCC_ClockConfig+0x3d4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d210      	bcs.n	8004828 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004806:	4b39      	ldr	r3, [pc, #228]	@ (80048ec <HAL_RCC_ClockConfig+0x3d4>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f023 020f 	bic.w	r2, r3, #15
 800480e:	4937      	ldr	r1, [pc, #220]	@ (80048ec <HAL_RCC_ClockConfig+0x3d4>)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	4313      	orrs	r3, r2
 8004814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004816:	4b35      	ldr	r3, [pc, #212]	@ (80048ec <HAL_RCC_ClockConfig+0x3d4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d001      	beq.n	8004828 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e05b      	b.n	80048e0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d010      	beq.n	8004856 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	4b2b      	ldr	r3, [pc, #172]	@ (80048e8 <HAL_RCC_ClockConfig+0x3d0>)
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004840:	429a      	cmp	r2, r3
 8004842:	d208      	bcs.n	8004856 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004844:	4b28      	ldr	r3, [pc, #160]	@ (80048e8 <HAL_RCC_ClockConfig+0x3d0>)
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4925      	ldr	r1, [pc, #148]	@ (80048e8 <HAL_RCC_ClockConfig+0x3d0>)
 8004852:	4313      	orrs	r3, r2
 8004854:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d012      	beq.n	8004888 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	4b20      	ldr	r3, [pc, #128]	@ (80048e8 <HAL_RCC_ClockConfig+0x3d0>)
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	091b      	lsrs	r3, r3, #4
 800486c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004870:	429a      	cmp	r2, r3
 8004872:	d209      	bcs.n	8004888 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004874:	4b1c      	ldr	r3, [pc, #112]	@ (80048e8 <HAL_RCC_ClockConfig+0x3d0>)
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	4919      	ldr	r1, [pc, #100]	@ (80048e8 <HAL_RCC_ClockConfig+0x3d0>)
 8004884:	4313      	orrs	r3, r2
 8004886:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b00      	cmp	r3, #0
 8004892:	d010      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	4b13      	ldr	r3, [pc, #76]	@ (80048e8 <HAL_RCC_ClockConfig+0x3d0>)
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d208      	bcs.n	80048b6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80048a4:	4b10      	ldr	r3, [pc, #64]	@ (80048e8 <HAL_RCC_ClockConfig+0x3d0>)
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	490d      	ldr	r1, [pc, #52]	@ (80048e8 <HAL_RCC_ClockConfig+0x3d0>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80048b6:	f000 f821 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 80048ba:	4602      	mov	r2, r0
 80048bc:	4b0a      	ldr	r3, [pc, #40]	@ (80048e8 <HAL_RCC_ClockConfig+0x3d0>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	490a      	ldr	r1, [pc, #40]	@ (80048f0 <HAL_RCC_ClockConfig+0x3d8>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
 80048cc:	4a09      	ldr	r2, [pc, #36]	@ (80048f4 <HAL_RCC_ClockConfig+0x3dc>)
 80048ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048d0:	4b09      	ldr	r3, [pc, #36]	@ (80048f8 <HAL_RCC_ClockConfig+0x3e0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fc fce3 	bl	80012a0 <HAL_InitTick>
 80048da:	4603      	mov	r3, r0
 80048dc:	73fb      	strb	r3, [r7, #15]

  return status;
 80048de:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	46020c00 	.word	0x46020c00
 80048ec:	40022000 	.word	0x40022000
 80048f0:	0800ae04 	.word	0x0800ae04
 80048f4:	2000001c 	.word	0x2000001c
 80048f8:	20000020 	.word	0x20000020

080048fc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b08b      	sub	sp, #44	@ 0x2c
 8004900:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800490a:	4b78      	ldr	r3, [pc, #480]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x1f0>)
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004914:	4b75      	ldr	r3, [pc, #468]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <HAL_RCC_GetSysClockFreq+0x34>
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2b0c      	cmp	r3, #12
 8004928:	d121      	bne.n	800496e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d11e      	bne.n	800496e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004930:	4b6e      	ldr	r3, [pc, #440]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d107      	bne.n	800494c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800493c:	4b6b      	ldr	r3, [pc, #428]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x1f0>)
 800493e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004942:	0b1b      	lsrs	r3, r3, #12
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	627b      	str	r3, [r7, #36]	@ 0x24
 800494a:	e005      	b.n	8004958 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800494c:	4b67      	ldr	r3, [pc, #412]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x1f0>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	0f1b      	lsrs	r3, r3, #28
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004958:	4a65      	ldr	r2, [pc, #404]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d110      	bne.n	800498a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800496c:	e00d      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800496e:	4b5f      	ldr	r3, [pc, #380]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f003 030c 	and.w	r3, r3, #12
 8004976:	2b04      	cmp	r3, #4
 8004978:	d102      	bne.n	8004980 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800497a:	4b5e      	ldr	r3, [pc, #376]	@ (8004af4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800497c:	623b      	str	r3, [r7, #32]
 800497e:	e004      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b08      	cmp	r3, #8
 8004984:	d101      	bne.n	800498a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004986:	4b5b      	ldr	r3, [pc, #364]	@ (8004af4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004988:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	f040 80a5 	bne.w	8004adc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004992:	4b56      	ldr	r3, [pc, #344]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800499c:	4b53      	ldr	r3, [pc, #332]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x1f0>)
 800499e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	3301      	adds	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80049aa:	4b50      	ldr	r3, [pc, #320]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ae:	091b      	lsrs	r3, r3, #4
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80049b6:	4b4d      	ldr	r3, [pc, #308]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ba:	08db      	lsrs	r3, r3, #3
 80049bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ce:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d003      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0xe4>
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d022      	beq.n	8004a24 <HAL_RCC_GetSysClockFreq+0x128>
 80049de:	e043      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ea:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004af8 <HAL_RCC_GetSysClockFreq+0x1fc>
 80049ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f2:	4b3e      	ldr	r3, [pc, #248]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a02:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a06:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004afc <HAL_RCC_GetSysClockFreq+0x200>
 8004a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a22:	e046      	b.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004af8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a36:	4b2d      	ldr	r3, [pc, #180]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a46:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a4a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004afc <HAL_RCC_GetSysClockFreq+0x200>
 8004a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a66:	e024      	b.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	ee07 3a90 	vmov	s15, r3
 8004a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a80:	4b1a      	ldr	r3, [pc, #104]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a88:	ee07 3a90 	vmov	s15, r3
 8004a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a90:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a94:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004afc <HAL_RCC_GetSysClockFreq+0x200>
 8004a98:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004aa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ab0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab6:	0e1b      	lsrs	r3, r3, #24
 8004ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004abc:	3301      	adds	r3, #1
 8004abe:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004aca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad6:	ee17 3a90 	vmov	r3, s15
 8004ada:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004adc:	6a3b      	ldr	r3, [r7, #32]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	372c      	adds	r7, #44	@ 0x2c
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	46020c00 	.word	0x46020c00
 8004af0:	0800ae1c 	.word	0x0800ae1c
 8004af4:	00f42400 	.word	0x00f42400
 8004af8:	4b742400 	.word	0x4b742400
 8004afc:	46000000 	.word	0x46000000

08004b00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004b04:	f7ff fefa 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4b07      	ldr	r3, [pc, #28]	@ (8004b28 <HAL_RCC_GetHCLKFreq+0x28>)
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	4906      	ldr	r1, [pc, #24]	@ (8004b2c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004b14:	5ccb      	ldrb	r3, [r1, r3]
 8004b16:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1a:	4a05      	ldr	r2, [pc, #20]	@ (8004b30 <HAL_RCC_GetHCLKFreq+0x30>)
 8004b1c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004b1e:	4b04      	ldr	r3, [pc, #16]	@ (8004b30 <HAL_RCC_GetHCLKFreq+0x30>)
 8004b20:	681b      	ldr	r3, [r3, #0]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	46020c00 	.word	0x46020c00
 8004b2c:	0800ae04 	.word	0x0800ae04
 8004b30:	2000001c 	.word	0x2000001c

08004b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004b38:	f7ff ffe2 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	091b      	lsrs	r3, r3, #4
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	4903      	ldr	r1, [pc, #12]	@ (8004b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b4a:	5ccb      	ldrb	r3, [r1, r3]
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	46020c00 	.word	0x46020c00
 8004b58:	0800ae14 	.word	0x0800ae14

08004b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004b60:	f7ff ffce 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4903      	ldr	r1, [pc, #12]	@ (8004b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	46020c00 	.word	0x46020c00
 8004b80:	0800ae14 	.word	0x0800ae14

08004b84 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004b88:	f7ff ffba 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	091b      	lsrs	r3, r3, #4
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4903      	ldr	r1, [pc, #12]	@ (8004ba8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	46020c00 	.word	0x46020c00
 8004ba8:	0800ae14 	.word	0x0800ae14

08004bac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bb4:	4b3e      	ldr	r3, [pc, #248]	@ (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004bc2:	f7fe fd3f 	bl	8003644 <HAL_PWREx_GetVoltageRange>
 8004bc6:	6178      	str	r0, [r7, #20]
 8004bc8:	e019      	b.n	8004bfe <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bca:	4b39      	ldr	r3, [pc, #228]	@ (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bd0:	4a37      	ldr	r2, [pc, #220]	@ (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bd2:	f043 0304 	orr.w	r3, r3, #4
 8004bd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004bda:	4b35      	ldr	r3, [pc, #212]	@ (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004be8:	f7fe fd2c 	bl	8003644 <HAL_PWREx_GetVoltageRange>
 8004bec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bee:	4b30      	ldr	r3, [pc, #192]	@ (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf4:	4a2e      	ldr	r2, [pc, #184]	@ (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bf6:	f023 0304 	bic.w	r3, r3, #4
 8004bfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c04:	d003      	beq.n	8004c0e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c0c:	d109      	bne.n	8004c22 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c14:	d202      	bcs.n	8004c1c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004c16:	2301      	movs	r3, #1
 8004c18:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004c1a:	e033      	b.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004c20:	e030      	b.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c28:	d208      	bcs.n	8004c3c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c30:	d102      	bne.n	8004c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004c32:	2303      	movs	r3, #3
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	e025      	b.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e035      	b.n	8004ca8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c42:	d90f      	bls.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c50:	d902      	bls.n	8004c58 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004c52:	2300      	movs	r3, #0
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	e015      	b.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004c58:	2301      	movs	r3, #1
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	e012      	b.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	e00f      	b.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c6a:	d109      	bne.n	8004c80 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c72:	d102      	bne.n	8004c7a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004c74:	2301      	movs	r3, #1
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	e004      	b.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	e001      	b.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004c80:	2301      	movs	r3, #1
 8004c82:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c84:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f023 020f 	bic.w	r2, r3, #15
 8004c8c:	4909      	ldr	r1, [pc, #36]	@ (8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004c94:	4b07      	ldr	r3, [pc, #28]	@ (8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 030f 	and.w	r3, r3, #15
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d001      	beq.n	8004ca6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	46020c00 	.word	0x46020c00
 8004cb4:	40022000 	.word	0x40022000

08004cb8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cbc:	b0b8      	sub	sp, #224	@ 0xe0
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	f002 0401 	and.w	r4, r2, #1
 8004cdc:	2500      	movs	r5, #0
 8004cde:	ea54 0305 	orrs.w	r3, r4, r5
 8004ce2:	d00b      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004ce4:	4bca      	ldr	r3, [pc, #808]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cea:	f023 0103 	bic.w	r1, r3, #3
 8004cee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf4:	4ac6      	ldr	r2, [pc, #792]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	f002 0802 	and.w	r8, r2, #2
 8004d08:	f04f 0900 	mov.w	r9, #0
 8004d0c:	ea58 0309 	orrs.w	r3, r8, r9
 8004d10:	d00b      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004d12:	4bbf      	ldr	r3, [pc, #764]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d18:	f023 010c 	bic.w	r1, r3, #12
 8004d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d22:	4abb      	ldr	r2, [pc, #748]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d24:	430b      	orrs	r3, r1
 8004d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	f002 0a04 	and.w	sl, r2, #4
 8004d36:	f04f 0b00 	mov.w	fp, #0
 8004d3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d3e:	d00b      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004d40:	4bb3      	ldr	r3, [pc, #716]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d46:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d50:	4aaf      	ldr	r2, [pc, #700]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d52:	430b      	orrs	r3, r1
 8004d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d60:	f002 0308 	and.w	r3, r2, #8
 8004d64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4313      	orrs	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004d78:	4ba5      	ldr	r3, [pc, #660]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d88:	4aa1      	ldr	r2, [pc, #644]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	f002 0310 	and.w	r3, r2, #16
 8004d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004da0:	2300      	movs	r3, #0
 8004da2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004da6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004daa:	460b      	mov	r3, r1
 8004dac:	4313      	orrs	r3, r2
 8004dae:	d00b      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004db0:	4b97      	ldr	r3, [pc, #604]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004db6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004dba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc0:	4a93      	ldr	r2, [pc, #588]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	f002 0320 	and.w	r3, r2, #32
 8004dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dde:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4313      	orrs	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004de8:	4b89      	ldr	r3, [pc, #548]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dee:	f023 0107 	bic.w	r1, r3, #7
 8004df2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004df8:	4a85      	ldr	r2, [pc, #532]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e10:	2300      	movs	r3, #0
 8004e12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e16:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	d00b      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004e20:	4b7b      	ldr	r3, [pc, #492]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e26:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004e2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e30:	4a77      	ldr	r2, [pc, #476]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e32:	430b      	orrs	r3, r1
 8004e34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004e44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e4e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4313      	orrs	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004e58:	4b6d      	ldr	r3, [pc, #436]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e68:	4a69      	ldr	r2, [pc, #420]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e80:	2300      	movs	r3, #0
 8004e82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	d00b      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004e90:	4b5f      	ldr	r3, [pc, #380]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea0:	4a5b      	ldr	r2, [pc, #364]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004eb4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ebe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	d00b      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004ec8:	4b51      	ldr	r3, [pc, #324]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ece:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004ed2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed8:	4a4d      	ldr	r2, [pc, #308]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004eda:	430b      	orrs	r3, r1
 8004edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ee0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004eec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ef6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004efa:	460b      	mov	r3, r1
 8004efc:	4313      	orrs	r3, r2
 8004efe:	d00b      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004f00:	4b43      	ldr	r3, [pc, #268]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f06:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004f0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f10:	4a3f      	ldr	r2, [pc, #252]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f12:	430b      	orrs	r3, r1
 8004f14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004f24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004f32:	460b      	mov	r3, r1
 8004f34:	4313      	orrs	r3, r2
 8004f36:	d00b      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004f38:	4b35      	ldr	r3, [pc, #212]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f3e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004f42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f48:	4a31      	ldr	r2, [pc, #196]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004f50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004f5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f5e:	2300      	movs	r3, #0
 8004f60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f62:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004f66:	460b      	mov	r3, r1
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	d00c      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004f6c:	4b28      	ldr	r3, [pc, #160]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f7e:	4a24      	ldr	r2, [pc, #144]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f80:	430b      	orrs	r3, r1
 8004f82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f92:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f94:	2300      	movs	r3, #0
 8004f96:	677b      	str	r3, [r7, #116]	@ 0x74
 8004f98:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	d04f      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004fa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004faa:	2b80      	cmp	r3, #128	@ 0x80
 8004fac:	d02d      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004fae:	2b80      	cmp	r3, #128	@ 0x80
 8004fb0:	d827      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004fb2:	2b60      	cmp	r3, #96	@ 0x60
 8004fb4:	d02e      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004fb6:	2b60      	cmp	r3, #96	@ 0x60
 8004fb8:	d823      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004fba:	2b40      	cmp	r3, #64	@ 0x40
 8004fbc:	d006      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004fbe:	2b40      	cmp	r3, #64	@ 0x40
 8004fc0:	d81f      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d009      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d011      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004fca:	e01a      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fcc:	4b10      	ldr	r3, [pc, #64]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fd8:	e01d      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fde:	3308      	adds	r3, #8
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f002 f9d1 	bl	8007388 <RCCEx_PLL2_Config>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fec:	e013      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ff2:	332c      	adds	r3, #44	@ 0x2c
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f002 fa5f 	bl	80074b8 <RCCEx_PLL3_Config>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005000:	e009      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005008:	e005      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800500a:	bf00      	nop
 800500c:	e003      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800500e:	bf00      	nop
 8005010:	46020c00 	.word	0x46020c00
        break;
 8005014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005016:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10d      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800501e:	4bb6      	ldr	r3, [pc, #728]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005020:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005024:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005028:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005030:	4ab1      	ldr	r2, [pc, #708]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005032:	430b      	orrs	r3, r1
 8005034:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005038:	e003      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800503e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005042:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800504e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005050:	2300      	movs	r3, #0
 8005052:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005054:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005058:	460b      	mov	r3, r1
 800505a:	4313      	orrs	r3, r2
 800505c:	d053      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800505e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800506a:	d033      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800506c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005070:	d82c      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005076:	d02f      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005078:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800507c:	d826      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x414>
 800507e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005082:	d008      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005088:	d820      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x414>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800508e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005092:	d011      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005094:	e01a      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005096:	4b98      	ldr	r3, [pc, #608]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509a:	4a97      	ldr	r2, [pc, #604]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80050a2:	e01a      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050a8:	3308      	adds	r3, #8
 80050aa:	4618      	mov	r0, r3
 80050ac:	f002 f96c 	bl	8007388 <RCCEx_PLL2_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80050b6:	e010      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050bc:	332c      	adds	r3, #44	@ 0x2c
 80050be:	4618      	mov	r0, r3
 80050c0:	f002 f9fa 	bl	80074b8 <RCCEx_PLL3_Config>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80050ca:	e006      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80050d2:	e002      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80050d4:	bf00      	nop
 80050d6:	e000      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80050d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050da:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10d      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80050e2:	4b85      	ldr	r3, [pc, #532]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80050e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050e8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80050ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f4:	4a80      	ldr	r2, [pc, #512]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80050f6:	430b      	orrs	r3, r1
 80050f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80050fc:	e003      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005102:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005112:	663b      	str	r3, [r7, #96]	@ 0x60
 8005114:	2300      	movs	r3, #0
 8005116:	667b      	str	r3, [r7, #100]	@ 0x64
 8005118:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800511c:	460b      	mov	r3, r1
 800511e:	4313      	orrs	r3, r2
 8005120:	d046      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005122:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005126:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800512a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800512e:	d028      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005130:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005134:	d821      	bhi.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005136:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800513a:	d022      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800513c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005140:	d81b      	bhi.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005142:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005146:	d01c      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005148:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800514c:	d815      	bhi.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800514e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005152:	d008      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005158:	d80f      	bhi.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d011      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005162:	d00e      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005164:	e009      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005166:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800516a:	3308      	adds	r3, #8
 800516c:	4618      	mov	r0, r3
 800516e:	f002 f90b 	bl	8007388 <RCCEx_PLL2_Config>
 8005172:	4603      	mov	r3, r0
 8005174:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005178:	e004      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005180:	e000      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8005182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005184:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10d      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800518c:	4b5a      	ldr	r3, [pc, #360]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800518e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005192:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005196:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800519a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800519e:	4a56      	ldr	r2, [pc, #344]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051a0:	430b      	orrs	r3, r1
 80051a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80051a6:	e003      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80051ac:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80051b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80051bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051be:	2300      	movs	r3, #0
 80051c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80051c6:	460b      	mov	r3, r1
 80051c8:	4313      	orrs	r3, r2
 80051ca:	d03f      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80051cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d81e      	bhi.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80051d8:	a201      	add	r2, pc, #4	@ (adr r2, 80051e0 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80051da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051de:	bf00      	nop
 80051e0:	0800521f 	.word	0x0800521f
 80051e4:	080051f5 	.word	0x080051f5
 80051e8:	08005203 	.word	0x08005203
 80051ec:	0800521f 	.word	0x0800521f
 80051f0:	0800521f 	.word	0x0800521f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051f4:	4b40      	ldr	r3, [pc, #256]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f8:	4a3f      	ldr	r2, [pc, #252]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051fe:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005200:	e00e      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005202:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005206:	332c      	adds	r3, #44	@ 0x2c
 8005208:	4618      	mov	r0, r3
 800520a:	f002 f955 	bl	80074b8 <RCCEx_PLL3_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005214:	e004      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800521c:	e000      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800521e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005220:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10d      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005228:	4b33      	ldr	r3, [pc, #204]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800522a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800522e:	f023 0107 	bic.w	r1, r3, #7
 8005232:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523a:	4a2f      	ldr	r2, [pc, #188]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800523c:	430b      	orrs	r3, r1
 800523e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005242:	e003      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005244:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005248:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800524c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005258:	653b      	str	r3, [r7, #80]	@ 0x50
 800525a:	2300      	movs	r3, #0
 800525c:	657b      	str	r3, [r7, #84]	@ 0x54
 800525e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005262:	460b      	mov	r3, r1
 8005264:	4313      	orrs	r3, r2
 8005266:	d04d      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005268:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800526c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005270:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005274:	d028      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8005276:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800527a:	d821      	bhi.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800527c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005280:	d024      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005282:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005286:	d81b      	bhi.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005288:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800528c:	d00e      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800528e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005292:	d815      	bhi.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01b      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800529c:	d110      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800529e:	4b16      	ldr	r3, [pc, #88]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a2:	4a15      	ldr	r2, [pc, #84]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052a8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80052aa:	e012      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052b0:	332c      	adds	r3, #44	@ 0x2c
 80052b2:	4618      	mov	r0, r3
 80052b4:	f002 f900 	bl	80074b8 <RCCEx_PLL3_Config>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80052be:	e008      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80052c6:	e004      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80052c8:	bf00      	nop
 80052ca:	e002      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80052cc:	bf00      	nop
 80052ce:	e000      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80052d0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80052d2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d110      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80052da:	4b07      	ldr	r3, [pc, #28]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80052e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052ec:	4a02      	ldr	r2, [pc, #8]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052ee:	430b      	orrs	r3, r1
 80052f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80052f4:	e006      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80052f6:	bf00      	nop
 80052f8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005300:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005310:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005312:	2300      	movs	r3, #0
 8005314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005316:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800531a:	460b      	mov	r3, r1
 800531c:	4313      	orrs	r3, r2
 800531e:	f000 80b5 	beq.w	800548c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005322:	2300      	movs	r3, #0
 8005324:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005328:	4b9d      	ldr	r3, [pc, #628]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800532a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	d113      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005336:	4b9a      	ldr	r3, [pc, #616]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800533c:	4a98      	ldr	r2, [pc, #608]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800533e:	f043 0304 	orr.w	r3, r3, #4
 8005342:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005346:	4b96      	ldr	r3, [pc, #600]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005354:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800535e:	4b91      	ldr	r3, [pc, #580]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005362:	4a90      	ldr	r2, [pc, #576]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800536a:	f7fc f823 	bl	80013b4 <HAL_GetTick>
 800536e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005372:	e00b      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005374:	f7fc f81e 	bl	80013b4 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d903      	bls.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800538a:	e005      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800538c:	4b85      	ldr	r3, [pc, #532]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800538e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0ed      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8005398:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800539c:	2b00      	cmp	r3, #0
 800539e:	d165      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053a0:	4b7f      	ldr	r3, [pc, #508]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80053ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d023      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x746>
 80053b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053ba:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80053be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01b      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053c6:	4b76      	ldr	r3, [pc, #472]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053d4:	4b72      	ldr	r3, [pc, #456]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053da:	4a71      	ldr	r2, [pc, #452]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053e4:	4b6e      	ldr	r3, [pc, #440]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053ea:	4a6d      	ldr	r2, [pc, #436]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053f4:	4a6a      	ldr	r2, [pc, #424]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d019      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540a:	f7fb ffd3 	bl	80013b4 <HAL_GetTick>
 800540e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005412:	e00d      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005414:	f7fb ffce 	bl	80013b4 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800541e:	1ad2      	subs	r2, r2, r3
 8005420:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005424:	429a      	cmp	r2, r3
 8005426:	d903      	bls.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 800542e:	e006      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005430:	4b5b      	ldr	r3, [pc, #364]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0ea      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 800543e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10d      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005446:	4b56      	ldr	r3, [pc, #344]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800544c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005450:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005454:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005458:	4a51      	ldr	r2, [pc, #324]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800545a:	430b      	orrs	r3, r1
 800545c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005460:	e008      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005462:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005466:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800546a:	e003      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005470:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005474:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8005478:	2b01      	cmp	r3, #1
 800547a:	d107      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800547c:	4b48      	ldr	r3, [pc, #288]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800547e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005482:	4a47      	ldr	r2, [pc, #284]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005484:	f023 0304 	bic.w	r3, r3, #4
 8005488:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800548c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005498:	643b      	str	r3, [r7, #64]	@ 0x40
 800549a:	2300      	movs	r3, #0
 800549c:	647b      	str	r3, [r7, #68]	@ 0x44
 800549e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80054a2:	460b      	mov	r3, r1
 80054a4:	4313      	orrs	r3, r2
 80054a6:	d042      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80054a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054b0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80054b4:	d022      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x844>
 80054b6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80054ba:	d81b      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80054bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054c0:	d011      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80054c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054c6:	d815      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d019      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80054cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054d0:	d110      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054d6:	3308      	adds	r3, #8
 80054d8:	4618      	mov	r0, r3
 80054da:	f001 ff55 	bl	8007388 <RCCEx_PLL2_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80054e4:	e00d      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e6:	4b2e      	ldr	r3, [pc, #184]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ea:	4a2d      	ldr	r2, [pc, #180]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054f0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80054f2:	e006      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80054fa:	e002      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80054fc:	bf00      	nop
 80054fe:	e000      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005500:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005502:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10d      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800550a:	4b25      	ldr	r3, [pc, #148]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800550c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005510:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005518:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800551c:	4a20      	ldr	r2, [pc, #128]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800551e:	430b      	orrs	r3, r1
 8005520:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005524:	e003      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005526:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800552a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800552e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800553a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800553c:	2300      	movs	r3, #0
 800553e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005540:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005544:	460b      	mov	r3, r1
 8005546:	4313      	orrs	r3, r2
 8005548:	d032      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800554a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800554e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005556:	d00b      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800555c:	d804      	bhi.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800555e:	2b00      	cmp	r3, #0
 8005560:	d008      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005566:	d007      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800556e:	e004      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005570:	bf00      	nop
 8005572:	e002      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005574:	bf00      	nop
 8005576:	e000      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005578:	bf00      	nop
    }
    if (ret == HAL_OK)
 800557a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800557e:	2b00      	cmp	r3, #0
 8005580:	d112      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005582:	4b07      	ldr	r3, [pc, #28]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005584:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005588:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800558c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005590:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005594:	4a02      	ldr	r2, [pc, #8]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005596:	430b      	orrs	r3, r1
 8005598:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800559c:	e008      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800559e:	bf00      	nop
 80055a0:	46020c00 	.word	0x46020c00
 80055a4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80055ac:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80055b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80055bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80055be:	2300      	movs	r3, #0
 80055c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80055c6:	460b      	mov	r3, r1
 80055c8:	4313      	orrs	r3, r2
 80055ca:	d019      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80055cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055d8:	d105      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055da:	4b88      	ldr	r3, [pc, #544]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	4a87      	ldr	r2, [pc, #540]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055e4:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80055e6:	4b85      	ldr	r3, [pc, #532]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055ec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80055f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055f8:	4a80      	ldr	r2, [pc, #512]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055fa:	430b      	orrs	r3, r1
 80055fc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005600:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800560c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800560e:	2300      	movs	r3, #0
 8005610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005612:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005616:	460b      	mov	r3, r1
 8005618:	4313      	orrs	r3, r2
 800561a:	d00c      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800561c:	4b77      	ldr	r3, [pc, #476]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800561e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005622:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005626:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800562a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800562e:	4973      	ldr	r1, [pc, #460]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005636:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005642:	623b      	str	r3, [r7, #32]
 8005644:	2300      	movs	r3, #0
 8005646:	627b      	str	r3, [r7, #36]	@ 0x24
 8005648:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800564c:	460b      	mov	r3, r1
 800564e:	4313      	orrs	r3, r2
 8005650:	d00c      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005652:	4b6a      	ldr	r3, [pc, #424]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005658:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800565c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005660:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005664:	4965      	ldr	r1, [pc, #404]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800566c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
 800567e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005682:	460b      	mov	r3, r1
 8005684:	4313      	orrs	r3, r2
 8005686:	d00c      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005688:	4b5c      	ldr	r3, [pc, #368]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800568a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800568e:	f023 0218 	bic.w	r2, r3, #24
 8005692:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005696:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800569a:	4958      	ldr	r1, [pc, #352]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80056a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	2300      	movs	r3, #0
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80056b8:	460b      	mov	r3, r1
 80056ba:	4313      	orrs	r3, r2
 80056bc:	d032      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80056be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056ca:	d105      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056cc:	4b4b      	ldr	r3, [pc, #300]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d0:	4a4a      	ldr	r2, [pc, #296]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056d6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80056d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056e4:	d108      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056ea:	3308      	adds	r3, #8
 80056ec:	4618      	mov	r0, r3
 80056ee:	f001 fe4b 	bl	8007388 <RCCEx_PLL2_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80056f8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10d      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005700:	4b3e      	ldr	r3, [pc, #248]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005702:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005706:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800570a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800570e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005712:	493a      	ldr	r1, [pc, #232]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800571a:	e003      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005720:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800573a:	460b      	mov	r3, r1
 800573c:	4313      	orrs	r3, r2
 800573e:	d03a      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005748:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800574c:	d00e      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800574e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005752:	d815      	bhi.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d017      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8005758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800575c:	d110      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800575e:	4b27      	ldr	r3, [pc, #156]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005762:	4a26      	ldr	r2, [pc, #152]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005768:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800576a:	e00e      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800576c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005770:	3308      	adds	r3, #8
 8005772:	4618      	mov	r0, r3
 8005774:	f001 fe08 	bl	8007388 <RCCEx_PLL2_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800577e:	e004      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005786:	e000      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8005788:	bf00      	nop
    }
    if (ret == HAL_OK)
 800578a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10d      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005792:	4b1a      	ldr	r3, [pc, #104]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005798:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800579c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057a4:	4915      	ldr	r1, [pc, #84]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80057ac:	e003      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ae:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80057b2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80057b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057be:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	2300      	movs	r3, #0
 80057c6:	607b      	str	r3, [r7, #4]
 80057c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057cc:	460b      	mov	r3, r1
 80057ce:	4313      	orrs	r3, r2
 80057d0:	d00c      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80057d2:	4b0a      	ldr	r3, [pc, #40]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057d8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80057dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80057e4:	4905      	ldr	r1, [pc, #20]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80057ec:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	37e0      	adds	r7, #224	@ 0xe0
 80057f4:	46bd      	mov	sp, r7
 80057f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057fa:	bf00      	nop
 80057fc:	46020c00 	.word	0x46020c00

08005800 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005800:	b480      	push	{r7}
 8005802:	b089      	sub	sp, #36	@ 0x24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005808:	4ba6      	ldr	r3, [pc, #664]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800580a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800580c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005810:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005812:	4ba4      	ldr	r3, [pc, #656]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800581c:	4ba1      	ldr	r3, [pc, #644]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005820:	0a1b      	lsrs	r3, r3, #8
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	3301      	adds	r3, #1
 8005828:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800582a:	4b9e      	ldr	r3, [pc, #632]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800582c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582e:	091b      	lsrs	r3, r3, #4
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005836:	4b9b      	ldr	r3, [pc, #620]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583a:	08db      	lsrs	r3, r3, #3
 800583c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	fb02 f303 	mul.w	r3, r2, r3
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b03      	cmp	r3, #3
 8005856:	d062      	beq.n	800591e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2b03      	cmp	r3, #3
 800585c:	f200 8081 	bhi.w	8005962 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d024      	beq.n	80058b0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d17a      	bne.n	8005962 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005876:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800587a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587e:	4b89      	ldr	r3, [pc, #548]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800588e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005892:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005aac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005896:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800589a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800589e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058ae:	e08f      	b.n	80059d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80058b0:	4b7c      	ldr	r3, [pc, #496]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80058bc:	4b79      	ldr	r3, [pc, #484]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	0f1b      	lsrs	r3, r3, #28
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	e006      	b.n	80058d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80058c8:	4b76      	ldr	r3, [pc, #472]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058ce:	041b      	lsls	r3, r3, #16
 80058d0:	0f1b      	lsrs	r3, r3, #28
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	4a76      	ldr	r2, [pc, #472]	@ (8005ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80058d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058dc:	ee07 3a90 	vmov	s15, r3
 80058e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	ee07 3a90 	vmov	s15, r3
 80058f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005900:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005aac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800590c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005910:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005918:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800591c:	e058      	b.n	80059d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	ee07 3a90 	vmov	s15, r3
 8005924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005928:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800592c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005930:	4b5c      	ldr	r3, [pc, #368]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005938:	ee07 3a90 	vmov	s15, r3
 800593c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005940:	ed97 6a02 	vldr	s12, [r7, #8]
 8005944:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005aac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005948:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800594c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005950:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005954:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005960:	e036      	b.n	80059d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005962:	4b50      	ldr	r3, [pc, #320]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800596e:	4b4d      	ldr	r3, [pc, #308]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	0f1b      	lsrs	r3, r3, #28
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	e006      	b.n	8005988 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800597a:	4b4a      	ldr	r3, [pc, #296]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800597c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005980:	041b      	lsls	r3, r3, #16
 8005982:	0f1b      	lsrs	r3, r3, #28
 8005984:	f003 030f 	and.w	r3, r3, #15
 8005988:	4a49      	ldr	r2, [pc, #292]	@ (8005ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800598a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	ee07 3a90 	vmov	s15, r3
 80059aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80059b2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005aac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80059b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80059c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059ce:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80059d0:	4b34      	ldr	r3, [pc, #208]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d017      	beq.n	8005a0c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059dc:	4b31      	ldr	r3, [pc, #196]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e0:	0a5b      	lsrs	r3, r3, #9
 80059e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80059ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059f2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80059fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a02:	ee17 2a90 	vmov	r2, s15
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	e002      	b.n	8005a12 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005a12:	4b24      	ldr	r3, [pc, #144]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d017      	beq.n	8005a4e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a1e:	4b21      	ldr	r3, [pc, #132]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a22:	0c1b      	lsrs	r3, r3, #16
 8005a24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a28:	ee07 3a90 	vmov	s15, r3
 8005a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005a30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a34:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a38:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a44:	ee17 2a90 	vmov	r2, s15
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	605a      	str	r2, [r3, #4]
 8005a4c:	e002      	b.n	8005a54 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005a54:	4b13      	ldr	r3, [pc, #76]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d017      	beq.n	8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a60:	4b10      	ldr	r3, [pc, #64]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a64:	0e1b      	lsrs	r3, r3, #24
 8005a66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005a72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a76:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a86:	ee17 2a90 	vmov	r2, s15
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005a8e:	e002      	b.n	8005a96 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	609a      	str	r2, [r3, #8]
}
 8005a96:	bf00      	nop
 8005a98:	3724      	adds	r7, #36	@ 0x24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	46020c00 	.word	0x46020c00
 8005aa8:	4b742400 	.word	0x4b742400
 8005aac:	46000000 	.word	0x46000000
 8005ab0:	0800ae1c 	.word	0x0800ae1c

08005ab4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b089      	sub	sp, #36	@ 0x24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005abc:	4ba6      	ldr	r3, [pc, #664]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005ac6:	4ba4      	ldr	r3, [pc, #656]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005ad0:	4ba1      	ldr	r3, [pc, #644]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	3301      	adds	r3, #1
 8005adc:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005ade:	4b9e      	ldr	r3, [pc, #632]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae2:	091b      	lsrs	r3, r3, #4
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005aea:	4b9b      	ldr	r3, [pc, #620]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aee:	08db      	lsrs	r3, r3, #3
 8005af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	fb02 f303 	mul.w	r3, r2, r3
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b02:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d062      	beq.n	8005bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	f200 8081 	bhi.w	8005c16 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d024      	beq.n	8005b64 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d17a      	bne.n	8005c16 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b32:	4b89      	ldr	r3, [pc, #548]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b46:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b62:	e08f      	b.n	8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005b64:	4b7c      	ldr	r3, [pc, #496]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005b70:	4b79      	ldr	r3, [pc, #484]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	0f1b      	lsrs	r3, r3, #28
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	e006      	b.n	8005b8a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005b7c:	4b76      	ldr	r3, [pc, #472]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b82:	041b      	lsls	r3, r3, #16
 8005b84:	0f1b      	lsrs	r3, r3, #28
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	4a76      	ldr	r2, [pc, #472]	@ (8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b90:	ee07 3a90 	vmov	s15, r3
 8005b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	ee07 3a90 	vmov	s15, r3
 8005bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bb4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005bb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bd0:	e058      	b.n	8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	ee07 3a90 	vmov	s15, r3
 8005bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bdc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005be0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005be4:	4b5c      	ldr	r3, [pc, #368]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bec:	ee07 3a90 	vmov	s15, r3
 8005bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bf8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005bfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005c00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c14:	e036      	b.n	8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005c16:	4b50      	ldr	r3, [pc, #320]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d005      	beq.n	8005c2e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005c22:	4b4d      	ldr	r3, [pc, #308]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	0f1b      	lsrs	r3, r3, #28
 8005c28:	f003 030f 	and.w	r3, r3, #15
 8005c2c:	e006      	b.n	8005c3c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c34:	041b      	lsls	r3, r3, #16
 8005c36:	0f1b      	lsrs	r3, r3, #28
 8005c38:	f003 030f 	and.w	r3, r3, #15
 8005c3c:	4a49      	ldr	r2, [pc, #292]	@ (8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	ee07 3a90 	vmov	s15, r3
 8005c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c66:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c82:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005c84:	4b34      	ldr	r3, [pc, #208]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d017      	beq.n	8005cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c90:	4b31      	ldr	r3, [pc, #196]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c94:	0a5b      	lsrs	r3, r3, #9
 8005c96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005ca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cb6:	ee17 2a90 	vmov	r2, s15
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e002      	b.n	8005cc6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005cc6:	4b24      	ldr	r3, [pc, #144]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d017      	beq.n	8005d02 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005cd2:	4b21      	ldr	r3, [pc, #132]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd6:	0c1b      	lsrs	r3, r3, #16
 8005cd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cdc:	ee07 3a90 	vmov	s15, r3
 8005ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005ce4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cf8:	ee17 2a90 	vmov	r2, s15
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	605a      	str	r2, [r3, #4]
 8005d00:	e002      	b.n	8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005d08:	4b13      	ldr	r3, [pc, #76]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d017      	beq.n	8005d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d14:	4b10      	ldr	r3, [pc, #64]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d18:	0e1b      	lsrs	r3, r3, #24
 8005d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005d26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d3a:	ee17 2a90 	vmov	r2, s15
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d42:	e002      	b.n	8005d4a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	609a      	str	r2, [r3, #8]
}
 8005d4a:	bf00      	nop
 8005d4c:	3724      	adds	r7, #36	@ 0x24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	46020c00 	.word	0x46020c00
 8005d5c:	4b742400 	.word	0x4b742400
 8005d60:	46000000 	.word	0x46000000
 8005d64:	0800ae1c 	.word	0x0800ae1c

08005d68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b089      	sub	sp, #36	@ 0x24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005d70:	4ba6      	ldr	r3, [pc, #664]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d78:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005d7a:	4ba4      	ldr	r3, [pc, #656]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005d84:	4ba1      	ldr	r3, [pc, #644]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d88:	0a1b      	lsrs	r3, r3, #8
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	3301      	adds	r3, #1
 8005d90:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005d92:	4b9e      	ldr	r3, [pc, #632]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d96:	091b      	lsrs	r3, r3, #4
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005d9e:	4b9b      	ldr	r3, [pc, #620]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da2:	08db      	lsrs	r3, r3, #3
 8005da4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d062      	beq.n	8005e86 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	f200 8081 	bhi.w	8005eca <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d024      	beq.n	8005e18 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d17a      	bne.n	8005eca <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dde:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de6:	4b89      	ldr	r3, [pc, #548]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dfa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006014 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e12:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005e16:	e08f      	b.n	8005f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e18:	4b7c      	ldr	r3, [pc, #496]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005e24:	4b79      	ldr	r3, [pc, #484]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	0f1b      	lsrs	r3, r3, #28
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	e006      	b.n	8005e3e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005e30:	4b76      	ldr	r3, [pc, #472]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e36:	041b      	lsls	r3, r3, #16
 8005e38:	0f1b      	lsrs	r3, r3, #28
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	4a76      	ldr	r2, [pc, #472]	@ (8006018 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e44:	ee07 3a90 	vmov	s15, r3
 8005e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	ee07 3a90 	vmov	s15, r3
 8005e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e64:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e68:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006014 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005e6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e84:	e058      	b.n	8005f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	ee07 3a90 	vmov	s15, r3
 8005e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e90:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005e94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e98:	4b5c      	ldr	r3, [pc, #368]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea0:	ee07 3a90 	vmov	s15, r3
 8005ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ea8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eac:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006014 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005eb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005eb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ec8:	e036      	b.n	8005f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005eca:	4b50      	ldr	r3, [pc, #320]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005ed6:	4b4d      	ldr	r3, [pc, #308]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	0f1b      	lsrs	r3, r3, #28
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	e006      	b.n	8005ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ee4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ee8:	041b      	lsls	r3, r3, #16
 8005eea:	0f1b      	lsrs	r3, r3, #28
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	4a49      	ldr	r2, [pc, #292]	@ (8006018 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	ee07 3a90 	vmov	s15, r3
 8005f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f1a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006014 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f36:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005f38:	4b34      	ldr	r3, [pc, #208]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d017      	beq.n	8005f74 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f44:	4b31      	ldr	r3, [pc, #196]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f48:	0a5b      	lsrs	r3, r3, #9
 8005f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005f56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f5a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f6a:	ee17 2a90 	vmov	r2, s15
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	e002      	b.n	8005f7a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005f7a:	4b24      	ldr	r3, [pc, #144]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d017      	beq.n	8005fb6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f86:	4b21      	ldr	r3, [pc, #132]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8a:	0c1b      	lsrs	r3, r3, #16
 8005f8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f90:	ee07 3a90 	vmov	s15, r3
 8005f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005f98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f9c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005fa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fac:	ee17 2a90 	vmov	r2, s15
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	605a      	str	r2, [r3, #4]
 8005fb4:	e002      	b.n	8005fbc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005fbc:	4b13      	ldr	r3, [pc, #76]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d017      	beq.n	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005fc8:	4b10      	ldr	r3, [pc, #64]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fcc:	0e1b      	lsrs	r3, r3, #24
 8005fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005fda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fde:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005fe2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fee:	ee17 2a90 	vmov	r2, s15
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005ff6:	e002      	b.n	8005ffe <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	609a      	str	r2, [r3, #8]
}
 8005ffe:	bf00      	nop
 8006000:	3724      	adds	r7, #36	@ 0x24
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	46020c00 	.word	0x46020c00
 8006010:	4b742400 	.word	0x4b742400
 8006014:	46000000 	.word	0x46000000
 8006018:	0800ae1c 	.word	0x0800ae1c

0800601c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08e      	sub	sp, #56	@ 0x38
 8006020:	af00      	add	r7, sp, #0
 8006022:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800602a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800602e:	430b      	orrs	r3, r1
 8006030:	d145      	bne.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006032:	4baa      	ldr	r3, [pc, #680]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006038:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800603c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800603e:	4ba7      	ldr	r3, [pc, #668]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b02      	cmp	r3, #2
 800604a:	d108      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800604c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006052:	d104      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006054:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006058:	637b      	str	r3, [r7, #52]	@ 0x34
 800605a:	f001 b987 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800605e:	4b9f      	ldr	r3, [pc, #636]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006068:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800606c:	d114      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006074:	d110      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006076:	4b99      	ldr	r3, [pc, #612]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800607c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006080:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006084:	d103      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006086:	23fa      	movs	r3, #250	@ 0xfa
 8006088:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800608a:	f001 b96f 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800608e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006092:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006094:	f001 b96a 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006098:	4b90      	ldr	r3, [pc, #576]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060a4:	d107      	bne.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80060a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060ac:	d103      	bne.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80060ae:	4b8c      	ldr	r3, [pc, #560]	@ (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80060b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80060b2:	f001 b95b 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ba:	f001 b957 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80060be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060c2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80060c6:	430b      	orrs	r3, r1
 80060c8:	d151      	bne.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80060ca:	4b84      	ldr	r3, [pc, #528]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80060cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060d0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80060d4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	2b80      	cmp	r3, #128	@ 0x80
 80060da:	d035      	beq.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80060dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060de:	2b80      	cmp	r3, #128	@ 0x80
 80060e0:	d841      	bhi.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	2b60      	cmp	r3, #96	@ 0x60
 80060e6:	d02a      	beq.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	2b60      	cmp	r3, #96	@ 0x60
 80060ec:	d83b      	bhi.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80060ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f0:	2b40      	cmp	r3, #64	@ 0x40
 80060f2:	d009      	beq.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	2b40      	cmp	r3, #64	@ 0x40
 80060f8:	d835      	bhi.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00c      	beq.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006102:	2b20      	cmp	r3, #32
 8006104:	d012      	beq.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006106:	e02e      	b.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff fb77 	bl	8005800 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006116:	f001 b929 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800611a:	f107 0318 	add.w	r3, r7, #24
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff fcc8 	bl	8005ab4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006128:	f001 b920 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff fe19 	bl	8005d68 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800613a:	f001 b917 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800613e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006142:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006144:	f001 b912 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006148:	4b64      	ldr	r3, [pc, #400]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006154:	d103      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006156:	4b63      	ldr	r3, [pc, #396]	@ (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006158:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800615a:	f001 b907 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006162:	f001 b903 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800616a:	f001 b8ff 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800616e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006172:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006176:	430b      	orrs	r3, r1
 8006178:	d158      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800617a:	4b58      	ldr	r3, [pc, #352]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800617c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006180:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006184:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800618c:	d03b      	beq.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006194:	d846      	bhi.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800619c:	d02e      	beq.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061a4:	d83e      	bhi.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ac:	d00b      	beq.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80061ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061b4:	d836      	bhi.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80061b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00d      	beq.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061c2:	d012      	beq.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80061c4:	e02e      	b.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff fb18 	bl	8005800 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061d4:	f001 b8ca 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061d8:	f107 0318 	add.w	r3, r7, #24
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fc69 	bl	8005ab4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061e6:	f001 b8c1 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061ea:	f107 030c 	add.w	r3, r7, #12
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff fdba 	bl	8005d68 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061f8:	f001 b8b8 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80061fc:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006200:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006202:	f001 b8b3 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006206:	4b35      	ldr	r3, [pc, #212]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800620e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006212:	d103      	bne.n	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006214:	4b33      	ldr	r3, [pc, #204]	@ (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006216:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006218:	f001 b8a8 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006220:	f001 b8a4 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006228:	f001 b8a0 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800622c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006230:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006234:	430b      	orrs	r3, r1
 8006236:	d16e      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006238:	4b28      	ldr	r3, [pc, #160]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800623a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800623e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006242:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006246:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800624a:	d034      	beq.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006252:	d85c      	bhi.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006256:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800625a:	d00b      	beq.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800625c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006262:	d854      	bhi.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006266:	2b00      	cmp	r3, #0
 8006268:	d016      	beq.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800626a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006270:	d009      	beq.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006272:	e04c      	b.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff fac1 	bl	8005800 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800627e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006280:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006282:	f001 b873 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006286:	f107 0318 	add.w	r3, r7, #24
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fc12 	bl	8005ab4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006294:	f001 b86a 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006298:	4b10      	ldr	r3, [pc, #64]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062a4:	d103      	bne.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 80062a6:	4b10      	ldr	r3, [pc, #64]	@ (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80062a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80062aa:	f001 b85f 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062b2:	f001 b85b 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80062b6:	4b09      	ldr	r3, [pc, #36]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d121      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062c2:	4b06      	ldr	r3, [pc, #24]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00e      	beq.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80062ce:	4b03      	ldr	r3, [pc, #12]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	0e1b      	lsrs	r3, r3, #24
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	e00f      	b.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80062da:	bf00      	nop
 80062dc:	46020c00 	.word	0x46020c00
 80062e0:	0007a120 	.word	0x0007a120
 80062e4:	00f42400 	.word	0x00f42400
 80062e8:	02dc6c00 	.word	0x02dc6c00
 80062ec:	4ba7      	ldr	r3, [pc, #668]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062f2:	041b      	lsls	r3, r3, #16
 80062f4:	0e1b      	lsrs	r3, r3, #24
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	4aa5      	ldr	r2, [pc, #660]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80062fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006300:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006302:	f001 b833 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800630a:	f001 b82f 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006312:	f001 b82b 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800631a:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800631e:	430b      	orrs	r3, r1
 8006320:	d17f      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006322:	4b9a      	ldr	r3, [pc, #616]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006324:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800632c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800632e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006330:	2b00      	cmp	r3, #0
 8006332:	d165      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006334:	4b95      	ldr	r3, [pc, #596]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800633a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800633e:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006342:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006346:	d034      	beq.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800634e:	d853      	bhi.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006356:	d00b      	beq.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800635e:	d84b      	bhi.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	2b00      	cmp	r3, #0
 8006364:	d016      	beq.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800636c:	d009      	beq.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800636e:	e043      	b.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff fa43 	bl	8005800 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800637a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800637e:	f000 bff5 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006382:	f107 0318 	add.w	r3, r7, #24
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff fb94 	bl	8005ab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006390:	f000 bfec 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006394:	4b7d      	ldr	r3, [pc, #500]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800639c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063a0:	d103      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 80063a2:	4b7c      	ldr	r3, [pc, #496]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80063a4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80063a6:	f000 bfe1 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80063ae:	f000 bfdd 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80063b2:	4b76      	ldr	r3, [pc, #472]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	d118      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80063be:	4b73      	ldr	r3, [pc, #460]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d005      	beq.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80063ca:	4b70      	ldr	r3, [pc, #448]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	0e1b      	lsrs	r3, r3, #24
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	e006      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80063d6:	4b6d      	ldr	r3, [pc, #436]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063dc:	041b      	lsls	r3, r3, #16
 80063de:	0e1b      	lsrs	r3, r3, #24
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	4a6a      	ldr	r2, [pc, #424]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80063e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ea:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80063ec:	f000 bfbe 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80063f4:	f000 bfba 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80063fc:	f000 bfb6 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006406:	d108      	bne.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006408:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff f9f7 	bl	8005800 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	637b      	str	r3, [r7, #52]	@ 0x34
 8006416:	f000 bfa9 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	637b      	str	r3, [r7, #52]	@ 0x34
 800641e:	f000 bfa5 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006426:	1e51      	subs	r1, r2, #1
 8006428:	430b      	orrs	r3, r1
 800642a:	d136      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800642c:	4b57      	ldr	r3, [pc, #348]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800642e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	2b00      	cmp	r3, #0
 800643c:	d104      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800643e:	f7fe fb8d 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 8006442:	6378      	str	r0, [r7, #52]	@ 0x34
 8006444:	f000 bf92 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	2b01      	cmp	r3, #1
 800644c:	d104      	bne.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800644e:	f7fe fa55 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8006452:	6378      	str	r0, [r7, #52]	@ 0x34
 8006454:	f000 bf8a 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006458:	4b4c      	ldr	r3, [pc, #304]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006464:	d106      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8006466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006468:	2b02      	cmp	r3, #2
 800646a:	d103      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 800646c:	4b4a      	ldr	r3, [pc, #296]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800646e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006470:	f000 bf7c 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006474:	4b45      	ldr	r3, [pc, #276]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b02      	cmp	r3, #2
 8006480:	d107      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	2b03      	cmp	r3, #3
 8006486:	d104      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8006488:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800648c:	637b      	str	r3, [r7, #52]	@ 0x34
 800648e:	f000 bf6d 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	637b      	str	r3, [r7, #52]	@ 0x34
 8006496:	f000 bf69 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800649a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800649e:	1e91      	subs	r1, r2, #2
 80064a0:	430b      	orrs	r3, r1
 80064a2:	d136      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80064a4:	4b39      	ldr	r3, [pc, #228]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064aa:	f003 030c 	and.w	r3, r3, #12
 80064ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80064b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d104      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80064b6:	f7fe fb3d 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 80064ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80064bc:	f000 bf56 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80064c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d104      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064c6:	f7fe fa19 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 80064ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80064cc:	f000 bf4e 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80064d0:	4b2e      	ldr	r3, [pc, #184]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064dc:	d106      	bne.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80064de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d103      	bne.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 80064e4:	4b2c      	ldr	r3, [pc, #176]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80064e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e8:	f000 bf40 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80064ec:	4b27      	ldr	r3, [pc, #156]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d107      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	2b0c      	cmp	r3, #12
 80064fe:	d104      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006500:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006504:	637b      	str	r3, [r7, #52]	@ 0x34
 8006506:	f000 bf31 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	637b      	str	r3, [r7, #52]	@ 0x34
 800650e:	f000 bf2d 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006512:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006516:	1f11      	subs	r1, r2, #4
 8006518:	430b      	orrs	r3, r1
 800651a:	d13f      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800651c:	4b1b      	ldr	r3, [pc, #108]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800651e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006522:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006526:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652a:	2b00      	cmp	r3, #0
 800652c:	d104      	bne.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800652e:	f7fe fb01 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8006532:	6378      	str	r0, [r7, #52]	@ 0x34
 8006534:	f000 bf1a 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653a:	2b10      	cmp	r3, #16
 800653c:	d104      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800653e:	f7fe f9dd 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8006542:	6378      	str	r0, [r7, #52]	@ 0x34
 8006544:	f000 bf12 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006548:	4b10      	ldr	r3, [pc, #64]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006554:	d106      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	2b20      	cmp	r3, #32
 800655a:	d103      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 800655c:	4b0e      	ldr	r3, [pc, #56]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800655e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006560:	f000 bf04 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006564:	4b09      	ldr	r3, [pc, #36]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d107      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006574:	2b30      	cmp	r3, #48	@ 0x30
 8006576:	d104      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8006578:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800657c:	637b      	str	r3, [r7, #52]	@ 0x34
 800657e:	f000 bef5 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	637b      	str	r3, [r7, #52]	@ 0x34
 8006586:	f000 bef1 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800658a:	bf00      	nop
 800658c:	46020c00 	.word	0x46020c00
 8006590:	0800ae1c 	.word	0x0800ae1c
 8006594:	02dc6c00 	.word	0x02dc6c00
 8006598:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800659c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065a0:	f1a2 0108 	sub.w	r1, r2, #8
 80065a4:	430b      	orrs	r3, r1
 80065a6:	d136      	bne.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80065a8:	4ba4      	ldr	r3, [pc, #656]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80065aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d104      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80065ba:	f7fe fabb 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 80065be:	6378      	str	r0, [r7, #52]	@ 0x34
 80065c0:	f000 bed4 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80065c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c6:	2b40      	cmp	r3, #64	@ 0x40
 80065c8:	d104      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80065ca:	f7fe f997 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 80065ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80065d0:	f000 becc 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80065d4:	4b99      	ldr	r3, [pc, #612]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065e0:	d106      	bne.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80065e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e4:	2b80      	cmp	r3, #128	@ 0x80
 80065e6:	d103      	bne.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 80065e8:	4b95      	ldr	r3, [pc, #596]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80065ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ec:	f000 bebe 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80065f0:	4b92      	ldr	r3, [pc, #584]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80065f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d107      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 80065fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006600:	2bc0      	cmp	r3, #192	@ 0xc0
 8006602:	d104      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006604:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006608:	637b      	str	r3, [r7, #52]	@ 0x34
 800660a:	f000 beaf 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	637b      	str	r3, [r7, #52]	@ 0x34
 8006612:	f000 beab 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800661a:	f1a2 0110 	sub.w	r1, r2, #16
 800661e:	430b      	orrs	r3, r1
 8006620:	d139      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006622:	4b86      	ldr	r3, [pc, #536]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006628:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800662c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800662e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006634:	f7fe fa7e 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8006638:	6378      	str	r0, [r7, #52]	@ 0x34
 800663a:	f000 be97 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800663e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006644:	d104      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006646:	f7fe f959 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 800664a:	6378      	str	r0, [r7, #52]	@ 0x34
 800664c:	f000 be8e 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006650:	4b7a      	ldr	r3, [pc, #488]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800665c:	d107      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 800665e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006664:	d103      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8006666:	4b76      	ldr	r3, [pc, #472]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006668:	637b      	str	r3, [r7, #52]	@ 0x34
 800666a:	f000 be7f 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800666e:	4b73      	ldr	r3, [pc, #460]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b02      	cmp	r3, #2
 800667a:	d108      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 800667c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006682:	d104      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006684:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006688:	637b      	str	r3, [r7, #52]	@ 0x34
 800668a:	f000 be6f 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	637b      	str	r3, [r7, #52]	@ 0x34
 8006692:	f000 be6b 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800669a:	f1a2 0120 	sub.w	r1, r2, #32
 800669e:	430b      	orrs	r3, r1
 80066a0:	d158      	bne.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80066a2:	4b66      	ldr	r3, [pc, #408]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80066ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d104      	bne.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80066b4:	f7fe fa66 	bl	8004b84 <HAL_RCC_GetPCLK3Freq>
 80066b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80066ba:	f000 be57 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d104      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80066c4:	f7fe f91a 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 80066c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80066ca:	f000 be4f 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80066ce:	4b5b      	ldr	r3, [pc, #364]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066da:	d106      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80066dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d103      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 80066e2:	4b57      	ldr	r3, [pc, #348]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80066e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066e6:	f000 be41 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80066ea:	4b54      	ldr	r3, [pc, #336]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d107      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d104      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 80066fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006702:	637b      	str	r3, [r7, #52]	@ 0x34
 8006704:	f000 be32 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006708:	4b4c      	ldr	r3, [pc, #304]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b20      	cmp	r3, #32
 8006712:	d11b      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006716:	2b04      	cmp	r3, #4
 8006718:	d118      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800671a:	4b48      	ldr	r3, [pc, #288]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8006726:	4b45      	ldr	r3, [pc, #276]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	0e1b      	lsrs	r3, r3, #24
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	e006      	b.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006732:	4b42      	ldr	r3, [pc, #264]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006738:	041b      	lsls	r3, r3, #16
 800673a:	0e1b      	lsrs	r3, r3, #24
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	4a40      	ldr	r2, [pc, #256]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006746:	637b      	str	r3, [r7, #52]	@ 0x34
 8006748:	f000 be10 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006750:	f000 be0c 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006758:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800675c:	430b      	orrs	r3, r1
 800675e:	d173      	bne.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006760:	4b36      	ldr	r3, [pc, #216]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006766:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800676a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800676c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006772:	d104      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006774:	f7fe f8c2 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8006778:	6378      	str	r0, [r7, #52]	@ 0x34
 800677a:	f000 bdf7 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006784:	d108      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006786:	f107 0318 	add.w	r3, r7, #24
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff f992 	bl	8005ab4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	637b      	str	r3, [r7, #52]	@ 0x34
 8006794:	f000 bdea 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679a:	2b00      	cmp	r3, #0
 800679c:	d104      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800679e:	f7fe f9af 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 80067a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80067a4:	f000 bde2 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80067a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067aa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80067ae:	d122      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80067b0:	4b22      	ldr	r3, [pc, #136]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	d118      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067bc:	4b1f      	ldr	r3, [pc, #124]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80067c8:	4b1c      	ldr	r3, [pc, #112]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	0e1b      	lsrs	r3, r3, #24
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	e006      	b.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80067d4:	4b19      	ldr	r3, [pc, #100]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067da:	041b      	lsls	r3, r3, #16
 80067dc:	0e1b      	lsrs	r3, r3, #24
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	4a18      	ldr	r2, [pc, #96]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80067e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ea:	f000 bdbf 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f2:	f000 bdbb 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80067f6:	4b11      	ldr	r3, [pc, #68]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006802:	d107      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006806:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800680a:	d103      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 800680c:	4b0c      	ldr	r3, [pc, #48]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800680e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006810:	f000 bdac 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006814:	4b09      	ldr	r3, [pc, #36]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800681c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006820:	d107      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006824:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006828:	d103      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800682a:	4b05      	ldr	r3, [pc, #20]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800682c:	637b      	str	r3, [r7, #52]	@ 0x34
 800682e:	f000 bd9d 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	637b      	str	r3, [r7, #52]	@ 0x34
 8006836:	f000 bd99 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800683a:	bf00      	nop
 800683c:	46020c00 	.word	0x46020c00
 8006840:	00f42400 	.word	0x00f42400
 8006844:	0800ae1c 	.word	0x0800ae1c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800684c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006850:	430b      	orrs	r3, r1
 8006852:	d158      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006854:	4bad      	ldr	r3, [pc, #692]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006856:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800685a:	f003 0307 	and.w	r3, r3, #7
 800685e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006862:	2b04      	cmp	r3, #4
 8006864:	d84b      	bhi.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006866:	a201      	add	r2, pc, #4	@ (adr r2, 800686c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	080068a5 	.word	0x080068a5
 8006870:	08006881 	.word	0x08006881
 8006874:	08006893 	.word	0x08006893
 8006878:	080068af 	.word	0x080068af
 800687c:	080068b9 	.word	0x080068b9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe ffbb 	bl	8005800 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800688e:	f000 bd6d 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006892:	f107 030c 	add.w	r3, r7, #12
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff fa66 	bl	8005d68 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068a0:	f000 bd64 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80068a4:	f7fe f92c 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 80068a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80068aa:	f000 bd5f 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80068ae:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80068b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068b4:	f000 bd5a 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068b8:	4b94      	ldr	r3, [pc, #592]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d118      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068c4:	4b91      	ldr	r3, [pc, #580]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 80068d0:	4b8e      	ldr	r3, [pc, #568]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	0e1b      	lsrs	r3, r3, #24
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	e006      	b.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80068dc:	4b8b      	ldr	r3, [pc, #556]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068e2:	041b      	lsls	r3, r3, #16
 80068e4:	0e1b      	lsrs	r3, r3, #24
 80068e6:	f003 030f 	and.w	r3, r3, #15
 80068ea:	4a89      	ldr	r2, [pc, #548]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80068ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068f2:	f000 bd3b 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068fa:	f000 bd37 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006902:	f000 bd33 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800690a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800690e:	430b      	orrs	r3, r1
 8006910:	d167      	bne.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006912:	4b7e      	ldr	r3, [pc, #504]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006918:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800691c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006924:	d036      	beq.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800692c:	d855      	bhi.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006934:	d029      	beq.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006938:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800693c:	d84d      	bhi.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006944:	d013      	beq.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8006946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006948:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800694c:	d845      	bhi.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800694e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006950:	2b00      	cmp	r3, #0
 8006952:	d015      	beq.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800695a:	d13e      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800695c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006960:	4618      	mov	r0, r3
 8006962:	f7fe ff4d 	bl	8005800 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800696a:	f000 bcff 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800696e:	f107 030c 	add.w	r3, r7, #12
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff f9f8 	bl	8005d68 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800697c:	f000 bcf6 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006980:	f7fe f8be 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8006984:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006986:	f000 bcf1 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800698a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800698e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006990:	f000 bcec 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006994:	4b5d      	ldr	r3, [pc, #372]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0320 	and.w	r3, r3, #32
 800699c:	2b20      	cmp	r3, #32
 800699e:	d118      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069a0:	4b5a      	ldr	r3, [pc, #360]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80069ac:	4b57      	ldr	r3, [pc, #348]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	0e1b      	lsrs	r3, r3, #24
 80069b2:	f003 030f 	and.w	r3, r3, #15
 80069b6:	e006      	b.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80069b8:	4b54      	ldr	r3, [pc, #336]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069be:	041b      	lsls	r3, r3, #16
 80069c0:	0e1b      	lsrs	r3, r3, #24
 80069c2:	f003 030f 	and.w	r3, r3, #15
 80069c6:	4a52      	ldr	r2, [pc, #328]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80069c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069cc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069ce:	f000 bccd 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069d6:	f000 bcc9 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069de:	f000 bcc5 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80069e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e6:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80069ea:	430b      	orrs	r3, r1
 80069ec:	d14c      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80069ee:	4b47      	ldr	r3, [pc, #284]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069f8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80069fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d104      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a00:	f7fe f898 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8006a04:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a06:	f000 bcb1 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a10:	d104      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a12:	f7fd ff73 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8006a16:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a18:	f000 bca8 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a28:	d107      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a30:	d103      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8006a32:	4b38      	ldr	r3, [pc, #224]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a36:	f000 bc99 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006a3a:	4b34      	ldr	r3, [pc, #208]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	d11c      	bne.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a4c:	d118      	bne.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	0e1b      	lsrs	r3, r3, #24
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	e006      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8006a66:	4b29      	ldr	r3, [pc, #164]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a6c:	041b      	lsls	r3, r3, #16
 8006a6e:	0e1b      	lsrs	r3, r3, #24
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	4a26      	ldr	r2, [pc, #152]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a7c:	f000 bc76 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a84:	f000 bc72 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a8c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006a90:	430b      	orrs	r3, r1
 8006a92:	d152      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006a94:	4b1d      	ldr	r3, [pc, #116]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a9a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006a9e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d104      	bne.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006aa6:	f7fe f845 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8006aaa:	6378      	str	r0, [r7, #52]	@ 0x34
 8006aac:	f000 bc5e 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ab6:	d104      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ab8:	f7fd ff20 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8006abc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006abe:	f000 bc55 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006ac2:	4b12      	ldr	r3, [pc, #72]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ace:	d107      	bne.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ad6:	d103      	bne.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8006ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8006adc:	f000 bc46 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0320 	and.w	r3, r3, #32
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	d122      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006af2:	d11e      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006af4:	4b05      	ldr	r3, [pc, #20]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00b      	beq.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006b00:	4b02      	ldr	r3, [pc, #8]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	0e1b      	lsrs	r3, r3, #24
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	e00c      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006b0c:	46020c00 	.word	0x46020c00
 8006b10:	0800ae1c 	.word	0x0800ae1c
 8006b14:	00f42400 	.word	0x00f42400
 8006b18:	4ba1      	ldr	r3, [pc, #644]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b1e:	041b      	lsls	r3, r3, #16
 8006b20:	0e1b      	lsrs	r3, r3, #24
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	4a9f      	ldr	r2, [pc, #636]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2e:	f000 bc1d 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b36:	f000 bc19 	b.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b3e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006b42:	430b      	orrs	r3, r1
 8006b44:	d151      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006b46:	4b96      	ldr	r3, [pc, #600]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b4c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b50:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b56:	d024      	beq.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b5c:	d842      	bhi.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	2b80      	cmp	r3, #128	@ 0x80
 8006b62:	d00d      	beq.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	2b80      	cmp	r3, #128	@ 0x80
 8006b68:	d83c      	bhi.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8006b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b72:	2b40      	cmp	r3, #64	@ 0x40
 8006b74:	d011      	beq.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8006b76:	e035      	b.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006b78:	f7fe f804 	bl	8004b84 <HAL_RCC_GetPCLK3Freq>
 8006b7c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b7e:	e3f5      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b80:	4b87      	ldr	r3, [pc, #540]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b8c:	d102      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8006b8e:	4b86      	ldr	r3, [pc, #536]	@ (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006b90:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b92:	e3eb      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b98:	e3e8      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006b9a:	f7fd feaf 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8006b9e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006ba0:	e3e4      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ba2:	4b7f      	ldr	r3, [pc, #508]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	d117      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bae:	4b7c      	ldr	r3, [pc, #496]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8006bba:	4b79      	ldr	r3, [pc, #484]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	0e1b      	lsrs	r3, r3, #24
 8006bc0:	f003 030f 	and.w	r3, r3, #15
 8006bc4:	e006      	b.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006bc6:	4b76      	ldr	r3, [pc, #472]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bcc:	041b      	lsls	r3, r3, #16
 8006bce:	0e1b      	lsrs	r3, r3, #24
 8006bd0:	f003 030f 	and.w	r3, r3, #15
 8006bd4:	4a73      	ldr	r2, [pc, #460]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bda:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bdc:	e3c6      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006be2:	e3c3      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006be8:	e3c0      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bee:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006bf2:	430b      	orrs	r3, r1
 8006bf4:	d147      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bfc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006c00:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d103      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c08:	f7fd ff94 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8006c0c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c0e:	e3ad      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c16:	d103      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c18:	f7fd fe70 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8006c1c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c1e:	e3a5      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006c20:	4b5f      	ldr	r3, [pc, #380]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c2c:	d106      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c34:	d102      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8006c36:	4b5c      	ldr	r3, [pc, #368]	@ (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c3a:	e397      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006c3c:	4b58      	ldr	r3, [pc, #352]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0320 	and.w	r3, r3, #32
 8006c44:	2b20      	cmp	r3, #32
 8006c46:	d11b      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006c4e:	d117      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c50:	4b53      	ldr	r3, [pc, #332]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8006c5c:	4b50      	ldr	r3, [pc, #320]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	0e1b      	lsrs	r3, r3, #24
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	e006      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006c68:	4b4d      	ldr	r3, [pc, #308]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c6e:	041b      	lsls	r3, r3, #16
 8006c70:	0e1b      	lsrs	r3, r3, #24
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	4a4b      	ldr	r2, [pc, #300]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c7e:	e375      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c84:	e372      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c8a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006c8e:	430b      	orrs	r3, r1
 8006c90:	d164      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006c92:	4b43      	ldr	r3, [pc, #268]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c9c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d120      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0320 	and.w	r3, r3, #32
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d117      	bne.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cb0:	4b3b      	ldr	r3, [pc, #236]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006cbc:	4b38      	ldr	r3, [pc, #224]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	0e1b      	lsrs	r3, r3, #24
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	e006      	b.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006cc8:	4b35      	ldr	r3, [pc, #212]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cce:	041b      	lsls	r3, r3, #16
 8006cd0:	0e1b      	lsrs	r3, r3, #24
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	4a33      	ldr	r2, [pc, #204]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cde:	e345      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce4:	e342      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cf4:	d112      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cfc:	d10e      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006cfe:	4b28      	ldr	r3, [pc, #160]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d0c:	d102      	bne.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006d0e:	23fa      	movs	r3, #250	@ 0xfa
 8006d10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d12:	e32b      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006d14:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006d18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d1a:	e327      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006d1c:	4b20      	ldr	r3, [pc, #128]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d28:	d106      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d30:	d102      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006d32:	4b1d      	ldr	r3, [pc, #116]	@ (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d36:	e319      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006d38:	4b19      	ldr	r3, [pc, #100]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d107      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d4c:	d103      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d54:	e30a      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d5a:	e307      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d60:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006d64:	430b      	orrs	r3, r1
 8006d66:	d16b      	bne.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006d68:	4b0d      	ldr	r3, [pc, #52]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d6e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006d72:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d127      	bne.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d7a:	4b09      	ldr	r3, [pc, #36]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	d11e      	bne.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d86:	4b06      	ldr	r3, [pc, #24]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00c      	beq.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006d92:	4b03      	ldr	r3, [pc, #12]	@ (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	0e1b      	lsrs	r3, r3, #24
 8006d98:	f003 030f 	and.w	r3, r3, #15
 8006d9c:	e00d      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006d9e:	bf00      	nop
 8006da0:	46020c00 	.word	0x46020c00
 8006da4:	0800ae1c 	.word	0x0800ae1c
 8006da8:	00f42400 	.word	0x00f42400
 8006dac:	4b94      	ldr	r3, [pc, #592]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006dae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006db2:	041b      	lsls	r3, r3, #16
 8006db4:	0e1b      	lsrs	r3, r3, #24
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	4a92      	ldr	r2, [pc, #584]	@ (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dc2:	e2d3      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dc8:	e2d0      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006dca:	4b8d      	ldr	r3, [pc, #564]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dd8:	d112      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8006dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de0:	d10e      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006de2:	4b87      	ldr	r3, [pc, #540]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006df0:	d102      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006df2:	23fa      	movs	r3, #250	@ 0xfa
 8006df4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006df6:	e2b9      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006df8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006dfc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dfe:	e2b5      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006e00:	4b7f      	ldr	r3, [pc, #508]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e0c:	d106      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e14:	d102      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8006e16:	4b7c      	ldr	r3, [pc, #496]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e1a:	e2a7      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006e1c:	4b78      	ldr	r3, [pc, #480]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d107      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e30:	d103      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e38:	e298      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e3e:	e295      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e44:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	d147      	bne.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006e4c:	4b6c      	ldr	r3, [pc, #432]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e52:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006e56:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d103      	bne.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e5e:	f7fd fe69 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8006e62:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e64:	e282      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006e66:	4b66      	ldr	r3, [pc, #408]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e74:	d112      	bne.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e7c:	d10e      	bne.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e7e:	4b60      	ldr	r3, [pc, #384]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e8c:	d102      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006e8e:	23fa      	movs	r3, #250	@ 0xfa
 8006e90:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e92:	e26b      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006e94:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e98:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e9a:	e267      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006e9c:	4b58      	ldr	r3, [pc, #352]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ea8:	d106      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006eb0:	d102      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006eb2:	4b55      	ldr	r3, [pc, #340]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eb6:	e259      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006eb8:	4b51      	ldr	r3, [pc, #324]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006eba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d107      	bne.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006ecc:	d103      	bne.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006ece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed4:	e24a      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eda:	e247      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ee0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	d12d      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006ee8:	4b45      	ldr	r3, [pc, #276]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eee:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006ef2:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006ef4:	4b42      	ldr	r3, [pc, #264]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006efc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f00:	d105      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d102      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006f08:	4b3f      	ldr	r3, [pc, #252]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f0c:	e22e      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f14:	d107      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fe fc70 	bl	8005800 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f24:	e222      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f2c:	d107      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f2e:	f107 0318 	add.w	r3, r7, #24
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fe fdbe 	bl	8005ab4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f3c:	e216      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f42:	e213      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f48:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	d15d      	bne.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006f50:	4b2b      	ldr	r3, [pc, #172]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f56:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006f5a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f62:	d028      	beq.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8006f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f6a:	d845      	bhi.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f72:	d013      	beq.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8006f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f7a:	d83d      	bhi.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f88:	d004      	beq.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8006f8a:	e035      	b.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006f8c:	f7fd fde6 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 8006f90:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f92:	e1eb      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006f94:	f7fd fcb2 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8006f98:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f9a:	e1e7      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f9c:	4b18      	ldr	r3, [pc, #96]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fa8:	d102      	bne.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8006faa:	4b17      	ldr	r3, [pc, #92]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006fac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fae:	e1dd      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fb4:	e1da      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fb6:	4b12      	ldr	r3, [pc, #72]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b20      	cmp	r3, #32
 8006fc0:	d117      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006fce:	4b0c      	ldr	r3, [pc, #48]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	0e1b      	lsrs	r3, r3, #24
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	e006      	b.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8006fda:	4b09      	ldr	r3, [pc, #36]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fe0:	041b      	lsls	r3, r3, #16
 8006fe2:	0e1b      	lsrs	r3, r3, #24
 8006fe4:	f003 030f 	and.w	r3, r3, #15
 8006fe8:	4a06      	ldr	r2, [pc, #24]	@ (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ff0:	e1bc      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ff6:	e1b9      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ffc:	e1b6      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006ffe:	bf00      	nop
 8007000:	46020c00 	.word	0x46020c00
 8007004:	0800ae1c 	.word	0x0800ae1c
 8007008:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800700c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007010:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007014:	430b      	orrs	r3, r1
 8007016:	d156      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007018:	4ba5      	ldr	r3, [pc, #660]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800701a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800701e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007022:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007026:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800702a:	d028      	beq.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 800702c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007032:	d845      	bhi.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800703a:	d013      	beq.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800703c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007042:	d83d      	bhi.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8007044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800704a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007050:	d004      	beq.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8007052:	e035      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007054:	f7fd fd6e 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8007058:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800705a:	e187      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800705c:	f7fd fc4e 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8007060:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007062:	e183      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007064:	4b92      	ldr	r3, [pc, #584]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800706c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007070:	d102      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8007072:	4b90      	ldr	r3, [pc, #576]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007074:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007076:	e179      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800707c:	e176      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800707e:	4b8c      	ldr	r3, [pc, #560]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b20      	cmp	r3, #32
 8007088:	d117      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800708a:	4b89      	ldr	r3, [pc, #548]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d005      	beq.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8007096:	4b86      	ldr	r3, [pc, #536]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	0e1b      	lsrs	r3, r3, #24
 800709c:	f003 030f 	and.w	r3, r3, #15
 80070a0:	e006      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 80070a2:	4b83      	ldr	r3, [pc, #524]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070a8:	041b      	lsls	r3, r3, #16
 80070aa:	0e1b      	lsrs	r3, r3, #24
 80070ac:	f003 030f 	and.w	r3, r3, #15
 80070b0:	4a81      	ldr	r2, [pc, #516]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80070b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070b8:	e158      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070be:	e155      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070c4:	e152      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80070c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ca:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80070ce:	430b      	orrs	r3, r1
 80070d0:	d177      	bne.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80070d2:	4b77      	ldr	r3, [pc, #476]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070d8:	f003 0318 	and.w	r3, r3, #24
 80070dc:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80070de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e0:	2b18      	cmp	r3, #24
 80070e2:	d86b      	bhi.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80070e4:	a201      	add	r2, pc, #4	@ (adr r2, 80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80070e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ea:	bf00      	nop
 80070ec:	08007151 	.word	0x08007151
 80070f0:	080071bd 	.word	0x080071bd
 80070f4:	080071bd 	.word	0x080071bd
 80070f8:	080071bd 	.word	0x080071bd
 80070fc:	080071bd 	.word	0x080071bd
 8007100:	080071bd 	.word	0x080071bd
 8007104:	080071bd 	.word	0x080071bd
 8007108:	080071bd 	.word	0x080071bd
 800710c:	08007159 	.word	0x08007159
 8007110:	080071bd 	.word	0x080071bd
 8007114:	080071bd 	.word	0x080071bd
 8007118:	080071bd 	.word	0x080071bd
 800711c:	080071bd 	.word	0x080071bd
 8007120:	080071bd 	.word	0x080071bd
 8007124:	080071bd 	.word	0x080071bd
 8007128:	080071bd 	.word	0x080071bd
 800712c:	08007161 	.word	0x08007161
 8007130:	080071bd 	.word	0x080071bd
 8007134:	080071bd 	.word	0x080071bd
 8007138:	080071bd 	.word	0x080071bd
 800713c:	080071bd 	.word	0x080071bd
 8007140:	080071bd 	.word	0x080071bd
 8007144:	080071bd 	.word	0x080071bd
 8007148:	080071bd 	.word	0x080071bd
 800714c:	0800717b 	.word	0x0800717b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007150:	f7fd fd18 	bl	8004b84 <HAL_RCC_GetPCLK3Freq>
 8007154:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007156:	e109      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007158:	f7fd fbd0 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 800715c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800715e:	e105      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007160:	4b53      	ldr	r3, [pc, #332]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800716c:	d102      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800716e:	4b51      	ldr	r3, [pc, #324]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007170:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007172:	e0fb      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007178:	e0f8      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800717a:	4b4d      	ldr	r3, [pc, #308]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b20      	cmp	r3, #32
 8007184:	d117      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007186:	4b4a      	ldr	r3, [pc, #296]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d005      	beq.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8007192:	4b47      	ldr	r3, [pc, #284]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	0e1b      	lsrs	r3, r3, #24
 8007198:	f003 030f 	and.w	r3, r3, #15
 800719c:	e006      	b.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800719e:	4b44      	ldr	r3, [pc, #272]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071a4:	041b      	lsls	r3, r3, #16
 80071a6:	0e1b      	lsrs	r3, r3, #24
 80071a8:	f003 030f 	and.w	r3, r3, #15
 80071ac:	4a42      	ldr	r2, [pc, #264]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80071ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071b4:	e0da      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071ba:	e0d7      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071c0:	e0d4      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80071c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071c6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80071ca:	430b      	orrs	r3, r1
 80071cc:	d155      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80071ce:	4b38      	ldr	r3, [pc, #224]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071d4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80071d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80071da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071e0:	d013      	beq.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071e8:	d844      	bhi.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071f0:	d013      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071f8:	d83c      	bhi.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d014      	beq.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007206:	d014      	beq.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8007208:	e034      	b.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800720a:	f107 0318 	add.w	r3, r7, #24
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe fc50 	bl	8005ab4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007218:	e0a8      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800721a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe faee 	bl	8005800 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007226:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007228:	e0a0      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800722a:	f7fd fb67 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 800722e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007230:	e09c      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007232:	4b1f      	ldr	r3, [pc, #124]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0320 	and.w	r3, r3, #32
 800723a:	2b20      	cmp	r3, #32
 800723c:	d117      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800723e:	4b1c      	ldr	r3, [pc, #112]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d005      	beq.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800724a:	4b19      	ldr	r3, [pc, #100]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	0e1b      	lsrs	r3, r3, #24
 8007250:	f003 030f 	and.w	r3, r3, #15
 8007254:	e006      	b.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8007256:	4b16      	ldr	r3, [pc, #88]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007258:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800725c:	041b      	lsls	r3, r3, #16
 800725e:	0e1b      	lsrs	r3, r3, #24
 8007260:	f003 030f 	and.w	r3, r3, #15
 8007264:	4a14      	ldr	r2, [pc, #80]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800726a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800726c:	e07e      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007272:	e07b      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007278:	e078      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800727a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800727e:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007282:	430b      	orrs	r3, r1
 8007284:	d138      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007286:	4b0a      	ldr	r3, [pc, #40]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800728c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007290:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007292:	4b07      	ldr	r3, [pc, #28]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b02      	cmp	r3, #2
 800729e:	d10d      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 80072a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ac:	e05e      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80072ae:	bf00      	nop
 80072b0:	46020c00 	.word	0x46020c00
 80072b4:	00f42400 	.word	0x00f42400
 80072b8:	0800ae1c 	.word	0x0800ae1c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80072bc:	4b2e      	ldr	r3, [pc, #184]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80072be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072ca:	d112      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 80072cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072d2:	d10e      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072d4:	4b28      	ldr	r3, [pc, #160]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80072d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072e2:	d102      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 80072e4:	23fa      	movs	r3, #250	@ 0xfa
 80072e6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072e8:	e040      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80072ea:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80072ee:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072f0:	e03c      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f6:	e039      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80072f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072fc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007300:	430b      	orrs	r3, r1
 8007302:	d131      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007304:	4b1c      	ldr	r3, [pc, #112]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007306:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800730a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800730e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007310:	4b19      	ldr	r3, [pc, #100]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800731c:	d105      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007320:	2b00      	cmp	r3, #0
 8007322:	d102      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8007324:	4b15      	ldr	r3, [pc, #84]	@ (800737c <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8007326:	637b      	str	r3, [r7, #52]	@ 0x34
 8007328:	e020      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800732a:	4b13      	ldr	r3, [pc, #76]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007336:	d106      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800733e:	d102      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007340:	4b0f      	ldr	r3, [pc, #60]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8007342:	637b      	str	r3, [r7, #52]	@ 0x34
 8007344:	e012      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007346:	4b0c      	ldr	r3, [pc, #48]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800734e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007352:	d106      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800735a:	d102      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 800735c:	4b09      	ldr	r3, [pc, #36]	@ (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800735e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007360:	e004      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	637b      	str	r3, [r7, #52]	@ 0x34
 8007366:	e001      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800736c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800736e:	4618      	mov	r0, r3
 8007370:	3738      	adds	r7, #56	@ 0x38
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	46020c00 	.word	0x46020c00
 800737c:	02dc6c00 	.word	0x02dc6c00
 8007380:	016e3600 	.word	0x016e3600
 8007384:	00f42400 	.word	0x00f42400

08007388 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007390:	4b47      	ldr	r3, [pc, #284]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a46      	ldr	r2, [pc, #280]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 8007396:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800739a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800739c:	f7fa f80a 	bl	80013b4 <HAL_GetTick>
 80073a0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073a2:	e008      	b.n	80073b6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073a4:	f7fa f806 	bl	80013b4 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d901      	bls.n	80073b6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e077      	b.n	80074a6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073b6:	4b3e      	ldr	r3, [pc, #248]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1f0      	bne.n	80073a4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80073c2:	4b3b      	ldr	r3, [pc, #236]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 80073c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80073ca:	f023 0303 	bic.w	r3, r3, #3
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6811      	ldr	r1, [r2, #0]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6852      	ldr	r2, [r2, #4]
 80073d6:	3a01      	subs	r2, #1
 80073d8:	0212      	lsls	r2, r2, #8
 80073da:	430a      	orrs	r2, r1
 80073dc:	4934      	ldr	r1, [pc, #208]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80073e2:	4b33      	ldr	r3, [pc, #204]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 80073e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073e6:	4b33      	ldr	r3, [pc, #204]	@ (80074b4 <RCCEx_PLL2_Config+0x12c>)
 80073e8:	4013      	ands	r3, r2
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6892      	ldr	r2, [r2, #8]
 80073ee:	3a01      	subs	r2, #1
 80073f0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	68d2      	ldr	r2, [r2, #12]
 80073f8:	3a01      	subs	r2, #1
 80073fa:	0252      	lsls	r2, r2, #9
 80073fc:	b292      	uxth	r2, r2
 80073fe:	4311      	orrs	r1, r2
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6912      	ldr	r2, [r2, #16]
 8007404:	3a01      	subs	r2, #1
 8007406:	0412      	lsls	r2, r2, #16
 8007408:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800740c:	4311      	orrs	r1, r2
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6952      	ldr	r2, [r2, #20]
 8007412:	3a01      	subs	r2, #1
 8007414:	0612      	lsls	r2, r2, #24
 8007416:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800741a:	430a      	orrs	r2, r1
 800741c:	4924      	ldr	r1, [pc, #144]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 800741e:	4313      	orrs	r3, r2
 8007420:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007422:	4b23      	ldr	r3, [pc, #140]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 8007424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007426:	f023 020c 	bic.w	r2, r3, #12
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	4920      	ldr	r1, [pc, #128]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 8007430:	4313      	orrs	r3, r2
 8007432:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007434:	4b1e      	ldr	r3, [pc, #120]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 8007436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	491c      	ldr	r1, [pc, #112]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 800743e:	4313      	orrs	r3, r2
 8007440:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007442:	4b1b      	ldr	r3, [pc, #108]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 8007444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007446:	4a1a      	ldr	r2, [pc, #104]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 8007448:	f023 0310 	bic.w	r3, r3, #16
 800744c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800744e:	4b18      	ldr	r3, [pc, #96]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 8007450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007456:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	69d2      	ldr	r2, [r2, #28]
 800745e:	00d2      	lsls	r2, r2, #3
 8007460:	4913      	ldr	r1, [pc, #76]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 8007462:	4313      	orrs	r3, r2
 8007464:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007466:	4b12      	ldr	r3, [pc, #72]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 8007468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746a:	4a11      	ldr	r2, [pc, #68]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 800746c:	f043 0310 	orr.w	r3, r3, #16
 8007470:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007472:	4b0f      	ldr	r3, [pc, #60]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a0e      	ldr	r2, [pc, #56]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 8007478:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800747c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800747e:	f7f9 ff99 	bl	80013b4 <HAL_GetTick>
 8007482:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007484:	e008      	b.n	8007498 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007486:	f7f9 ff95 	bl	80013b4 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d901      	bls.n	8007498 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e006      	b.n	80074a6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007498:	4b05      	ldr	r3, [pc, #20]	@ (80074b0 <RCCEx_PLL2_Config+0x128>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d0f0      	beq.n	8007486 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0

}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	46020c00 	.word	0x46020c00
 80074b4:	80800000 	.word	0x80800000

080074b8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80074c0:	4b47      	ldr	r3, [pc, #284]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a46      	ldr	r2, [pc, #280]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 80074c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074cc:	f7f9 ff72 	bl	80013b4 <HAL_GetTick>
 80074d0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074d2:	e008      	b.n	80074e6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074d4:	f7f9 ff6e 	bl	80013b4 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e077      	b.n	80075d6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074e6:	4b3e      	ldr	r3, [pc, #248]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1f0      	bne.n	80074d4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80074f2:	4b3b      	ldr	r3, [pc, #236]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 80074f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80074fa:	f023 0303 	bic.w	r3, r3, #3
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6811      	ldr	r1, [r2, #0]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6852      	ldr	r2, [r2, #4]
 8007506:	3a01      	subs	r2, #1
 8007508:	0212      	lsls	r2, r2, #8
 800750a:	430a      	orrs	r2, r1
 800750c:	4934      	ldr	r1, [pc, #208]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 800750e:	4313      	orrs	r3, r2
 8007510:	630b      	str	r3, [r1, #48]	@ 0x30
 8007512:	4b33      	ldr	r3, [pc, #204]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 8007514:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007516:	4b33      	ldr	r3, [pc, #204]	@ (80075e4 <RCCEx_PLL3_Config+0x12c>)
 8007518:	4013      	ands	r3, r2
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6892      	ldr	r2, [r2, #8]
 800751e:	3a01      	subs	r2, #1
 8007520:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	68d2      	ldr	r2, [r2, #12]
 8007528:	3a01      	subs	r2, #1
 800752a:	0252      	lsls	r2, r2, #9
 800752c:	b292      	uxth	r2, r2
 800752e:	4311      	orrs	r1, r2
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6912      	ldr	r2, [r2, #16]
 8007534:	3a01      	subs	r2, #1
 8007536:	0412      	lsls	r2, r2, #16
 8007538:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800753c:	4311      	orrs	r1, r2
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6952      	ldr	r2, [r2, #20]
 8007542:	3a01      	subs	r2, #1
 8007544:	0612      	lsls	r2, r2, #24
 8007546:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800754a:	430a      	orrs	r2, r1
 800754c:	4924      	ldr	r1, [pc, #144]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 800754e:	4313      	orrs	r3, r2
 8007550:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007552:	4b23      	ldr	r3, [pc, #140]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 8007554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007556:	f023 020c 	bic.w	r2, r3, #12
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	4920      	ldr	r1, [pc, #128]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 8007560:	4313      	orrs	r3, r2
 8007562:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007564:	4b1e      	ldr	r3, [pc, #120]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 8007566:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	491c      	ldr	r1, [pc, #112]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 800756e:	4313      	orrs	r3, r2
 8007570:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007572:	4b1b      	ldr	r3, [pc, #108]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007576:	4a1a      	ldr	r2, [pc, #104]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 8007578:	f023 0310 	bic.w	r3, r3, #16
 800757c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800757e:	4b18      	ldr	r3, [pc, #96]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 8007580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007582:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007586:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	69d2      	ldr	r2, [r2, #28]
 800758e:	00d2      	lsls	r2, r2, #3
 8007590:	4913      	ldr	r1, [pc, #76]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 8007592:	4313      	orrs	r3, r2
 8007594:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007596:	4b12      	ldr	r3, [pc, #72]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 8007598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759a:	4a11      	ldr	r2, [pc, #68]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 800759c:	f043 0310 	orr.w	r3, r3, #16
 80075a0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80075a2:	4b0f      	ldr	r3, [pc, #60]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a0e      	ldr	r2, [pc, #56]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 80075a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075ae:	f7f9 ff01 	bl	80013b4 <HAL_GetTick>
 80075b2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075b4:	e008      	b.n	80075c8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075b6:	f7f9 fefd 	bl	80013b4 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d901      	bls.n	80075c8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e006      	b.n	80075d6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075c8:	4b05      	ldr	r3, [pc, #20]	@ (80075e0 <RCCEx_PLL3_Config+0x128>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0f0      	beq.n	80075b6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	46020c00 	.word	0x46020c00
 80075e4:	80800000 	.word	0x80800000

080075e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e042      	b.n	8007680 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007600:	2b00      	cmp	r3, #0
 8007602:	d106      	bne.n	8007612 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7f9 fbd7 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2224      	movs	r2, #36	@ 0x24
 8007616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0201 	bic.w	r2, r2, #1
 8007628:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762e:	2b00      	cmp	r3, #0
 8007630:	d002      	beq.n	8007638 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fdaa 	bl	800818c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fc05 	bl	8007e48 <UART_SetConfig>
 800763e:	4603      	mov	r3, r0
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e01b      	b.n	8007680 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007656:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689a      	ldr	r2, [r3, #8]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007666:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f042 0201 	orr.w	r2, r2, #1
 8007676:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fe29 	bl	80082d0 <UART_CheckIdleState>
 800767e:	4603      	mov	r3, r0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08a      	sub	sp, #40	@ 0x28
 800768c:	af02      	add	r7, sp, #8
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	4613      	mov	r3, r2
 8007696:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800769e:	2b20      	cmp	r3, #32
 80076a0:	f040 808b 	bne.w	80077ba <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <HAL_UART_Transmit+0x28>
 80076aa:	88fb      	ldrh	r3, [r7, #6]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e083      	b.n	80077bc <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076be:	2b80      	cmp	r3, #128	@ 0x80
 80076c0:	d107      	bne.n	80076d2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076d0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2221      	movs	r2, #33	@ 0x21
 80076de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076e2:	f7f9 fe67 	bl	80013b4 <HAL_GetTick>
 80076e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	88fa      	ldrh	r2, [r7, #6]
 80076ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	88fa      	ldrh	r2, [r7, #6]
 80076f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007700:	d108      	bne.n	8007714 <HAL_UART_Transmit+0x8c>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d104      	bne.n	8007714 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800770a:	2300      	movs	r3, #0
 800770c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	61bb      	str	r3, [r7, #24]
 8007712:	e003      	b.n	800771c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007718:	2300      	movs	r3, #0
 800771a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800771c:	e030      	b.n	8007780 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2200      	movs	r2, #0
 8007726:	2180      	movs	r1, #128	@ 0x80
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fe7b 	bl	8008424 <UART_WaitOnFlagUntilTimeout>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d005      	beq.n	8007740 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2220      	movs	r2, #32
 8007738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e03d      	b.n	80077bc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10b      	bne.n	800775e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007754:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	3302      	adds	r3, #2
 800775a:	61bb      	str	r3, [r7, #24]
 800775c:	e007      	b.n	800776e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	781a      	ldrb	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	3301      	adds	r3, #1
 800776c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007774:	b29b      	uxth	r3, r3
 8007776:	3b01      	subs	r3, #1
 8007778:	b29a      	uxth	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007786:	b29b      	uxth	r3, r3
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1c8      	bne.n	800771e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	2200      	movs	r2, #0
 8007794:	2140      	movs	r1, #64	@ 0x40
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 fe44 	bl	8008424 <UART_WaitOnFlagUntilTimeout>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e006      	b.n	80077bc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e000      	b.n	80077bc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80077ba:	2302      	movs	r3, #2
  }
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3720      	adds	r7, #32
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08a      	sub	sp, #40	@ 0x28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	4613      	mov	r3, r2
 80077d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d14b      	bne.n	8007874 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <HAL_UART_Receive_IT+0x24>
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e044      	b.n	8007876 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077fc:	2b40      	cmp	r3, #64	@ 0x40
 80077fe:	d107      	bne.n	8007810 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800780e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a1a      	ldr	r2, [pc, #104]	@ (8007880 <HAL_UART_Receive_IT+0xbc>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d024      	beq.n	8007864 <HAL_UART_Receive_IT+0xa0>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a19      	ldr	r2, [pc, #100]	@ (8007884 <HAL_UART_Receive_IT+0xc0>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d01f      	beq.n	8007864 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d018      	beq.n	8007864 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	613b      	str	r3, [r7, #16]
   return(result);
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	623b      	str	r3, [r7, #32]
 8007852:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	69f9      	ldr	r1, [r7, #28]
 8007856:	6a3a      	ldr	r2, [r7, #32]
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	61bb      	str	r3, [r7, #24]
   return(result);
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e6      	bne.n	8007832 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007864:	88fb      	ldrh	r3, [r7, #6]
 8007866:	461a      	mov	r2, r3
 8007868:	68b9      	ldr	r1, [r7, #8]
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 fe48 	bl	8008500 <UART_Start_Receive_IT>
 8007870:	4603      	mov	r3, r0
 8007872:	e000      	b.n	8007876 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007874:	2302      	movs	r3, #2
  }
}
 8007876:	4618      	mov	r0, r3
 8007878:	3728      	adds	r7, #40	@ 0x28
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	46002400 	.word	0x46002400
 8007884:	56002400 	.word	0x56002400

08007888 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b0ae      	sub	sp, #184	@ 0xb8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80078b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80078b6:	4013      	ands	r3, r2
 80078b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 80078bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d11b      	bne.n	80078fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078c8:	f003 0320 	and.w	r3, r3, #32
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d015      	beq.n	80078fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80078d4:	f003 0320 	and.w	r3, r3, #32
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d105      	bne.n	80078e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d009      	beq.n	80078fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 827e 	beq.w	8007dee <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	4798      	blx	r3
      }
      return;
 80078fa:	e278      	b.n	8007dee <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 80fd 	beq.w	8007b00 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007906:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800790a:	4b7a      	ldr	r3, [pc, #488]	@ (8007af4 <HAL_UART_IRQHandler+0x26c>)
 800790c:	4013      	ands	r3, r2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007912:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007916:	4b78      	ldr	r3, [pc, #480]	@ (8007af8 <HAL_UART_IRQHandler+0x270>)
 8007918:	4013      	ands	r3, r2
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 80f0 	beq.w	8007b00 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007920:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d011      	beq.n	8007950 <HAL_UART_IRQHandler+0xc8>
 800792c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00b      	beq.n	8007950 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2201      	movs	r2, #1
 800793e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007946:	f043 0201 	orr.w	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007950:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d011      	beq.n	8007980 <HAL_UART_IRQHandler+0xf8>
 800795c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2202      	movs	r2, #2
 800796e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007976:	f043 0204 	orr.w	r2, r3, #4
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007980:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b00      	cmp	r3, #0
 800798a:	d011      	beq.n	80079b0 <HAL_UART_IRQHandler+0x128>
 800798c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00b      	beq.n	80079b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2204      	movs	r2, #4
 800799e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a6:	f043 0202 	orr.w	r2, r3, #2
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079b4:	f003 0308 	and.w	r3, r3, #8
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d017      	beq.n	80079ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80079c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80079cc:	4b49      	ldr	r3, [pc, #292]	@ (8007af4 <HAL_UART_IRQHandler+0x26c>)
 80079ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00b      	beq.n	80079ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2208      	movs	r2, #8
 80079da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e2:	f043 0208 	orr.w	r2, r3, #8
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d012      	beq.n	8007a1e <HAL_UART_IRQHandler+0x196>
 80079f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80079fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00c      	beq.n	8007a1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a14:	f043 0220 	orr.w	r2, r3, #32
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 81e4 	beq.w	8007df2 <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d013      	beq.n	8007a5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d105      	bne.n	8007a4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d007      	beq.n	8007a5e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a72:	2b40      	cmp	r3, #64	@ 0x40
 8007a74:	d005      	beq.n	8007a82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d02e      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fe5e 	bl	8008744 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a92:	2b40      	cmp	r3, #64	@ 0x40
 8007a94:	d120      	bne.n	8007ad8 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d017      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aa6:	4a15      	ldr	r2, [pc, #84]	@ (8007afc <HAL_UART_IRQHandler+0x274>)
 8007aa8:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fa fa87 	bl	8001fc4 <HAL_DMA_Abort_IT>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d019      	beq.n	8007af0 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007aca:	4610      	mov	r0, r2
 8007acc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ace:	e00f      	b.n	8007af0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f9a3 	bl	8007e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad6:	e00b      	b.n	8007af0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f99f 	bl	8007e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ade:	e007      	b.n	8007af0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f99b 	bl	8007e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007aee:	e180      	b.n	8007df2 <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af0:	bf00      	nop
    return;
 8007af2:	e17e      	b.n	8007df2 <HAL_UART_IRQHandler+0x56a>
 8007af4:	10000001 	.word	0x10000001
 8007af8:	04000120 	.word	0x04000120
 8007afc:	08008811 	.word	0x08008811

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	f040 8129 	bne.w	8007d5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b0e:	f003 0310 	and.w	r3, r3, #16
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 8122 	beq.w	8007d5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007b1c:	f003 0310 	and.w	r3, r3, #16
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 811b 	beq.w	8007d5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2210      	movs	r2, #16
 8007b2c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b38:	2b40      	cmp	r3, #64	@ 0x40
 8007b3a:	f040 8091 	bne.w	8007c60 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b48:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8007b4c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 8150 	beq.w	8007df6 <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b5c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007b60:	429a      	cmp	r2, r3
 8007b62:	f080 8148 	bcs.w	8007df6 <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007b6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b78:	2b81      	cmp	r3, #129	@ 0x81
 8007b7a:	d060      	beq.n	8007c3e <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ba2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ba6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007bb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e2      	bne.n	8007b7c <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007bc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bc8:	f023 0301 	bic.w	r3, r3, #1
 8007bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007bda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007be0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007be2:	e841 2300 	strex	r3, r2, [r1]
 8007be6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1e3      	bne.n	8007bb6 <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c04:	e853 3f00 	ldrex	r3, [r3]
 8007c08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c0c:	f023 0310 	bic.w	r3, r3, #16
 8007c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e4      	bne.n	8007bfc <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fa f947 	bl	8001ecc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2202      	movs	r2, #2
 8007c42:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f8e9 	bl	8007e30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c5e:	e0ca      	b.n	8007df6 <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80bc 	beq.w	8007dfa <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 8007c82:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 80b7 	beq.w	8007dfa <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cae:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cb0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e4      	bne.n	8007c8c <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cd8:	f023 0301 	bic.w	r3, r3, #1
 8007cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007cea:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e1      	bne.n	8007cc2 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0310 	bic.w	r3, r3, #16
 8007d26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007d34:	61fb      	str	r3, [r7, #28]
 8007d36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	69b9      	ldr	r1, [r7, #24]
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	617b      	str	r3, [r7, #20]
   return(result);
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e4      	bne.n	8007d12 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d4e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f86b 	bl	8007e30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d5a:	e04e      	b.n	8007dfa <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d014      	beq.n	8007d92 <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d105      	bne.n	8007d80 <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d008      	beq.n	8007d92 <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d03a      	beq.n	8007dfe <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	4798      	blx	r3
    }
    return;
 8007d90:	e035      	b.n	8007dfe <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d009      	beq.n	8007db2 <HAL_UART_IRQHandler+0x52a>
 8007d9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fd46 	bl	800883c <UART_EndTransmit_IT>
    return;
 8007db0:	e026      	b.n	8007e00 <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007db2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007db6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x54a>
 8007dbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007dc2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 faa4 	bl	8009318 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dd0:	e016      	b.n	8007e00 <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007dd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007dd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d010      	beq.n	8007e00 <HAL_UART_IRQHandler+0x578>
 8007dde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	da0c      	bge.n	8007e00 <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 fa8c 	bl	8009304 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dec:	e008      	b.n	8007e00 <HAL_UART_IRQHandler+0x578>
      return;
 8007dee:	bf00      	nop
 8007df0:	e006      	b.n	8007e00 <HAL_UART_IRQHandler+0x578>
    return;
 8007df2:	bf00      	nop
 8007df4:	e004      	b.n	8007e00 <HAL_UART_IRQHandler+0x578>
      return;
 8007df6:	bf00      	nop
 8007df8:	e002      	b.n	8007e00 <HAL_UART_IRQHandler+0x578>
      return;
 8007dfa:	bf00      	nop
 8007dfc:	e000      	b.n	8007e00 <HAL_UART_IRQHandler+0x578>
    return;
 8007dfe:	bf00      	nop
  }
}
 8007e00:	37b8      	adds	r7, #184	@ 0xb8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop

08007e08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e4c:	b094      	sub	sp, #80	@ 0x50
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8008058 <UART_SetConfig+0x210>)
 8007e5e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4977      	ldr	r1, [pc, #476]	@ (800805c <UART_SetConfig+0x214>)
 8007e80:	4019      	ands	r1, r3
 8007e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e98:	68d9      	ldr	r1, [r3, #12]
 8007e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	ea40 0301 	orr.w	r3, r0, r1
 8007ea2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b6a      	ldr	r3, [pc, #424]	@ (8008058 <UART_SetConfig+0x210>)
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d009      	beq.n	8007ec8 <UART_SetConfig+0x80>
 8007eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	4b69      	ldr	r3, [pc, #420]	@ (8008060 <UART_SetConfig+0x218>)
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d004      	beq.n	8007ec8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec0:	6a1a      	ldr	r2, [r3, #32]
 8007ec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007ed2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8007ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007edc:	430b      	orrs	r3, r1
 8007ede:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee6:	f023 000f 	bic.w	r0, r3, #15
 8007eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	ea40 0301 	orr.w	r3, r0, r1
 8007ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	4b59      	ldr	r3, [pc, #356]	@ (8008064 <UART_SetConfig+0x21c>)
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d102      	bne.n	8007f08 <UART_SetConfig+0xc0>
 8007f02:	2301      	movs	r3, #1
 8007f04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f06:	e029      	b.n	8007f5c <UART_SetConfig+0x114>
 8007f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	4b56      	ldr	r3, [pc, #344]	@ (8008068 <UART_SetConfig+0x220>)
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d102      	bne.n	8007f18 <UART_SetConfig+0xd0>
 8007f12:	2302      	movs	r3, #2
 8007f14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f16:	e021      	b.n	8007f5c <UART_SetConfig+0x114>
 8007f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	4b53      	ldr	r3, [pc, #332]	@ (800806c <UART_SetConfig+0x224>)
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d102      	bne.n	8007f28 <UART_SetConfig+0xe0>
 8007f22:	2304      	movs	r3, #4
 8007f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f26:	e019      	b.n	8007f5c <UART_SetConfig+0x114>
 8007f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	4b50      	ldr	r3, [pc, #320]	@ (8008070 <UART_SetConfig+0x228>)
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d102      	bne.n	8007f38 <UART_SetConfig+0xf0>
 8007f32:	2308      	movs	r3, #8
 8007f34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f36:	e011      	b.n	8007f5c <UART_SetConfig+0x114>
 8007f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	4b4d      	ldr	r3, [pc, #308]	@ (8008074 <UART_SetConfig+0x22c>)
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d102      	bne.n	8007f48 <UART_SetConfig+0x100>
 8007f42:	2310      	movs	r3, #16
 8007f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f46:	e009      	b.n	8007f5c <UART_SetConfig+0x114>
 8007f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	4b42      	ldr	r3, [pc, #264]	@ (8008058 <UART_SetConfig+0x210>)
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d102      	bne.n	8007f58 <UART_SetConfig+0x110>
 8007f52:	2320      	movs	r3, #32
 8007f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f56:	e001      	b.n	8007f5c <UART_SetConfig+0x114>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	4b3d      	ldr	r3, [pc, #244]	@ (8008058 <UART_SetConfig+0x210>)
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d005      	beq.n	8007f72 <UART_SetConfig+0x12a>
 8007f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8008060 <UART_SetConfig+0x218>)
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	f040 8085 	bne.w	800807c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f74:	2200      	movs	r2, #0
 8007f76:	623b      	str	r3, [r7, #32]
 8007f78:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f7e:	f7fe f84d 	bl	800601c <HAL_RCCEx_GetPeriphCLKFreq>
 8007f82:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 80e8 	beq.w	800815c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f90:	4a39      	ldr	r2, [pc, #228]	@ (8008078 <UART_SetConfig+0x230>)
 8007f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f9e:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	005b      	lsls	r3, r3, #1
 8007fa8:	4413      	add	r3, r2
 8007faa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d305      	bcc.n	8007fbc <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d903      	bls.n	8007fc4 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007fc2:	e048      	b.n	8008056 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	61bb      	str	r3, [r7, #24]
 8007fca:	61fa      	str	r2, [r7, #28]
 8007fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd0:	4a29      	ldr	r2, [pc, #164]	@ (8008078 <UART_SetConfig+0x230>)
 8007fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	2200      	movs	r2, #0
 8007fda:	613b      	str	r3, [r7, #16]
 8007fdc:	617a      	str	r2, [r7, #20]
 8007fde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007fe2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007fe6:	f7f8 f94f 	bl	8000288 <__aeabi_uldivmod>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	4610      	mov	r0, r2
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	f04f 0200 	mov.w	r2, #0
 8007ff6:	f04f 0300 	mov.w	r3, #0
 8007ffa:	020b      	lsls	r3, r1, #8
 8007ffc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008000:	0202      	lsls	r2, r0, #8
 8008002:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008004:	6849      	ldr	r1, [r1, #4]
 8008006:	0849      	lsrs	r1, r1, #1
 8008008:	2000      	movs	r0, #0
 800800a:	460c      	mov	r4, r1
 800800c:	4605      	mov	r5, r0
 800800e:	eb12 0804 	adds.w	r8, r2, r4
 8008012:	eb43 0905 	adc.w	r9, r3, r5
 8008016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	60bb      	str	r3, [r7, #8]
 800801e:	60fa      	str	r2, [r7, #12]
 8008020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008024:	4640      	mov	r0, r8
 8008026:	4649      	mov	r1, r9
 8008028:	f7f8 f92e 	bl	8000288 <__aeabi_uldivmod>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4613      	mov	r3, r2
 8008032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800803a:	d308      	bcc.n	800804e <UART_SetConfig+0x206>
 800803c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800803e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008042:	d204      	bcs.n	800804e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800804a:	60da      	str	r2, [r3, #12]
 800804c:	e003      	b.n	8008056 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008054:	e082      	b.n	800815c <UART_SetConfig+0x314>
 8008056:	e081      	b.n	800815c <UART_SetConfig+0x314>
 8008058:	46002400 	.word	0x46002400
 800805c:	cfff69f3 	.word	0xcfff69f3
 8008060:	56002400 	.word	0x56002400
 8008064:	40013800 	.word	0x40013800
 8008068:	40004400 	.word	0x40004400
 800806c:	40004800 	.word	0x40004800
 8008070:	40004c00 	.word	0x40004c00
 8008074:	40005000 	.word	0x40005000
 8008078:	0800aedc 	.word	0x0800aedc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800807c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807e:	69db      	ldr	r3, [r3, #28]
 8008080:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008084:	d13c      	bne.n	8008100 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008088:	2200      	movs	r2, #0
 800808a:	603b      	str	r3, [r7, #0]
 800808c:	607a      	str	r2, [r7, #4]
 800808e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008092:	f7fd ffc3 	bl	800601c <HAL_RCCEx_GetPeriphCLKFreq>
 8008096:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800809a:	2b00      	cmp	r3, #0
 800809c:	d05e      	beq.n	800815c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800809e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a2:	4a39      	ldr	r2, [pc, #228]	@ (8008188 <UART_SetConfig+0x340>)
 80080a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080a8:	461a      	mov	r2, r3
 80080aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80080b0:	005a      	lsls	r2, r3, #1
 80080b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	441a      	add	r2, r3
 80080ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c6:	2b0f      	cmp	r3, #15
 80080c8:	d916      	bls.n	80080f8 <UART_SetConfig+0x2b0>
 80080ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080d0:	d212      	bcs.n	80080f8 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	f023 030f 	bic.w	r3, r3, #15
 80080da:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080de:	085b      	lsrs	r3, r3, #1
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f003 0307 	and.w	r3, r3, #7
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80080ea:	4313      	orrs	r3, r2
 80080ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80080ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80080f4:	60da      	str	r2, [r3, #12]
 80080f6:	e031      	b.n	800815c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80080fe:	e02d      	b.n	800815c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008100:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008102:	2200      	movs	r2, #0
 8008104:	469a      	mov	sl, r3
 8008106:	4693      	mov	fp, r2
 8008108:	4650      	mov	r0, sl
 800810a:	4659      	mov	r1, fp
 800810c:	f7fd ff86 	bl	800601c <HAL_RCCEx_GetPeriphCLKFreq>
 8008110:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008114:	2b00      	cmp	r3, #0
 8008116:	d021      	beq.n	800815c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800811c:	4a1a      	ldr	r2, [pc, #104]	@ (8008188 <UART_SetConfig+0x340>)
 800811e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008122:	461a      	mov	r2, r3
 8008124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008126:	fbb3 f2f2 	udiv	r2, r3, r2
 800812a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	085b      	lsrs	r3, r3, #1
 8008130:	441a      	add	r2, r3
 8008132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	fbb2 f3f3 	udiv	r3, r2, r3
 800813a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800813c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800813e:	2b0f      	cmp	r3, #15
 8008140:	d909      	bls.n	8008156 <UART_SetConfig+0x30e>
 8008142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008148:	d205      	bcs.n	8008156 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800814a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800814c:	b29a      	uxth	r2, r3
 800814e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	60da      	str	r2, [r3, #12]
 8008154:	e002      	b.n	800815c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800815c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800815e:	2201      	movs	r2, #1
 8008160:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008166:	2201      	movs	r2, #1
 8008168:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800816c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816e:	2200      	movs	r2, #0
 8008170:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008174:	2200      	movs	r2, #0
 8008176:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008178:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800817c:	4618      	mov	r0, r3
 800817e:	3750      	adds	r7, #80	@ 0x50
 8008180:	46bd      	mov	sp, r7
 8008182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008186:	bf00      	nop
 8008188:	0800aedc 	.word	0x0800aedc

0800818c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008198:	f003 0308 	and.w	r3, r3, #8
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00a      	beq.n	80081fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fe:	f003 0304 	and.w	r3, r3, #4
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00a      	beq.n	800821c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	430a      	orrs	r2, r1
 800821a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008220:	f003 0310 	and.w	r3, r3, #16
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00a      	beq.n	800823e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01a      	beq.n	80082a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800828a:	d10a      	bne.n	80082a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	430a      	orrs	r2, r1
 80082a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00a      	beq.n	80082c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	605a      	str	r2, [r3, #4]
  }
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b098      	sub	sp, #96	@ 0x60
 80082d4:	af02      	add	r7, sp, #8
 80082d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082e0:	f7f9 f868 	bl	80013b4 <HAL_GetTick>
 80082e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0308 	and.w	r3, r3, #8
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d12f      	bne.n	8008354 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082fc:	2200      	movs	r2, #0
 80082fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f88e 	bl	8008424 <UART_WaitOnFlagUntilTimeout>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d022      	beq.n	8008354 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008316:	e853 3f00 	ldrex	r3, [r3]
 800831a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800831c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008322:	653b      	str	r3, [r7, #80]	@ 0x50
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800832c:	647b      	str	r3, [r7, #68]	@ 0x44
 800832e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008330:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008334:	e841 2300 	strex	r3, r2, [r1]
 8008338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800833a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e6      	bne.n	800830e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2220      	movs	r2, #32
 8008344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e063      	b.n	800841c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0304 	and.w	r3, r3, #4
 800835e:	2b04      	cmp	r3, #4
 8008360:	d149      	bne.n	80083f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008362:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800836a:	2200      	movs	r2, #0
 800836c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f857 	bl	8008424 <UART_WaitOnFlagUntilTimeout>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d03c      	beq.n	80083f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	623b      	str	r3, [r7, #32]
   return(result);
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008390:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800839a:	633b      	str	r3, [r7, #48]	@ 0x30
 800839c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e6      	bne.n	800837c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3308      	adds	r3, #8
 80083b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	e853 3f00 	ldrex	r3, [r3]
 80083bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f023 0301 	bic.w	r3, r3, #1
 80083c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3308      	adds	r3, #8
 80083cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083ce:	61fa      	str	r2, [r7, #28]
 80083d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	69b9      	ldr	r1, [r7, #24]
 80083d4:	69fa      	ldr	r2, [r7, #28]
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	617b      	str	r3, [r7, #20]
   return(result);
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e5      	bne.n	80083ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2220      	movs	r2, #32
 80083e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e012      	b.n	800841c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2220      	movs	r2, #32
 8008402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3758      	adds	r7, #88	@ 0x58
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	4613      	mov	r3, r2
 8008432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008434:	e04f      	b.n	80084d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843c:	d04b      	beq.n	80084d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800843e:	f7f8 ffb9 	bl	80013b4 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	429a      	cmp	r2, r3
 800844c:	d302      	bcc.n	8008454 <UART_WaitOnFlagUntilTimeout+0x30>
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e04e      	b.n	80084f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	d037      	beq.n	80084d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2b80      	cmp	r3, #128	@ 0x80
 800846a:	d034      	beq.n	80084d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2b40      	cmp	r3, #64	@ 0x40
 8008470:	d031      	beq.n	80084d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	f003 0308 	and.w	r3, r3, #8
 800847c:	2b08      	cmp	r3, #8
 800847e:	d110      	bne.n	80084a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2208      	movs	r2, #8
 8008486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 f95b 	bl	8008744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2208      	movs	r2, #8
 8008492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e029      	b.n	80084f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084b0:	d111      	bne.n	80084d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80084ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 f941 	bl	8008744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2220      	movs	r2, #32
 80084c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e00f      	b.n	80084f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	69da      	ldr	r2, [r3, #28]
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4013      	ands	r3, r2
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	bf0c      	ite	eq
 80084e6:	2301      	moveq	r3, #1
 80084e8:	2300      	movne	r3, #0
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	461a      	mov	r2, r3
 80084ee:	79fb      	ldrb	r3, [r7, #7]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d0a0      	beq.n	8008436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008500:	b480      	push	{r7}
 8008502:	b0a3      	sub	sp, #140	@ 0x8c
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	4613      	mov	r3, r2
 800850c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	88fa      	ldrh	r2, [r7, #6]
 8008518:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	88fa      	ldrh	r2, [r7, #6]
 8008520:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008532:	d10e      	bne.n	8008552 <UART_Start_Receive_IT+0x52>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d105      	bne.n	8008548 <UART_Start_Receive_IT+0x48>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008542:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008546:	e02d      	b.n	80085a4 <UART_Start_Receive_IT+0xa4>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	22ff      	movs	r2, #255	@ 0xff
 800854c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008550:	e028      	b.n	80085a4 <UART_Start_Receive_IT+0xa4>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10d      	bne.n	8008576 <UART_Start_Receive_IT+0x76>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d104      	bne.n	800856c <UART_Start_Receive_IT+0x6c>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	22ff      	movs	r2, #255	@ 0xff
 8008566:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800856a:	e01b      	b.n	80085a4 <UART_Start_Receive_IT+0xa4>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	227f      	movs	r2, #127	@ 0x7f
 8008570:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008574:	e016      	b.n	80085a4 <UART_Start_Receive_IT+0xa4>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800857e:	d10d      	bne.n	800859c <UART_Start_Receive_IT+0x9c>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d104      	bne.n	8008592 <UART_Start_Receive_IT+0x92>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	227f      	movs	r2, #127	@ 0x7f
 800858c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008590:	e008      	b.n	80085a4 <UART_Start_Receive_IT+0xa4>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	223f      	movs	r2, #63	@ 0x3f
 8008596:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800859a:	e003      	b.n	80085a4 <UART_Start_Receive_IT+0xa4>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2222      	movs	r2, #34	@ 0x22
 80085b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3308      	adds	r3, #8
 80085ba:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085be:	e853 3f00 	ldrex	r3, [r3]
 80085c2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80085c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085c6:	f043 0301 	orr.w	r3, r3, #1
 80085ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3308      	adds	r3, #8
 80085d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80085d8:	673a      	str	r2, [r7, #112]	@ 0x70
 80085da:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085dc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80085de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80085e0:	e841 2300 	strex	r3, r2, [r1]
 80085e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80085e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1e3      	bne.n	80085b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085f4:	d14f      	bne.n	8008696 <UART_Start_Receive_IT+0x196>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80085fc:	88fa      	ldrh	r2, [r7, #6]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d349      	bcc.n	8008696 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800860a:	d107      	bne.n	800861c <UART_Start_Receive_IT+0x11c>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d103      	bne.n	800861c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4a47      	ldr	r2, [pc, #284]	@ (8008734 <UART_Start_Receive_IT+0x234>)
 8008618:	675a      	str	r2, [r3, #116]	@ 0x74
 800861a:	e002      	b.n	8008622 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4a46      	ldr	r2, [pc, #280]	@ (8008738 <UART_Start_Receive_IT+0x238>)
 8008620:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d01a      	beq.n	8008660 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008632:	e853 3f00 	ldrex	r3, [r3]
 8008636:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800863a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800863e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800864c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800864e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008652:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008654:	e841 2300 	strex	r3, r2, [r1]
 8008658:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800865a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e4      	bne.n	800862a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3308      	adds	r3, #8
 8008666:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800866a:	e853 3f00 	ldrex	r3, [r3]
 800866e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008676:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3308      	adds	r3, #8
 800867e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008680:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008682:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008684:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008688:	e841 2300 	strex	r3, r2, [r1]
 800868c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800868e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1e5      	bne.n	8008660 <UART_Start_Receive_IT+0x160>
 8008694:	e046      	b.n	8008724 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800869e:	d107      	bne.n	80086b0 <UART_Start_Receive_IT+0x1b0>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d103      	bne.n	80086b0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	4a24      	ldr	r2, [pc, #144]	@ (800873c <UART_Start_Receive_IT+0x23c>)
 80086ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80086ae:	e002      	b.n	80086b6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4a23      	ldr	r2, [pc, #140]	@ (8008740 <UART_Start_Receive_IT+0x240>)
 80086b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d019      	beq.n	80086f2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c6:	e853 3f00 	ldrex	r3, [r3]
 80086ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ce:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80086d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	461a      	mov	r2, r3
 80086da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80086de:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80086e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086e4:	e841 2300 	strex	r3, r2, [r1]
 80086e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80086ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e6      	bne.n	80086be <UART_Start_Receive_IT+0x1be>
 80086f0:	e018      	b.n	8008724 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	e853 3f00 	ldrex	r3, [r3]
 80086fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	f043 0320 	orr.w	r3, r3, #32
 8008706:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	461a      	mov	r2, r3
 800870e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008710:	623b      	str	r3, [r7, #32]
 8008712:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008714:	69f9      	ldr	r1, [r7, #28]
 8008716:	6a3a      	ldr	r2, [r7, #32]
 8008718:	e841 2300 	strex	r3, r2, [r1]
 800871c:	61bb      	str	r3, [r7, #24]
   return(result);
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e6      	bne.n	80086f2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	378c      	adds	r7, #140	@ 0x8c
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	08008f8d 	.word	0x08008f8d
 8008738:	08008c1d 	.word	0x08008c1d
 800873c:	08008a59 	.word	0x08008a59
 8008740:	08008895 	.word	0x08008895

08008744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008744:	b480      	push	{r7}
 8008746:	b095      	sub	sp, #84	@ 0x54
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800875a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008760:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800876a:	643b      	str	r3, [r7, #64]	@ 0x40
 800876c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008770:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e6      	bne.n	800874c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3308      	adds	r3, #8
 8008784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	e853 3f00 	ldrex	r3, [r3]
 800878c:	61fb      	str	r3, [r7, #28]
   return(result);
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008794:	f023 0301 	bic.w	r3, r3, #1
 8008798:	64bb      	str	r3, [r7, #72]	@ 0x48
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3308      	adds	r3, #8
 80087a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1e3      	bne.n	800877e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d118      	bne.n	80087f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	f023 0310 	bic.w	r3, r3, #16
 80087d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087dc:	61bb      	str	r3, [r7, #24]
 80087de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	6979      	ldr	r1, [r7, #20]
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	613b      	str	r3, [r7, #16]
   return(result);
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e6      	bne.n	80087be <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2220      	movs	r2, #32
 80087f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008804:	bf00      	nop
 8008806:	3754      	adds	r7, #84	@ 0x54
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800881c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f7ff faf4 	bl	8007e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008834:	bf00      	nop
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b088      	sub	sp, #32
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	60bb      	str	r3, [r7, #8]
   return(result);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008858:	61fb      	str	r3, [r7, #28]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	61bb      	str	r3, [r7, #24]
 8008864:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6979      	ldr	r1, [r7, #20]
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	613b      	str	r3, [r7, #16]
   return(result);
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e6      	bne.n	8008844 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2220      	movs	r2, #32
 800887a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff fabf 	bl	8007e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800888a:	bf00      	nop
 800888c:	3720      	adds	r7, #32
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
	...

08008894 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b09c      	sub	sp, #112	@ 0x70
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80088a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088ac:	2b22      	cmp	r3, #34	@ 0x22
 80088ae:	f040 80c3 	bne.w	8008a38 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80088bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80088c0:	b2d9      	uxtb	r1, r3
 80088c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088cc:	400a      	ands	r2, r1
 80088ce:	b2d2      	uxtb	r2, r2
 80088d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	3b01      	subs	r3, #1
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f040 80a6 	bne.w	8008a48 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008904:	e853 3f00 	ldrex	r3, [r3]
 8008908:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800890a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800890c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008910:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800891a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800891c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008920:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1e6      	bne.n	80088fc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3308      	adds	r3, #8
 8008934:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800893e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008940:	f023 0301 	bic.w	r3, r3, #1
 8008944:	667b      	str	r3, [r7, #100]	@ 0x64
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3308      	adds	r3, #8
 800894c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800894e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008950:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008952:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008954:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008956:	e841 2300 	strex	r3, r2, [r1]
 800895a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800895c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1e5      	bne.n	800892e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2220      	movs	r2, #32
 8008966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a35      	ldr	r2, [pc, #212]	@ (8008a50 <UART_RxISR_8BIT+0x1bc>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d024      	beq.n	80089ca <UART_RxISR_8BIT+0x136>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a33      	ldr	r2, [pc, #204]	@ (8008a54 <UART_RxISR_8BIT+0x1c0>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d01f      	beq.n	80089ca <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d018      	beq.n	80089ca <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	623b      	str	r3, [r7, #32]
   return(result);
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80089b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089be:	e841 2300 	strex	r3, r2, [r1]
 80089c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e6      	bne.n	8008998 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d12e      	bne.n	8008a30 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	e853 3f00 	ldrex	r3, [r3]
 80089e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f023 0310 	bic.w	r3, r3, #16
 80089ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089f6:	61fb      	str	r3, [r7, #28]
 80089f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	69b9      	ldr	r1, [r7, #24]
 80089fc:	69fa      	ldr	r2, [r7, #28]
 80089fe:	e841 2300 	strex	r3, r2, [r1]
 8008a02:	617b      	str	r3, [r7, #20]
   return(result);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e6      	bne.n	80089d8 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	69db      	ldr	r3, [r3, #28]
 8008a10:	f003 0310 	and.w	r3, r3, #16
 8008a14:	2b10      	cmp	r3, #16
 8008a16:	d103      	bne.n	8008a20 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2210      	movs	r2, #16
 8008a1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff fa01 	bl	8007e30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a2e:	e00b      	b.n	8008a48 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7f7 fded 	bl	8000610 <HAL_UART_RxCpltCallback>
}
 8008a36:	e007      	b.n	8008a48 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699a      	ldr	r2, [r3, #24]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f042 0208 	orr.w	r2, r2, #8
 8008a46:	619a      	str	r2, [r3, #24]
}
 8008a48:	bf00      	nop
 8008a4a:	3770      	adds	r7, #112	@ 0x70
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	46002400 	.word	0x46002400
 8008a54:	56002400 	.word	0x56002400

08008a58 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b09c      	sub	sp, #112	@ 0x70
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a66:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a70:	2b22      	cmp	r3, #34	@ 0x22
 8008a72:	f040 80c3 	bne.w	8008bfc <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a84:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a86:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008a8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a8e:	4013      	ands	r3, r2
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a9a:	1c9a      	adds	r2, r3, #2
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f040 80a6 	bne.w	8008c0c <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ac8:	e853 3f00 	ldrex	r3, [r3]
 8008acc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008ace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ad0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ad4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ade:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ae0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ae4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e6      	bne.n	8008ac0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3308      	adds	r3, #8
 8008af8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	f023 0301 	bic.w	r3, r3, #1
 8008b08:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	3308      	adds	r3, #8
 8008b10:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008b12:	643a      	str	r2, [r7, #64]	@ 0x40
 8008b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e5      	bne.n	8008af2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a35      	ldr	r2, [pc, #212]	@ (8008c14 <UART_RxISR_16BIT+0x1bc>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d024      	beq.n	8008b8e <UART_RxISR_16BIT+0x136>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a33      	ldr	r2, [pc, #204]	@ (8008c18 <UART_RxISR_16BIT+0x1c0>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d01f      	beq.n	8008b8e <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d018      	beq.n	8008b8e <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	e853 3f00 	ldrex	r3, [r3]
 8008b68:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	461a      	mov	r2, r3
 8008b78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b7c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b82:	e841 2300 	strex	r3, r2, [r1]
 8008b86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1e6      	bne.n	8008b5c <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d12e      	bne.n	8008bf4 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f023 0310 	bic.w	r3, r3, #16
 8008bb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bba:	61bb      	str	r3, [r7, #24]
 8008bbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbe:	6979      	ldr	r1, [r7, #20]
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e6      	bne.n	8008b9c <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	f003 0310 	and.w	r3, r3, #16
 8008bd8:	2b10      	cmp	r3, #16
 8008bda:	d103      	bne.n	8008be4 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2210      	movs	r2, #16
 8008be2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7ff f91f 	bl	8007e30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bf2:	e00b      	b.n	8008c0c <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7f7 fd0b 	bl	8000610 <HAL_UART_RxCpltCallback>
}
 8008bfa:	e007      	b.n	8008c0c <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	699a      	ldr	r2, [r3, #24]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f042 0208 	orr.w	r2, r2, #8
 8008c0a:	619a      	str	r2, [r3, #24]
}
 8008c0c:	bf00      	nop
 8008c0e:	3770      	adds	r7, #112	@ 0x70
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	46002400 	.word	0x46002400
 8008c18:	56002400 	.word	0x56002400

08008c1c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b0ac      	sub	sp, #176	@ 0xb0
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c2a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	69db      	ldr	r3, [r3, #28]
 8008c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c52:	2b22      	cmp	r3, #34	@ 0x22
 8008c54:	f040 8187 	bne.w	8008f66 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c5e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c62:	e12a      	b.n	8008eba <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c6a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c6e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008c72:	b2d9      	uxtb	r1, r3
 8008c74:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c7e:	400a      	ands	r2, r1
 8008c80:	b2d2      	uxtb	r2, r2
 8008c82:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c88:	1c5a      	adds	r2, r3, #1
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	3b01      	subs	r3, #1
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d053      	beq.n	8008d5e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d011      	beq.n	8008ce6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00b      	beq.n	8008ce6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cdc:	f043 0201 	orr.w	r2, r3, #1
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d011      	beq.n	8008d16 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008cf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00b      	beq.n	8008d16 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2202      	movs	r2, #2
 8008d04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d0c:	f043 0204 	orr.w	r2, r3, #4
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d1a:	f003 0304 	and.w	r3, r3, #4
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d011      	beq.n	8008d46 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2204      	movs	r2, #4
 8008d34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d3c:	f043 0202 	orr.w	r2, r3, #2
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d006      	beq.n	8008d5e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff f863 	bl	8007e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f040 80a7 	bne.w	8008eba <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008d7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d90:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008d94:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008d9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e4      	bne.n	8008d6c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3308      	adds	r3, #8
 8008da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008daa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008dac:	e853 3f00 	ldrex	r3, [r3]
 8008db0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008db2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008db4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008db8:	f023 0301 	bic.w	r3, r3, #1
 8008dbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3308      	adds	r3, #8
 8008dc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008dca:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008dcc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008dd0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008dd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e1      	bne.n	8008da2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a62      	ldr	r2, [pc, #392]	@ (8008f80 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d026      	beq.n	8008e4a <UART_RxISR_8BIT_FIFOEN+0x22e>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a60      	ldr	r2, [pc, #384]	@ (8008f84 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d021      	beq.n	8008e4a <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d01a      	beq.n	8008e4a <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e1c:	e853 3f00 	ldrex	r3, [r3]
 8008e20:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e24:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	461a      	mov	r2, r3
 8008e32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008e36:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e38:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e4      	bne.n	8008e14 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d130      	bne.n	8008eb4 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e68:	f023 0310 	bic.w	r3, r3, #16
 8008e6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	461a      	mov	r2, r3
 8008e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e4      	bne.n	8008e58 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	f003 0310 	and.w	r3, r3, #16
 8008e98:	2b10      	cmp	r3, #16
 8008e9a:	d103      	bne.n	8008ea4 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2210      	movs	r2, #16
 8008ea2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7fe ffbf 	bl	8007e30 <HAL_UARTEx_RxEventCallback>
 8008eb2:	e002      	b.n	8008eba <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7f7 fbab 	bl	8000610 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008eba:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d006      	beq.n	8008ed0 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 8008ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f47f aeca 	bne.w	8008c64 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ed6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008eda:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d049      	beq.n	8008f76 <UART_RxISR_8BIT_FIFOEN+0x35a>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ee8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d242      	bcs.n	8008f76 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	e853 3f00 	ldrex	r3, [r3]
 8008efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008f14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f1c:	e841 2300 	strex	r3, r2, [r1]
 8008f20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1e3      	bne.n	8008ef0 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a17      	ldr	r2, [pc, #92]	@ (8008f88 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8008f2c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	e853 3f00 	ldrex	r3, [r3]
 8008f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	f043 0320 	orr.w	r3, r3, #32
 8008f42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f50:	61bb      	str	r3, [r7, #24]
 8008f52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f54:	6979      	ldr	r1, [r7, #20]
 8008f56:	69ba      	ldr	r2, [r7, #24]
 8008f58:	e841 2300 	strex	r3, r2, [r1]
 8008f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1e4      	bne.n	8008f2e <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f64:	e007      	b.n	8008f76 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	699a      	ldr	r2, [r3, #24]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f042 0208 	orr.w	r2, r2, #8
 8008f74:	619a      	str	r2, [r3, #24]
}
 8008f76:	bf00      	nop
 8008f78:	37b0      	adds	r7, #176	@ 0xb0
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	46002400 	.word	0x46002400
 8008f84:	56002400 	.word	0x56002400
 8008f88:	08008895 	.word	0x08008895

08008f8c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b0ae      	sub	sp, #184	@ 0xb8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f9a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	69db      	ldr	r3, [r3, #28]
 8008fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fc2:	2b22      	cmp	r3, #34	@ 0x22
 8008fc4:	f040 818b 	bne.w	80092de <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008fce:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fd2:	e12e      	b.n	8009232 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fda:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008fe6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008fea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008fee:	4013      	ands	r3, r2
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ff6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ffc:	1c9a      	adds	r2, r3, #2
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009008:	b29b      	uxth	r3, r3
 800900a:	3b01      	subs	r3, #1
 800900c:	b29a      	uxth	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800901e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009022:	f003 0307 	and.w	r3, r3, #7
 8009026:	2b00      	cmp	r3, #0
 8009028:	d053      	beq.n	80090d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800902a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	d011      	beq.n	800905a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800903a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00b      	beq.n	800905a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2201      	movs	r2, #1
 8009048:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009050:	f043 0201 	orr.w	r2, r3, #1
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800905a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b00      	cmp	r3, #0
 8009064:	d011      	beq.n	800908a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009066:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00b      	beq.n	800908a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2202      	movs	r2, #2
 8009078:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009080:	f043 0204 	orr.w	r2, r3, #4
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800908a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800908e:	f003 0304 	and.w	r3, r3, #4
 8009092:	2b00      	cmp	r3, #0
 8009094:	d011      	beq.n	80090ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009096:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00b      	beq.n	80090ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2204      	movs	r2, #4
 80090a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b0:	f043 0202 	orr.w	r2, r3, #2
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7fe fea9 	bl	8007e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090d8:	b29b      	uxth	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f040 80a9 	bne.w	8009232 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	461a      	mov	r2, r3
 80090fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009102:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009106:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800910a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800910e:	e841 2300 	strex	r3, r2, [r1]
 8009112:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009114:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1e2      	bne.n	80090e0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3308      	adds	r3, #8
 8009120:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009122:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009124:	e853 3f00 	ldrex	r3, [r3]
 8009128:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800912a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800912c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009130:	f023 0301 	bic.w	r3, r3, #1
 8009134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3308      	adds	r3, #8
 800913e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009142:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009144:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009148:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009150:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e1      	bne.n	800911a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2220      	movs	r2, #32
 800915a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a62      	ldr	r2, [pc, #392]	@ (80092f8 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d026      	beq.n	80091c2 <UART_RxISR_16BIT_FIFOEN+0x236>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a60      	ldr	r2, [pc, #384]	@ (80092fc <UART_RxISR_16BIT_FIFOEN+0x370>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d021      	beq.n	80091c2 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d01a      	beq.n	80091c2 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009194:	e853 3f00 	ldrex	r3, [r3]
 8009198:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800919a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800919c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	461a      	mov	r2, r3
 80091aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80091ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e4      	bne.n	800918c <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d130      	bne.n	800922c <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d8:	e853 3f00 	ldrex	r3, [r3]
 80091dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091e0:	f023 0310 	bic.w	r3, r3, #16
 80091e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	461a      	mov	r2, r3
 80091ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80091f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e4      	bne.n	80091d0 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	69db      	ldr	r3, [r3, #28]
 800920c:	f003 0310 	and.w	r3, r3, #16
 8009210:	2b10      	cmp	r3, #16
 8009212:	d103      	bne.n	800921c <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2210      	movs	r2, #16
 800921a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7fe fe03 	bl	8007e30 <HAL_UARTEx_RxEventCallback>
 800922a:	e002      	b.n	8009232 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7f7 f9ef 	bl	8000610 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009232:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009236:	2b00      	cmp	r3, #0
 8009238:	d006      	beq.n	8009248 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800923a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800923e:	f003 0320 	and.w	r3, r3, #32
 8009242:	2b00      	cmp	r3, #0
 8009244:	f47f aec6 	bne.w	8008fd4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800924e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009252:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009256:	2b00      	cmp	r3, #0
 8009258:	d049      	beq.n	80092ee <UART_RxISR_16BIT_FIFOEN+0x362>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009260:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009264:	429a      	cmp	r2, r3
 8009266:	d242      	bcs.n	80092ee <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3308      	adds	r3, #8
 800926e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	623b      	str	r3, [r7, #32]
   return(result);
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800927e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3308      	adds	r3, #8
 8009288:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800928c:	633a      	str	r2, [r7, #48]	@ 0x30
 800928e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800929a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e3      	bne.n	8009268 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a17      	ldr	r2, [pc, #92]	@ (8009300 <UART_RxISR_16BIT_FIFOEN+0x374>)
 80092a4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f043 0320 	orr.w	r3, r3, #32
 80092ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	461a      	mov	r2, r3
 80092c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092c8:	61fb      	str	r3, [r7, #28]
 80092ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092cc:	69b9      	ldr	r1, [r7, #24]
 80092ce:	69fa      	ldr	r2, [r7, #28]
 80092d0:	e841 2300 	strex	r3, r2, [r1]
 80092d4:	617b      	str	r3, [r7, #20]
   return(result);
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1e4      	bne.n	80092a6 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092dc:	e007      	b.n	80092ee <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	699a      	ldr	r2, [r3, #24]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f042 0208 	orr.w	r2, r2, #8
 80092ec:	619a      	str	r2, [r3, #24]
}
 80092ee:	bf00      	nop
 80092f0:	37b8      	adds	r7, #184	@ 0xb8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	46002400 	.word	0x46002400
 80092fc:	56002400 	.word	0x56002400
 8009300:	08008a59 	.word	0x08008a59

08009304 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800933a:	2b01      	cmp	r3, #1
 800933c:	d101      	bne.n	8009342 <HAL_UARTEx_DisableFifoMode+0x16>
 800933e:	2302      	movs	r3, #2
 8009340:	e027      	b.n	8009392 <HAL_UARTEx_DisableFifoMode+0x66>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2224      	movs	r2, #36	@ 0x24
 800934e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0201 	bic.w	r2, r2, #1
 8009368:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009370:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2220      	movs	r2, #32
 8009384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d101      	bne.n	80093b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093b2:	2302      	movs	r3, #2
 80093b4:	e02d      	b.n	8009412 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2224      	movs	r2, #36	@ 0x24
 80093c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f022 0201 	bic.w	r2, r2, #1
 80093dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f850 	bl	8009498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2220      	movs	r2, #32
 8009404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800942a:	2b01      	cmp	r3, #1
 800942c:	d101      	bne.n	8009432 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800942e:	2302      	movs	r3, #2
 8009430:	e02d      	b.n	800948e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2201      	movs	r2, #1
 8009436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2224      	movs	r2, #36	@ 0x24
 800943e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 0201 	bic.w	r2, r2, #1
 8009458:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f812 	bl	8009498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2220      	movs	r2, #32
 8009480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d108      	bne.n	80094ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094b8:	e031      	b.n	800951e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094ba:	2308      	movs	r3, #8
 80094bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094be:	2308      	movs	r3, #8
 80094c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	0e5b      	lsrs	r3, r3, #25
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	f003 0307 	and.w	r3, r3, #7
 80094d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	0f5b      	lsrs	r3, r3, #29
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	f003 0307 	and.w	r3, r3, #7
 80094e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	7b3a      	ldrb	r2, [r7, #12]
 80094e6:	4911      	ldr	r1, [pc, #68]	@ (800952c <UARTEx_SetNbDataToProcess+0x94>)
 80094e8:	5c8a      	ldrb	r2, [r1, r2]
 80094ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80094ee:	7b3a      	ldrb	r2, [r7, #12]
 80094f0:	490f      	ldr	r1, [pc, #60]	@ (8009530 <UARTEx_SetNbDataToProcess+0x98>)
 80094f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	7b7a      	ldrb	r2, [r7, #13]
 8009504:	4909      	ldr	r1, [pc, #36]	@ (800952c <UARTEx_SetNbDataToProcess+0x94>)
 8009506:	5c8a      	ldrb	r2, [r1, r2]
 8009508:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800950c:	7b7a      	ldrb	r2, [r7, #13]
 800950e:	4908      	ldr	r1, [pc, #32]	@ (8009530 <UARTEx_SetNbDataToProcess+0x98>)
 8009510:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009512:	fb93 f3f2 	sdiv	r3, r3, r2
 8009516:	b29a      	uxth	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800951e:	bf00      	nop
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	0800aef4 	.word	0x0800aef4
 8009530:	0800aefc 	.word	0x0800aefc

08009534 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009534:	b480      	push	{r7}
 8009536:	b08b      	sub	sp, #44	@ 0x2c
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	fa93 f3a3 	rbit	r3, r3
 800954e:	613b      	str	r3, [r7, #16]
  return result;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800955a:	2320      	movs	r3, #32
 800955c:	e003      	b.n	8009566 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	fab3 f383 	clz	r3, r3
 8009564:	b2db      	uxtb	r3, r3
 8009566:	005b      	lsls	r3, r3, #1
 8009568:	2103      	movs	r1, #3
 800956a:	fa01 f303 	lsl.w	r3, r1, r3
 800956e:	43db      	mvns	r3, r3
 8009570:	401a      	ands	r2, r3
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	fa93 f3a3 	rbit	r3, r3
 800957c:	61fb      	str	r3, [r7, #28]
  return result;
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009588:	2320      	movs	r3, #32
 800958a:	e003      	b.n	8009594 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800958c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958e:	fab3 f383 	clz	r3, r3
 8009592:	b2db      	uxtb	r3, r3
 8009594:	005b      	lsls	r3, r3, #1
 8009596:	6879      	ldr	r1, [r7, #4]
 8009598:	fa01 f303 	lsl.w	r3, r1, r3
 800959c:	431a      	orrs	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 80095a2:	bf00      	nop
 80095a4:	372c      	adds	r7, #44	@ 0x2c
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b085      	sub	sp, #20
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	60f8      	str	r0, [r7, #12]
 80095b6:	60b9      	str	r1, [r7, #8]
 80095b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	43db      	mvns	r3, r3
 80095c2:	401a      	ands	r2, r3
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	6879      	ldr	r1, [r7, #4]
 80095c8:	fb01 f303 	mul.w	r3, r1, r3
 80095cc:	431a      	orrs	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	605a      	str	r2, [r3, #4]
}
 80095d2:	bf00      	nop
 80095d4:	3714      	adds	r7, #20
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80095de:	b480      	push	{r7}
 80095e0:	b08b      	sub	sp, #44	@ 0x2c
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60f8      	str	r0, [r7, #12]
 80095e6:	60b9      	str	r1, [r7, #8]
 80095e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	689a      	ldr	r2, [r3, #8]
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	fa93 f3a3 	rbit	r3, r3
 80095f8:	613b      	str	r3, [r7, #16]
  return result;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d101      	bne.n	8009608 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009604:	2320      	movs	r3, #32
 8009606:	e003      	b.n	8009610 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	fab3 f383 	clz	r3, r3
 800960e:	b2db      	uxtb	r3, r3
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	2103      	movs	r1, #3
 8009614:	fa01 f303 	lsl.w	r3, r1, r3
 8009618:	43db      	mvns	r3, r3
 800961a:	401a      	ands	r2, r3
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	fa93 f3a3 	rbit	r3, r3
 8009626:	61fb      	str	r3, [r7, #28]
  return result;
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800962c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009632:	2320      	movs	r3, #32
 8009634:	e003      	b.n	800963e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009638:	fab3 f383 	clz	r3, r3
 800963c:	b2db      	uxtb	r3, r3
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	6879      	ldr	r1, [r7, #4]
 8009642:	fa01 f303 	lsl.w	r3, r1, r3
 8009646:	431a      	orrs	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 800964c:	bf00      	nop
 800964e:	372c      	adds	r7, #44	@ 0x2c
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009658:	b480      	push	{r7}
 800965a:	b08b      	sub	sp, #44	@ 0x2c
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	68da      	ldr	r2, [r3, #12]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	fa93 f3a3 	rbit	r3, r3
 8009672:	613b      	str	r3, [r7, #16]
  return result;
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800967e:	2320      	movs	r3, #32
 8009680:	e003      	b.n	800968a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	fab3 f383 	clz	r3, r3
 8009688:	b2db      	uxtb	r3, r3
 800968a:	005b      	lsls	r3, r3, #1
 800968c:	2103      	movs	r1, #3
 800968e:	fa01 f303 	lsl.w	r3, r1, r3
 8009692:	43db      	mvns	r3, r3
 8009694:	401a      	ands	r2, r3
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	fa93 f3a3 	rbit	r3, r3
 80096a0:	61fb      	str	r3, [r7, #28]
  return result;
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80096a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80096ac:	2320      	movs	r3, #32
 80096ae:	e003      	b.n	80096b8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80096b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b2:	fab3 f383 	clz	r3, r3
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	005b      	lsls	r3, r3, #1
 80096ba:	6879      	ldr	r1, [r7, #4]
 80096bc:	fa01 f303 	lsl.w	r3, r1, r3
 80096c0:	431a      	orrs	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 80096c6:	bf00      	nop
 80096c8:	372c      	adds	r7, #44	@ 0x2c
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b08b      	sub	sp, #44	@ 0x2c
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	60b9      	str	r1, [r7, #8]
 80096dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6a1a      	ldr	r2, [r3, #32]
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	fa93 f3a3 	rbit	r3, r3
 80096ec:	613b      	str	r3, [r7, #16]
  return result;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d101      	bne.n	80096fc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80096f8:	2320      	movs	r3, #32
 80096fa:	e003      	b.n	8009704 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	fab3 f383 	clz	r3, r3
 8009702:	b2db      	uxtb	r3, r3
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	210f      	movs	r1, #15
 8009708:	fa01 f303 	lsl.w	r3, r1, r3
 800970c:	43db      	mvns	r3, r3
 800970e:	401a      	ands	r2, r3
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	fa93 f3a3 	rbit	r3, r3
 800971a:	61fb      	str	r3, [r7, #28]
  return result;
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009726:	2320      	movs	r3, #32
 8009728:	e003      	b.n	8009732 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800972a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972c:	fab3 f383 	clz	r3, r3
 8009730:	b2db      	uxtb	r3, r3
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	6879      	ldr	r1, [r7, #4]
 8009736:	fa01 f303 	lsl.w	r3, r1, r3
 800973a:	431a      	orrs	r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 8009740:	bf00      	nop
 8009742:	372c      	adds	r7, #44	@ 0x2c
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800974c:	b480      	push	{r7}
 800974e:	b08b      	sub	sp, #44	@ 0x2c
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	0a1b      	lsrs	r3, r3, #8
 8009760:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	fa93 f3a3 	rbit	r3, r3
 8009768:	613b      	str	r3, [r7, #16]
  return result;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009774:	2320      	movs	r3, #32
 8009776:	e003      	b.n	8009780 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	fab3 f383 	clz	r3, r3
 800977e:	b2db      	uxtb	r3, r3
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	210f      	movs	r1, #15
 8009784:	fa01 f303 	lsl.w	r3, r1, r3
 8009788:	43db      	mvns	r3, r3
 800978a:	401a      	ands	r2, r3
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	0a1b      	lsrs	r3, r3, #8
 8009790:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	fa93 f3a3 	rbit	r3, r3
 8009798:	61fb      	str	r3, [r7, #28]
  return result;
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800979e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80097a4:	2320      	movs	r3, #32
 80097a6:	e003      	b.n	80097b0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80097a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097aa:	fab3 f383 	clz	r3, r3
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	6879      	ldr	r1, [r7, #4]
 80097b4:	fa01 f303 	lsl.w	r3, r1, r3
 80097b8:	431a      	orrs	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 80097be:	bf00      	nop
 80097c0:	372c      	adds	r7, #44	@ 0x2c
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b08a      	sub	sp, #40	@ 0x28
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	fa93 f3a3 	rbit	r3, r3
 80097e0:	617b      	str	r3, [r7, #20]
  return result;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d101      	bne.n	80097f0 <LL_GPIO_Init+0x26>
    return 32U;
 80097ec:	2320      	movs	r3, #32
 80097ee:	e003      	b.n	80097f8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	fab3 f383 	clz	r3, r3
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80097fa:	e058      	b.n	80098ae <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	2101      	movs	r1, #1
 8009802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009804:	fa01 f303 	lsl.w	r3, r1, r3
 8009808:	4013      	ands	r3, r2
 800980a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d04a      	beq.n	80098a8 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d003      	beq.n	8009822 <LL_GPIO_Init+0x58>
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	2b02      	cmp	r3, #2
 8009820:	d10e      	bne.n	8009840 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	461a      	mov	r2, r3
 8009828:	6a39      	ldr	r1, [r7, #32]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7ff fed7 	bl	80095de <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	6819      	ldr	r1, [r3, #0]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	461a      	mov	r2, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f7ff feb7 	bl	80095ae <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	461a      	mov	r2, r3
 8009846:	6a39      	ldr	r1, [r7, #32]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff ff05 	bl	8009658 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	2b02      	cmp	r3, #2
 8009854:	d121      	bne.n	800989a <LL_GPIO_Init+0xd0>
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	fa93 f3a3 	rbit	r3, r3
 8009860:	60bb      	str	r3, [r7, #8]
  return result;
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d101      	bne.n	8009870 <LL_GPIO_Init+0xa6>
    return 32U;
 800986c:	2320      	movs	r3, #32
 800986e:	e003      	b.n	8009878 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	fab3 f383 	clz	r3, r3
 8009876:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8009878:	2b07      	cmp	r3, #7
 800987a:	d807      	bhi.n	800988c <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	695b      	ldr	r3, [r3, #20]
 8009880:	461a      	mov	r2, r3
 8009882:	6a39      	ldr	r1, [r7, #32]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff ff24 	bl	80096d2 <LL_GPIO_SetAFPin_0_7>
 800988a:	e006      	b.n	800989a <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	695b      	ldr	r3, [r3, #20]
 8009890:	461a      	mov	r2, r3
 8009892:	6a39      	ldr	r1, [r7, #32]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7ff ff59 	bl	800974c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	461a      	mov	r2, r3
 80098a0:	6a39      	ldr	r1, [r7, #32]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7ff fe46 	bl	8009534 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80098a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098aa:	3301      	adds	r3, #1
 80098ac:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b4:	fa22 f303 	lsr.w	r3, r2, r3
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d19f      	bne.n	80097fc <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3728      	adds	r7, #40	@ 0x28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098c6:	b084      	sub	sp, #16
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	f107 001c 	add.w	r0, r7, #28
 80098d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fd89 	bl	800a3fc <USB_CoreReset>
 80098ea:	4603      	mov	r3, r0
 80098ec:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80098ee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d106      	bne.n	8009904 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	639a      	str	r2, [r3, #56]	@ 0x38
 8009902:	e005      	b.n	8009910 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009908:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8009910:	7bfb      	ldrb	r3, [r7, #15]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800991c:	b004      	add	sp, #16
 800991e:	4770      	bx	lr

08009920 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	4613      	mov	r3, r2
 800992c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800992e:	79fb      	ldrb	r3, [r7, #7]
 8009930:	2b02      	cmp	r3, #2
 8009932:	d165      	bne.n	8009a00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	4a41      	ldr	r2, [pc, #260]	@ (8009a3c <USB_SetTurnaroundTime+0x11c>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d906      	bls.n	800994a <USB_SetTurnaroundTime+0x2a>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	4a40      	ldr	r2, [pc, #256]	@ (8009a40 <USB_SetTurnaroundTime+0x120>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d202      	bcs.n	800994a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009944:	230f      	movs	r3, #15
 8009946:	617b      	str	r3, [r7, #20]
 8009948:	e062      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	4a3c      	ldr	r2, [pc, #240]	@ (8009a40 <USB_SetTurnaroundTime+0x120>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d306      	bcc.n	8009960 <USB_SetTurnaroundTime+0x40>
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	4a3b      	ldr	r2, [pc, #236]	@ (8009a44 <USB_SetTurnaroundTime+0x124>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d202      	bcs.n	8009960 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800995a:	230e      	movs	r3, #14
 800995c:	617b      	str	r3, [r7, #20]
 800995e:	e057      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4a38      	ldr	r2, [pc, #224]	@ (8009a44 <USB_SetTurnaroundTime+0x124>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d306      	bcc.n	8009976 <USB_SetTurnaroundTime+0x56>
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	4a37      	ldr	r2, [pc, #220]	@ (8009a48 <USB_SetTurnaroundTime+0x128>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d202      	bcs.n	8009976 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009970:	230d      	movs	r3, #13
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	e04c      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	4a33      	ldr	r2, [pc, #204]	@ (8009a48 <USB_SetTurnaroundTime+0x128>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d306      	bcc.n	800998c <USB_SetTurnaroundTime+0x6c>
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	4a32      	ldr	r2, [pc, #200]	@ (8009a4c <USB_SetTurnaroundTime+0x12c>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d802      	bhi.n	800998c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009986:	230c      	movs	r3, #12
 8009988:	617b      	str	r3, [r7, #20]
 800998a:	e041      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	4a2f      	ldr	r2, [pc, #188]	@ (8009a4c <USB_SetTurnaroundTime+0x12c>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d906      	bls.n	80099a2 <USB_SetTurnaroundTime+0x82>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	4a2e      	ldr	r2, [pc, #184]	@ (8009a50 <USB_SetTurnaroundTime+0x130>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d802      	bhi.n	80099a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800999c:	230b      	movs	r3, #11
 800999e:	617b      	str	r3, [r7, #20]
 80099a0:	e036      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	4a2a      	ldr	r2, [pc, #168]	@ (8009a50 <USB_SetTurnaroundTime+0x130>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d906      	bls.n	80099b8 <USB_SetTurnaroundTime+0x98>
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	4a29      	ldr	r2, [pc, #164]	@ (8009a54 <USB_SetTurnaroundTime+0x134>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d802      	bhi.n	80099b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80099b2:	230a      	movs	r3, #10
 80099b4:	617b      	str	r3, [r7, #20]
 80099b6:	e02b      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	4a26      	ldr	r2, [pc, #152]	@ (8009a54 <USB_SetTurnaroundTime+0x134>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d906      	bls.n	80099ce <USB_SetTurnaroundTime+0xae>
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	4a25      	ldr	r2, [pc, #148]	@ (8009a58 <USB_SetTurnaroundTime+0x138>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d202      	bcs.n	80099ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80099c8:	2309      	movs	r3, #9
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	e020      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	4a21      	ldr	r2, [pc, #132]	@ (8009a58 <USB_SetTurnaroundTime+0x138>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d306      	bcc.n	80099e4 <USB_SetTurnaroundTime+0xc4>
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	4a20      	ldr	r2, [pc, #128]	@ (8009a5c <USB_SetTurnaroundTime+0x13c>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d802      	bhi.n	80099e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80099de:	2308      	movs	r3, #8
 80099e0:	617b      	str	r3, [r7, #20]
 80099e2:	e015      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	4a1d      	ldr	r2, [pc, #116]	@ (8009a5c <USB_SetTurnaroundTime+0x13c>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d906      	bls.n	80099fa <USB_SetTurnaroundTime+0xda>
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009a60 <USB_SetTurnaroundTime+0x140>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d202      	bcs.n	80099fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80099f4:	2307      	movs	r3, #7
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	e00a      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80099fa:	2306      	movs	r3, #6
 80099fc:	617b      	str	r3, [r7, #20]
 80099fe:	e007      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009a00:	79fb      	ldrb	r3, [r7, #7]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d102      	bne.n	8009a0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009a06:	2309      	movs	r3, #9
 8009a08:	617b      	str	r3, [r7, #20]
 8009a0a:	e001      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009a0c:	2309      	movs	r3, #9
 8009a0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	68da      	ldr	r2, [r3, #12]
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	029b      	lsls	r3, r3, #10
 8009a24:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009a28:	431a      	orrs	r2, r3
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	371c      	adds	r7, #28
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	00d8acbf 	.word	0x00d8acbf
 8009a40:	00e4e1c0 	.word	0x00e4e1c0
 8009a44:	00f42400 	.word	0x00f42400
 8009a48:	01067380 	.word	0x01067380
 8009a4c:	011a499f 	.word	0x011a499f
 8009a50:	01312cff 	.word	0x01312cff
 8009a54:	014ca43f 	.word	0x014ca43f
 8009a58:	016e3600 	.word	0x016e3600
 8009a5c:	01a6ab1f 	.word	0x01a6ab1f
 8009a60:	01e84800 	.word	0x01e84800

08009a64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f023 0201 	bic.w	r2, r3, #1
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	460b      	mov	r3, r1
 8009a90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009a92:	2300      	movs	r3, #0
 8009a94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009aa2:	78fb      	ldrb	r3, [r7, #3]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d115      	bne.n	8009ad4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009ab4:	200a      	movs	r0, #10
 8009ab6:	f7f7 fc89 	bl	80013cc <HAL_Delay>
      ms += 10U;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	330a      	adds	r3, #10
 8009abe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fc0b 	bl	800a2dc <USB_GetMode>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d01e      	beq.n	8009b0a <USB_SetCurrentMode+0x84>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2bc7      	cmp	r3, #199	@ 0xc7
 8009ad0:	d9f0      	bls.n	8009ab4 <USB_SetCurrentMode+0x2e>
 8009ad2:	e01a      	b.n	8009b0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009ad4:	78fb      	ldrb	r3, [r7, #3]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d115      	bne.n	8009b06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009ae6:	200a      	movs	r0, #10
 8009ae8:	f7f7 fc70 	bl	80013cc <HAL_Delay>
      ms += 10U;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	330a      	adds	r3, #10
 8009af0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fbf2 	bl	800a2dc <USB_GetMode>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d005      	beq.n	8009b0a <USB_SetCurrentMode+0x84>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2bc7      	cmp	r3, #199	@ 0xc7
 8009b02:	d9f0      	bls.n	8009ae6 <USB_SetCurrentMode+0x60>
 8009b04:	e001      	b.n	8009b0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e005      	b.n	8009b16 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2bc8      	cmp	r3, #200	@ 0xc8
 8009b0e:	d101      	bne.n	8009b14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e000      	b.n	8009b16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
	...

08009b20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b20:	b084      	sub	sp, #16
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b086      	sub	sp, #24
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
 8009b2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	613b      	str	r3, [r7, #16]
 8009b3e:	e009      	b.n	8009b54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	3340      	adds	r3, #64	@ 0x40
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	3301      	adds	r3, #1
 8009b52:	613b      	str	r3, [r7, #16]
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	2b0e      	cmp	r3, #14
 8009b58:	d9f2      	bls.n	8009b40 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d11c      	bne.n	8009b9c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b70:	f043 0302 	orr.w	r3, r3, #2
 8009b74:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	e005      	b.n	8009ba8 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009bae:	461a      	mov	r2, r3
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009bb4:	2103      	movs	r1, #3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f95e 	bl	8009e78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009bbc:	2110      	movs	r1, #16
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f8fa 	bl	8009db8 <USB_FlushTxFifo>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f924 	bl	8009e1c <USB_FlushRxFifo>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d001      	beq.n	8009bde <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009be4:	461a      	mov	r2, r3
 8009be6:	2300      	movs	r3, #0
 8009be8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	2300      	movs	r3, #0
 8009c00:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c02:	2300      	movs	r3, #0
 8009c04:	613b      	str	r3, [r7, #16]
 8009c06:	e043      	b.n	8009c90 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	015a      	lsls	r2, r3, #5
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	4413      	add	r3, r2
 8009c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c1e:	d118      	bne.n	8009c52 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d10a      	bne.n	8009c3c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	015a      	lsls	r2, r3, #5
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c32:	461a      	mov	r2, r3
 8009c34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009c38:	6013      	str	r3, [r2, #0]
 8009c3a:	e013      	b.n	8009c64 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	015a      	lsls	r2, r3, #5
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4413      	add	r3, r2
 8009c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c48:	461a      	mov	r2, r3
 8009c4a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009c4e:	6013      	str	r3, [r2, #0]
 8009c50:	e008      	b.n	8009c64 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c5e:	461a      	mov	r2, r3
 8009c60:	2300      	movs	r3, #0
 8009c62:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	015a      	lsls	r2, r3, #5
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c70:	461a      	mov	r2, r3
 8009c72:	2300      	movs	r3, #0
 8009c74:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	015a      	lsls	r2, r3, #5
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c82:	461a      	mov	r2, r3
 8009c84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009c88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	613b      	str	r3, [r7, #16]
 8009c90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c94:	461a      	mov	r2, r3
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d3b5      	bcc.n	8009c08 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	613b      	str	r3, [r7, #16]
 8009ca0:	e043      	b.n	8009d2a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	015a      	lsls	r2, r3, #5
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	4413      	add	r3, r2
 8009caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cb8:	d118      	bne.n	8009cec <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10a      	bne.n	8009cd6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ccc:	461a      	mov	r2, r3
 8009cce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	e013      	b.n	8009cfe <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	e008      	b.n	8009cfe <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	015a      	lsls	r2, r3, #5
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	015a      	lsls	r2, r3, #5
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009d22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	3301      	adds	r3, #1
 8009d28:	613b      	str	r3, [r7, #16]
 8009d2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d2e:	461a      	mov	r2, r3
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d3b5      	bcc.n	8009ca2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d48:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009d56:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d105      	bne.n	8009d6c <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	f043 0210 	orr.w	r2, r3, #16
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	699a      	ldr	r2, [r3, #24]
 8009d70:	4b10      	ldr	r3, [pc, #64]	@ (8009db4 <USB_DevInit+0x294>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d005      	beq.n	8009d8c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	f043 0208 	orr.w	r2, r3, #8
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d107      	bne.n	8009da4 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d9c:	f043 0304 	orr.w	r3, r3, #4
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009db0:	b004      	add	sp, #16
 8009db2:	4770      	bx	lr
 8009db4:	803c3800 	.word	0x803c3800

08009db8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009dd2:	d901      	bls.n	8009dd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	e01b      	b.n	8009e10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	daf2      	bge.n	8009dc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009de0:	2300      	movs	r3, #0
 8009de2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	019b      	lsls	r3, r3, #6
 8009de8:	f043 0220 	orr.w	r2, r3, #32
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	3301      	adds	r3, #1
 8009df4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009dfc:	d901      	bls.n	8009e02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e006      	b.n	8009e10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	f003 0320 	and.w	r3, r3, #32
 8009e0a:	2b20      	cmp	r3, #32
 8009e0c:	d0f0      	beq.n	8009df0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e24:	2300      	movs	r3, #0
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e34:	d901      	bls.n	8009e3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	e018      	b.n	8009e6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	daf2      	bge.n	8009e28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009e42:	2300      	movs	r3, #0
 8009e44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2210      	movs	r2, #16
 8009e4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e58:	d901      	bls.n	8009e5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e006      	b.n	8009e6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	f003 0310 	and.w	r3, r3, #16
 8009e66:	2b10      	cmp	r3, #16
 8009e68:	d0f0      	beq.n	8009e4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3714      	adds	r7, #20
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	78fb      	ldrb	r3, [r7, #3]
 8009e92:	68f9      	ldr	r1, [r7, #12]
 8009e94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b087      	sub	sp, #28
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	f003 0306 	and.w	r3, r3, #6
 8009ec2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d102      	bne.n	8009ed0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	75fb      	strb	r3, [r7, #23]
 8009ece:	e00a      	b.n	8009ee6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d002      	beq.n	8009edc <USB_GetDevSpeed+0x32>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b06      	cmp	r3, #6
 8009eda:	d102      	bne.n	8009ee2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009edc:	2302      	movs	r3, #2
 8009ede:	75fb      	strb	r3, [r7, #23]
 8009ee0:	e001      	b.n	8009ee6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009ee2:	230f      	movs	r3, #15
 8009ee4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009efe:	2300      	movs	r3, #0
 8009f00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	785b      	ldrb	r3, [r3, #1]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d14a      	bne.n	8009fa8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	015a      	lsls	r2, r3, #5
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f2a:	f040 8086 	bne.w	800a03a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	7812      	ldrb	r2, [r2, #0]
 8009f42:	0151      	lsls	r1, r2, #5
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	440a      	add	r2, r1
 8009f48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	7812      	ldrb	r2, [r2, #0]
 8009f66:	0151      	lsls	r1, r2, #5
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	440a      	add	r2, r1
 8009f6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d902      	bls.n	8009f8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	75fb      	strb	r3, [r7, #23]
          break;
 8009f8a:	e056      	b.n	800a03a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fa4:	d0e7      	beq.n	8009f76 <USB_EPStopXfer+0x82>
 8009fa6:	e048      	b.n	800a03a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fc0:	d13b      	bne.n	800a03a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	7812      	ldrb	r2, [r2, #0]
 8009fd6:	0151      	lsls	r1, r2, #5
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	440a      	add	r2, r1
 8009fdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fe0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009fe4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	7812      	ldrb	r2, [r2, #0]
 8009ffa:	0151      	lsls	r1, r2, #5
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	440a      	add	r2, r1
 800a000:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a004:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a008:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3301      	adds	r3, #1
 800a00e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a016:	4293      	cmp	r3, r2
 800a018:	d902      	bls.n	800a020 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	75fb      	strb	r3, [r7, #23]
          break;
 800a01e:	e00c      	b.n	800a03a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	015a      	lsls	r2, r3, #5
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	4413      	add	r3, r2
 800a02a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a038:	d0e7      	beq.n	800a00a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	371c      	adds	r7, #28
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a048:	b480      	push	{r7}
 800a04a:	b089      	sub	sp, #36	@ 0x24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	4611      	mov	r1, r2
 800a054:	461a      	mov	r2, r3
 800a056:	460b      	mov	r3, r1
 800a058:	71fb      	strb	r3, [r7, #7]
 800a05a:	4613      	mov	r3, r2
 800a05c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a066:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d123      	bne.n	800a0b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a06e:	88bb      	ldrh	r3, [r7, #4]
 800a070:	3303      	adds	r3, #3
 800a072:	089b      	lsrs	r3, r3, #2
 800a074:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a076:	2300      	movs	r3, #0
 800a078:	61bb      	str	r3, [r7, #24]
 800a07a:	e018      	b.n	800a0ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a07c:	79fb      	ldrb	r3, [r7, #7]
 800a07e:	031a      	lsls	r2, r3, #12
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	4413      	add	r3, r2
 800a084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a088:	461a      	mov	r2, r3
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	3301      	adds	r3, #1
 800a094:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	3301      	adds	r3, #1
 800a09a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	61bb      	str	r3, [r7, #24]
 800a0ae:	69ba      	ldr	r2, [r7, #24]
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d3e2      	bcc.n	800a07c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3724      	adds	r7, #36	@ 0x24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b08b      	sub	sp, #44	@ 0x2c
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a0da:	88fb      	ldrh	r3, [r7, #6]
 800a0dc:	089b      	lsrs	r3, r3, #2
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a0e2:	88fb      	ldrh	r3, [r7, #6]
 800a0e4:	f003 0303 	and.w	r3, r3, #3
 800a0e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	623b      	str	r3, [r7, #32]
 800a0ee:	e014      	b.n	800a11a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fa:	601a      	str	r2, [r3, #0]
    pDest++;
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fe:	3301      	adds	r3, #1
 800a100:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a104:	3301      	adds	r3, #1
 800a106:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10a:	3301      	adds	r3, #1
 800a10c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a110:	3301      	adds	r3, #1
 800a112:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	3301      	adds	r3, #1
 800a118:	623b      	str	r3, [r7, #32]
 800a11a:	6a3a      	ldr	r2, [r7, #32]
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d3e6      	bcc.n	800a0f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a122:	8bfb      	ldrh	r3, [r7, #30]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d01e      	beq.n	800a166 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a128:	2300      	movs	r3, #0
 800a12a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a132:	461a      	mov	r2, r3
 800a134:	f107 0310 	add.w	r3, r7, #16
 800a138:	6812      	ldr	r2, [r2, #0]
 800a13a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	b2db      	uxtb	r3, r3
 800a142:	00db      	lsls	r3, r3, #3
 800a144:	fa22 f303 	lsr.w	r3, r2, r3
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14c:	701a      	strb	r2, [r3, #0]
      i++;
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	3301      	adds	r3, #1
 800a152:	623b      	str	r3, [r7, #32]
      pDest++;
 800a154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a156:	3301      	adds	r3, #1
 800a158:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a15a:	8bfb      	ldrh	r3, [r7, #30]
 800a15c:	3b01      	subs	r3, #1
 800a15e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a160:	8bfb      	ldrh	r3, [r7, #30]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1ea      	bne.n	800a13c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a168:	4618      	mov	r0, r3
 800a16a:	372c      	adds	r7, #44	@ 0x2c
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a18e:	f023 0303 	bic.w	r3, r3, #3
 800a192:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a1a2:	f043 0302 	orr.w	r3, r3, #2
 800a1a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3714      	adds	r7, #20
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b085      	sub	sp, #20
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3714      	adds	r7, #20
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1f8:	69db      	ldr	r3, [r3, #28]
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	0c1b      	lsrs	r3, r3, #16
}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	4013      	ands	r3, r2
 800a232:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	b29b      	uxth	r3, r3
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a26a:	695b      	ldr	r3, [r3, #20]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	4013      	ands	r3, r2
 800a270:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a272:	68bb      	ldr	r3, [r7, #8]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	460b      	mov	r3, r1
 800a28a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2a2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a2a4:	78fb      	ldrb	r3, [r7, #3]
 800a2a6:	f003 030f 	and.w	r3, r3, #15
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b0:	01db      	lsls	r3, r3, #7
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a2ba:	78fb      	ldrb	r3, [r7, #3]
 800a2bc:	015a      	lsls	r2, r3, #5
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a2ce:	68bb      	ldr	r3, [r7, #8]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	371c      	adds	r7, #28
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	695b      	ldr	r3, [r3, #20]
 800a2e8:	f003 0301 	and.w	r3, r3, #1
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a312:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a316:	f023 0307 	bic.w	r3, r3, #7
 800a31a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a32a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a32e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
	...

0800a340 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	460b      	mov	r3, r1
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	333c      	adds	r3, #60	@ 0x3c
 800a356:	3304      	adds	r3, #4
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	4a26      	ldr	r2, [pc, #152]	@ (800a3f8 <USB_EP0_OutStart+0xb8>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d90a      	bls.n	800a37a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a370:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a374:	d101      	bne.n	800a37a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	e037      	b.n	800a3ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a380:	461a      	mov	r2, r3
 800a382:	2300      	movs	r3, #0
 800a384:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a394:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a398:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3a8:	f043 0318 	orr.w	r3, r3, #24
 800a3ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3bc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a3c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d10f      	bne.n	800a3e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3e2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a3e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	371c      	adds	r7, #28
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	4f54300a 	.word	0x4f54300a

0800a3fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a404:	2300      	movs	r3, #0
 800a406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3301      	adds	r3, #1
 800a40c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a414:	d901      	bls.n	800a41a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e01b      	b.n	800a452 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	daf2      	bge.n	800a408 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a422:	2300      	movs	r3, #0
 800a424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	f043 0201 	orr.w	r2, r3, #1
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3301      	adds	r3, #1
 800a436:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a43e:	d901      	bls.n	800a444 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e006      	b.n	800a452 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d0f0      	beq.n	800a432 <USB_CoreReset+0x36>

  return HAL_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
	...

0800a460 <siprintf>:
 800a460:	b40e      	push	{r1, r2, r3}
 800a462:	b500      	push	{lr}
 800a464:	b09c      	sub	sp, #112	@ 0x70
 800a466:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a46a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a46c:	9002      	str	r0, [sp, #8]
 800a46e:	9006      	str	r0, [sp, #24]
 800a470:	9107      	str	r1, [sp, #28]
 800a472:	9104      	str	r1, [sp, #16]
 800a474:	4808      	ldr	r0, [pc, #32]	@ (800a498 <siprintf+0x38>)
 800a476:	4909      	ldr	r1, [pc, #36]	@ (800a49c <siprintf+0x3c>)
 800a478:	f853 2b04 	ldr.w	r2, [r3], #4
 800a47c:	9105      	str	r1, [sp, #20]
 800a47e:	a902      	add	r1, sp, #8
 800a480:	6800      	ldr	r0, [r0, #0]
 800a482:	9301      	str	r3, [sp, #4]
 800a484:	f000 f994 	bl	800a7b0 <_svfiprintf_r>
 800a488:	9b02      	ldr	r3, [sp, #8]
 800a48a:	2200      	movs	r2, #0
 800a48c:	701a      	strb	r2, [r3, #0]
 800a48e:	b01c      	add	sp, #112	@ 0x70
 800a490:	f85d eb04 	ldr.w	lr, [sp], #4
 800a494:	b003      	add	sp, #12
 800a496:	4770      	bx	lr
 800a498:	20000028 	.word	0x20000028
 800a49c:	ffff0208 	.word	0xffff0208

0800a4a0 <memset>:
 800a4a0:	4402      	add	r2, r0
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d100      	bne.n	800a4aa <memset+0xa>
 800a4a8:	4770      	bx	lr
 800a4aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ae:	e7f9      	b.n	800a4a4 <memset+0x4>

0800a4b0 <__errno>:
 800a4b0:	4b01      	ldr	r3, [pc, #4]	@ (800a4b8 <__errno+0x8>)
 800a4b2:	6818      	ldr	r0, [r3, #0]
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	20000028 	.word	0x20000028

0800a4bc <__libc_init_array>:
 800a4bc:	b570      	push	{r4, r5, r6, lr}
 800a4be:	4d0d      	ldr	r5, [pc, #52]	@ (800a4f4 <__libc_init_array+0x38>)
 800a4c0:	2600      	movs	r6, #0
 800a4c2:	4c0d      	ldr	r4, [pc, #52]	@ (800a4f8 <__libc_init_array+0x3c>)
 800a4c4:	1b64      	subs	r4, r4, r5
 800a4c6:	10a4      	asrs	r4, r4, #2
 800a4c8:	42a6      	cmp	r6, r4
 800a4ca:	d109      	bne.n	800a4e0 <__libc_init_array+0x24>
 800a4cc:	4d0b      	ldr	r5, [pc, #44]	@ (800a4fc <__libc_init_array+0x40>)
 800a4ce:	2600      	movs	r6, #0
 800a4d0:	4c0b      	ldr	r4, [pc, #44]	@ (800a500 <__libc_init_array+0x44>)
 800a4d2:	f000 fc77 	bl	800adc4 <_init>
 800a4d6:	1b64      	subs	r4, r4, r5
 800a4d8:	10a4      	asrs	r4, r4, #2
 800a4da:	42a6      	cmp	r6, r4
 800a4dc:	d105      	bne.n	800a4ea <__libc_init_array+0x2e>
 800a4de:	bd70      	pop	{r4, r5, r6, pc}
 800a4e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4e4:	3601      	adds	r6, #1
 800a4e6:	4798      	blx	r3
 800a4e8:	e7ee      	b.n	800a4c8 <__libc_init_array+0xc>
 800a4ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ee:	3601      	adds	r6, #1
 800a4f0:	4798      	blx	r3
 800a4f2:	e7f2      	b.n	800a4da <__libc_init_array+0x1e>
 800a4f4:	0800af40 	.word	0x0800af40
 800a4f8:	0800af40 	.word	0x0800af40
 800a4fc:	0800af40 	.word	0x0800af40
 800a500:	0800af44 	.word	0x0800af44

0800a504 <__retarget_lock_acquire_recursive>:
 800a504:	4770      	bx	lr

0800a506 <__retarget_lock_release_recursive>:
 800a506:	4770      	bx	lr

0800a508 <_free_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4605      	mov	r5, r0
 800a50c:	2900      	cmp	r1, #0
 800a50e:	d041      	beq.n	800a594 <_free_r+0x8c>
 800a510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a514:	1f0c      	subs	r4, r1, #4
 800a516:	2b00      	cmp	r3, #0
 800a518:	bfb8      	it	lt
 800a51a:	18e4      	addlt	r4, r4, r3
 800a51c:	f000 f8e0 	bl	800a6e0 <__malloc_lock>
 800a520:	4a1d      	ldr	r2, [pc, #116]	@ (800a598 <_free_r+0x90>)
 800a522:	6813      	ldr	r3, [r2, #0]
 800a524:	b933      	cbnz	r3, 800a534 <_free_r+0x2c>
 800a526:	6063      	str	r3, [r4, #4]
 800a528:	6014      	str	r4, [r2, #0]
 800a52a:	4628      	mov	r0, r5
 800a52c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a530:	f000 b8dc 	b.w	800a6ec <__malloc_unlock>
 800a534:	42a3      	cmp	r3, r4
 800a536:	d908      	bls.n	800a54a <_free_r+0x42>
 800a538:	6820      	ldr	r0, [r4, #0]
 800a53a:	1821      	adds	r1, r4, r0
 800a53c:	428b      	cmp	r3, r1
 800a53e:	bf01      	itttt	eq
 800a540:	6819      	ldreq	r1, [r3, #0]
 800a542:	685b      	ldreq	r3, [r3, #4]
 800a544:	1809      	addeq	r1, r1, r0
 800a546:	6021      	streq	r1, [r4, #0]
 800a548:	e7ed      	b.n	800a526 <_free_r+0x1e>
 800a54a:	461a      	mov	r2, r3
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	b10b      	cbz	r3, 800a554 <_free_r+0x4c>
 800a550:	42a3      	cmp	r3, r4
 800a552:	d9fa      	bls.n	800a54a <_free_r+0x42>
 800a554:	6811      	ldr	r1, [r2, #0]
 800a556:	1850      	adds	r0, r2, r1
 800a558:	42a0      	cmp	r0, r4
 800a55a:	d10b      	bne.n	800a574 <_free_r+0x6c>
 800a55c:	6820      	ldr	r0, [r4, #0]
 800a55e:	4401      	add	r1, r0
 800a560:	1850      	adds	r0, r2, r1
 800a562:	6011      	str	r1, [r2, #0]
 800a564:	4283      	cmp	r3, r0
 800a566:	d1e0      	bne.n	800a52a <_free_r+0x22>
 800a568:	6818      	ldr	r0, [r3, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	4408      	add	r0, r1
 800a56e:	6053      	str	r3, [r2, #4]
 800a570:	6010      	str	r0, [r2, #0]
 800a572:	e7da      	b.n	800a52a <_free_r+0x22>
 800a574:	d902      	bls.n	800a57c <_free_r+0x74>
 800a576:	230c      	movs	r3, #12
 800a578:	602b      	str	r3, [r5, #0]
 800a57a:	e7d6      	b.n	800a52a <_free_r+0x22>
 800a57c:	6820      	ldr	r0, [r4, #0]
 800a57e:	1821      	adds	r1, r4, r0
 800a580:	428b      	cmp	r3, r1
 800a582:	bf02      	ittt	eq
 800a584:	6819      	ldreq	r1, [r3, #0]
 800a586:	685b      	ldreq	r3, [r3, #4]
 800a588:	1809      	addeq	r1, r1, r0
 800a58a:	6063      	str	r3, [r4, #4]
 800a58c:	bf08      	it	eq
 800a58e:	6021      	streq	r1, [r4, #0]
 800a590:	6054      	str	r4, [r2, #4]
 800a592:	e7ca      	b.n	800a52a <_free_r+0x22>
 800a594:	bd38      	pop	{r3, r4, r5, pc}
 800a596:	bf00      	nop
 800a598:	20000890 	.word	0x20000890

0800a59c <sbrk_aligned>:
 800a59c:	b570      	push	{r4, r5, r6, lr}
 800a59e:	4e0f      	ldr	r6, [pc, #60]	@ (800a5dc <sbrk_aligned+0x40>)
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	4605      	mov	r5, r0
 800a5a4:	6831      	ldr	r1, [r6, #0]
 800a5a6:	b911      	cbnz	r1, 800a5ae <sbrk_aligned+0x12>
 800a5a8:	f000 fbaa 	bl	800ad00 <_sbrk_r>
 800a5ac:	6030      	str	r0, [r6, #0]
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	f000 fba5 	bl	800ad00 <_sbrk_r>
 800a5b6:	1c43      	adds	r3, r0, #1
 800a5b8:	d103      	bne.n	800a5c2 <sbrk_aligned+0x26>
 800a5ba:	f04f 34ff 	mov.w	r4, #4294967295
 800a5be:	4620      	mov	r0, r4
 800a5c0:	bd70      	pop	{r4, r5, r6, pc}
 800a5c2:	1cc4      	adds	r4, r0, #3
 800a5c4:	f024 0403 	bic.w	r4, r4, #3
 800a5c8:	42a0      	cmp	r0, r4
 800a5ca:	d0f8      	beq.n	800a5be <sbrk_aligned+0x22>
 800a5cc:	1a21      	subs	r1, r4, r0
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f000 fb96 	bl	800ad00 <_sbrk_r>
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d1f2      	bne.n	800a5be <sbrk_aligned+0x22>
 800a5d8:	e7ef      	b.n	800a5ba <sbrk_aligned+0x1e>
 800a5da:	bf00      	nop
 800a5dc:	2000088c 	.word	0x2000088c

0800a5e0 <_malloc_r>:
 800a5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e4:	1ccd      	adds	r5, r1, #3
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	f025 0503 	bic.w	r5, r5, #3
 800a5ec:	3508      	adds	r5, #8
 800a5ee:	2d0c      	cmp	r5, #12
 800a5f0:	bf38      	it	cc
 800a5f2:	250c      	movcc	r5, #12
 800a5f4:	2d00      	cmp	r5, #0
 800a5f6:	db01      	blt.n	800a5fc <_malloc_r+0x1c>
 800a5f8:	42a9      	cmp	r1, r5
 800a5fa:	d904      	bls.n	800a606 <_malloc_r+0x26>
 800a5fc:	230c      	movs	r3, #12
 800a5fe:	6033      	str	r3, [r6, #0]
 800a600:	2000      	movs	r0, #0
 800a602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a6dc <_malloc_r+0xfc>
 800a60a:	f000 f869 	bl	800a6e0 <__malloc_lock>
 800a60e:	f8d8 3000 	ldr.w	r3, [r8]
 800a612:	461c      	mov	r4, r3
 800a614:	bb44      	cbnz	r4, 800a668 <_malloc_r+0x88>
 800a616:	4629      	mov	r1, r5
 800a618:	4630      	mov	r0, r6
 800a61a:	f7ff ffbf 	bl	800a59c <sbrk_aligned>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	4604      	mov	r4, r0
 800a622:	d158      	bne.n	800a6d6 <_malloc_r+0xf6>
 800a624:	f8d8 4000 	ldr.w	r4, [r8]
 800a628:	4627      	mov	r7, r4
 800a62a:	2f00      	cmp	r7, #0
 800a62c:	d143      	bne.n	800a6b6 <_malloc_r+0xd6>
 800a62e:	2c00      	cmp	r4, #0
 800a630:	d04b      	beq.n	800a6ca <_malloc_r+0xea>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	4639      	mov	r1, r7
 800a636:	4630      	mov	r0, r6
 800a638:	eb04 0903 	add.w	r9, r4, r3
 800a63c:	f000 fb60 	bl	800ad00 <_sbrk_r>
 800a640:	4581      	cmp	r9, r0
 800a642:	d142      	bne.n	800a6ca <_malloc_r+0xea>
 800a644:	6821      	ldr	r1, [r4, #0]
 800a646:	4630      	mov	r0, r6
 800a648:	1a6d      	subs	r5, r5, r1
 800a64a:	4629      	mov	r1, r5
 800a64c:	f7ff ffa6 	bl	800a59c <sbrk_aligned>
 800a650:	3001      	adds	r0, #1
 800a652:	d03a      	beq.n	800a6ca <_malloc_r+0xea>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	442b      	add	r3, r5
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	f8d8 3000 	ldr.w	r3, [r8]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	bb62      	cbnz	r2, 800a6bc <_malloc_r+0xdc>
 800a662:	f8c8 7000 	str.w	r7, [r8]
 800a666:	e00f      	b.n	800a688 <_malloc_r+0xa8>
 800a668:	6822      	ldr	r2, [r4, #0]
 800a66a:	1b52      	subs	r2, r2, r5
 800a66c:	d420      	bmi.n	800a6b0 <_malloc_r+0xd0>
 800a66e:	2a0b      	cmp	r2, #11
 800a670:	d917      	bls.n	800a6a2 <_malloc_r+0xc2>
 800a672:	1961      	adds	r1, r4, r5
 800a674:	42a3      	cmp	r3, r4
 800a676:	6025      	str	r5, [r4, #0]
 800a678:	bf18      	it	ne
 800a67a:	6059      	strne	r1, [r3, #4]
 800a67c:	6863      	ldr	r3, [r4, #4]
 800a67e:	bf08      	it	eq
 800a680:	f8c8 1000 	streq.w	r1, [r8]
 800a684:	5162      	str	r2, [r4, r5]
 800a686:	604b      	str	r3, [r1, #4]
 800a688:	4630      	mov	r0, r6
 800a68a:	f000 f82f 	bl	800a6ec <__malloc_unlock>
 800a68e:	f104 000b 	add.w	r0, r4, #11
 800a692:	1d23      	adds	r3, r4, #4
 800a694:	f020 0007 	bic.w	r0, r0, #7
 800a698:	1ac2      	subs	r2, r0, r3
 800a69a:	bf1c      	itt	ne
 800a69c:	1a1b      	subne	r3, r3, r0
 800a69e:	50a3      	strne	r3, [r4, r2]
 800a6a0:	e7af      	b.n	800a602 <_malloc_r+0x22>
 800a6a2:	6862      	ldr	r2, [r4, #4]
 800a6a4:	42a3      	cmp	r3, r4
 800a6a6:	bf0c      	ite	eq
 800a6a8:	f8c8 2000 	streq.w	r2, [r8]
 800a6ac:	605a      	strne	r2, [r3, #4]
 800a6ae:	e7eb      	b.n	800a688 <_malloc_r+0xa8>
 800a6b0:	4623      	mov	r3, r4
 800a6b2:	6864      	ldr	r4, [r4, #4]
 800a6b4:	e7ae      	b.n	800a614 <_malloc_r+0x34>
 800a6b6:	463c      	mov	r4, r7
 800a6b8:	687f      	ldr	r7, [r7, #4]
 800a6ba:	e7b6      	b.n	800a62a <_malloc_r+0x4a>
 800a6bc:	461a      	mov	r2, r3
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	42a3      	cmp	r3, r4
 800a6c2:	d1fb      	bne.n	800a6bc <_malloc_r+0xdc>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	6053      	str	r3, [r2, #4]
 800a6c8:	e7de      	b.n	800a688 <_malloc_r+0xa8>
 800a6ca:	230c      	movs	r3, #12
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	6033      	str	r3, [r6, #0]
 800a6d0:	f000 f80c 	bl	800a6ec <__malloc_unlock>
 800a6d4:	e794      	b.n	800a600 <_malloc_r+0x20>
 800a6d6:	6005      	str	r5, [r0, #0]
 800a6d8:	e7d6      	b.n	800a688 <_malloc_r+0xa8>
 800a6da:	bf00      	nop
 800a6dc:	20000890 	.word	0x20000890

0800a6e0 <__malloc_lock>:
 800a6e0:	4801      	ldr	r0, [pc, #4]	@ (800a6e8 <__malloc_lock+0x8>)
 800a6e2:	f7ff bf0f 	b.w	800a504 <__retarget_lock_acquire_recursive>
 800a6e6:	bf00      	nop
 800a6e8:	20000888 	.word	0x20000888

0800a6ec <__malloc_unlock>:
 800a6ec:	4801      	ldr	r0, [pc, #4]	@ (800a6f4 <__malloc_unlock+0x8>)
 800a6ee:	f7ff bf0a 	b.w	800a506 <__retarget_lock_release_recursive>
 800a6f2:	bf00      	nop
 800a6f4:	20000888 	.word	0x20000888

0800a6f8 <__ssputs_r>:
 800a6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6fc:	461f      	mov	r7, r3
 800a6fe:	688e      	ldr	r6, [r1, #8]
 800a700:	4682      	mov	sl, r0
 800a702:	460c      	mov	r4, r1
 800a704:	42be      	cmp	r6, r7
 800a706:	4690      	mov	r8, r2
 800a708:	680b      	ldr	r3, [r1, #0]
 800a70a:	d82d      	bhi.n	800a768 <__ssputs_r+0x70>
 800a70c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a710:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a714:	d026      	beq.n	800a764 <__ssputs_r+0x6c>
 800a716:	6965      	ldr	r5, [r4, #20]
 800a718:	6909      	ldr	r1, [r1, #16]
 800a71a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a71e:	eba3 0901 	sub.w	r9, r3, r1
 800a722:	1c7b      	adds	r3, r7, #1
 800a724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a728:	444b      	add	r3, r9
 800a72a:	106d      	asrs	r5, r5, #1
 800a72c:	429d      	cmp	r5, r3
 800a72e:	bf38      	it	cc
 800a730:	461d      	movcc	r5, r3
 800a732:	0553      	lsls	r3, r2, #21
 800a734:	d527      	bpl.n	800a786 <__ssputs_r+0x8e>
 800a736:	4629      	mov	r1, r5
 800a738:	f7ff ff52 	bl	800a5e0 <_malloc_r>
 800a73c:	4606      	mov	r6, r0
 800a73e:	b360      	cbz	r0, 800a79a <__ssputs_r+0xa2>
 800a740:	464a      	mov	r2, r9
 800a742:	6921      	ldr	r1, [r4, #16]
 800a744:	f000 fafa 	bl	800ad3c <memcpy>
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a74e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a752:	81a3      	strh	r3, [r4, #12]
 800a754:	6126      	str	r6, [r4, #16]
 800a756:	444e      	add	r6, r9
 800a758:	6165      	str	r5, [r4, #20]
 800a75a:	eba5 0509 	sub.w	r5, r5, r9
 800a75e:	6026      	str	r6, [r4, #0]
 800a760:	463e      	mov	r6, r7
 800a762:	60a5      	str	r5, [r4, #8]
 800a764:	42be      	cmp	r6, r7
 800a766:	d900      	bls.n	800a76a <__ssputs_r+0x72>
 800a768:	463e      	mov	r6, r7
 800a76a:	4632      	mov	r2, r6
 800a76c:	4641      	mov	r1, r8
 800a76e:	6820      	ldr	r0, [r4, #0]
 800a770:	f000 faac 	bl	800accc <memmove>
 800a774:	68a3      	ldr	r3, [r4, #8]
 800a776:	2000      	movs	r0, #0
 800a778:	1b9b      	subs	r3, r3, r6
 800a77a:	60a3      	str	r3, [r4, #8]
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	4433      	add	r3, r6
 800a780:	6023      	str	r3, [r4, #0]
 800a782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a786:	462a      	mov	r2, r5
 800a788:	f000 fae5 	bl	800ad56 <_realloc_r>
 800a78c:	4606      	mov	r6, r0
 800a78e:	2800      	cmp	r0, #0
 800a790:	d1e0      	bne.n	800a754 <__ssputs_r+0x5c>
 800a792:	6921      	ldr	r1, [r4, #16]
 800a794:	4650      	mov	r0, sl
 800a796:	f7ff feb7 	bl	800a508 <_free_r>
 800a79a:	230c      	movs	r3, #12
 800a79c:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a0:	f8ca 3000 	str.w	r3, [sl]
 800a7a4:	89a3      	ldrh	r3, [r4, #12]
 800a7a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7aa:	81a3      	strh	r3, [r4, #12]
 800a7ac:	e7e9      	b.n	800a782 <__ssputs_r+0x8a>
	...

0800a7b0 <_svfiprintf_r>:
 800a7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b4:	4698      	mov	r8, r3
 800a7b6:	898b      	ldrh	r3, [r1, #12]
 800a7b8:	b09d      	sub	sp, #116	@ 0x74
 800a7ba:	4607      	mov	r7, r0
 800a7bc:	061b      	lsls	r3, r3, #24
 800a7be:	460d      	mov	r5, r1
 800a7c0:	4614      	mov	r4, r2
 800a7c2:	d510      	bpl.n	800a7e6 <_svfiprintf_r+0x36>
 800a7c4:	690b      	ldr	r3, [r1, #16]
 800a7c6:	b973      	cbnz	r3, 800a7e6 <_svfiprintf_r+0x36>
 800a7c8:	2140      	movs	r1, #64	@ 0x40
 800a7ca:	f7ff ff09 	bl	800a5e0 <_malloc_r>
 800a7ce:	6028      	str	r0, [r5, #0]
 800a7d0:	6128      	str	r0, [r5, #16]
 800a7d2:	b930      	cbnz	r0, 800a7e2 <_svfiprintf_r+0x32>
 800a7d4:	230c      	movs	r3, #12
 800a7d6:	603b      	str	r3, [r7, #0]
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7dc:	b01d      	add	sp, #116	@ 0x74
 800a7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e2:	2340      	movs	r3, #64	@ 0x40
 800a7e4:	616b      	str	r3, [r5, #20]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ec:	f04f 0901 	mov.w	r9, #1
 800a7f0:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800a994 <_svfiprintf_r+0x1e4>
 800a7f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7f6:	2320      	movs	r3, #32
 800a7f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7fc:	2330      	movs	r3, #48	@ 0x30
 800a7fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a802:	4623      	mov	r3, r4
 800a804:	469a      	mov	sl, r3
 800a806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a80a:	b10a      	cbz	r2, 800a810 <_svfiprintf_r+0x60>
 800a80c:	2a25      	cmp	r2, #37	@ 0x25
 800a80e:	d1f9      	bne.n	800a804 <_svfiprintf_r+0x54>
 800a810:	ebba 0b04 	subs.w	fp, sl, r4
 800a814:	d00b      	beq.n	800a82e <_svfiprintf_r+0x7e>
 800a816:	465b      	mov	r3, fp
 800a818:	4622      	mov	r2, r4
 800a81a:	4629      	mov	r1, r5
 800a81c:	4638      	mov	r0, r7
 800a81e:	f7ff ff6b 	bl	800a6f8 <__ssputs_r>
 800a822:	3001      	adds	r0, #1
 800a824:	f000 80a7 	beq.w	800a976 <_svfiprintf_r+0x1c6>
 800a828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a82a:	445a      	add	r2, fp
 800a82c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a82e:	f89a 3000 	ldrb.w	r3, [sl]
 800a832:	2b00      	cmp	r3, #0
 800a834:	f000 809f 	beq.w	800a976 <_svfiprintf_r+0x1c6>
 800a838:	2300      	movs	r3, #0
 800a83a:	f04f 32ff 	mov.w	r2, #4294967295
 800a83e:	f10a 0a01 	add.w	sl, sl, #1
 800a842:	9304      	str	r3, [sp, #16]
 800a844:	9307      	str	r3, [sp, #28]
 800a846:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a84a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a84c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a850:	4654      	mov	r4, sl
 800a852:	2205      	movs	r2, #5
 800a854:	484f      	ldr	r0, [pc, #316]	@ (800a994 <_svfiprintf_r+0x1e4>)
 800a856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85a:	f000 fa61 	bl	800ad20 <memchr>
 800a85e:	9a04      	ldr	r2, [sp, #16]
 800a860:	b9d8      	cbnz	r0, 800a89a <_svfiprintf_r+0xea>
 800a862:	06d0      	lsls	r0, r2, #27
 800a864:	bf44      	itt	mi
 800a866:	2320      	movmi	r3, #32
 800a868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a86c:	0711      	lsls	r1, r2, #28
 800a86e:	bf44      	itt	mi
 800a870:	232b      	movmi	r3, #43	@ 0x2b
 800a872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a876:	f89a 3000 	ldrb.w	r3, [sl]
 800a87a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a87c:	d015      	beq.n	800a8aa <_svfiprintf_r+0xfa>
 800a87e:	9a07      	ldr	r2, [sp, #28]
 800a880:	4654      	mov	r4, sl
 800a882:	2000      	movs	r0, #0
 800a884:	f04f 0c0a 	mov.w	ip, #10
 800a888:	4621      	mov	r1, r4
 800a88a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a88e:	3b30      	subs	r3, #48	@ 0x30
 800a890:	2b09      	cmp	r3, #9
 800a892:	d94b      	bls.n	800a92c <_svfiprintf_r+0x17c>
 800a894:	b1b0      	cbz	r0, 800a8c4 <_svfiprintf_r+0x114>
 800a896:	9207      	str	r2, [sp, #28]
 800a898:	e014      	b.n	800a8c4 <_svfiprintf_r+0x114>
 800a89a:	eba0 0308 	sub.w	r3, r0, r8
 800a89e:	46a2      	mov	sl, r4
 800a8a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	9304      	str	r3, [sp, #16]
 800a8a8:	e7d2      	b.n	800a850 <_svfiprintf_r+0xa0>
 800a8aa:	9b03      	ldr	r3, [sp, #12]
 800a8ac:	1d19      	adds	r1, r3, #4
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	9103      	str	r1, [sp, #12]
 800a8b4:	bfbb      	ittet	lt
 800a8b6:	425b      	neglt	r3, r3
 800a8b8:	f042 0202 	orrlt.w	r2, r2, #2
 800a8bc:	9307      	strge	r3, [sp, #28]
 800a8be:	9307      	strlt	r3, [sp, #28]
 800a8c0:	bfb8      	it	lt
 800a8c2:	9204      	strlt	r2, [sp, #16]
 800a8c4:	7823      	ldrb	r3, [r4, #0]
 800a8c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8c8:	d10a      	bne.n	800a8e0 <_svfiprintf_r+0x130>
 800a8ca:	7863      	ldrb	r3, [r4, #1]
 800a8cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8ce:	d132      	bne.n	800a936 <_svfiprintf_r+0x186>
 800a8d0:	9b03      	ldr	r3, [sp, #12]
 800a8d2:	3402      	adds	r4, #2
 800a8d4:	1d1a      	adds	r2, r3, #4
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8dc:	9203      	str	r2, [sp, #12]
 800a8de:	9305      	str	r3, [sp, #20]
 800a8e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a9a4 <_svfiprintf_r+0x1f4>
 800a8e4:	2203      	movs	r2, #3
 800a8e6:	7821      	ldrb	r1, [r4, #0]
 800a8e8:	4650      	mov	r0, sl
 800a8ea:	f000 fa19 	bl	800ad20 <memchr>
 800a8ee:	b138      	cbz	r0, 800a900 <_svfiprintf_r+0x150>
 800a8f0:	eba0 000a 	sub.w	r0, r0, sl
 800a8f4:	2240      	movs	r2, #64	@ 0x40
 800a8f6:	9b04      	ldr	r3, [sp, #16]
 800a8f8:	3401      	adds	r4, #1
 800a8fa:	4082      	lsls	r2, r0
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	9304      	str	r3, [sp, #16]
 800a900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a904:	2206      	movs	r2, #6
 800a906:	4824      	ldr	r0, [pc, #144]	@ (800a998 <_svfiprintf_r+0x1e8>)
 800a908:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a90c:	f000 fa08 	bl	800ad20 <memchr>
 800a910:	2800      	cmp	r0, #0
 800a912:	d036      	beq.n	800a982 <_svfiprintf_r+0x1d2>
 800a914:	4b21      	ldr	r3, [pc, #132]	@ (800a99c <_svfiprintf_r+0x1ec>)
 800a916:	bb1b      	cbnz	r3, 800a960 <_svfiprintf_r+0x1b0>
 800a918:	9b03      	ldr	r3, [sp, #12]
 800a91a:	3307      	adds	r3, #7
 800a91c:	f023 0307 	bic.w	r3, r3, #7
 800a920:	3308      	adds	r3, #8
 800a922:	9303      	str	r3, [sp, #12]
 800a924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a926:	4433      	add	r3, r6
 800a928:	9309      	str	r3, [sp, #36]	@ 0x24
 800a92a:	e76a      	b.n	800a802 <_svfiprintf_r+0x52>
 800a92c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a930:	460c      	mov	r4, r1
 800a932:	2001      	movs	r0, #1
 800a934:	e7a8      	b.n	800a888 <_svfiprintf_r+0xd8>
 800a936:	2300      	movs	r3, #0
 800a938:	3401      	adds	r4, #1
 800a93a:	f04f 0c0a 	mov.w	ip, #10
 800a93e:	4619      	mov	r1, r3
 800a940:	9305      	str	r3, [sp, #20]
 800a942:	4620      	mov	r0, r4
 800a944:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a948:	3a30      	subs	r2, #48	@ 0x30
 800a94a:	2a09      	cmp	r2, #9
 800a94c:	d903      	bls.n	800a956 <_svfiprintf_r+0x1a6>
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d0c6      	beq.n	800a8e0 <_svfiprintf_r+0x130>
 800a952:	9105      	str	r1, [sp, #20]
 800a954:	e7c4      	b.n	800a8e0 <_svfiprintf_r+0x130>
 800a956:	fb0c 2101 	mla	r1, ip, r1, r2
 800a95a:	4604      	mov	r4, r0
 800a95c:	2301      	movs	r3, #1
 800a95e:	e7f0      	b.n	800a942 <_svfiprintf_r+0x192>
 800a960:	ab03      	add	r3, sp, #12
 800a962:	462a      	mov	r2, r5
 800a964:	a904      	add	r1, sp, #16
 800a966:	4638      	mov	r0, r7
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a0 <_svfiprintf_r+0x1f0>)
 800a96c:	f3af 8000 	nop.w
 800a970:	1c42      	adds	r2, r0, #1
 800a972:	4606      	mov	r6, r0
 800a974:	d1d6      	bne.n	800a924 <_svfiprintf_r+0x174>
 800a976:	89ab      	ldrh	r3, [r5, #12]
 800a978:	065b      	lsls	r3, r3, #25
 800a97a:	f53f af2d 	bmi.w	800a7d8 <_svfiprintf_r+0x28>
 800a97e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a980:	e72c      	b.n	800a7dc <_svfiprintf_r+0x2c>
 800a982:	ab03      	add	r3, sp, #12
 800a984:	462a      	mov	r2, r5
 800a986:	a904      	add	r1, sp, #16
 800a988:	4638      	mov	r0, r7
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	4b04      	ldr	r3, [pc, #16]	@ (800a9a0 <_svfiprintf_r+0x1f0>)
 800a98e:	f000 f87d 	bl	800aa8c <_printf_i>
 800a992:	e7ed      	b.n	800a970 <_svfiprintf_r+0x1c0>
 800a994:	0800af04 	.word	0x0800af04
 800a998:	0800af0e 	.word	0x0800af0e
 800a99c:	00000000 	.word	0x00000000
 800a9a0:	0800a6f9 	.word	0x0800a6f9
 800a9a4:	0800af0a 	.word	0x0800af0a

0800a9a8 <_printf_common>:
 800a9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ac:	4616      	mov	r6, r2
 800a9ae:	4698      	mov	r8, r3
 800a9b0:	688a      	ldr	r2, [r1, #8]
 800a9b2:	4607      	mov	r7, r0
 800a9b4:	690b      	ldr	r3, [r1, #16]
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	bfb8      	it	lt
 800a9c0:	4613      	movlt	r3, r2
 800a9c2:	6033      	str	r3, [r6, #0]
 800a9c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a9c8:	b10a      	cbz	r2, 800a9ce <_printf_common+0x26>
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	6033      	str	r3, [r6, #0]
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	0699      	lsls	r1, r3, #26
 800a9d2:	bf42      	ittt	mi
 800a9d4:	6833      	ldrmi	r3, [r6, #0]
 800a9d6:	3302      	addmi	r3, #2
 800a9d8:	6033      	strmi	r3, [r6, #0]
 800a9da:	6825      	ldr	r5, [r4, #0]
 800a9dc:	f015 0506 	ands.w	r5, r5, #6
 800a9e0:	d106      	bne.n	800a9f0 <_printf_common+0x48>
 800a9e2:	f104 0a19 	add.w	sl, r4, #25
 800a9e6:	68e3      	ldr	r3, [r4, #12]
 800a9e8:	6832      	ldr	r2, [r6, #0]
 800a9ea:	1a9b      	subs	r3, r3, r2
 800a9ec:	42ab      	cmp	r3, r5
 800a9ee:	dc2b      	bgt.n	800aa48 <_printf_common+0xa0>
 800a9f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a9f4:	6822      	ldr	r2, [r4, #0]
 800a9f6:	3b00      	subs	r3, #0
 800a9f8:	bf18      	it	ne
 800a9fa:	2301      	movne	r3, #1
 800a9fc:	0692      	lsls	r2, r2, #26
 800a9fe:	d430      	bmi.n	800aa62 <_printf_common+0xba>
 800aa00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa04:	4641      	mov	r1, r8
 800aa06:	4638      	mov	r0, r7
 800aa08:	47c8      	blx	r9
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	d023      	beq.n	800aa56 <_printf_common+0xae>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	341a      	adds	r4, #26
 800aa12:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800aa16:	f003 0306 	and.w	r3, r3, #6
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	bf0a      	itet	eq
 800aa1e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800aa22:	2500      	movne	r5, #0
 800aa24:	6833      	ldreq	r3, [r6, #0]
 800aa26:	f04f 0600 	mov.w	r6, #0
 800aa2a:	bf08      	it	eq
 800aa2c:	1aed      	subeq	r5, r5, r3
 800aa2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aa32:	bf08      	it	eq
 800aa34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	bfc4      	itt	gt
 800aa3c:	1a9b      	subgt	r3, r3, r2
 800aa3e:	18ed      	addgt	r5, r5, r3
 800aa40:	42b5      	cmp	r5, r6
 800aa42:	d11a      	bne.n	800aa7a <_printf_common+0xd2>
 800aa44:	2000      	movs	r0, #0
 800aa46:	e008      	b.n	800aa5a <_printf_common+0xb2>
 800aa48:	2301      	movs	r3, #1
 800aa4a:	4652      	mov	r2, sl
 800aa4c:	4641      	mov	r1, r8
 800aa4e:	4638      	mov	r0, r7
 800aa50:	47c8      	blx	r9
 800aa52:	3001      	adds	r0, #1
 800aa54:	d103      	bne.n	800aa5e <_printf_common+0xb6>
 800aa56:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa5e:	3501      	adds	r5, #1
 800aa60:	e7c1      	b.n	800a9e6 <_printf_common+0x3e>
 800aa62:	18e1      	adds	r1, r4, r3
 800aa64:	1c5a      	adds	r2, r3, #1
 800aa66:	2030      	movs	r0, #48	@ 0x30
 800aa68:	3302      	adds	r3, #2
 800aa6a:	4422      	add	r2, r4
 800aa6c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa78:	e7c2      	b.n	800aa00 <_printf_common+0x58>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	4641      	mov	r1, r8
 800aa80:	4638      	mov	r0, r7
 800aa82:	47c8      	blx	r9
 800aa84:	3001      	adds	r0, #1
 800aa86:	d0e6      	beq.n	800aa56 <_printf_common+0xae>
 800aa88:	3601      	adds	r6, #1
 800aa8a:	e7d9      	b.n	800aa40 <_printf_common+0x98>

0800aa8c <_printf_i>:
 800aa8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa90:	7e0f      	ldrb	r7, [r1, #24]
 800aa92:	4691      	mov	r9, r2
 800aa94:	4680      	mov	r8, r0
 800aa96:	460c      	mov	r4, r1
 800aa98:	2f78      	cmp	r7, #120	@ 0x78
 800aa9a:	469a      	mov	sl, r3
 800aa9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aaa2:	d807      	bhi.n	800aab4 <_printf_i+0x28>
 800aaa4:	2f62      	cmp	r7, #98	@ 0x62
 800aaa6:	d80a      	bhi.n	800aabe <_printf_i+0x32>
 800aaa8:	2f00      	cmp	r7, #0
 800aaaa:	f000 80d2 	beq.w	800ac52 <_printf_i+0x1c6>
 800aaae:	2f58      	cmp	r7, #88	@ 0x58
 800aab0:	f000 80b9 	beq.w	800ac26 <_printf_i+0x19a>
 800aab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aab8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aabc:	e03a      	b.n	800ab34 <_printf_i+0xa8>
 800aabe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aac2:	2b15      	cmp	r3, #21
 800aac4:	d8f6      	bhi.n	800aab4 <_printf_i+0x28>
 800aac6:	a101      	add	r1, pc, #4	@ (adr r1, 800aacc <_printf_i+0x40>)
 800aac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aacc:	0800ab25 	.word	0x0800ab25
 800aad0:	0800ab39 	.word	0x0800ab39
 800aad4:	0800aab5 	.word	0x0800aab5
 800aad8:	0800aab5 	.word	0x0800aab5
 800aadc:	0800aab5 	.word	0x0800aab5
 800aae0:	0800aab5 	.word	0x0800aab5
 800aae4:	0800ab39 	.word	0x0800ab39
 800aae8:	0800aab5 	.word	0x0800aab5
 800aaec:	0800aab5 	.word	0x0800aab5
 800aaf0:	0800aab5 	.word	0x0800aab5
 800aaf4:	0800aab5 	.word	0x0800aab5
 800aaf8:	0800ac39 	.word	0x0800ac39
 800aafc:	0800ab63 	.word	0x0800ab63
 800ab00:	0800abf3 	.word	0x0800abf3
 800ab04:	0800aab5 	.word	0x0800aab5
 800ab08:	0800aab5 	.word	0x0800aab5
 800ab0c:	0800ac5b 	.word	0x0800ac5b
 800ab10:	0800aab5 	.word	0x0800aab5
 800ab14:	0800ab63 	.word	0x0800ab63
 800ab18:	0800aab5 	.word	0x0800aab5
 800ab1c:	0800aab5 	.word	0x0800aab5
 800ab20:	0800abfb 	.word	0x0800abfb
 800ab24:	6833      	ldr	r3, [r6, #0]
 800ab26:	1d1a      	adds	r2, r3, #4
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	6032      	str	r2, [r6, #0]
 800ab2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab34:	2301      	movs	r3, #1
 800ab36:	e09d      	b.n	800ac74 <_printf_i+0x1e8>
 800ab38:	6833      	ldr	r3, [r6, #0]
 800ab3a:	6820      	ldr	r0, [r4, #0]
 800ab3c:	1d19      	adds	r1, r3, #4
 800ab3e:	6031      	str	r1, [r6, #0]
 800ab40:	0606      	lsls	r6, r0, #24
 800ab42:	d501      	bpl.n	800ab48 <_printf_i+0xbc>
 800ab44:	681d      	ldr	r5, [r3, #0]
 800ab46:	e003      	b.n	800ab50 <_printf_i+0xc4>
 800ab48:	0645      	lsls	r5, r0, #25
 800ab4a:	d5fb      	bpl.n	800ab44 <_printf_i+0xb8>
 800ab4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab50:	2d00      	cmp	r5, #0
 800ab52:	da03      	bge.n	800ab5c <_printf_i+0xd0>
 800ab54:	232d      	movs	r3, #45	@ 0x2d
 800ab56:	426d      	negs	r5, r5
 800ab58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab5c:	4859      	ldr	r0, [pc, #356]	@ (800acc4 <_printf_i+0x238>)
 800ab5e:	230a      	movs	r3, #10
 800ab60:	e011      	b.n	800ab86 <_printf_i+0xfa>
 800ab62:	6821      	ldr	r1, [r4, #0]
 800ab64:	6833      	ldr	r3, [r6, #0]
 800ab66:	0608      	lsls	r0, r1, #24
 800ab68:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab6c:	d402      	bmi.n	800ab74 <_printf_i+0xe8>
 800ab6e:	0649      	lsls	r1, r1, #25
 800ab70:	bf48      	it	mi
 800ab72:	b2ad      	uxthmi	r5, r5
 800ab74:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab76:	6033      	str	r3, [r6, #0]
 800ab78:	4852      	ldr	r0, [pc, #328]	@ (800acc4 <_printf_i+0x238>)
 800ab7a:	bf14      	ite	ne
 800ab7c:	230a      	movne	r3, #10
 800ab7e:	2308      	moveq	r3, #8
 800ab80:	2100      	movs	r1, #0
 800ab82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab86:	6866      	ldr	r6, [r4, #4]
 800ab88:	2e00      	cmp	r6, #0
 800ab8a:	60a6      	str	r6, [r4, #8]
 800ab8c:	bfa2      	ittt	ge
 800ab8e:	6821      	ldrge	r1, [r4, #0]
 800ab90:	f021 0104 	bicge.w	r1, r1, #4
 800ab94:	6021      	strge	r1, [r4, #0]
 800ab96:	b90d      	cbnz	r5, 800ab9c <_printf_i+0x110>
 800ab98:	2e00      	cmp	r6, #0
 800ab9a:	d04b      	beq.n	800ac34 <_printf_i+0x1a8>
 800ab9c:	4616      	mov	r6, r2
 800ab9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800aba2:	fb03 5711 	mls	r7, r3, r1, r5
 800aba6:	5dc7      	ldrb	r7, [r0, r7]
 800aba8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abac:	462f      	mov	r7, r5
 800abae:	460d      	mov	r5, r1
 800abb0:	42bb      	cmp	r3, r7
 800abb2:	d9f4      	bls.n	800ab9e <_printf_i+0x112>
 800abb4:	2b08      	cmp	r3, #8
 800abb6:	d10b      	bne.n	800abd0 <_printf_i+0x144>
 800abb8:	6823      	ldr	r3, [r4, #0]
 800abba:	07df      	lsls	r7, r3, #31
 800abbc:	d508      	bpl.n	800abd0 <_printf_i+0x144>
 800abbe:	6923      	ldr	r3, [r4, #16]
 800abc0:	6861      	ldr	r1, [r4, #4]
 800abc2:	4299      	cmp	r1, r3
 800abc4:	bfde      	ittt	le
 800abc6:	2330      	movle	r3, #48	@ 0x30
 800abc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abd0:	1b92      	subs	r2, r2, r6
 800abd2:	6122      	str	r2, [r4, #16]
 800abd4:	464b      	mov	r3, r9
 800abd6:	aa03      	add	r2, sp, #12
 800abd8:	4621      	mov	r1, r4
 800abda:	4640      	mov	r0, r8
 800abdc:	f8cd a000 	str.w	sl, [sp]
 800abe0:	f7ff fee2 	bl	800a9a8 <_printf_common>
 800abe4:	3001      	adds	r0, #1
 800abe6:	d14a      	bne.n	800ac7e <_printf_i+0x1f2>
 800abe8:	f04f 30ff 	mov.w	r0, #4294967295
 800abec:	b004      	add	sp, #16
 800abee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf2:	6823      	ldr	r3, [r4, #0]
 800abf4:	f043 0320 	orr.w	r3, r3, #32
 800abf8:	6023      	str	r3, [r4, #0]
 800abfa:	2778      	movs	r7, #120	@ 0x78
 800abfc:	4832      	ldr	r0, [pc, #200]	@ (800acc8 <_printf_i+0x23c>)
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac04:	061f      	lsls	r7, r3, #24
 800ac06:	6831      	ldr	r1, [r6, #0]
 800ac08:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac0c:	d402      	bmi.n	800ac14 <_printf_i+0x188>
 800ac0e:	065f      	lsls	r7, r3, #25
 800ac10:	bf48      	it	mi
 800ac12:	b2ad      	uxthmi	r5, r5
 800ac14:	6031      	str	r1, [r6, #0]
 800ac16:	07d9      	lsls	r1, r3, #31
 800ac18:	bf44      	itt	mi
 800ac1a:	f043 0320 	orrmi.w	r3, r3, #32
 800ac1e:	6023      	strmi	r3, [r4, #0]
 800ac20:	b11d      	cbz	r5, 800ac2a <_printf_i+0x19e>
 800ac22:	2310      	movs	r3, #16
 800ac24:	e7ac      	b.n	800ab80 <_printf_i+0xf4>
 800ac26:	4827      	ldr	r0, [pc, #156]	@ (800acc4 <_printf_i+0x238>)
 800ac28:	e7e9      	b.n	800abfe <_printf_i+0x172>
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	f023 0320 	bic.w	r3, r3, #32
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	e7f6      	b.n	800ac22 <_printf_i+0x196>
 800ac34:	4616      	mov	r6, r2
 800ac36:	e7bd      	b.n	800abb4 <_printf_i+0x128>
 800ac38:	6833      	ldr	r3, [r6, #0]
 800ac3a:	6825      	ldr	r5, [r4, #0]
 800ac3c:	1d18      	adds	r0, r3, #4
 800ac3e:	6961      	ldr	r1, [r4, #20]
 800ac40:	6030      	str	r0, [r6, #0]
 800ac42:	062e      	lsls	r6, r5, #24
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	d501      	bpl.n	800ac4c <_printf_i+0x1c0>
 800ac48:	6019      	str	r1, [r3, #0]
 800ac4a:	e002      	b.n	800ac52 <_printf_i+0x1c6>
 800ac4c:	0668      	lsls	r0, r5, #25
 800ac4e:	d5fb      	bpl.n	800ac48 <_printf_i+0x1bc>
 800ac50:	8019      	strh	r1, [r3, #0]
 800ac52:	2300      	movs	r3, #0
 800ac54:	4616      	mov	r6, r2
 800ac56:	6123      	str	r3, [r4, #16]
 800ac58:	e7bc      	b.n	800abd4 <_printf_i+0x148>
 800ac5a:	6833      	ldr	r3, [r6, #0]
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	1d1a      	adds	r2, r3, #4
 800ac60:	6032      	str	r2, [r6, #0]
 800ac62:	681e      	ldr	r6, [r3, #0]
 800ac64:	6862      	ldr	r2, [r4, #4]
 800ac66:	4630      	mov	r0, r6
 800ac68:	f000 f85a 	bl	800ad20 <memchr>
 800ac6c:	b108      	cbz	r0, 800ac72 <_printf_i+0x1e6>
 800ac6e:	1b80      	subs	r0, r0, r6
 800ac70:	6060      	str	r0, [r4, #4]
 800ac72:	6863      	ldr	r3, [r4, #4]
 800ac74:	6123      	str	r3, [r4, #16]
 800ac76:	2300      	movs	r3, #0
 800ac78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac7c:	e7aa      	b.n	800abd4 <_printf_i+0x148>
 800ac7e:	6923      	ldr	r3, [r4, #16]
 800ac80:	4632      	mov	r2, r6
 800ac82:	4649      	mov	r1, r9
 800ac84:	4640      	mov	r0, r8
 800ac86:	47d0      	blx	sl
 800ac88:	3001      	adds	r0, #1
 800ac8a:	d0ad      	beq.n	800abe8 <_printf_i+0x15c>
 800ac8c:	6823      	ldr	r3, [r4, #0]
 800ac8e:	079b      	lsls	r3, r3, #30
 800ac90:	d413      	bmi.n	800acba <_printf_i+0x22e>
 800ac92:	68e0      	ldr	r0, [r4, #12]
 800ac94:	9b03      	ldr	r3, [sp, #12]
 800ac96:	4298      	cmp	r0, r3
 800ac98:	bfb8      	it	lt
 800ac9a:	4618      	movlt	r0, r3
 800ac9c:	e7a6      	b.n	800abec <_printf_i+0x160>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	4632      	mov	r2, r6
 800aca2:	4649      	mov	r1, r9
 800aca4:	4640      	mov	r0, r8
 800aca6:	47d0      	blx	sl
 800aca8:	3001      	adds	r0, #1
 800acaa:	d09d      	beq.n	800abe8 <_printf_i+0x15c>
 800acac:	3501      	adds	r5, #1
 800acae:	68e3      	ldr	r3, [r4, #12]
 800acb0:	9903      	ldr	r1, [sp, #12]
 800acb2:	1a5b      	subs	r3, r3, r1
 800acb4:	42ab      	cmp	r3, r5
 800acb6:	dcf2      	bgt.n	800ac9e <_printf_i+0x212>
 800acb8:	e7eb      	b.n	800ac92 <_printf_i+0x206>
 800acba:	2500      	movs	r5, #0
 800acbc:	f104 0619 	add.w	r6, r4, #25
 800acc0:	e7f5      	b.n	800acae <_printf_i+0x222>
 800acc2:	bf00      	nop
 800acc4:	0800af15 	.word	0x0800af15
 800acc8:	0800af26 	.word	0x0800af26

0800accc <memmove>:
 800accc:	4288      	cmp	r0, r1
 800acce:	b510      	push	{r4, lr}
 800acd0:	eb01 0402 	add.w	r4, r1, r2
 800acd4:	d902      	bls.n	800acdc <memmove+0x10>
 800acd6:	4284      	cmp	r4, r0
 800acd8:	4623      	mov	r3, r4
 800acda:	d807      	bhi.n	800acec <memmove+0x20>
 800acdc:	1e43      	subs	r3, r0, #1
 800acde:	42a1      	cmp	r1, r4
 800ace0:	d008      	beq.n	800acf4 <memmove+0x28>
 800ace2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ace6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acea:	e7f8      	b.n	800acde <memmove+0x12>
 800acec:	4402      	add	r2, r0
 800acee:	4601      	mov	r1, r0
 800acf0:	428a      	cmp	r2, r1
 800acf2:	d100      	bne.n	800acf6 <memmove+0x2a>
 800acf4:	bd10      	pop	{r4, pc}
 800acf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acfe:	e7f7      	b.n	800acf0 <memmove+0x24>

0800ad00 <_sbrk_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	2300      	movs	r3, #0
 800ad04:	4d05      	ldr	r5, [pc, #20]	@ (800ad1c <_sbrk_r+0x1c>)
 800ad06:	4604      	mov	r4, r0
 800ad08:	4608      	mov	r0, r1
 800ad0a:	602b      	str	r3, [r5, #0]
 800ad0c:	f7f6 fa00 	bl	8001110 <_sbrk>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	d102      	bne.n	800ad1a <_sbrk_r+0x1a>
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	b103      	cbz	r3, 800ad1a <_sbrk_r+0x1a>
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	20000884 	.word	0x20000884

0800ad20 <memchr>:
 800ad20:	b2c9      	uxtb	r1, r1
 800ad22:	4603      	mov	r3, r0
 800ad24:	4402      	add	r2, r0
 800ad26:	b510      	push	{r4, lr}
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	d101      	bne.n	800ad32 <memchr+0x12>
 800ad2e:	2000      	movs	r0, #0
 800ad30:	e003      	b.n	800ad3a <memchr+0x1a>
 800ad32:	7804      	ldrb	r4, [r0, #0]
 800ad34:	3301      	adds	r3, #1
 800ad36:	428c      	cmp	r4, r1
 800ad38:	d1f6      	bne.n	800ad28 <memchr+0x8>
 800ad3a:	bd10      	pop	{r4, pc}

0800ad3c <memcpy>:
 800ad3c:	440a      	add	r2, r1
 800ad3e:	1e43      	subs	r3, r0, #1
 800ad40:	4291      	cmp	r1, r2
 800ad42:	d100      	bne.n	800ad46 <memcpy+0xa>
 800ad44:	4770      	bx	lr
 800ad46:	b510      	push	{r4, lr}
 800ad48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad4c:	4291      	cmp	r1, r2
 800ad4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad52:	d1f9      	bne.n	800ad48 <memcpy+0xc>
 800ad54:	bd10      	pop	{r4, pc}

0800ad56 <_realloc_r>:
 800ad56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5a:	4680      	mov	r8, r0
 800ad5c:	4615      	mov	r5, r2
 800ad5e:	460c      	mov	r4, r1
 800ad60:	b921      	cbnz	r1, 800ad6c <_realloc_r+0x16>
 800ad62:	4611      	mov	r1, r2
 800ad64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad68:	f7ff bc3a 	b.w	800a5e0 <_malloc_r>
 800ad6c:	b92a      	cbnz	r2, 800ad7a <_realloc_r+0x24>
 800ad6e:	f7ff fbcb 	bl	800a508 <_free_r>
 800ad72:	2400      	movs	r4, #0
 800ad74:	4620      	mov	r0, r4
 800ad76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad7a:	f000 f81a 	bl	800adb2 <_malloc_usable_size_r>
 800ad7e:	4285      	cmp	r5, r0
 800ad80:	4606      	mov	r6, r0
 800ad82:	d802      	bhi.n	800ad8a <_realloc_r+0x34>
 800ad84:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad88:	d8f4      	bhi.n	800ad74 <_realloc_r+0x1e>
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	f7ff fc27 	bl	800a5e0 <_malloc_r>
 800ad92:	4607      	mov	r7, r0
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d0ec      	beq.n	800ad72 <_realloc_r+0x1c>
 800ad98:	42b5      	cmp	r5, r6
 800ad9a:	462a      	mov	r2, r5
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	bf28      	it	cs
 800ada0:	4632      	movcs	r2, r6
 800ada2:	f7ff ffcb 	bl	800ad3c <memcpy>
 800ada6:	4621      	mov	r1, r4
 800ada8:	4640      	mov	r0, r8
 800adaa:	463c      	mov	r4, r7
 800adac:	f7ff fbac 	bl	800a508 <_free_r>
 800adb0:	e7e0      	b.n	800ad74 <_realloc_r+0x1e>

0800adb2 <_malloc_usable_size_r>:
 800adb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adb6:	1f18      	subs	r0, r3, #4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	bfbc      	itt	lt
 800adbc:	580b      	ldrlt	r3, [r1, r0]
 800adbe:	18c0      	addlt	r0, r0, r3
 800adc0:	4770      	bx	lr
	...

0800adc4 <_init>:
 800adc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc6:	bf00      	nop
 800adc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adca:	bc08      	pop	{r3}
 800adcc:	469e      	mov	lr, r3
 800adce:	4770      	bx	lr

0800add0 <_fini>:
 800add0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add2:	bf00      	nop
 800add4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800add6:	bc08      	pop	{r3}
 800add8:	469e      	mov	lr, r3
 800adda:	4770      	bx	lr
