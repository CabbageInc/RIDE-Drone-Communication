
RIDE_Drone_Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b74c  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000187  0800b988  0800b988  0000c988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bb10  0800bb10  0000cb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bb18  0800bb18  0000cb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bb1c  0800bb1c  0000cb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  20000000  0800bb20  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000819  2000006c  0800bb8c  0000d06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000603  20000885  0800bb8c  0000d885  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019ecc  00000000  00000000  0000d0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003343  00000000  00000000  00026f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013c0  00000000  00000000  0002a2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037780  00000000  00000000  0002b678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001a006  00000000  00000000  00062df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015ba41  00000000  00000000  0007cdfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001d883f  2**0
                  CONTENTS, READONLY
 17 .debug_rnglists 00000f14  00000000  00000000  001d8882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000058d0  00000000  00000000  001d9798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  001df068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000006c 	.word	0x2000006c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b96c 	.word	0x0800b96c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000070 	.word	0x20000070
 8000274:	0800b96c 	.word	0x0800b96c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b97e 	b.w	800059c <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	460c      	mov	r4, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14d      	bne.n	8000360 <__udivmoddi4+0xa8>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	460f      	mov	r7, r1
 80002c8:	4684      	mov	ip, r0
 80002ca:	4696      	mov	lr, r2
 80002cc:	fab2 f382 	clz	r3, r2
 80002d0:	d960      	bls.n	8000394 <__udivmoddi4+0xdc>
 80002d2:	b14b      	cbz	r3, 80002e8 <__udivmoddi4+0x30>
 80002d4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002d8:	f1c3 0220 	rsb	r2, r3, #32
 80002dc:	409f      	lsls	r7, r3
 80002de:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e2:	fa20 f202 	lsr.w	r2, r0, r2
 80002e6:	4317      	orrs	r7, r2
 80002e8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002ec:	fa1f f48e 	uxth.w	r4, lr
 80002f0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002f8:	fb06 7711 	mls	r7, r6, r1, r7
 80002fc:	fb01 f004 	mul.w	r0, r1, r4
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x62>
 8000308:	eb1e 0202 	adds.w	r2, lr, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x60>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 812d 	bhi.w	8000572 <__udivmoddi4+0x2ba>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fa1f fc8c 	uxth.w	ip, ip
 8000320:	fbb2 f0f6 	udiv	r0, r2, r6
 8000324:	fb06 2210 	mls	r2, r6, r0, r2
 8000328:	fb00 f404 	mul.w	r4, r0, r4
 800032c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000330:	4564      	cmp	r4, ip
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x8e>
 8000334:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x8c>
 800033e:	4564      	cmp	r4, ip
 8000340:	f200 811a 	bhi.w	8000578 <__udivmoddi4+0x2c0>
 8000344:	4610      	mov	r0, r2
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	ebac 0c04 	sub.w	ip, ip, r4
 800034e:	2100      	movs	r1, #0
 8000350:	b125      	cbz	r5, 800035c <__udivmoddi4+0xa4>
 8000352:	fa2c f303 	lsr.w	r3, ip, r3
 8000356:	2200      	movs	r2, #0
 8000358:	e9c5 3200 	strd	r3, r2, [r5]
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	428b      	cmp	r3, r1
 8000362:	d905      	bls.n	8000370 <__udivmoddi4+0xb8>
 8000364:	b10d      	cbz	r5, 800036a <__udivmoddi4+0xb2>
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	2100      	movs	r1, #0
 800036c:	4608      	mov	r0, r1
 800036e:	e7f5      	b.n	800035c <__udivmoddi4+0xa4>
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14d      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000378:	42a3      	cmp	r3, r4
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2aa>
 800037e:	4290      	cmp	r0, r2
 8000380:	f080 80ef 	bcs.w	8000562 <__udivmoddi4+0x2aa>
 8000384:	4606      	mov	r6, r0
 8000386:	4623      	mov	r3, r4
 8000388:	4608      	mov	r0, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0e6      	beq.n	800035c <__udivmoddi4+0xa4>
 800038e:	e9c5 6300 	strd	r6, r3, [r5]
 8000392:	e7e3      	b.n	800035c <__udivmoddi4+0xa4>
 8000394:	2b00      	cmp	r3, #0
 8000396:	f040 80a2 	bne.w	80004de <__udivmoddi4+0x226>
 800039a:	1a8a      	subs	r2, r1, r2
 800039c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a0:	fa1f f68e 	uxth.w	r6, lr
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003aa:	fb07 2014 	mls	r0, r7, r4, r2
 80003ae:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b6:	fb06 f004 	mul.w	r0, r6, r4
 80003ba:	4290      	cmp	r0, r2
 80003bc:	d90f      	bls.n	80003de <__udivmoddi4+0x126>
 80003be:	eb1e 0202 	adds.w	r2, lr, r2
 80003c2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	4290      	cmp	r0, r2
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80c8 	beq.w	800056c <__udivmoddi4+0x2b4>
 80003dc:	4644      	mov	r4, r8
 80003de:	1a12      	subs	r2, r2, r0
 80003e0:	fa1f fc8c 	uxth.w	ip, ip
 80003e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e8:	fb07 2210 	mls	r2, r7, r0, r2
 80003ec:	fb00 f606 	mul.w	r6, r0, r6
 80003f0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f4:	4566      	cmp	r6, ip
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x152>
 80003f8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x150>
 8000402:	4566      	cmp	r6, ip
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2c6>
 8000408:	4610      	mov	r0, r2
 800040a:	ebac 0c06 	sub.w	ip, ip, r6
 800040e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa04 fe01 	lsl.w	lr, r4, r1
 800041e:	fa22 f706 	lsr.w	r7, r2, r6
 8000422:	fa20 fc06 	lsr.w	ip, r0, r6
 8000426:	40f4      	lsrs	r4, r6
 8000428:	408a      	lsls	r2, r1
 800042a:	431f      	orrs	r7, r3
 800042c:	ea4e 030c 	orr.w	r3, lr, ip
 8000430:	fa00 fe01 	lsl.w	lr, r0, r1
 8000434:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fa1f fc87 	uxth.w	ip, r7
 8000440:	fbb4 f0f8 	udiv	r0, r4, r8
 8000444:	fb08 4410 	mls	r4, r8, r0, r4
 8000448:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044c:	fb00 f90c 	mul.w	r9, r0, ip
 8000450:	45a1      	cmp	r9, r4
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1ba>
 8000454:	193c      	adds	r4, r7, r4
 8000456:	f100 3aff 	add.w	sl, r0, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a1      	cmp	r9, r4
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b8>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 8093 	beq.w	8000596 <__udivmoddi4+0x2de>
 8000470:	4650      	mov	r0, sl
 8000472:	eba4 0409 	sub.w	r4, r4, r9
 8000476:	fa1f f983 	uxth.w	r9, r3
 800047a:	fbb4 f3f8 	udiv	r3, r4, r8
 800047e:	fb08 4413 	mls	r4, r8, r3, r4
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	45a4      	cmp	ip, r4
 800048c:	d906      	bls.n	800049c <__udivmoddi4+0x1e4>
 800048e:	193c      	adds	r4, r7, r4
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295
 8000494:	d201      	bcs.n	800049a <__udivmoddi4+0x1e2>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d87a      	bhi.n	8000590 <__udivmoddi4+0x2d8>
 800049a:	4643      	mov	r3, r8
 800049c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a0:	eba4 040c 	sub.w	r4, r4, ip
 80004a4:	fba0 9802 	umull	r9, r8, r0, r2
 80004a8:	4544      	cmp	r4, r8
 80004aa:	46cc      	mov	ip, r9
 80004ac:	4643      	mov	r3, r8
 80004ae:	d302      	bcc.n	80004b6 <__udivmoddi4+0x1fe>
 80004b0:	d106      	bne.n	80004c0 <__udivmoddi4+0x208>
 80004b2:	45ce      	cmp	lr, r9
 80004b4:	d204      	bcs.n	80004c0 <__udivmoddi4+0x208>
 80004b6:	3801      	subs	r0, #1
 80004b8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004bc:	eb68 0307 	sbc.w	r3, r8, r7
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x222>
 80004c2:	ebbe 020c 	subs.w	r2, lr, ip
 80004c6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ca:	fa04 f606 	lsl.w	r6, r4, r6
 80004ce:	fa22 f301 	lsr.w	r3, r2, r1
 80004d2:	40cc      	lsrs	r4, r1
 80004d4:	431e      	orrs	r6, r3
 80004d6:	e9c5 6400 	strd	r6, r4, [r5]
 80004da:	2100      	movs	r1, #0
 80004dc:	e73e      	b.n	800035c <__udivmoddi4+0xa4>
 80004de:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e2:	f1c3 0120 	rsb	r1, r3, #32
 80004e6:	fa04 f203 	lsl.w	r2, r4, r3
 80004ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ee:	40cc      	lsrs	r4, r1
 80004f0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f4:	fa20 f101 	lsr.w	r1, r0, r1
 80004f8:	fa1f f68e 	uxth.w	r6, lr
 80004fc:	fbb4 f0f7 	udiv	r0, r4, r7
 8000500:	430a      	orrs	r2, r1
 8000502:	fb07 4410 	mls	r4, r7, r0, r4
 8000506:	0c11      	lsrs	r1, r2, #16
 8000508:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800050c:	fb00 f406 	mul.w	r4, r0, r6
 8000510:	428c      	cmp	r4, r1
 8000512:	d90e      	bls.n	8000532 <__udivmoddi4+0x27a>
 8000514:	eb1e 0101 	adds.w	r1, lr, r1
 8000518:	f100 38ff 	add.w	r8, r0, #4294967295
 800051c:	bf2c      	ite	cs
 800051e:	f04f 0901 	movcs.w	r9, #1
 8000522:	f04f 0900 	movcc.w	r9, #0
 8000526:	428c      	cmp	r4, r1
 8000528:	d902      	bls.n	8000530 <__udivmoddi4+0x278>
 800052a:	f1b9 0f00 	cmp.w	r9, #0
 800052e:	d02c      	beq.n	800058a <__udivmoddi4+0x2d2>
 8000530:	4640      	mov	r0, r8
 8000532:	1b09      	subs	r1, r1, r4
 8000534:	b292      	uxth	r2, r2
 8000536:	fbb1 f4f7 	udiv	r4, r1, r7
 800053a:	fb07 1114 	mls	r1, r7, r4, r1
 800053e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000542:	fb04 f106 	mul.w	r1, r4, r6
 8000546:	4291      	cmp	r1, r2
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x2a2>
 800054a:	eb1e 0202 	adds.w	r2, lr, r2
 800054e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000552:	d201      	bcs.n	8000558 <__udivmoddi4+0x2a0>
 8000554:	4291      	cmp	r1, r2
 8000556:	d815      	bhi.n	8000584 <__udivmoddi4+0x2cc>
 8000558:	4644      	mov	r4, r8
 800055a:	1a52      	subs	r2, r2, r1
 800055c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000560:	e721      	b.n	80003a6 <__udivmoddi4+0xee>
 8000562:	1a86      	subs	r6, r0, r2
 8000564:	eb64 0303 	sbc.w	r3, r4, r3
 8000568:	2001      	movs	r0, #1
 800056a:	e70e      	b.n	800038a <__udivmoddi4+0xd2>
 800056c:	3c02      	subs	r4, #2
 800056e:	4472      	add	r2, lr
 8000570:	e735      	b.n	80003de <__udivmoddi4+0x126>
 8000572:	3902      	subs	r1, #2
 8000574:	4472      	add	r2, lr
 8000576:	e6d0      	b.n	800031a <__udivmoddi4+0x62>
 8000578:	44f4      	add	ip, lr
 800057a:	3802      	subs	r0, #2
 800057c:	e6e3      	b.n	8000346 <__udivmoddi4+0x8e>
 800057e:	44f4      	add	ip, lr
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x152>
 8000584:	3c02      	subs	r4, #2
 8000586:	4472      	add	r2, lr
 8000588:	e7e7      	b.n	800055a <__udivmoddi4+0x2a2>
 800058a:	3802      	subs	r0, #2
 800058c:	4471      	add	r1, lr
 800058e:	e7d0      	b.n	8000532 <__udivmoddi4+0x27a>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e782      	b.n	800049c <__udivmoddi4+0x1e4>
 8000596:	3802      	subs	r0, #2
 8000598:	443c      	add	r4, r7
 800059a:	e76a      	b.n	8000472 <__udivmoddi4+0x1ba>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <transmit>:
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
#include "TxHandler.h"

bool transmit(UART_HandleTypeDef *huart, uint8_t data[], size_t size, DataType dataType, uint64_t destAddr){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0c2      	sub	sp, #264	@ 0x108
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80005ac:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 80005b0:	6001      	str	r1, [r0, #0]
 80005b2:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80005b6:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 80005ba:	600a      	str	r2, [r1, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005c2:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80005c6:	701a      	strb	r2, [r3, #0]
    // prepare for rand num generation
    //srand(time(NULL));
    
    // local variables
    uint32_t fragmentNumber = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    uint8_t messageId = 0x01; //rand() % 256;
 80005ce:	2301      	movs	r3, #1
 80005d0:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

    if(size > 200){
 80005d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2bc8      	cmp	r3, #200	@ 0xc8
 80005e0:	d860      	bhi.n	80006a4 <transmit+0x104>
        // framgent the data array
    }else{
        // transmit the data array in its entirety
        TXPacket packet = defaultTxPacket();
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f866 	bl	80006b8 <defaultTxPacket>

        // fill remaining fields: length, frameId, destination address, fragment number, data type, payload data, checksum
        // length
        packet.length = DEFAULT_TX_LENGTH;
 80005ec:	4b30      	ldr	r3, [pc, #192]	@ (80006b0 <transmit+0x110>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	827b      	strh	r3, [r7, #18]
        // frameId
        packet.frameId = messageId;
 80005f2:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80005f6:	757b      	strb	r3, [r7, #21]
        // destination address
        packet.destinationAddress = destAddr;
 80005f8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80005fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
        // fragment number
        packet.fragmentNumber = fragmentNumber;
 8000600:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
        // data type
        packet.dataType = dataType;
 8000606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800060a:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        // data size
        packet.dataSize = size;
 8000614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000618:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
        // payload data
        for(size_t i = 0; i<size; i++){
 8000624:	2300      	movs	r3, #0
 8000626:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800062a:	e014      	b.n	8000656 <transmit+0xb6>
            packet.payloadData[i] = data[i];
 800062c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000630:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800063a:	4413      	add	r3, r2
 800063c:	7819      	ldrb	r1, [r3, #0]
 800063e:	f107 022a 	add.w	r2, r7, #42	@ 0x2a
 8000642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000646:	4413      	add	r3, r2
 8000648:	460a      	mov	r2, r1
 800064a:	701a      	strb	r2, [r3, #0]
        for(size_t i = 0; i<size; i++){
 800064c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000650:	3301      	adds	r3, #1
 8000652:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800065a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800065e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	429a      	cmp	r2, r3
 8000666:	d3e1      	bcc.n	800062c <transmit+0x8c>
        }
        // checksum
        packet.checksum = calcChecksum(&packet);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f895 	bl	800079c <calcChecksum>
 8000672:	4603      	mov	r3, r0
 8000674:	f887 30f2 	strb.w	r3, [r7, #242]	@ 0xf2

        // create TX buffer
        uint8_t *txBuffer = packetToArray(&packet);
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4618      	mov	r0, r3
 800067e:	f000 f9cb 	bl	8000a18 <packetToArray>
 8000682:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
            printf("%02X ", txBuffer[i]);
        }
        printf("\n");*/

        // HAL_Transmit...
        HAL_UART_Transmit_IT(huart, txBuffer, DEFAULT_TX_BUFFER_SIZE);
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <transmit+0x114>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	b29b      	uxth	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f007 fc1e 	bl	8007ed4 <HAL_UART_Transmit_IT>

        // clean up dynamic memory for TX Buffer
        free(txBuffer);
 8000698:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800069c:	f00a fcac 	bl	800aff8 <free>

        // indicate good transmission
        return true;
 80006a0:	2301      	movs	r3, #1
 80006a2:	e000      	b.n	80006a6 <transmit+0x106>
    }

    return false;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	0800b9b0 	.word	0x0800b9b0
 80006b4:	0800b9b4 	.word	0x0800b9b4

080006b8 <defaultTxPacket>:

TXPacket defaultTxPacket(){
 80006b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006bc:	b0c3      	sub	sp, #268	@ 0x10c
 80006be:	af00      	add	r7, sp, #0
 80006c0:	61f8      	str	r0, [r7, #28]
    return (TXPacket){
 80006c2:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <defaultTxPacket+0xb4>)
 80006c4:	f893 8000 	ldrb.w	r8, [r3]
 80006c8:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <defaultTxPacket+0xb8>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <defaultTxPacket+0xbc>)
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	617a      	str	r2, [r7, #20]
 80006d4:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <defaultTxPacket+0xc0>)
 80006d6:	7819      	ldrb	r1, [r3, #0]
 80006d8:	6139      	str	r1, [r7, #16]
 80006da:	4b28      	ldr	r3, [pc, #160]	@ (800077c <defaultTxPacket+0xc4>)
 80006dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80006e0:	4b27      	ldr	r3, [pc, #156]	@ (8000780 <defaultTxPacket+0xc8>)
 80006e2:	8818      	ldrh	r0, [r3, #0]
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <defaultTxPacket+0xcc>)
 80006e8:	781e      	ldrb	r6, [r3, #0]
 80006ea:	60be      	str	r6, [r7, #8]
 80006ec:	4b26      	ldr	r3, [pc, #152]	@ (8000788 <defaultTxPacket+0xd0>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b26      	ldr	r3, [pc, #152]	@ (800078c <defaultTxPacket+0xd4>)
 80006f4:	681e      	ldr	r6, [r3, #0]
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <defaultTxPacket+0xd8>)
 80006f8:	f893 b000 	ldrb.w	fp, [r3]
 80006fc:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <defaultTxPacket+0xdc>)
 80006fe:	f893 a000 	ldrb.w	sl, [r3]
 8000702:	4b25      	ldr	r3, [pc, #148]	@ (8000798 <defaultTxPacket+0xe0>)
 8000704:	f893 9000 	ldrb.w	r9, [r3]
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	4618      	mov	r0, r3
 800070c:	23e8      	movs	r3, #232	@ 0xe8
 800070e:	461a      	mov	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f00a fd47 	bl	800b1a4 <memset>
 8000716:	69fa      	ldr	r2, [r7, #28]
 8000718:	4643      	mov	r3, r8
 800071a:	7013      	strb	r3, [r2, #0]
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	8b3a      	ldrh	r2, [r7, #24]
 8000720:	805a      	strh	r2, [r3, #2]
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	7d3a      	ldrb	r2, [r7, #20]
 8000726:	711a      	strb	r2, [r3, #4]
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	7c3a      	ldrb	r2, [r7, #16]
 800072c:	715a      	strb	r2, [r3, #5]
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	89ba      	ldrh	r2, [r7, #12]
 8000738:	821a      	strh	r2, [r3, #16]
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	7a3a      	ldrb	r2, [r7, #8]
 800073e:	749a      	strb	r2, [r3, #18]
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	793a      	ldrb	r2, [r7, #4]
 8000744:	74da      	strb	r2, [r3, #19]
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	615e      	str	r6, [r3, #20]
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	465a      	mov	r2, fp
 800074e:	761a      	strb	r2, [r3, #24]
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	4652      	mov	r2, sl
 8000754:	765a      	strb	r2, [r3, #25]
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	464a      	mov	r2, r9
 800075a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        .dataType = DEFAULT_DATA_TYPE,
		.dataSize = DEFAULT_DATA_SIZE,
        .payloadData = {0x00},
        .checksum = DEFAULT_CHECKSUM
    };
}
 800075e:	69f8      	ldr	r0, [r7, #28]
 8000760:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8000764:	46bd      	mov	sp, r7
 8000766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800076a:	bf00      	nop
 800076c:	0800b9af 	.word	0x0800b9af
 8000770:	0800b9b0 	.word	0x0800b9b0
 8000774:	0800b9b8 	.word	0x0800b9b8
 8000778:	0800b9b9 	.word	0x0800b9b9
 800077c:	0800b9c8 	.word	0x0800b9c8
 8000780:	0800b9d0 	.word	0x0800b9d0
 8000784:	0800b9d2 	.word	0x0800b9d2
 8000788:	0800b9d3 	.word	0x0800b9d3
 800078c:	0800b9d4 	.word	0x0800b9d4
 8000790:	0800b9d8 	.word	0x0800b9d8
 8000794:	0800b9d9 	.word	0x0800b9d9
 8000798:	0800b9da 	.word	0x0800b9da

0800079c <calcChecksum>:

uint8_t calcChecksum(TXPacket *packet){
 800079c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80007a0:	b0a2      	sub	sp, #136	@ 0x88
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	67f8      	str	r0, [r7, #124]	@ 0x7c
    // add all the bytes between length and checksum
    uint64_t sum = 0;
 80007a6:	f04f 0200 	mov.w	r2, #0
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    sum += packet->frameType;
 80007b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007b4:	791b      	ldrb	r3, [r3, #4]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2200      	movs	r2, #0
 80007ba:	461c      	mov	r4, r3
 80007bc:	4615      	mov	r5, r2
 80007be:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80007c2:	eb12 0804 	adds.w	r8, r2, r4
 80007c6:	eb43 0905 	adc.w	r9, r3, r5
 80007ca:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
    sum += packet->frameId;
 80007ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007d0:	795b      	ldrb	r3, [r3, #5]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2200      	movs	r2, #0
 80007d6:	469a      	mov	sl, r3
 80007d8:	4693      	mov	fp, r2
 80007da:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80007de:	eb12 010a 	adds.w	r1, r2, sl
 80007e2:	6439      	str	r1, [r7, #64]	@ 0x40
 80007e4:	eb43 030b 	adc.w	r3, r3, fp
 80007e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80007ea:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80007ee:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
    sum += sumAllBytes(packet->destinationAddress, sizeof(packet->destinationAddress));
 80007f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007f4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80007f8:	2208      	movs	r2, #8
 80007fa:	f000 f8a0 	bl	800093e <sumAllBytes>
 80007fe:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8000802:	1814      	adds	r4, r2, r0
 8000804:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000806:	414b      	adcs	r3, r1
 8000808:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800080a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800080e:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
    sum += sumAllBytes(packet->reserved, sizeof(packet->reserved));
 8000812:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000814:	8a1b      	ldrh	r3, [r3, #16]
 8000816:	b29b      	uxth	r3, r3
 8000818:	2200      	movs	r2, #0
 800081a:	673b      	str	r3, [r7, #112]	@ 0x70
 800081c:	677a      	str	r2, [r7, #116]	@ 0x74
 800081e:	2202      	movs	r2, #2
 8000820:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000824:	f000 f88b 	bl	800093e <sumAllBytes>
 8000828:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800082c:	1814      	adds	r4, r2, r0
 800082e:	633c      	str	r4, [r7, #48]	@ 0x30
 8000830:	414b      	adcs	r3, r1
 8000832:	637b      	str	r3, [r7, #52]	@ 0x34
 8000834:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000838:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
    sum += packet->broadcastRadius;
 800083c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800083e:	7c9b      	ldrb	r3, [r3, #18]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2200      	movs	r2, #0
 8000844:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000846:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000848:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800084c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000850:	4621      	mov	r1, r4
 8000852:	1851      	adds	r1, r2, r1
 8000854:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000856:	4629      	mov	r1, r5
 8000858:	eb43 0101 	adc.w	r1, r3, r1
 800085c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800085e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000862:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
    sum += packet->transmitOptions;
 8000866:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000868:	7cdb      	ldrb	r3, [r3, #19]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2200      	movs	r2, #0
 800086e:	663b      	str	r3, [r7, #96]	@ 0x60
 8000870:	667a      	str	r2, [r7, #100]	@ 0x64
 8000872:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8000876:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800087a:	4621      	mov	r1, r4
 800087c:	1851      	adds	r1, r2, r1
 800087e:	6239      	str	r1, [r7, #32]
 8000880:	4629      	mov	r1, r5
 8000882:	eb43 0101 	adc.w	r1, r3, r1
 8000886:	6279      	str	r1, [r7, #36]	@ 0x24
 8000888:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800088c:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
    sum += sumAllBytes(packet->fragmentNumber, sizeof(packet->fragmentNumber));
 8000890:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	2200      	movs	r2, #0
 8000896:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000898:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800089a:	2204      	movs	r2, #4
 800089c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80008a0:	f000 f84d 	bl	800093e <sumAllBytes>
 80008a4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80008a8:	1814      	adds	r4, r2, r0
 80008aa:	61bc      	str	r4, [r7, #24]
 80008ac:	414b      	adcs	r3, r1
 80008ae:	61fb      	str	r3, [r7, #28]
 80008b0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80008b4:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
    sum += packet->dataType;
 80008b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80008ba:	7e1b      	ldrb	r3, [r3, #24]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2200      	movs	r2, #0
 80008c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80008c2:	657a      	str	r2, [r7, #84]	@ 0x54
 80008c4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80008c8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80008cc:	4621      	mov	r1, r4
 80008ce:	1851      	adds	r1, r2, r1
 80008d0:	6139      	str	r1, [r7, #16]
 80008d2:	4629      	mov	r1, r5
 80008d4:	eb43 0101 	adc.w	r1, r3, r1
 80008d8:	6179      	str	r1, [r7, #20]
 80008da:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80008de:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
    sum += packet->dataSize;
 80008e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80008e4:	7e5b      	ldrb	r3, [r3, #25]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2200      	movs	r2, #0
 80008ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80008ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80008ee:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80008f2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80008f6:	4621      	mov	r1, r4
 80008f8:	1851      	adds	r1, r2, r1
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	4629      	mov	r1, r5
 80008fe:	eb43 0101 	adc.w	r1, r3, r1
 8000902:	60f9      	str	r1, [r7, #12]
 8000904:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000908:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
    sum += sumAllBytesArray(packet->payloadData, MAX_DATA_SIZE);
 800090c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800090e:	331a      	adds	r3, #26
 8000910:	21c8      	movs	r1, #200	@ 0xc8
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f851 	bl	80009ba <sumAllBytesArray>
 8000918:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800091c:	1814      	adds	r4, r2, r0
 800091e:	603c      	str	r4, [r7, #0]
 8000920:	414b      	adcs	r3, r1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000928:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80

    // return the last 8 bits (1 byte) subtracted from 0xFF
    return 0xFF - (sum & 0xFF);
 800092c:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8000930:	43db      	mvns	r3, r3
 8000932:	b2db      	uxtb	r3, r3
}
 8000934:	4618      	mov	r0, r3
 8000936:	3788      	adds	r7, #136	@ 0x88
 8000938:	46bd      	mov	sp, r7
 800093a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800093e <sumAllBytes>:

uint64_t sumAllBytes(uint64_t num, size_t byteCount){
 800093e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
    uint64_t sum = 0x00;
 800094c:	f04f 0200 	mov.w	r2, #0
 8000950:	f04f 0300 	mov.w	r3, #0
 8000954:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for(size_t i=0; i<byteCount; i++){
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	e020      	b.n	80009a0 <sumAllBytes+0x62>
        sum += (num >> i*8) & 0xFF;
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	00d9      	lsls	r1, r3, #3
 8000962:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000966:	f1c1 0620 	rsb	r6, r1, #32
 800096a:	f1a1 0020 	sub.w	r0, r1, #32
 800096e:	fa22 f401 	lsr.w	r4, r2, r1
 8000972:	fa03 f606 	lsl.w	r6, r3, r6
 8000976:	4334      	orrs	r4, r6
 8000978:	fa23 f000 	lsr.w	r0, r3, r0
 800097c:	4304      	orrs	r4, r0
 800097e:	fa23 f501 	lsr.w	r5, r3, r1
 8000982:	f004 08ff 	and.w	r8, r4, #255	@ 0xff
 8000986:	f04f 0900 	mov.w	r9, #0
 800098a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800098e:	eb12 0a08 	adds.w	sl, r2, r8
 8000992:	eb43 0b09 	adc.w	fp, r3, r9
 8000996:	e9c7 ab06 	strd	sl, fp, [r7, #24]
    for(size_t i=0; i<byteCount; i++){
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	3301      	adds	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d3da      	bcc.n	800095e <sumAllBytes+0x20>
    }
    return sum;
 80009a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80009ac:	4610      	mov	r0, r2
 80009ae:	4619      	mov	r1, r3
 80009b0:	3720      	adds	r7, #32
 80009b2:	46bd      	mov	sp, r7
 80009b4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80009b8:	4770      	bx	lr

080009ba <sumAllBytesArray>:

uint64_t sumAllBytesArray(uint8_t arr[], size_t byteCount){
 80009ba:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
    uint64_t sum = 0x00;
 80009c6:	f04f 0200 	mov.w	r2, #0
 80009ca:	f04f 0300 	mov.w	r3, #0
 80009ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for(size_t i=0; i<byteCount; i++){
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	e012      	b.n	80009fe <sumAllBytesArray+0x44>
        sum += arr[i];
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4413      	add	r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2200      	movs	r2, #0
 80009e4:	461c      	mov	r4, r3
 80009e6:	4615      	mov	r5, r2
 80009e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80009ec:	eb12 0804 	adds.w	r8, r2, r4
 80009f0:	eb43 0905 	adc.w	r9, r3, r5
 80009f4:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for(size_t i=0; i<byteCount; i++){
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3301      	adds	r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d3e8      	bcc.n	80009d8 <sumAllBytesArray+0x1e>
    }
    return sum;
 8000a06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	371c      	adds	r7, #28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000a16:	4770      	bx	lr

08000a18 <packetToArray>:

uint8_t* packetToArray(TXPacket *packet){
 8000a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1a:	b08b      	sub	sp, #44	@ 0x2c
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    uint8_t *output = (uint8_t*)malloc((packet->length + 4) * sizeof(uint8_t));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	885b      	ldrh	r3, [r3, #2]
 8000a24:	3304      	adds	r3, #4
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00a fade 	bl	800afe8 <malloc>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	613b      	str	r3, [r7, #16]
    if (output == NULL) {
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <packetToArray+0x22>
        // Handle memory allocation failure
        return NULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e0e8      	b.n	8000c0c <packetToArray+0x1f4>
    }

    size_t shift = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
    int offset = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
    
    // start delimiter
    output[offset] = packet->startDelimiter;
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4413      	add	r3, r2
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	7812      	ldrb	r2, [r2, #0]
 8000a4c:	701a      	strb	r2, [r3, #0]
    // length
    shift = sizeof(packet->length);
 8000a4e:	2302      	movs	r3, #2
 8000a50:	60fb      	str	r3, [r7, #12]
    offset += 1;
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
    for(size_t i=shift; i>0; i--){output[shift-i+offset] = packet->length>>(i-1)*8 & 0xFF;}
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a5c:	e013      	b.n	8000a86 <packetToArray+0x6e>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	885b      	ldrh	r3, [r3, #2]
 8000a62:	461a      	mov	r2, r3
 8000a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a66:	3b01      	subs	r3, #1
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	fa42 f103 	asr.w	r1, r2, r3
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a72:	1ad2      	subs	r2, r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4413      	add	r3, r2
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b2ca      	uxtb	r2, r1
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a82:	3b01      	subs	r3, #1
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1e8      	bne.n	8000a5e <packetToArray+0x46>
    // frame type
    offset += 2;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	3302      	adds	r3, #2
 8000a90:	60bb      	str	r3, [r7, #8]
    output[offset] = packet->frameType;
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4413      	add	r3, r2
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	7912      	ldrb	r2, [r2, #4]
 8000a9c:	701a      	strb	r2, [r3, #0]
    // frame ID
    offset += 1;
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
    output[offset] = packet->frameId;
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	7952      	ldrb	r2, [r2, #5]
 8000aae:	701a      	strb	r2, [r3, #0]
    // Destination address
    shift = sizeof(packet->destinationAddress);
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	60fb      	str	r3, [r7, #12]
    offset += 1;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
    for(size_t i=shift; i>0; i--){output[shift-i+offset] = packet->destinationAddress>>(i-1)*8 & 0xFF;}
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	623b      	str	r3, [r7, #32]
 8000abe:	e01f      	b.n	8000b00 <packetToArray+0xe8>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ac6:	6a39      	ldr	r1, [r7, #32]
 8000ac8:	3901      	subs	r1, #1
 8000aca:	00c9      	lsls	r1, r1, #3
 8000acc:	f1c1 0620 	rsb	r6, r1, #32
 8000ad0:	f1a1 0020 	sub.w	r0, r1, #32
 8000ad4:	fa22 f401 	lsr.w	r4, r2, r1
 8000ad8:	fa03 f606 	lsl.w	r6, r3, r6
 8000adc:	4334      	orrs	r4, r6
 8000ade:	fa23 f000 	lsr.w	r0, r3, r0
 8000ae2:	4304      	orrs	r4, r0
 8000ae4:	fa23 f501 	lsr.w	r5, r3, r1
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	6a3b      	ldr	r3, [r7, #32]
 8000aec:	1ad2      	subs	r2, r2, r3
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	4413      	add	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4413      	add	r3, r2
 8000af6:	b2e2      	uxtb	r2, r4
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d1dc      	bne.n	8000ac0 <packetToArray+0xa8>
    // reserved
    shift = sizeof(packet->reserved);
 8000b06:	2302      	movs	r3, #2
 8000b08:	60fb      	str	r3, [r7, #12]
    offset += 8;
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	3308      	adds	r3, #8
 8000b0e:	60bb      	str	r3, [r7, #8]
    for(size_t i=shift; i>0; i--){output[shift-i+offset] = packet->reserved>>(i-1)*8 & 0xFF;}
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	e013      	b.n	8000b3e <packetToArray+0x126>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	8a1b      	ldrh	r3, [r3, #16]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	fa42 f103 	asr.w	r1, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	1ad2      	subs	r2, r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4413      	add	r3, r2
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4413      	add	r3, r2
 8000b34:	b2ca      	uxtb	r2, r1
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1e8      	bne.n	8000b16 <packetToArray+0xfe>
    // broadcast radius
    offset += 2;
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	3302      	adds	r3, #2
 8000b48:	60bb      	str	r3, [r7, #8]
    output[offset] = packet->broadcastRadius;
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4413      	add	r3, r2
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	7c92      	ldrb	r2, [r2, #18]
 8000b54:	701a      	strb	r2, [r3, #0]
    // Transmit options
    offset += 1;
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
    output[offset] = packet->transmitOptions;
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4413      	add	r3, r2
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	7cd2      	ldrb	r2, [r2, #19]
 8000b66:	701a      	strb	r2, [r3, #0]
    // fragment number
    shift = sizeof(packet->fragmentNumber);
 8000b68:	2304      	movs	r3, #4
 8000b6a:	60fb      	str	r3, [r7, #12]
    offset += 1;
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
    for(size_t i=shift; i>0; i--){output[shift-i+offset] = packet->fragmentNumber>>(i-1)*8 & 0xFF;}
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	61bb      	str	r3, [r7, #24]
 8000b76:	e012      	b.n	8000b9e <packetToArray+0x186>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	fa22 f103 	lsr.w	r1, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	1ad2      	subs	r2, r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4413      	add	r3, r2
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4413      	add	r3, r2
 8000b94:	b2ca      	uxtb	r2, r1
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1e9      	bne.n	8000b78 <packetToArray+0x160>
    // data type
    offset += 4;
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	60bb      	str	r3, [r7, #8]
    output[offset] = packet->dataType;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4413      	add	r3, r2
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	7e12      	ldrb	r2, [r2, #24]
 8000bb4:	701a      	strb	r2, [r3, #0]
    // payload data size
    offset += 1;
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
    output[offset] = packet->dataSize;
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	7e52      	ldrb	r2, [r2, #25]
 8000bc6:	701a      	strb	r2, [r3, #0]
    // payload data
    offset += 1;
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	60bb      	str	r3, [r7, #8]
    for(size_t i=0; i<MAX_DATA_SIZE; i++){output[i+offset] = packet->payloadData[i];}
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	e00d      	b.n	8000bf0 <packetToArray+0x1d8>
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	4413      	add	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4413      	add	r3, r2
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	440a      	add	r2, r1
 8000be4:	321a      	adds	r2, #26
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	2bc7      	cmp	r3, #199	@ 0xc7
 8000bf4:	d9ee      	bls.n	8000bd4 <packetToArray+0x1bc>
    // checksum
    offset += MAX_DATA_SIZE;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	33c8      	adds	r3, #200	@ 0xc8
 8000bfa:	60bb      	str	r3, [r7, #8]
    output[offset] = packet->checksum;
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4413      	add	r3, r2
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	f892 20e2 	ldrb.w	r2, [r2, #226]	@ 0xe2
 8000c08:	701a      	strb	r2, [r3, #0]

    return output;
 8000c0a:	693b      	ldr	r3, [r7, #16]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	372c      	adds	r7, #44	@ 0x2c
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c14 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000c1e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000c22:	4909      	ldr	r1, [pc, #36]	@ (8000c48 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000c2e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4013      	ands	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c38:	68fb      	ldr	r3, [r7, #12]
}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	46020c00 	.word	0x46020c00

08000c4c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <LL_APB1_GRP2_EnableClock+0x34>)
 8000c56:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8000c5a:	4909      	ldr	r1, [pc, #36]	@ (8000c80 <LL_APB1_GRP2_EnableClock+0x34>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <LL_APB1_GRP2_EnableClock+0x34>)
 8000c66:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c70:	68fb      	ldr	r3, [r7, #12]
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	46020c00 	.word	0x46020c00

08000c84 <HAL_UART_RxCpltCallback>:
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* Callback for when data is received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c88:	b089      	sub	sp, #36	@ 0x24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a45      	ldr	r2, [pc, #276]	@ (8000da8 <HAL_UART_RxCpltCallback+0x124>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	f040 8082 	bne.w	8000d9e <HAL_UART_RxCpltCallback+0x11a>
 8000c9a:	466b      	mov	r3, sp
 8000c9c:	461e      	mov	r6, r3
        // Store received byte in buffer for later use
        for(int i = 0; i<sizeof(newRxData); i++){
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	e00b      	b.n	8000cbc <HAL_UART_RxCpltCallback+0x38>
        	rxData[i] = newRxData[i];
 8000ca4:	4a41      	ldr	r2, [pc, #260]	@ (8000dac <HAL_UART_RxCpltCallback+0x128>)
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	4413      	add	r3, r2
 8000caa:	7819      	ldrb	r1, [r3, #0]
 8000cac:	4a40      	ldr	r2, [pc, #256]	@ (8000db0 <HAL_UART_RxCpltCallback+0x12c>)
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	460a      	mov	r2, r1
 8000cb4:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i<sizeof(newRxData); i++){
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	61fb      	str	r3, [r7, #28]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	2b0a      	cmp	r3, #10
 8000cc0:	d9f0      	bls.n	8000ca4 <HAL_UART_RxCpltCallback+0x20>
        }

        const char *output = "Received Acknowledgment: ";
 8000cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8000db4 <HAL_UART_RxCpltCallback+0x130>)
 8000cc4:	617b      	str	r3, [r7, #20]
        HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), 1000);
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff fad6 	bl	8000278 <strlen>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd4:	6979      	ldr	r1, [r7, #20]
 8000cd6:	4838      	ldr	r0, [pc, #224]	@ (8000db8 <HAL_UART_RxCpltCallback+0x134>)
 8000cd8:	f007 f85e 	bl	8007d98 <HAL_UART_Transmit>

        size_t msgLength = sizeof(rxData) / sizeof(rxData[0]);
 8000cdc:	230b      	movs	r3, #11
 8000cde:	613b      	str	r3, [r7, #16]
        char msg[msgLength * 2 + 1];
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	1c59      	adds	r1, r3, #1
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	2300      	movs	r3, #0
 8000cee:	4688      	mov	r8, r1
 8000cf0:	4699      	mov	r9, r3
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	f04f 0300 	mov.w	r3, #0
 8000cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d06:	2300      	movs	r3, #0
 8000d08:	460c      	mov	r4, r1
 8000d0a:	461d      	mov	r5, r3
 8000d0c:	f04f 0200 	mov.w	r2, #0
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	00eb      	lsls	r3, r5, #3
 8000d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d1a:	00e2      	lsls	r2, r4, #3
 8000d1c:	1dcb      	adds	r3, r1, #7
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	ebad 0d03 	sub.w	sp, sp, r3
 8000d26:	466b      	mov	r3, sp
 8000d28:	3300      	adds	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]

        for(size_t i = 0; i<msgLength; i++){
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	e00e      	b.n	8000d50 <HAL_UART_RxCpltCallback+0xcc>
        	sprintf(msg + (i*2), "%02X", rxData[i]);
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	18d0      	adds	r0, r2, r3
 8000d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8000db0 <HAL_UART_RxCpltCallback+0x12c>)
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	4413      	add	r3, r2
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	491d      	ldr	r1, [pc, #116]	@ (8000dbc <HAL_UART_RxCpltCallback+0x138>)
 8000d46:	f00a fa0d 	bl	800b164 <siprintf>
        for(size_t i = 0; i<msgLength; i++){
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d3ec      	bcc.n	8000d32 <HAL_UART_RxCpltCallback+0xae>
        }
        msg[msgLength*2] = '\0';
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	2100      	movs	r1, #0
 8000d60:	54d1      	strb	r1, [r2, r3]

        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8000d62:	68b8      	ldr	r0, [r7, #8]
 8000d64:	f7ff fa88 	bl	8000278 <strlen>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	4811      	ldr	r0, [pc, #68]	@ (8000db8 <HAL_UART_RxCpltCallback+0x134>)
 8000d74:	f007 f810 	bl	8007d98 <HAL_UART_Transmit>

        output = "\r\n";
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <HAL_UART_RxCpltCallback+0x13c>)
 8000d7a:	617b      	str	r3, [r7, #20]
        HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), 1000);
 8000d7c:	6978      	ldr	r0, [r7, #20]
 8000d7e:	f7ff fa7b 	bl	8000278 <strlen>
 8000d82:	4603      	mov	r3, r0
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8a:	6979      	ldr	r1, [r7, #20]
 8000d8c:	480a      	ldr	r0, [pc, #40]	@ (8000db8 <HAL_UART_RxCpltCallback+0x134>)
 8000d8e:	f007 f803 	bl	8007d98 <HAL_UART_Transmit>

        HAL_UART_Receive_IT(&huart2, newRxData, 11);
 8000d92:	220b      	movs	r2, #11
 8000d94:	4905      	ldr	r1, [pc, #20]	@ (8000dac <HAL_UART_RxCpltCallback+0x128>)
 8000d96:	480b      	ldr	r0, [pc, #44]	@ (8000dc4 <HAL_UART_RxCpltCallback+0x140>)
 8000d98:	f007 f940 	bl	800801c <HAL_UART_Receive_IT>
 8000d9c:	46b5      	mov	sp, r6
    }
}
 8000d9e:	bf00      	nop
 8000da0:	3724      	adds	r7, #36	@ 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000da8:	40004400 	.word	0x40004400
 8000dac:	2000072c 	.word	0x2000072c
 8000db0:	20000720 	.word	0x20000720
 8000db4:	0800b988 	.word	0x0800b988
 8000db8:	20000114 	.word	0x20000114
 8000dbc:	0800b9a4 	.word	0x0800b9a4
 8000dc0:	0800b9ac 	.word	0x0800b9ac
 8000dc4:	200001a8 	.word	0x200001a8

08000dc8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a09      	ldr	r2, [pc, #36]	@ (8000dfc <HAL_UART_TxCpltCallback+0x34>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d102      	bne.n	8000de0 <HAL_UART_TxCpltCallback+0x18>
		transmitFinished = true;
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <HAL_UART_TxCpltCallback+0x38>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
	}
	if(huart->Instance == USART2){
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <HAL_UART_TxCpltCallback+0x3c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d102      	bne.n	8000df0 <HAL_UART_TxCpltCallback+0x28>
		transmitFinished = true;
 8000dea:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <HAL_UART_TxCpltCallback+0x38>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
	}
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	40013800 	.word	0x40013800
 8000e00:	20000000 	.word	0x20000000
 8000e04:	40004400 	.word	0x40004400

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0e:	f000 fd9f 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e12:	f000 f847 	bl	8000ea4 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000e16:	f000 f8a9 	bl	8000f6c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f000 fa0d 	bl	8001238 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e1e:	f000 f8b3 	bl	8000f88 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000e22:	f000 f8f5 	bl	8001010 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 8000e26:	f000 f907 	bl	8001038 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e2a:	f000 f9d3 	bl	80011d4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 8000e2e:	f000 f939 	bl	80010a4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e32:	f000 f983 	bl	800113c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, newRxData, 11);
 8000e36:	220b      	movs	r2, #11
 8000e38:	4915      	ldr	r1, [pc, #84]	@ (8000e90 <main+0x88>)
 8000e3a:	4816      	ldr	r0, [pc, #88]	@ (8000e94 <main+0x8c>)
 8000e3c:	f007 f8ee 	bl	800801c <HAL_UART_Receive_IT>

  // testing library functionality
  int num = sumOfTwoNumbers(3, 4);
 8000e40:	2104      	movs	r1, #4
 8000e42:	2003      	movs	r0, #3
 8000e44:	f000 fd4c 	bl	80018e0 <sumOfTwoNumbers>
 8000e48:	6078      	str	r0, [r7, #4]
  num++;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]

  size_t size = strlen(data);
 8000e50:	4811      	ldr	r0, [pc, #68]	@ (8000e98 <main+0x90>)
 8000e52:	f7ff fa11 	bl	8000278 <strlen>
 8000e56:	6038      	str	r0, [r7, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	if(transmitFinished && huart2.gState == HAL_UART_STATE_READY){
 8000e58:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <main+0x94>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d012      	beq.n	8000e86 <main+0x7e>
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <main+0x8c>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e66:	2b20      	cmp	r3, #32
 8000e68:	d10d      	bne.n	8000e86 <main+0x7e>
		//HAL_UART_Transmit_IT(&huart2, txData, sizeof(txData));
		transmit(&huart2, data, size, TEXT, XBEE_GROUND_TEST_MAC_ADDR);
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <main+0x98>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	e9cd 2300 	strd	r2, r3, [sp]
 8000e74:	2300      	movs	r3, #0
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	4907      	ldr	r1, [pc, #28]	@ (8000e98 <main+0x90>)
 8000e7a:	4806      	ldr	r0, [pc, #24]	@ (8000e94 <main+0x8c>)
 8000e7c:	f7ff fb90 	bl	80005a0 <transmit>
		transmitFinished = false;
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <main+0x94>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(100);
 8000e86:	2064      	movs	r0, #100	@ 0x64
 8000e88:	f000 fe28 	bl	8001adc <HAL_Delay>
	if(transmitFinished && huart2.gState == HAL_UART_STATE_READY){
 8000e8c:	e7e4      	b.n	8000e58 <main+0x50>
 8000e8e:	bf00      	nop
 8000e90:	2000072c 	.word	0x2000072c
 8000e94:	200001a8 	.word	0x200001a8
 8000e98:	20000004 	.word	0x20000004
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	0800b9c0 	.word	0x0800b9c0

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b09e      	sub	sp, #120	@ 0x78
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0318 	add.w	r3, r7, #24
 8000eae:	2260      	movs	r2, #96	@ 0x60
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00a f976 	bl	800b1a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
 8000ec6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ec8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000ecc:	f002 fec4 	bl	8003c58 <HAL_PWREx_ControlVoltageScaling>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000ed6:	f000 fa65 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000eda:	2332      	movs	r3, #50	@ 0x32
 8000edc:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ede:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eea:	2310      	movs	r3, #16
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ef2:	2310      	movs	r3, #16
 8000ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000ef6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efc:	2302      	movs	r3, #2
 8000efe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f00:	2301      	movs	r3, #1
 8000f02:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000f0c:	2350      	movs	r3, #80	@ 0x50
 8000f0e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f24:	f107 0318 	add.w	r3, r7, #24
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 ffa1 	bl	8003e70 <HAL_RCC_OscConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f34:	f000 fa36 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f38:	231f      	movs	r3, #31
 8000f3a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	2104      	movs	r1, #4
 8000f54:	4618      	mov	r0, r3
 8000f56:	f003 fe67 	bl	8004c28 <HAL_RCC_ClockConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f60:	f000 fa20 	bl	80013a4 <Error_Handler>
  }
}
 8000f64:	bf00      	nop
 8000f66:	3778      	adds	r7, #120	@ 0x78
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000f70:	f002 ff5e 	bl	8003e30 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000f74:	2002      	movs	r0, #2
 8000f76:	f002 fefb 	bl	8003d70 <HAL_PWREx_ConfigSupply>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000f80:	f000 fa10 	bl	80013a4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800100c <MX_ADC1_Init+0x84>)
 8000f90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f92:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000faa:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000fac:	2204      	movs	r2, #4
 8000fae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc4:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fec:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <MX_ADC1_Init+0x80>)
 8000ff6:	f000 fe93 	bl	8001d20 <HAL_ADC_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8001000:	f000 f9d0 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000088 	.word	0x20000088
 800100c:	42028000 	.word	0x42028000

08001010 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001014:	2000      	movs	r0, #0
 8001016:	f001 fd77 	bl	8002b08 <HAL_ICACHE_ConfigAssociativityMode>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001020:	f000 f9c0 	bl	80013a4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001024:	f001 fd90 	bl	8002b48 <HAL_ICACHE_Enable>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800102e:	f000 f9b9 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800104e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001052:	f7ff fdfb 	bl	8000c4c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001056:	2002      	movs	r0, #2
 8001058:	f7ff fddc 	bl	8000c14 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff fdd9 	bl	8000c14 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001066:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001068:	2303      	movs	r3, #3
 800106a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	463b      	mov	r3, r7
 8001072:	4619      	mov	r1, r3
 8001074:	4809      	ldr	r0, [pc, #36]	@ (800109c <MX_UCPD1_Init+0x64>)
 8001076:	f009 f96c 	bl	800a352 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800107a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800107e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001080:	2303      	movs	r3, #3
 8001082:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4804      	ldr	r0, [pc, #16]	@ (80010a0 <MX_UCPD1_Init+0x68>)
 800108e:	f009 f960 	bl	800a352 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	42020400 	.word	0x42020400
 80010a0:	42020000 	.word	0x42020000

080010a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a8:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 80010aa:	4a23      	ldr	r2, [pc, #140]	@ (8001138 <MX_USART1_UART_Init+0x94>)
 80010ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ae:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010da:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e0:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ec:	4811      	ldr	r0, [pc, #68]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 80010ee:	f006 fe03 	bl	8007cf8 <HAL_UART_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010f8:	f000 f954 	bl	80013a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fc:	2100      	movs	r1, #0
 80010fe:	480d      	ldr	r0, [pc, #52]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 8001100:	f008 ff11 	bl	8009f26 <HAL_UARTEx_SetTxFifoThreshold>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800110a:	f000 f94b 	bl	80013a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800110e:	2100      	movs	r1, #0
 8001110:	4808      	ldr	r0, [pc, #32]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 8001112:	f008 ff46 	bl	8009fa2 <HAL_UARTEx_SetRxFifoThreshold>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800111c:	f000 f942 	bl	80013a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	@ (8001134 <MX_USART1_UART_Init+0x90>)
 8001122:	f008 fec7 	bl	8009eb4 <HAL_UARTEx_DisableFifoMode>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800112c:	f000 f93a 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000114 	.word	0x20000114
 8001138:	40013800 	.word	0x40013800

0800113c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001140:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001142:	4a23      	ldr	r2, [pc, #140]	@ (80011d0 <MX_USART2_UART_Init+0x94>)
 8001144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001146:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115a:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001172:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001184:	4811      	ldr	r0, [pc, #68]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001186:	f006 fdb7 	bl	8007cf8 <HAL_UART_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001190:	f000 f908 	bl	80013a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001194:	2100      	movs	r1, #0
 8001196:	480d      	ldr	r0, [pc, #52]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001198:	f008 fec5 	bl	8009f26 <HAL_UARTEx_SetTxFifoThreshold>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011a2:	f000 f8ff 	bl	80013a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a6:	2100      	movs	r1, #0
 80011a8:	4808      	ldr	r0, [pc, #32]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 80011aa:	f008 fefa 	bl	8009fa2 <HAL_UARTEx_SetRxFifoThreshold>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011b4:	f000 f8f6 	bl	80013a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 80011ba:	f008 fe7b 	bl	8009eb4 <HAL_UARTEx_DisableFifoMode>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011c4:	f000 f8ee 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200001a8 	.word	0x200001a8
 80011d0:	40004400 	.word	0x40004400

080011d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011d8:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011da:	4a16      	ldr	r2, [pc, #88]	@ (8001234 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80011dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e0:	2206      	movs	r2, #6
 80011e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e6:	2202      	movs	r2, #2
 80011e8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ec:	2202      	movs	r2, #2
 80011ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001204:	2200      	movs	r2, #0
 8001206:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800120a:	2200      	movs	r2, #0
 800120c:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001210:	2200      	movs	r2, #0
 8001212:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001216:	2200      	movs	r2, #0
 8001218:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800121c:	f001 fca4 	bl	8002b68 <HAL_PCD_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001226:	f000 f8bd 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000023c 	.word	0x2000023c
 8001234:	42040000 	.word	0x42040000

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b50      	ldr	r3, [pc, #320]	@ (8001390 <MX_GPIO_Init+0x158>)
 8001250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001254:	4a4e      	ldr	r2, [pc, #312]	@ (8001390 <MX_GPIO_Init+0x158>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800125e:	4b4c      	ldr	r3, [pc, #304]	@ (8001390 <MX_GPIO_Init+0x158>)
 8001260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b48      	ldr	r3, [pc, #288]	@ (8001390 <MX_GPIO_Init+0x158>)
 800126e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001272:	4a47      	ldr	r2, [pc, #284]	@ (8001390 <MX_GPIO_Init+0x158>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800127c:	4b44      	ldr	r3, [pc, #272]	@ (8001390 <MX_GPIO_Init+0x158>)
 800127e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	4b41      	ldr	r3, [pc, #260]	@ (8001390 <MX_GPIO_Init+0x158>)
 800128c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001290:	4a3f      	ldr	r2, [pc, #252]	@ (8001390 <MX_GPIO_Init+0x158>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800129a:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <MX_GPIO_Init+0x158>)
 800129c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a8:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <MX_GPIO_Init+0x158>)
 80012aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ae:	4a38      	ldr	r2, [pc, #224]	@ (8001390 <MX_GPIO_Init+0x158>)
 80012b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012b8:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <MX_GPIO_Init+0x158>)
 80012ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2104      	movs	r1, #4
 80012ca:	4832      	ldr	r0, [pc, #200]	@ (8001394 <MX_GPIO_Init+0x15c>)
 80012cc:	f001 fc04 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2180      	movs	r1, #128	@ 0x80
 80012d4:	4830      	ldr	r0, [pc, #192]	@ (8001398 <MX_GPIO_Init+0x160>)
 80012d6:	f001 fbff 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	21a0      	movs	r1, #160	@ 0xa0
 80012de:	482f      	ldr	r0, [pc, #188]	@ (800139c <MX_GPIO_Init+0x164>)
 80012e0:	f001 fbfa 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80012e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ea:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <MX_GPIO_Init+0x168>)
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4827      	ldr	r0, [pc, #156]	@ (8001398 <MX_GPIO_Init+0x160>)
 80012fa:	f001 fa15 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80012fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4822      	ldr	r0, [pc, #136]	@ (800139c <MX_GPIO_Init+0x164>)
 8001314:	f001 fa08 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001318:	2304      	movs	r3, #4
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001320:	2301      	movs	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001324:	2302      	movs	r3, #2
 8001326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4819      	ldr	r0, [pc, #100]	@ (8001394 <MX_GPIO_Init+0x15c>)
 8001330:	f001 f9fa 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001334:	2380      	movs	r3, #128	@ 0x80
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	2301      	movs	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001340:	2302      	movs	r3, #2
 8001342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	4813      	ldr	r0, [pc, #76]	@ (8001398 <MX_GPIO_Init+0x160>)
 800134c:	f001 f9ec 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8001350:	2320      	movs	r3, #32
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	@ (800139c <MX_GPIO_Init+0x164>)
 8001368:	f001 f9de 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001374:	2301      	movs	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001378:	2302      	movs	r3, #2
 800137a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	@ (800139c <MX_GPIO_Init+0x164>)
 8001384:	f001 f9d0 	bl	8002728 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	@ 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	46020c00 	.word	0x46020c00
 8001394:	42021800 	.word	0x42021800
 8001398:	42020800 	.word	0x42020800
 800139c:	42020400 	.word	0x42020400
 80013a0:	10210000 	.word	0x10210000

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <Error_Handler+0x8>

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <HAL_MspInit+0x38>)
 80013b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013bc:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <HAL_MspInit+0x38>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <HAL_MspInit+0x38>)
 80013c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80013d4:	f002 fd3c 	bl	8003e50 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80013d8:	2004      	movs	r0, #4
 80013da:	f001 f818 	bl	800240e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	46020c00 	.word	0x46020c00

080013ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0ba      	sub	sp, #232	@ 0xe8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	22c0      	movs	r2, #192	@ 0xc0
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f009 fec9 	bl	800b1a4 <memset>
  if(hadc->Instance==ADC1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a24      	ldr	r2, [pc, #144]	@ (80014a8 <HAL_ADC_MspInit+0xbc>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d140      	bne.n	800149e <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800141c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001428:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800142c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4618      	mov	r0, r3
 8001436:	f003 ffc7 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001440:	f7ff ffb0 	bl	80013a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001444:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <HAL_ADC_MspInit+0xc0>)
 8001446:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800144a:	4a18      	ldr	r2, [pc, #96]	@ (80014ac <HAL_ADC_MspInit+0xc0>)
 800144c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001450:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001454:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HAL_ADC_MspInit+0xc0>)
 8001456:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800145a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <HAL_ADC_MspInit+0xc0>)
 8001464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001468:	4a10      	ldr	r2, [pc, #64]	@ (80014ac <HAL_ADC_MspInit+0xc0>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <HAL_ADC_MspInit+0xc0>)
 8001474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001480:	2304      	movs	r3, #4
 8001482:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001486:	2303      	movs	r3, #3
 8001488:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <HAL_ADC_MspInit+0xc4>)
 800149a:	f001 f945 	bl	8002728 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800149e:	bf00      	nop
 80014a0:	37e8      	adds	r7, #232	@ 0xe8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	42028000 	.word	0x42028000
 80014ac:	46020c00 	.word	0x46020c00
 80014b0:	42020800 	.word	0x42020800

080014b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0bc      	sub	sp, #240	@ 0xf0
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	22c0      	movs	r2, #192	@ 0xc0
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f009 fe65 	bl	800b1a4 <memset>
  if(huart->Instance==USART1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a54      	ldr	r2, [pc, #336]	@ (8001630 <HAL_UART_MspInit+0x17c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d14e      	bne.n	8001582 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014e4:	f04f 0201 	mov.w	r2, #1
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014f0:	2300      	movs	r3, #0
 80014f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f4:	f107 0318 	add.w	r3, r7, #24
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 ff65 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001504:	f7ff ff4e 	bl	80013a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001508:	4b4a      	ldr	r3, [pc, #296]	@ (8001634 <HAL_UART_MspInit+0x180>)
 800150a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800150e:	4a49      	ldr	r2, [pc, #292]	@ (8001634 <HAL_UART_MspInit+0x180>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001514:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001518:	4b46      	ldr	r3, [pc, #280]	@ (8001634 <HAL_UART_MspInit+0x180>)
 800151a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800151e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b43      	ldr	r3, [pc, #268]	@ (8001634 <HAL_UART_MspInit+0x180>)
 8001528:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800152c:	4a41      	ldr	r2, [pc, #260]	@ (8001634 <HAL_UART_MspInit+0x180>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001536:	4b3f      	ldr	r3, [pc, #252]	@ (8001634 <HAL_UART_MspInit+0x180>)
 8001538:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001544:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001548:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001552:	2302      	movs	r3, #2
 8001554:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800155e:	2307      	movs	r3, #7
 8001560:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001568:	4619      	mov	r1, r3
 800156a:	4833      	ldr	r0, [pc, #204]	@ (8001638 <HAL_UART_MspInit+0x184>)
 800156c:	f001 f8dc 	bl	8002728 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	203d      	movs	r0, #61	@ 0x3d
 8001576:	f000 ff55 	bl	8002424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800157a:	203d      	movs	r0, #61	@ 0x3d
 800157c:	f000 ff6c 	bl	8002458 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001580:	e051      	b.n	8001626 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a2d      	ldr	r2, [pc, #180]	@ (800163c <HAL_UART_MspInit+0x188>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d14c      	bne.n	8001626 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800158c:	f04f 0202 	mov.w	r2, #2
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001598:	2300      	movs	r3, #0
 800159a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159c:	f107 0318 	add.w	r3, r7, #24
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 ff11 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 80015ac:	f7ff fefa 	bl	80013a4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b0:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_UART_MspInit+0x180>)
 80015b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001634 <HAL_UART_MspInit+0x180>)
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015bc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80015c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <HAL_UART_MspInit+0x180>)
 80015c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_UART_MspInit+0x180>)
 80015d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015d4:	4a17      	ldr	r2, [pc, #92]	@ (8001634 <HAL_UART_MspInit+0x180>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_UART_MspInit+0x180>)
 80015e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ec:	230c      	movs	r3, #12
 80015ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001604:	2307      	movs	r3, #7
 8001606:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800160e:	4619      	mov	r1, r3
 8001610:	4809      	ldr	r0, [pc, #36]	@ (8001638 <HAL_UART_MspInit+0x184>)
 8001612:	f001 f889 	bl	8002728 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	203e      	movs	r0, #62	@ 0x3e
 800161c:	f000 ff02 	bl	8002424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001620:	203e      	movs	r0, #62	@ 0x3e
 8001622:	f000 ff19 	bl	8002458 <HAL_NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	37f0      	adds	r7, #240	@ 0xf0
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40013800 	.word	0x40013800
 8001634:	46020c00 	.word	0x46020c00
 8001638:	42020000 	.word	0x42020000
 800163c:	40004400 	.word	0x40004400

08001640 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b0bc      	sub	sp, #240	@ 0xf0
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	22c0      	movs	r2, #192	@ 0xc0
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f009 fd9f 	bl	800b1a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a3c      	ldr	r2, [pc, #240]	@ (800175c <HAL_PCD_MspInit+0x11c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d171      	bne.n	8001754 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001670:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001682:	f107 0318 	add.w	r3, r7, #24
 8001686:	4618      	mov	r0, r3
 8001688:	f003 fe9e 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001692:	f7ff fe87 	bl	80013a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b32      	ldr	r3, [pc, #200]	@ (8001760 <HAL_PCD_MspInit+0x120>)
 8001698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800169c:	4a30      	ldr	r2, [pc, #192]	@ (8001760 <HAL_PCD_MspInit+0x120>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001760 <HAL_PCD_MspInit+0x120>)
 80016a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80016b4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80016b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80016ce:	230a      	movs	r3, #10
 80016d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016d8:	4619      	mov	r1, r3
 80016da:	4822      	ldr	r0, [pc, #136]	@ (8001764 <HAL_PCD_MspInit+0x124>)
 80016dc:	f001 f824 	bl	8002728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80016e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <HAL_PCD_MspInit+0x120>)
 80016e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001760 <HAL_PCD_MspInit+0x120>)
 80016e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <HAL_PCD_MspInit+0x120>)
 80016f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fe:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <HAL_PCD_MspInit+0x120>)
 8001700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d119      	bne.n	8001740 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <HAL_PCD_MspInit+0x120>)
 800170e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001712:	4a13      	ldr	r2, [pc, #76]	@ (8001760 <HAL_PCD_MspInit+0x120>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800171c:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <HAL_PCD_MspInit+0x120>)
 800171e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800172a:	f002 fb71 	bl	8003e10 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800172e:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <HAL_PCD_MspInit+0x120>)
 8001730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001734:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <HAL_PCD_MspInit+0x120>)
 8001736:	f023 0304 	bic.w	r3, r3, #4
 800173a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800173e:	e001      	b.n	8001744 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001740:	f002 fb66 	bl	8003e10 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	2049      	movs	r0, #73	@ 0x49
 800174a:	f000 fe6b 	bl	8002424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800174e:	2049      	movs	r0, #73	@ 0x49
 8001750:	f000 fe82 	bl	8002458 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001754:	bf00      	nop
 8001756:	37f0      	adds	r7, #240	@ 0xf0
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	42040000 	.word	0x42040000
 8001760:	46020c00 	.word	0x46020c00
 8001764:	42020000 	.word	0x42020000

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <NMI_Handler+0x4>

08001770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <MemManage_Handler+0x4>

08001780 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <UsageFault_Handler+0x4>

08001790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017be:	f000 f96d 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <USART1_IRQHandler+0x10>)
 80017ce:	f006 fc87 	bl	80080e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000114 	.word	0x20000114

080017dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <USART2_IRQHandler+0x10>)
 80017e2:	f006 fc7d 	bl	80080e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200001a8 	.word	0x200001a8

080017f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <OTG_FS_IRQHandler+0x10>)
 80017f6:	f001 facf 	bl	8002d98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000023c 	.word	0x2000023c

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	@ (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	@ (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f009 fcce 	bl	800b1d4 <__errno>
 8001838:	4603      	mov	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	@ (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200c0000 	.word	0x200c0000
 8001864:	00000400 	.word	0x00000400
 8001868:	20000738 	.word	0x20000738
 800186c:	20000888 	.word	0x20000888

08001870 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001874:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <SystemInit+0x68>)
 8001876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800187a:	4a17      	ldr	r2, [pc, #92]	@ (80018d8 <SystemInit+0x68>)
 800187c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001880:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <SystemInit+0x6c>)
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <SystemInit+0x6c>)
 800188c:	2200      	movs	r2, #0
 800188e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <SystemInit+0x6c>)
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001896:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <SystemInit+0x6c>)
 8001898:	2200      	movs	r2, #0
 800189a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800189c:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <SystemInit+0x6c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0e      	ldr	r2, [pc, #56]	@ (80018dc <SystemInit+0x6c>)
 80018a2:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80018a6:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80018aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <SystemInit+0x6c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <SystemInit+0x6c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a09      	ldr	r2, [pc, #36]	@ (80018dc <SystemInit+0x6c>)
 80018b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80018be:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <SystemInit+0x6c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018c4:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <SystemInit+0x68>)
 80018c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018ca:	609a      	str	r2, [r3, #8]
  #endif
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00
 80018dc:	46020c00 	.word	0x46020c00

080018e0 <sumOfTwoNumbers>:
 *  Created on: Oct 24, 2024
 *      Author: memo4
 */
#include "test.h"

int sumOfTwoNumbers(int a, int b){
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
	return a+b;
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	4413      	add	r3, r2
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001934 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001900:	f7ff ffb6 	bl	8001870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001904:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001906:	e003      	b.n	8001910 <LoopCopyDataInit>

08001908 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001908:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800190a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800190c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800190e:	3104      	adds	r1, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001910:	480a      	ldr	r0, [pc, #40]	@ (800193c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001912:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001914:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001916:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001918:	d3f6      	bcc.n	8001908 <CopyDataInit>
	ldr	r2, =_sbss
 800191a:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <LoopForever+0x12>)
	b	LoopFillZerobss
 800191c:	e002      	b.n	8001924 <LoopFillZerobss>

0800191e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800191e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001920:	f842 3b04 	str.w	r3, [r2], #4

08001924 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001924:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <LoopForever+0x16>)
	cmp	r2, r3
 8001926:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001928:	d3f9      	bcc.n	800191e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192a:	f009 fc59 	bl	800b1e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800192e:	f7ff fa6b 	bl	8000e08 <main>

08001932 <LoopForever>:

LoopForever:
    b LoopForever
 8001932:	e7fe      	b.n	8001932 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001934:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001938:	0800bb20 	.word	0x0800bb20
	ldr	r0, =_sdata
 800193c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001940:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 8001944:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8001948:	20000885 	.word	0x20000885

0800194c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC1_IRQHandler>
	...

08001950 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_Init+0x50>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a11      	ldr	r2, [pc, #68]	@ (80019a0 <HAL_Init+0x50>)
 800195a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800195e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001960:	2003      	movs	r0, #3
 8001962:	f000 fd54 	bl	800240e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001966:	f003 fb51 	bl	800500c <HAL_RCC_GetSysClockFreq>
 800196a:	4602      	mov	r2, r0
 800196c:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_Init+0x54>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	490c      	ldr	r1, [pc, #48]	@ (80019a8 <HAL_Init+0x58>)
 8001976:	5ccb      	ldrb	r3, [r1, r3]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
 800197c:	4a0b      	ldr	r2, [pc, #44]	@ (80019ac <HAL_Init+0x5c>)
 800197e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001980:	2004      	movs	r0, #4
 8001982:	f000 fd99 	bl	80024b8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001986:	2000      	movs	r0, #0
 8001988:	f000 f812 	bl	80019b0 <HAL_InitTick>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e002      	b.n	800199c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001996:	f7ff fd0b 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40022000 	.word	0x40022000
 80019a4:	46020c00 	.word	0x46020c00
 80019a8:	0800b9dc 	.word	0x0800b9dc
 80019ac:	20000010 	.word	0x20000010

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80019bc:	4b33      	ldr	r3, [pc, #204]	@ (8001a8c <HAL_InitTick+0xdc>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e05c      	b.n	8001a82 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80019c8:	4b31      	ldr	r3, [pc, #196]	@ (8001a90 <HAL_InitTick+0xe0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d10c      	bne.n	80019ee <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80019d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a94 <HAL_InitTick+0xe4>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a8c <HAL_InitTick+0xdc>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e037      	b.n	8001a5e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80019ee:	f000 fdbb 	bl	8002568 <HAL_SYSTICK_GetCLKSourceConfig>
 80019f2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d023      	beq.n	8001a42 <HAL_InitTick+0x92>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d82d      	bhi.n	8001a5c <HAL_InitTick+0xac>
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_InitTick+0x5e>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d00d      	beq.n	8001a28 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001a0c:	e026      	b.n	8001a5c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001a0e:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <HAL_InitTick+0xe4>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b1e      	ldr	r3, [pc, #120]	@ (8001a8c <HAL_InitTick+0xdc>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	4619      	mov	r1, r3
 8001a18:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001a1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a24:	60fb      	str	r3, [r7, #12]
        break;
 8001a26:	e01a      	b.n	8001a5e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a28:	4b18      	ldr	r3, [pc, #96]	@ (8001a8c <HAL_InitTick+0xdc>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a36:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	60fb      	str	r3, [r7, #12]
        break;
 8001a40:	e00d      	b.n	8001a5e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a42:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_InitTick+0xdc>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a50:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	60fb      	str	r3, [r7, #12]
        break;
 8001a5a:	e000      	b.n	8001a5e <HAL_InitTick+0xae>
        break;
 8001a5c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fd08 	bl	8002474 <HAL_SYSTICK_Config>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e009      	b.n	8001a82 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	f04f 30ff 	mov.w	r0, #4294967295
 8001a76:	f000 fcd5 	bl	8002424 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001a7a:	4a07      	ldr	r2, [pc, #28]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000018 	.word	0x20000018
 8001a90:	e000e010 	.word	0xe000e010
 8001a94:	20000010 	.word	0x20000010
 8001a98:	20000014 	.word	0x20000014

08001a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_IncTick+0x20>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_IncTick+0x24>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a04      	ldr	r2, [pc, #16]	@ (8001ac0 <HAL_IncTick+0x24>)
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000018 	.word	0x20000018
 8001ac0:	2000073c 	.word	0x2000073c

08001ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	@ (8001ad8 <HAL_GetTick+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	2000073c 	.word	0x2000073c

08001adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff ffee 	bl	8001ac4 <HAL_GetTick>
 8001ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d005      	beq.n	8001b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <HAL_Delay+0x44>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b02:	bf00      	nop
 8001b04:	f7ff ffde 	bl	8001ac4 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d8f7      	bhi.n	8001b04 <HAL_Delay+0x28>
  {
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000018 	.word	0x20000018

08001b24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	601a      	str	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <LL_ADC_SetResolution+0x3c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d104      	bne.n	8001b6c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f023 020c 	bic.w	r2, r3, #12
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	60da      	str	r2, [r3, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	46021000 	.word	0x46021000

08001b8c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b9e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d002      	beq.n	8001bbe <LL_ADC_SetGainCompensation+0x32>
 8001bb8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001bbc:	e000      	b.n	8001bc0 <LL_ADC_SetGainCompensation+0x34>
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2107      	movs	r1, #7
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6093      	str	r3, [r2, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c48:	d101      	bne.n	8001c4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	609a      	str	r2, [r3, #8]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c98:	d101      	bne.n	8001c9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <LL_ADC_IsEnabled+0x18>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <LL_ADC_IsEnabled+0x1a>
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d101      	bne.n	8001cea <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d101      	bne.n	8001d10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	@ 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e2b3      	b.n	80022a8 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a8b      	ldr	r2, [pc, #556]	@ (8001f7c <HAL_ADC_Init+0x25c>)
 8001d4e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d109      	bne.n	8001d6c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff fb47 	bl	80013ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5f 	bl	8001c34 <LL_ADC_IsDeepPowerDownEnabled>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff45 	bl	8001c10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff7a 	bl	8001c84 <LL_ADC_IsInternalRegulatorEnabled>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d115      	bne.n	8001dc2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff5e 	bl	8001c5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001da0:	4b77      	ldr	r3, [pc, #476]	@ (8001f80 <HAL_ADC_Init+0x260>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	099b      	lsrs	r3, r3, #6
 8001da6:	4a77      	ldr	r2, [pc, #476]	@ (8001f84 <HAL_ADC_Init+0x264>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	099b      	lsrs	r3, r3, #6
 8001dae:	3301      	adds	r3, #1
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001db4:	e002      	b.n	8001dbc <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f9      	bne.n	8001db6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff5c 	bl	8001c84 <LL_ADC_IsInternalRegulatorEnabled>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10e      	bne.n	8001df0 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001dd6:	f043 0210 	orr.w	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001de2:	f043 0201 	orr.w	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff6c 	bl	8001cd2 <LL_ADC_REG_IsConversionOngoing>
 8001dfa:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 8244 	bne.w	8002292 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f040 8240 	bne.w	8002292 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001e16:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e1a:	f043 0202 	orr.w	r2, r3, #2
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff40 	bl	8001cac <LL_ADC_IsEnabled>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d140      	bne.n	8001eb4 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a51      	ldr	r2, [pc, #324]	@ (8001f7c <HAL_ADC_Init+0x25c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d028      	beq.n	8001e8e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a51      	ldr	r2, [pc, #324]	@ (8001f88 <HAL_ADC_Init+0x268>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d109      	bne.n	8001e5a <HAL_ADC_Init+0x13a>
 8001e46:	4850      	ldr	r0, [pc, #320]	@ (8001f88 <HAL_ADC_Init+0x268>)
 8001e48:	f7ff ff30 	bl	8001cac <LL_ADC_IsEnabled>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf0c      	ite	eq
 8001e52:	2301      	moveq	r3, #1
 8001e54:	2300      	movne	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	e008      	b.n	8001e6c <HAL_ADC_Init+0x14c>
 8001e5a:	4848      	ldr	r0, [pc, #288]	@ (8001f7c <HAL_ADC_Init+0x25c>)
 8001e5c:	f7ff ff26 	bl	8001cac <LL_ADC_IsEnabled>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d021      	beq.n	8001eb4 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a44      	ldr	r2, [pc, #272]	@ (8001f88 <HAL_ADC_Init+0x268>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_Init+0x15e>
 8001e7a:	4a44      	ldr	r2, [pc, #272]	@ (8001f8c <HAL_ADC_Init+0x26c>)
 8001e7c:	e000      	b.n	8001e80 <HAL_ADC_Init+0x160>
 8001e7e:	4a44      	ldr	r2, [pc, #272]	@ (8001f90 <HAL_ADC_Init+0x270>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4619      	mov	r1, r3
 8001e86:	4610      	mov	r0, r2
 8001e88:	f7ff fe4c 	bl	8001b24 <LL_ADC_SetCommonClock>
 8001e8c:	e012      	b.n	8001eb4 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	4619      	mov	r1, r3
 8001e98:	4610      	mov	r0, r2
 8001e9a:	f7ff fe57 	bl	8001b4c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001e9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f90 <HAL_ADC_Init+0x270>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001eae:	4938      	ldr	r1, [pc, #224]	@ (8001f90 <HAL_ADC_Init+0x270>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a30      	ldr	r2, [pc, #192]	@ (8001f7c <HAL_ADC_Init+0x25c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d010      	beq.n	8001ee0 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ec4:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001eca:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001ed0:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001ed8:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001eda:	4313      	orrs	r3, r2
 8001edc:	623b      	str	r3, [r7, #32]
 8001ede:	e030      	b.n	8001f42 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7f1b      	ldrb	r3, [r3, #28]
 8001ee4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eec:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eee:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ef4:	2a00      	cmp	r2, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_ADC_Init+0x1de>
 8001ef8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001efc:	e000      	b.n	8001f00 <HAL_ADC_Init+0x1e0>
 8001efe:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f00:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001f06:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	da04      	bge.n	8001f1a <HAL_ADC_Init+0x1fa>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f18:	e001      	b.n	8001f1e <HAL_ADC_Init+0x1fe>
 8001f1a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8001f1e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4918      	ldr	r1, [pc, #96]	@ (8001f88 <HAL_ADC_Init+0x268>)
 8001f26:	428b      	cmp	r3, r1
 8001f28:	d103      	bne.n	8001f32 <HAL_ADC_Init+0x212>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f30:	e003      	b.n	8001f3a <HAL_ADC_Init+0x21a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f38:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001f3a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f3c:	6a3a      	ldr	r2, [r7, #32]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d12f      	bne.n	8001fac <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <HAL_ADC_Init+0x25c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	045b      	lsls	r3, r3, #17
 8001f5e:	6a3a      	ldr	r2, [r7, #32]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	623b      	str	r3, [r7, #32]
 8001f64:	e022      	b.n	8001fac <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d111      	bne.n	8001f94 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f76:	623b      	str	r3, [r7, #32]
 8001f78:	e018      	b.n	8001fac <HAL_ADC_Init+0x28c>
 8001f7a:	bf00      	nop
 8001f7c:	46021000 	.word	0x46021000
 8001f80:	20000010 	.word	0x20000010
 8001f84:	053e2d63 	.word	0x053e2d63
 8001f88:	42028000 	.word	0x42028000
 8001f8c:	42028308 	.word	0x42028308
 8001f90:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f98:	f043 0220 	orr.w	r2, r3, #32
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001fa4:	f043 0201 	orr.w	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a92      	ldr	r2, [pc, #584]	@ (80021fc <HAL_ADC_Init+0x4dc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d018      	beq.n	8001fe8 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	6a3a      	ldr	r2, [r7, #32]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	4b89      	ldr	r3, [pc, #548]	@ (8002200 <HAL_ADC_Init+0x4e0>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	430b      	orrs	r3, r1
 8001fe4:	60d3      	str	r3, [r2, #12]
 8001fe6:	e031      	b.n	800204c <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d009      	beq.n	8002004 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff4:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	6a3a      	ldr	r2, [r7, #32]
 8002000:	4313      	orrs	r3, r2
 8002002:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	4b7e      	ldr	r3, [pc, #504]	@ (8002204 <HAL_ADC_Init+0x4e4>)
 800200c:	4013      	ands	r3, r2
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	6a39      	ldr	r1, [r7, #32]
 8002014:	430b      	orrs	r3, r1
 8002016:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1a      	ldr	r2, [r3, #32]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a6a      	ldr	r2, [pc, #424]	@ (80021fc <HAL_ADC_Init+0x4dc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	f000 8093 	beq.w	800217e <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fe38 	bl	8001cd2 <LL_ADC_REG_IsConversionOngoing>
 8002062:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fe45 	bl	8001cf8 <LL_ADC_INJ_IsConversionOngoing>
 800206e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d161      	bne.n	800213a <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d15e      	bne.n	800213a <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7f1b      	ldrb	r3, [r3, #28]
 8002080:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4960      	ldr	r1, [pc, #384]	@ (8002208 <HAL_ADC_Init+0x4e8>)
 8002088:	428b      	cmp	r3, r1
 800208a:	d102      	bne.n	8002092 <HAL_ADC_Init+0x372>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002090:	e002      	b.n	8002098 <HAL_ADC_Init+0x378>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002096:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002098:	4313      	orrs	r3, r2
 800209a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	6a39      	ldr	r1, [r7, #32]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4619      	mov	r1, r3
 80020c6:	4610      	mov	r0, r2
 80020c8:	f7ff fd60 	bl	8001b8c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d11e      	bne.n	8002114 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020da:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	4b4a      	ldr	r3, [pc, #296]	@ (800220c <HAL_ADC_Init+0x4ec>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80020ea:	0411      	lsls	r1, r2, #16
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020f0:	4311      	orrs	r1, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80020f6:	4311      	orrs	r1, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80020fc:	4311      	orrs	r1, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002102:	0892      	lsrs	r2, r2, #2
 8002104:	430a      	orrs	r2, r1
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0201 	orr.w	r2, r2, #1
 8002110:	611a      	str	r2, [r3, #16]
 8002112:	e007      	b.n	8002124 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10c      	bne.n	800215c <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002148:	f023 010f 	bic.w	r1, r3, #15
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002150:	1e5a      	subs	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	631a      	str	r2, [r3, #48]	@ 0x30
 800215a:	e007      	b.n	800216c <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 020f 	bic.w	r2, r2, #15
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002170:	f023 0303 	bic.w	r3, r3, #3
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800217c:	e092      	b.n	80022a4 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002184:	2b01      	cmp	r3, #1
 8002186:	d111      	bne.n	80021ac <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002190:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002196:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800219c:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_ADC_Init+0x4f0>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	69f9      	ldr	r1, [r7, #28]
 80021bc:	430b      	orrs	r3, r1
 80021be:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c8:	461a      	mov	r2, r3
 80021ca:	2100      	movs	r1, #0
 80021cc:	f7ff fd01 	bl	8001bd2 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d8:	461a      	mov	r2, r3
 80021da:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80021de:	f7ff fcf8 	bl	8001bd2 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d114      	bne.n	8002214 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f062 020f 	orn	r2, r2, #15
 80021f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80021fa:	e024      	b.n	8002246 <HAL_ADC_Init+0x526>
 80021fc:	46021000 	.word	0x46021000
 8002200:	fff0c013 	.word	0xfff0c013
 8002204:	ffde800d 	.word	0xffde800d
 8002208:	42028000 	.word	0x42028000
 800220c:	fc00f81e 	.word	0xfc00f81e
 8002210:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800221c:	d113      	bne.n	8002246 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002228:	3b01      	subs	r3, #1
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	f003 031c 	and.w	r3, r3, #28
 8002230:	f06f 020f 	mvn.w	r2, #15
 8002234:	fa02 f103 	lsl.w	r1, r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <HAL_ADC_Init+0x590>)
 800224e:	4013      	ands	r3, r2
 8002250:	6a3a      	ldr	r2, [r7, #32]
 8002252:	429a      	cmp	r2, r3
 8002254:	d10b      	bne.n	800226e <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002260:	f023 0303 	bic.w	r3, r3, #3
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800226c:	e01a      	b.n	80022a4 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002272:	f023 0312 	bic.w	r3, r3, #18
 8002276:	f043 0210 	orr.w	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002282:	f043 0201 	orr.w	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002290:	e008      	b.n	80022a4 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002296:	f043 0210 	orr.w	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80022a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3728      	adds	r7, #40	@ 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	833ffff3 	.word	0x833ffff3

080022b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c4:	4b0c      	ldr	r3, [pc, #48]	@ (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d0:	4013      	ands	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e6:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	60d3      	str	r3, [r2, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002300:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <__NVIC_GetPriorityGrouping+0x18>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 0307 	and.w	r3, r3, #7
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	2b00      	cmp	r3, #0
 8002328:	db0b      	blt.n	8002342 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	4907      	ldr	r1, [pc, #28]	@ (8002350 <__NVIC_EnableIRQ+0x38>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	2001      	movs	r0, #1
 800233a:	fa00 f202 	lsl.w	r2, r0, r2
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000e100 	.word	0xe000e100

08002354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	6039      	str	r1, [r7, #0]
 800235e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	2b00      	cmp	r3, #0
 8002366:	db0a      	blt.n	800237e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	490c      	ldr	r1, [pc, #48]	@ (80023a0 <__NVIC_SetPriority+0x4c>)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	0112      	lsls	r2, r2, #4
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	440b      	add	r3, r1
 8002378:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800237c:	e00a      	b.n	8002394 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4908      	ldr	r1, [pc, #32]	@ (80023a4 <__NVIC_SetPriority+0x50>)
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	3b04      	subs	r3, #4
 800238c:	0112      	lsls	r2, r2, #4
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	440b      	add	r3, r1
 8002392:	761a      	strb	r2, [r3, #24]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000e100 	.word	0xe000e100
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	@ 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f1c3 0307 	rsb	r3, r3, #7
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	bf28      	it	cs
 80023c6:	2304      	movcs	r3, #4
 80023c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3304      	adds	r3, #4
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d902      	bls.n	80023d8 <NVIC_EncodePriority+0x30>
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3b03      	subs	r3, #3
 80023d6:	e000      	b.n	80023da <NVIC_EncodePriority+0x32>
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	f04f 32ff 	mov.w	r2, #4294967295
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43da      	mvns	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	401a      	ands	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f0:	f04f 31ff 	mov.w	r1, #4294967295
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	43d9      	mvns	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	4313      	orrs	r3, r2
         );
}
 8002402:	4618      	mov	r0, r3
 8002404:	3724      	adds	r7, #36	@ 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ff4c 	bl	80022b4 <__NVIC_SetPriorityGrouping>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002432:	f7ff ff63 	bl	80022fc <__NVIC_GetPriorityGrouping>
 8002436:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	6978      	ldr	r0, [r7, #20]
 800243e:	f7ff ffb3 	bl	80023a8 <NVIC_EncodePriority>
 8002442:	4602      	mov	r2, r0
 8002444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ff82 	bl	8002354 <__NVIC_SetPriority>
}
 8002450:	bf00      	nop
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ff56 	bl	8002318 <__NVIC_EnableIRQ>
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002484:	d301      	bcc.n	800248a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002486:	2301      	movs	r3, #1
 8002488:	e00d      	b.n	80024a6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800248a:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <HAL_SYSTICK_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002492:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <HAL_SYSTICK_Config+0x40>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002498:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_SYSTICK_Config+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a05      	ldr	r2, [pc, #20]	@ (80024b4 <HAL_SYSTICK_Config+0x40>)
 800249e:	f043 0303 	orr.w	r3, r3, #3
 80024a2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d844      	bhi.n	8002550 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80024c6:	a201      	add	r2, pc, #4	@ (adr r2, 80024cc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	080024ef 	.word	0x080024ef
 80024d0:	0800250d 	.word	0x0800250d
 80024d4:	0800252f 	.word	0x0800252f
 80024d8:	08002551 	.word	0x08002551
 80024dc:	080024e1 	.word	0x080024e1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80024e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002560 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	6013      	str	r3, [r2, #0]
      break;
 80024ec:	e031      	b.n	8002552 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80024ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002560 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80024fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002564 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80024fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002500:	4a18      	ldr	r2, [pc, #96]	@ (8002564 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002502:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002506:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800250a:	e022      	b.n	8002552 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800250c:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a13      	ldr	r2, [pc, #76]	@ (8002560 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002512:	f023 0304 	bic.w	r3, r3, #4
 8002516:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002518:	4b12      	ldr	r3, [pc, #72]	@ (8002564 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800251a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002522:	4a10      	ldr	r2, [pc, #64]	@ (8002564 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002524:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002528:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800252c:	e011      	b.n	8002552 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800252e:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a0b      	ldr	r2, [pc, #44]	@ (8002560 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002534:	f023 0304 	bic.w	r3, r3, #4
 8002538:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800253c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002540:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002544:	4a07      	ldr	r2, [pc, #28]	@ (8002564 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002546:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800254a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800254e:	e000      	b.n	8002552 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002550:	bf00      	nop
  }
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000e010 	.word	0xe000e010
 8002564:	46020c00 	.word	0x46020c00

08002568 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800256e:	4b19      	ldr	r3, [pc, #100]	@ (80025d4 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800257a:	2304      	movs	r3, #4
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	e021      	b.n	80025c4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002580:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002586:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800258a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002592:	d011      	beq.n	80025b8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800259a:	d810      	bhi.n	80025be <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025a8:	d003      	beq.n	80025b2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80025aa:	e008      	b.n	80025be <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80025ac:	2300      	movs	r3, #0
 80025ae:	607b      	str	r3, [r7, #4]
        break;
 80025b0:	e008      	b.n	80025c4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80025b2:	2301      	movs	r3, #1
 80025b4:	607b      	str	r3, [r7, #4]
        break;
 80025b6:	e005      	b.n	80025c4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80025b8:	2302      	movs	r3, #2
 80025ba:	607b      	str	r3, [r7, #4]
        break;
 80025bc:	e002      	b.n	80025c4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
        break;
 80025c2:	bf00      	nop
    }
  }
  return systick_source;
 80025c4:	687b      	ldr	r3, [r7, #4]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000e010 	.word	0xe000e010
 80025d8:	46020c00 	.word	0x46020c00

080025dc <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80025e4:	f7ff fa6e 	bl	8001ac4 <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e06b      	b.n	80026cc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d008      	beq.n	8002612 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e05c      	b.n	80026cc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0204 	orr.w	r2, r2, #4
 8002620:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2205      	movs	r2, #5
 8002626:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800262a:	e020      	b.n	800266e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800262c:	f7ff fa4a 	bl	8001ac4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b05      	cmp	r3, #5
 8002638:	d919      	bls.n	800266e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263e:	f043 0210 	orr.w	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2203      	movs	r2, #3
 800264a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800265e:	2201      	movs	r2, #1
 8002660:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e02e      	b.n	80026cc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0d7      	beq.n	800262c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0202 	orr.w	r2, r2, #2
 800268a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2204      	movs	r2, #4
 8002690:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800269c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d007      	beq.n	80026c2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b6:	2201      	movs	r2, #1
 80026b8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e019      	b.n	800271a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d004      	beq.n	80026fc <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e00e      	b.n	800271a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2204      	movs	r2, #4
 8002700:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	@ 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800273a:	e1ba      	b.n	8002ab2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	2101      	movs	r1, #1
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 81aa 	beq.w	8002aac <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a55      	ldr	r2, [pc, #340]	@ (80028b0 <HAL_GPIO_Init+0x188>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d15d      	bne.n	800281c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002766:	2201      	movs	r2, #1
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	4013      	ands	r3, r2
 8002774:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0201 	and.w	r2, r3, #1
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	4313      	orrs	r3, r2
 8002788:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002790:	4a48      	ldr	r2, [pc, #288]	@ (80028b4 <HAL_GPIO_Init+0x18c>)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002798:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800279a:	4a46      	ldr	r2, [pc, #280]	@ (80028b4 <HAL_GPIO_Init+0x18c>)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	08da      	lsrs	r2, r3, #3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	3208      	adds	r2, #8
 80027ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	220f      	movs	r2, #15
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	220b      	movs	r2, #11
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	08da      	lsrs	r2, r3, #3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	3208      	adds	r2, #8
 80027e6:	69f9      	ldr	r1, [r7, #28]
 80027e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	4013      	ands	r3, r2
 8002802:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2202      	movs	r2, #2
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	4313      	orrs	r3, r2
 8002812:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e067      	b.n	80028ec <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x104>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b12      	cmp	r3, #18
 800282a:	d145      	bne.n	80028b8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	08da      	lsrs	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3208      	adds	r2, #8
 8002834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002838:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	220f      	movs	r2, #15
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	4013      	ands	r3, r2
 800284e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f003 020f 	and.w	r2, r3, #15
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	4313      	orrs	r3, r2
 8002868:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	69f9      	ldr	r1, [r7, #28]
 8002874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	4013      	ands	r3, r2
 800288e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0203 	and.w	r2, r3, #3
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e01e      	b.n	80028ec <HAL_GPIO_Init+0x1c4>
 80028ae:	bf00      	nop
 80028b0:	46020000 	.word	0x46020000
 80028b4:	0800ba34 	.word	0x0800ba34
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	2203      	movs	r2, #3
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0203 	and.w	r2, r3, #3
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d00b      	beq.n	800290c <HAL_GPIO_Init+0x1e4>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d007      	beq.n	800290c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002900:	2b11      	cmp	r3, #17
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b12      	cmp	r3, #18
 800290a:	d130      	bne.n	800296e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	4013      	ands	r3, r2
 8002922:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	4313      	orrs	r3, r2
 8002934:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002942:	2201      	movs	r2, #1
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	4013      	ands	r3, r2
 8002950:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f003 0201 	and.w	r2, r3, #1
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	4313      	orrs	r3, r2
 8002966:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d017      	beq.n	80029a6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	2203      	movs	r2, #3
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	4013      	ands	r3, r2
 800298c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	4313      	orrs	r3, r2
 800299e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d07c      	beq.n	8002aac <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80029b2:	4a47      	ldr	r2, [pc, #284]	@ (8002ad0 <HAL_GPIO_Init+0x3a8>)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3318      	adds	r3, #24
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	220f      	movs	r2, #15
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0a9a      	lsrs	r2, r3, #10
 80029da:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad4 <HAL_GPIO_Init+0x3ac>)
 80029dc:	4013      	ands	r3, r2
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	f002 0203 	and.w	r2, r2, #3
 80029e4:	00d2      	lsls	r2, r2, #3
 80029e6:	4093      	lsls	r3, r2
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80029ee:	4938      	ldr	r1, [pc, #224]	@ (8002ad0 <HAL_GPIO_Init+0x3a8>)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	3318      	adds	r3, #24
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80029fc:	4b34      	ldr	r3, [pc, #208]	@ (8002ad0 <HAL_GPIO_Init+0x3a8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002a20:	4a2b      	ldr	r2, [pc, #172]	@ (8002ad0 <HAL_GPIO_Init+0x3a8>)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002a26:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad0 <HAL_GPIO_Init+0x3a8>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002a4a:	4a21      	ldr	r2, [pc, #132]	@ (8002ad0 <HAL_GPIO_Init+0x3a8>)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002a50:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad0 <HAL_GPIO_Init+0x3a8>)
 8002a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a56:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002a76:	4a16      	ldr	r2, [pc, #88]	@ (8002ad0 <HAL_GPIO_Init+0x3a8>)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002a7e:	4b14      	ldr	r3, [pc, #80]	@ (8002ad0 <HAL_GPIO_Init+0x3a8>)
 8002a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a84:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <HAL_GPIO_Init+0x3a8>)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f47f ae3d 	bne.w	800273c <HAL_GPIO_Init+0x14>
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
 8002ac6:	3724      	adds	r7, #36	@ 0x24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	46022000 	.word	0x46022000
 8002ad4:	002f7f7f 	.word	0x002f7f7f

08002ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ae8:	787b      	ldrb	r3, [r7, #1]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002af4:	e002      	b.n	8002afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	e007      	b.n	8002b36 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002b26:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 0204 	bic.w	r2, r3, #4
 8002b2e:	4905      	ldr	r1, [pc, #20]	@ (8002b44 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40030400 	.word	0x40030400

08002b48 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002b4c:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <HAL_ICACHE_Enable+0x1c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a04      	ldr	r2, [pc, #16]	@ (8002b64 <HAL_ICACHE_Enable+0x1c>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40030400 	.word	0x40030400

08002b68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e108      	b.n	8002d8c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d106      	bne.n	8002b9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7fe fd53 	bl	8001640 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4a7b      	ldr	r2, [pc, #492]	@ (8002d94 <HAL_PCD_Init+0x22c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d102      	bne.n	8002bb0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f007 fd19 	bl	800a5ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7c1a      	ldrb	r2, [r3, #16]
 8002bc2:	f88d 2000 	strb.w	r2, [sp]
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bca:	f007 fc40 	bl	800a44e <USB_CoreInit>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0d5      	b.n	8002d8c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f007 fd11 	bl	800a60e <USB_SetCurrentMode>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0c6      	b.n	8002d8c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
 8002c02:	e04a      	b.n	8002c9a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	3315      	adds	r3, #21
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	3314      	adds	r3, #20
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	b298      	uxth	r0, r3
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	332e      	adds	r3, #46	@ 0x2e
 8002c40:	4602      	mov	r2, r0
 8002c42:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	3318      	adds	r3, #24
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	331c      	adds	r3, #28
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	3320      	adds	r3, #32
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3324      	adds	r3, #36	@ 0x24
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	3301      	adds	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	791b      	ldrb	r3, [r3, #4]
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3af      	bcc.n	8002c04 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e044      	b.n	8002d34 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	3301      	adds	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	791b      	ldrb	r3, [r3, #4]
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d3b5      	bcc.n	8002caa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	7c1a      	ldrb	r2, [r3, #16]
 8002d46:	f88d 2000 	strb.w	r2, [sp]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d4e:	f007 fcab 	bl	800a6a8 <USB_DevInit>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e013      	b.n	8002d8c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7b1b      	ldrb	r3, [r3, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d102      	bne.n	8002d80 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 ff3c 	bl	8003bf8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f007 ffb9 	bl	800acfc <USB_DevDisconnect>

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	42040000 	.word	0x42040000

08002d98 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b08d      	sub	sp, #52	@ 0x34
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f008 f858 	bl	800ae64 <USB_GetMode>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f040 84b9 	bne.w	800372e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f007 ffbc 	bl	800ad3e <USB_ReadInterrupts>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 84af 	beq.w	800372c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	0a1b      	lsrs	r3, r3, #8
 8002dd8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f007 ffa9 	bl	800ad3e <USB_ReadInterrupts>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d107      	bne.n	8002e06 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f002 0202 	and.w	r2, r2, #2
 8002e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f007 ff97 	bl	800ad3e <USB_ReadInterrupts>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b10      	cmp	r3, #16
 8002e18:	d161      	bne.n	8002ede <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0210 	bic.w	r2, r2, #16
 8002e28:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	3304      	adds	r3, #4
 8002e48:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	0c5b      	lsrs	r3, r3, #17
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d124      	bne.n	8002ea0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d035      	beq.n	8002ece <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	6a38      	ldr	r0, [r7, #32]
 8002e76:	f007 fee9 	bl	800ac4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e86:	441a      	add	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e98:	441a      	add	r2, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	615a      	str	r2, [r3, #20]
 8002e9e:	e016      	b.n	8002ece <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	0c5b      	lsrs	r3, r3, #17
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	2b06      	cmp	r3, #6
 8002eaa:	d110      	bne.n	8002ece <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	6a38      	ldr	r0, [r7, #32]
 8002eb8:	f007 fec8 	bl	800ac4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec8:	441a      	add	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0210 	orr.w	r2, r2, #16
 8002edc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f007 ff2b 	bl	800ad3e <USB_ReadInterrupts>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ef2:	f040 80a7 	bne.w	8003044 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f007 ff30 	bl	800ad64 <USB_ReadDevAllOutEpInterrupt>
 8002f04:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002f06:	e099      	b.n	800303c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 808e 	beq.w	8003030 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f007 ff54 	bl	800adcc <USB_ReadDevOutEPInterrupt>
 8002f24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00c      	beq.n	8002f4a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2301      	movs	r3, #1
 8002f40:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fd29 	bl	800399c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00c      	beq.n	8002f6e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f60:	461a      	mov	r2, r3
 8002f62:	2308      	movs	r3, #8
 8002f64:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 fdff 	bl	8003b6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f84:	461a      	mov	r2, r3
 8002f86:	2310      	movs	r3, #16
 8002f88:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d030      	beq.n	8002ff6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9c:	2b80      	cmp	r3, #128	@ 0x80
 8002f9e:	d109      	bne.n	8002fb4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fb2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	78db      	ldrb	r3, [r3, #3]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d108      	bne.n	8002fe4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	4619      	mov	r1, r3
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fbf2 	bl	80037c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	4413      	add	r3, r2
 8003008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800300c:	461a      	mov	r2, r3
 800300e:	2320      	movs	r3, #32
 8003010:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003028:	461a      	mov	r2, r3
 800302a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800302e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	3301      	adds	r3, #1
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800303c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303e:	2b00      	cmp	r3, #0
 8003040:	f47f af62 	bne.w	8002f08 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f007 fe78 	bl	800ad3e <USB_ReadInterrupts>
 800304e:	4603      	mov	r3, r0
 8003050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003054:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003058:	f040 80db 	bne.w	8003212 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f007 fe99 	bl	800ad98 <USB_ReadDevAllInEpInterrupt>
 8003066:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800306c:	e0cd      	b.n	800320a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800306e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80c2 	beq.w	80031fe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f007 febf 	bl	800ae08 <USB_ReadDevInEPInterrupt>
 800308a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d057      	beq.n	8003146 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	2201      	movs	r2, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69f9      	ldr	r1, [r7, #28]
 80030b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030b6:	4013      	ands	r3, r2
 80030b8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030c6:	461a      	mov	r2, r3
 80030c8:	2301      	movs	r3, #1
 80030ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	799b      	ldrb	r3, [r3, #6]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d132      	bne.n	800313a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3320      	adds	r3, #32
 80030e4:	6819      	ldr	r1, [r3, #0]
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4403      	add	r3, r0
 80030f4:	331c      	adds	r3, #28
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4419      	add	r1, r3
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4403      	add	r3, r0
 8003108:	3320      	adds	r3, #32
 800310a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	2b00      	cmp	r3, #0
 8003110:	d113      	bne.n	800313a <HAL_PCD_IRQHandler+0x3a2>
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	3324      	adds	r3, #36	@ 0x24
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d108      	bne.n	800313a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003132:	461a      	mov	r2, r3
 8003134:	2101      	movs	r1, #1
 8003136:	f007 fec7 	bl	800aec8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	b2db      	uxtb	r3, r3
 800313e:	4619      	mov	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fb03 	bl	800374c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800315c:	461a      	mov	r2, r3
 800315e:	2308      	movs	r3, #8
 8003160:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800316c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	4413      	add	r3, r2
 8003174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003178:	461a      	mov	r2, r3
 800317a:	2310      	movs	r3, #16
 800317c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003194:	461a      	mov	r2, r3
 8003196:	2340      	movs	r3, #64	@ 0x40
 8003198:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d023      	beq.n	80031ec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031a6:	6a38      	ldr	r0, [r7, #32]
 80031a8:	f007 fbca 	bl	800a940 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	3310      	adds	r3, #16
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	4413      	add	r3, r2
 80031bc:	3304      	adds	r3, #4
 80031be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	78db      	ldrb	r3, [r3, #3]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d108      	bne.n	80031da <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2200      	movs	r2, #0
 80031cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	4619      	mov	r1, r3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fb03 	bl	80037e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031e6:	461a      	mov	r2, r3
 80031e8:	2302      	movs	r3, #2
 80031ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fb42 	bl	8003882 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	3301      	adds	r3, #1
 8003202:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800320a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320c:	2b00      	cmp	r3, #0
 800320e:	f47f af2e 	bne.w	800306e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f007 fd91 	bl	800ad3e <USB_ReadInterrupts>
 800321c:	4603      	mov	r3, r0
 800321e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003222:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003226:	d122      	bne.n	800326e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003242:	2b01      	cmp	r3, #1
 8003244:	d108      	bne.n	8003258 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800324e:	2100      	movs	r1, #0
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fcf5 	bl	8003c40 <HAL_PCDEx_LPM_Callback>
 8003256:	e002      	b.n	800325e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 faab 	bl	80037b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800326c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f007 fd63 	bl	800ad3e <USB_ReadInterrupts>
 8003278:	4603      	mov	r3, r0
 800327a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800327e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003282:	d112      	bne.n	80032aa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d102      	bne.n	800329a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fa83 	bl	80037a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80032a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f007 fd45 	bl	800ad3e <USB_ReadInterrupts>
 80032b4:	4603      	mov	r3, r0
 80032b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032be:	d121      	bne.n	8003304 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80032ce:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d111      	bne.n	80032fe <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	f003 020f 	and.w	r2, r3, #15
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80032f4:	2101      	movs	r1, #1
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fca2 	bl	8003c40 <HAL_PCDEx_LPM_Callback>
 80032fc:	e002      	b.n	8003304 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa4e 	bl	80037a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f007 fd18 	bl	800ad3e <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003318:	f040 80b7 	bne.w	800348a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2110      	movs	r1, #16
 8003336:	4618      	mov	r0, r3
 8003338:	f007 fb02 	bl	800a940 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333c:	2300      	movs	r3, #0
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003340:	e046      	b.n	80033d0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800334e:	461a      	mov	r2, r3
 8003350:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003354:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003366:	0151      	lsls	r1, r2, #5
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	440a      	add	r2, r1
 800336c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003370:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003374:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003382:	461a      	mov	r2, r3
 8003384:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003388:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800338a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800339a:	0151      	lsls	r1, r2, #5
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	440a      	add	r2, r1
 80033a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ba:	0151      	lsls	r1, r2, #5
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	440a      	add	r2, r1
 80033c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033cc:	3301      	adds	r3, #1
 80033ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	791b      	ldrb	r3, [r3, #4]
 80033d4:	461a      	mov	r2, r3
 80033d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d8:	4293      	cmp	r3, r2
 80033da:	d3b2      	bcc.n	8003342 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033ea:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80033ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7bdb      	ldrb	r3, [r3, #15]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d016      	beq.n	8003426 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003408:	f043 030b 	orr.w	r3, r3, #11
 800340c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800341e:	f043 030b 	orr.w	r3, r3, #11
 8003422:	6453      	str	r3, [r2, #68]	@ 0x44
 8003424:	e015      	b.n	8003452 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003434:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003438:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800343c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800344c:	f043 030b 	orr.w	r3, r3, #11
 8003450:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003460:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003464:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003474:	461a      	mov	r2, r3
 8003476:	f007 fd27 	bl	800aec8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003488:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f007 fc55 	bl	800ad3e <USB_ReadInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800349a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800349e:	d123      	bne.n	80034e8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f007 fceb 	bl	800ae80 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f007 fabf 	bl	800aa32 <USB_GetDevSpeed>
 80034b4:	4603      	mov	r3, r0
 80034b6:	461a      	mov	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681c      	ldr	r4, [r3, #0]
 80034c0:	f001 fea6 	bl	8005210 <HAL_RCC_GetHCLKFreq>
 80034c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034ca:	461a      	mov	r2, r3
 80034cc:	4620      	mov	r0, r4
 80034ce:	f006 ffeb 	bl	800a4a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f95a 	bl	800378c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80034e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f007 fc26 	bl	800ad3e <USB_ReadInterrupts>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d10a      	bne.n	8003512 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f93b 	bl	8003778 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f002 0208 	and.w	r2, r2, #8
 8003510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f007 fc11 	bl	800ad3e <USB_ReadInterrupts>
 800351c:	4603      	mov	r3, r0
 800351e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003522:	2b80      	cmp	r3, #128	@ 0x80
 8003524:	d123      	bne.n	800356e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003532:	2301      	movs	r3, #1
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
 8003536:	e014      	b.n	8003562 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d105      	bne.n	800355c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	b2db      	uxtb	r3, r3
 8003554:	4619      	mov	r1, r3
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f962 	bl	8003820 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	3301      	adds	r3, #1
 8003560:	627b      	str	r3, [r7, #36]	@ 0x24
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	791b      	ldrb	r3, [r3, #4]
 8003566:	461a      	mov	r2, r3
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	4293      	cmp	r3, r2
 800356c:	d3e4      	bcc.n	8003538 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f007 fbe3 	bl	800ad3e <USB_ReadInterrupts>
 8003578:	4603      	mov	r3, r0
 800357a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800357e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003582:	d13c      	bne.n	80035fe <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003584:	2301      	movs	r3, #1
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
 8003588:	e02b      	b.n	80035e2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	3318      	adds	r3, #24
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d115      	bne.n	80035dc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	da12      	bge.n	80035dc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3317      	adds	r3, #23
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	4619      	mov	r1, r3
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f922 	bl	8003820 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	3301      	adds	r3, #1
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	791b      	ldrb	r3, [r3, #4]
 80035e6:	461a      	mov	r2, r3
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d3cd      	bcc.n	800358a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80035fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f007 fb9b 	bl	800ad3e <USB_ReadInterrupts>
 8003608:	4603      	mov	r3, r0
 800360a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800360e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003612:	d156      	bne.n	80036c2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003614:	2301      	movs	r3, #1
 8003616:	627b      	str	r3, [r7, #36]	@ 0x24
 8003618:	e045      	b.n	80036a6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d12e      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003642:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003644:	2b00      	cmp	r3, #0
 8003646:	da2b      	bge.n	80036a0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003654:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003658:	429a      	cmp	r2, r3
 800365a:	d121      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003698:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800369c:	6053      	str	r3, [r2, #4]
            break;
 800369e:	e008      	b.n	80036b2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a2:	3301      	adds	r3, #1
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	791b      	ldrb	r3, [r3, #4]
 80036aa:	461a      	mov	r2, r3
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d3b3      	bcc.n	800361a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80036c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f007 fb39 	bl	800ad3e <USB_ReadInterrupts>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80036d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d6:	d10a      	bne.n	80036ee <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f88d 	bl	80037f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80036ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f007 fb23 	bl	800ad3e <USB_ReadInterrupts>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d115      	bne.n	800372e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f879 	bl	800380c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6859      	ldr	r1, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	e000      	b.n	800372e <HAL_PCD_IRQHandler+0x996>
      return;
 800372c:	bf00      	nop
    }
  }
}
 800372e:	3734      	adds	r7, #52	@ 0x34
 8003730:	46bd      	mov	sp, r7
 8003732:	bd90      	pop	{r4, r7, pc}

08003734 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800382c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003830:	2b00      	cmp	r3, #0
 8003832:	da0c      	bge.n	800384e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	f003 020f 	and.w	r2, r3, #15
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	3310      	adds	r3, #16
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4413      	add	r3, r2
 8003848:	3304      	adds	r3, #4
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e00c      	b.n	8003868 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	f003 020f 	and.w	r2, r3, #15
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4413      	add	r3, r2
 8003864:	3304      	adds	r3, #4
 8003866:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68f9      	ldr	r1, [r7, #12]
 800386e:	4618      	mov	r0, r3
 8003870:	f007 f904 	bl	800aa7c <USB_EPStopXfer>
 8003874:	4603      	mov	r3, r0
 8003876:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003878:	7afb      	ldrb	r3, [r7, #11]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b08a      	sub	sp, #40	@ 0x28
 8003886:	af02      	add	r7, sp, #8
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	3310      	adds	r3, #16
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	3304      	adds	r3, #4
 80038a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d901      	bls.n	80038ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e06b      	b.n	8003992 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d902      	bls.n	80038d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3303      	adds	r3, #3
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038de:	e02a      	b.n	8003936 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d902      	bls.n	80038fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	3303      	adds	r3, #3
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	68d9      	ldr	r1, [r3, #12]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	4603      	mov	r3, r0
 8003918:	6978      	ldr	r0, [r7, #20]
 800391a:	f007 f959 	bl	800abd0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	441a      	add	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	441a      	add	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	429a      	cmp	r2, r3
 800394a:	d809      	bhi.n	8003960 <PCD_WriteEmptyTxFifo+0xde>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003954:	429a      	cmp	r2, r3
 8003956:	d203      	bcs.n	8003960 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1bf      	bne.n	80038e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	429a      	cmp	r2, r3
 800396a:	d811      	bhi.n	8003990 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	2201      	movs	r2, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003980:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	43db      	mvns	r3, r3
 8003986:	6939      	ldr	r1, [r7, #16]
 8003988:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800398c:	4013      	ands	r3, r2
 800398e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	333c      	adds	r3, #60	@ 0x3c
 80039b4:	3304      	adds	r3, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	799b      	ldrb	r3, [r3, #6]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d17b      	bne.n	8003aca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d015      	beq.n	8003a08 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	4a61      	ldr	r2, [pc, #388]	@ (8003b64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	f240 80b9 	bls.w	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80b3 	beq.w	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039fe:	461a      	mov	r2, r3
 8003a00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a04:	6093      	str	r3, [r2, #8]
 8003a06:	e0a7      	b.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2320      	movs	r3, #32
 8003a22:	6093      	str	r3, [r2, #8]
 8003a24:	e098      	b.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f040 8093 	bne.w	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	4a4b      	ldr	r2, [pc, #300]	@ (8003b64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d90f      	bls.n	8003a5a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a50:	461a      	mov	r2, r3
 8003a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a56:	6093      	str	r3, [r2, #8]
 8003a58:	e07e      	b.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1a      	ldr	r2, [r3, #32]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	0159      	lsls	r1, r3, #5
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	440b      	add	r3, r1
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a86:	1ad2      	subs	r2, r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d114      	bne.n	8003abc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	f007 fa0e 	bl	800aec8 <USB_EP0_OutStart>
 8003aac:	e006      	b.n	8003abc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	441a      	add	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff fe36 	bl	8003734 <HAL_PCD_DataOutStageCallback>
 8003ac8:	e046      	b.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	4a26      	ldr	r2, [pc, #152]	@ (8003b68 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d124      	bne.n	8003b1c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aee:	6093      	str	r3, [r2, #8]
 8003af0:	e032      	b.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2320      	movs	r3, #32
 8003b0c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff fe0d 	bl	8003734 <HAL_PCD_DataOutStageCallback>
 8003b1a:	e01d      	b.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d114      	bne.n	8003b4c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b44:	461a      	mov	r2, r3
 8003b46:	2100      	movs	r1, #0
 8003b48:	f007 f9be 	bl	800aec8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff fdee 	bl	8003734 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	4f54300a 	.word	0x4f54300a
 8003b68:	4f54310a 	.word	0x4f54310a

08003b6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	333c      	adds	r3, #60	@ 0x3c
 8003b84:	3304      	adds	r3, #4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a15      	ldr	r2, [pc, #84]	@ (8003bf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d90e      	bls.n	8003bc0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bbe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff fdcf 	bl	8003764 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d90c      	bls.n	8003be8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	799b      	ldrb	r3, [r3, #6]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d108      	bne.n	8003be8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003be0:	461a      	mov	r2, r3
 8003be2:	2101      	movs	r1, #1
 8003be4:	f007 f970 	bl	800aec8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	4f54300a 	.word	0x4f54300a

08003bf8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c2a:	f043 0303 	orr.w	r3, r3, #3
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003c60:	4b39      	ldr	r3, [pc, #228]	@ (8003d48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c68:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d10b      	bne.n	8003c8a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c78:	d905      	bls.n	8003c86 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003c7a:	4b33      	ldr	r3, [pc, #204]	@ (8003d48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	4a32      	ldr	r2, [pc, #200]	@ (8003d48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c84:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e057      	b.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c90:	d90a      	bls.n	8003ca8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003c92:	4b2d      	ldr	r3, [pc, #180]	@ (8003d48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003d48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ca4:	60d3      	str	r3, [r2, #12]
 8003ca6:	e007      	b.n	8003cb8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003ca8:	4b27      	ldr	r3, [pc, #156]	@ (8003d48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003cb0:	4925      	ldr	r1, [pc, #148]	@ (8003d48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003cb8:	4b24      	ldr	r3, [pc, #144]	@ (8003d4c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a24      	ldr	r2, [pc, #144]	@ (8003d50 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	099b      	lsrs	r3, r3, #6
 8003cc4:	2232      	movs	r2, #50	@ 0x32
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	4a21      	ldr	r2, [pc, #132]	@ (8003d50 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	099b      	lsrs	r3, r3, #6
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003cd6:	e002      	b.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003cde:	4b1a      	ldr	r3, [pc, #104]	@ (8003d48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f3      	bne.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01b      	beq.n	8003d2e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003cf6:	4b15      	ldr	r3, [pc, #84]	@ (8003d4c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a15      	ldr	r2, [pc, #84]	@ (8003d50 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	2232      	movs	r2, #50	@ 0x32
 8003d04:	fb02 f303 	mul.w	r3, r2, r3
 8003d08:	4a11      	ldr	r2, [pc, #68]	@ (8003d50 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	099b      	lsrs	r3, r3, #6
 8003d10:	3301      	adds	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003d14:	e002      	b.n	8003d1c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d102      	bne.n	8003d2e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f3      	bne.n	8003d16 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e000      	b.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	46020800 	.word	0x46020800
 8003d4c:	20000010 	.word	0x20000010
 8003d50:	10624dd3 	.word	0x10624dd3

08003d54 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003d58:	4b04      	ldr	r3, [pc, #16]	@ (8003d6c <HAL_PWREx_GetVoltageRange+0x18>)
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	46020800 	.word	0x46020800

08003d70 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003d78:	4b22      	ldr	r3, [pc, #136]	@ (8003e04 <HAL_PWREx_ConfigSupply+0x94>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a22      	ldr	r2, [pc, #136]	@ (8003e08 <HAL_PWREx_ConfigSupply+0x98>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	099b      	lsrs	r3, r3, #6
 8003d84:	2232      	movs	r2, #50	@ 0x32
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e08 <HAL_PWREx_ConfigSupply+0x98>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	099b      	lsrs	r3, r3, #6
 8003d92:	3301      	adds	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d113      	bne.n	8003dc4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e0c <HAL_PWREx_ConfigSupply+0x9c>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e0c <HAL_PWREx_ConfigSupply+0x9c>)
 8003da2:	f023 0302 	bic.w	r3, r3, #2
 8003da6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003da8:	e002      	b.n	8003db0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003db0:	4b16      	ldr	r3, [pc, #88]	@ (8003e0c <HAL_PWREx_ConfigSupply+0x9c>)
 8003db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d116      	bne.n	8003dea <HAL_PWREx_ConfigSupply+0x7a>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f3      	bne.n	8003daa <HAL_PWREx_ConfigSupply+0x3a>
 8003dc2:	e012      	b.n	8003dea <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003dc4:	4b11      	ldr	r3, [pc, #68]	@ (8003e0c <HAL_PWREx_ConfigSupply+0x9c>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4a10      	ldr	r2, [pc, #64]	@ (8003e0c <HAL_PWREx_ConfigSupply+0x9c>)
 8003dca:	f043 0302 	orr.w	r3, r3, #2
 8003dce:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003dd0:	e002      	b.n	8003dd8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e0c <HAL_PWREx_ConfigSupply+0x9c>)
 8003dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <HAL_PWREx_ConfigSupply+0x7a>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f3      	bne.n	8003dd2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e000      	b.n	8003df6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000010 	.word	0x20000010
 8003e08:	10624dd3 	.word	0x10624dd3
 8003e0c:	46020800 	.word	0x46020800

08003e10 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003e14:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	4a04      	ldr	r2, [pc, #16]	@ (8003e2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e1e:	6113      	str	r3, [r2, #16]
}
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	46020800 	.word	0x46020800

08003e30 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003e34:	4b05      	ldr	r3, [pc, #20]	@ (8003e4c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	4a04      	ldr	r2, [pc, #16]	@ (8003e4c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003e3e:	6113      	str	r3, [r2, #16]
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	46020800 	.word	0x46020800

08003e50 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003e54:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <HAL_PWREx_EnableVddA+0x1c>)
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	4a04      	ldr	r2, [pc, #16]	@ (8003e6c <HAL_PWREx_EnableVddA+0x1c>)
 8003e5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e5e:	6113      	str	r3, [r2, #16]
}
 8003e60:	bf00      	nop
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	46020800 	.word	0x46020800

08003e70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08e      	sub	sp, #56	@ 0x38
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d102      	bne.n	8003e8a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	f000 bec8 	b.w	8004c1a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e8a:	4b99      	ldr	r3, [pc, #612]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e94:	4b96      	ldr	r3, [pc, #600]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 816c 	beq.w	8004184 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x52>
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	f040 80de 	bne.w	8004076 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	f040 80da 	bne.w	8004076 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f000 bea5 	b.w	8004c1a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ed4:	4b86      	ldr	r3, [pc, #536]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <HAL_RCC_OscConfig+0x7a>
 8003ee0:	4b83      	ldr	r3, [pc, #524]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003ee8:	e005      	b.n	8003ef6 <HAL_RCC_OscConfig+0x86>
 8003eea:	4b81      	ldr	r3, [pc, #516]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003eec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d255      	bcs.n	8003fa6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 f9d9 	bl	80052bc <RCC_SetFlashLatencyFromMSIRange>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f000 be82 	b.w	8004c1a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003f16:	4b76      	ldr	r3, [pc, #472]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	4a75      	ldr	r2, [pc, #468]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003f1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f20:	6093      	str	r3, [r2, #8]
 8003f22:	4b73      	ldr	r3, [pc, #460]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	4970      	ldr	r1, [pc, #448]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003f3c:	d309      	bcc.n	8003f52 <HAL_RCC_OscConfig+0xe2>
 8003f3e:	4b6c      	ldr	r3, [pc, #432]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f023 021f 	bic.w	r2, r3, #31
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	4969      	ldr	r1, [pc, #420]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60cb      	str	r3, [r1, #12]
 8003f50:	e07e      	b.n	8004050 <HAL_RCC_OscConfig+0x1e0>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	da0a      	bge.n	8003f70 <HAL_RCC_OscConfig+0x100>
 8003f5a:	4b65      	ldr	r3, [pc, #404]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	015b      	lsls	r3, r3, #5
 8003f68:	4961      	ldr	r1, [pc, #388]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60cb      	str	r3, [r1, #12]
 8003f6e:	e06f      	b.n	8004050 <HAL_RCC_OscConfig+0x1e0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f78:	d30a      	bcc.n	8003f90 <HAL_RCC_OscConfig+0x120>
 8003f7a:	4b5d      	ldr	r3, [pc, #372]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	029b      	lsls	r3, r3, #10
 8003f88:	4959      	ldr	r1, [pc, #356]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60cb      	str	r3, [r1, #12]
 8003f8e:	e05f      	b.n	8004050 <HAL_RCC_OscConfig+0x1e0>
 8003f90:	4b57      	ldr	r3, [pc, #348]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	03db      	lsls	r3, r3, #15
 8003f9e:	4954      	ldr	r1, [pc, #336]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60cb      	str	r3, [r1, #12]
 8003fa4:	e054      	b.n	8004050 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003fa6:	4b52      	ldr	r3, [pc, #328]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	4a51      	ldr	r2, [pc, #324]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003fac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003fb0:	6093      	str	r3, [r2, #8]
 8003fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	494c      	ldr	r1, [pc, #304]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003fcc:	d309      	bcc.n	8003fe2 <HAL_RCC_OscConfig+0x172>
 8003fce:	4b48      	ldr	r3, [pc, #288]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f023 021f 	bic.w	r2, r3, #31
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	4945      	ldr	r1, [pc, #276]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60cb      	str	r3, [r1, #12]
 8003fe0:	e028      	b.n	8004034 <HAL_RCC_OscConfig+0x1c4>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	da0a      	bge.n	8004000 <HAL_RCC_OscConfig+0x190>
 8003fea:	4b41      	ldr	r3, [pc, #260]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	015b      	lsls	r3, r3, #5
 8003ff8:	493d      	ldr	r1, [pc, #244]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60cb      	str	r3, [r1, #12]
 8003ffe:	e019      	b.n	8004034 <HAL_RCC_OscConfig+0x1c4>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004008:	d30a      	bcc.n	8004020 <HAL_RCC_OscConfig+0x1b0>
 800400a:	4b39      	ldr	r3, [pc, #228]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	029b      	lsls	r3, r3, #10
 8004018:	4935      	ldr	r1, [pc, #212]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 800401a:	4313      	orrs	r3, r2
 800401c:	60cb      	str	r3, [r1, #12]
 800401e:	e009      	b.n	8004034 <HAL_RCC_OscConfig+0x1c4>
 8004020:	4b33      	ldr	r3, [pc, #204]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	03db      	lsls	r3, r3, #15
 800402e:	4930      	ldr	r1, [pc, #192]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8004030:	4313      	orrs	r3, r2
 8004032:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403e:	4618      	mov	r0, r3
 8004040:	f001 f93c 	bl	80052bc <RCC_SetFlashLatencyFromMSIRange>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f000 bde5 	b.w	8004c1a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004050:	f001 f8de 	bl	8005210 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004054:	4b27      	ldr	r3, [pc, #156]	@ (80040f4 <HAL_RCC_OscConfig+0x284>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fd fca9 	bl	80019b0 <HAL_InitTick>
 800405e:	4603      	mov	r3, r0
 8004060:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 808a 	beq.w	8004182 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800406e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004072:	f000 bdd2 	b.w	8004c1a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d066      	beq.n	800414c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800407e:	4b1c      	ldr	r3, [pc, #112]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1b      	ldr	r2, [pc, #108]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800408a:	f7fd fd1b 	bl	8001ac4 <HAL_GetTick>
 800408e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004090:	e009      	b.n	80040a6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004092:	f7fd fd17 	bl	8001ac4 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d902      	bls.n	80040a6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	f000 bdba 	b.w	8004c1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80040a6:	4b12      	ldr	r3, [pc, #72]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0ef      	beq.n	8004092 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80040b2:	4b0f      	ldr	r3, [pc, #60]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	4a0e      	ldr	r2, [pc, #56]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 80040b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040bc:	6093      	str	r3, [r2, #8]
 80040be:	4b0c      	ldr	r3, [pc, #48]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	4909      	ldr	r1, [pc, #36]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80040d8:	d30e      	bcc.n	80040f8 <HAL_RCC_OscConfig+0x288>
 80040da:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f023 021f 	bic.w	r2, r3, #31
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4902      	ldr	r1, [pc, #8]	@ (80040f0 <HAL_RCC_OscConfig+0x280>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60cb      	str	r3, [r1, #12]
 80040ec:	e04a      	b.n	8004184 <HAL_RCC_OscConfig+0x314>
 80040ee:	bf00      	nop
 80040f0:	46020c00 	.word	0x46020c00
 80040f4:	20000014 	.word	0x20000014
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	da0a      	bge.n	8004116 <HAL_RCC_OscConfig+0x2a6>
 8004100:	4b98      	ldr	r3, [pc, #608]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	015b      	lsls	r3, r3, #5
 800410e:	4995      	ldr	r1, [pc, #596]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004110:	4313      	orrs	r3, r2
 8004112:	60cb      	str	r3, [r1, #12]
 8004114:	e036      	b.n	8004184 <HAL_RCC_OscConfig+0x314>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800411e:	d30a      	bcc.n	8004136 <HAL_RCC_OscConfig+0x2c6>
 8004120:	4b90      	ldr	r3, [pc, #576]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	029b      	lsls	r3, r3, #10
 800412e:	498d      	ldr	r1, [pc, #564]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004130:	4313      	orrs	r3, r2
 8004132:	60cb      	str	r3, [r1, #12]
 8004134:	e026      	b.n	8004184 <HAL_RCC_OscConfig+0x314>
 8004136:	4b8b      	ldr	r3, [pc, #556]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	03db      	lsls	r3, r3, #15
 8004144:	4987      	ldr	r1, [pc, #540]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	60cb      	str	r3, [r1, #12]
 800414a:	e01b      	b.n	8004184 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800414c:	4b85      	ldr	r3, [pc, #532]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a84      	ldr	r2, [pc, #528]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004158:	f7fd fcb4 	bl	8001ac4 <HAL_GetTick>
 800415c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800415e:	e009      	b.n	8004174 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004160:	f7fd fcb0 	bl	8001ac4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d902      	bls.n	8004174 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	f000 bd53 	b.w	8004c1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004174:	4b7b      	ldr	r3, [pc, #492]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1ef      	bne.n	8004160 <HAL_RCC_OscConfig+0x2f0>
 8004180:	e000      	b.n	8004184 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004182:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 808b 	beq.w	80042a8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004194:	2b08      	cmp	r3, #8
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_OscConfig+0x334>
 8004198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419a:	2b0c      	cmp	r3, #12
 800419c:	d109      	bne.n	80041b2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800419e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d17d      	bne.n	80042a8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	f000 bd34 	b.w	8004c1a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ba:	d106      	bne.n	80041ca <HAL_RCC_OscConfig+0x35a>
 80041bc:	4b69      	ldr	r3, [pc, #420]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a68      	ldr	r2, [pc, #416]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 80041c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	e041      	b.n	800424e <HAL_RCC_OscConfig+0x3de>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041d2:	d112      	bne.n	80041fa <HAL_RCC_OscConfig+0x38a>
 80041d4:	4b63      	ldr	r3, [pc, #396]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a62      	ldr	r2, [pc, #392]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 80041da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b60      	ldr	r3, [pc, #384]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a5f      	ldr	r2, [pc, #380]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 80041e6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b5d      	ldr	r3, [pc, #372]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a5c      	ldr	r2, [pc, #368]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 80041f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	e029      	b.n	800424e <HAL_RCC_OscConfig+0x3de>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004202:	d112      	bne.n	800422a <HAL_RCC_OscConfig+0x3ba>
 8004204:	4b57      	ldr	r3, [pc, #348]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a56      	ldr	r2, [pc, #344]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 800420a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	4b54      	ldr	r3, [pc, #336]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a53      	ldr	r2, [pc, #332]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	4b51      	ldr	r3, [pc, #324]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a50      	ldr	r2, [pc, #320]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	e011      	b.n	800424e <HAL_RCC_OscConfig+0x3de>
 800422a:	4b4e      	ldr	r3, [pc, #312]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a4d      	ldr	r2, [pc, #308]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b4b      	ldr	r3, [pc, #300]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a4a      	ldr	r2, [pc, #296]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 800423c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	4b48      	ldr	r3, [pc, #288]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a47      	ldr	r2, [pc, #284]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004248:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800424c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d014      	beq.n	8004280 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004256:	f7fd fc35 	bl	8001ac4 <HAL_GetTick>
 800425a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800425c:	e009      	b.n	8004272 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800425e:	f7fd fc31 	bl	8001ac4 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b64      	cmp	r3, #100	@ 0x64
 800426a:	d902      	bls.n	8004272 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	f000 bcd4 	b.w	8004c1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004272:	4b3c      	ldr	r3, [pc, #240]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0ef      	beq.n	800425e <HAL_RCC_OscConfig+0x3ee>
 800427e:	e013      	b.n	80042a8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004280:	f7fd fc20 	bl	8001ac4 <HAL_GetTick>
 8004284:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004286:	e009      	b.n	800429c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004288:	f7fd fc1c 	bl	8001ac4 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	@ 0x64
 8004294:	d902      	bls.n	800429c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	f000 bcbf 	b.w	8004c1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800429c:	4b31      	ldr	r3, [pc, #196]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1ef      	bne.n	8004288 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d05f      	beq.n	8004374 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80042b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d005      	beq.n	80042c6 <HAL_RCC_OscConfig+0x456>
 80042ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042bc:	2b0c      	cmp	r3, #12
 80042be:	d114      	bne.n	80042ea <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d111      	bne.n	80042ea <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f000 bca3 	b.w	8004c1a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80042d4:	4b23      	ldr	r3, [pc, #140]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	4920      	ldr	r1, [pc, #128]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042e8:	e044      	b.n	8004374 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d024      	beq.n	800433c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80042f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 80042f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042fc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042fe:	f7fd fbe1 	bl	8001ac4 <HAL_GetTick>
 8004302:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004304:	e009      	b.n	800431a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004306:	f7fd fbdd 	bl	8001ac4 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d902      	bls.n	800431a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	f000 bc80 	b.w	8004c1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800431a:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0ef      	beq.n	8004306 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004326:	4b0f      	ldr	r3, [pc, #60]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	490b      	ldr	r1, [pc, #44]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004336:	4313      	orrs	r3, r2
 8004338:	610b      	str	r3, [r1, #16]
 800433a:	e01b      	b.n	8004374 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800433c:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a08      	ldr	r2, [pc, #32]	@ (8004364 <HAL_RCC_OscConfig+0x4f4>)
 8004342:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004346:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004348:	f7fd fbbc 	bl	8001ac4 <HAL_GetTick>
 800434c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800434e:	e00b      	b.n	8004368 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004350:	f7fd fbb8 	bl	8001ac4 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d904      	bls.n	8004368 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	f000 bc5b 	b.w	8004c1a <HAL_RCC_OscConfig+0xdaa>
 8004364:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004368:	4baf      	ldr	r3, [pc, #700]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1ed      	bne.n	8004350 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80c8 	beq.w	8004512 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004382:	2300      	movs	r3, #0
 8004384:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004388:	4ba7      	ldr	r3, [pc, #668]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 800438a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b00      	cmp	r3, #0
 8004394:	d111      	bne.n	80043ba <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004396:	4ba4      	ldr	r3, [pc, #656]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 8004398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800439c:	4aa2      	ldr	r2, [pc, #648]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 800439e:	f043 0304 	orr.w	r3, r3, #4
 80043a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80043a6:	4ba0      	ldr	r3, [pc, #640]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80043a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80043b4:	2301      	movs	r3, #1
 80043b6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80043ba:	4b9c      	ldr	r3, [pc, #624]	@ (800462c <HAL_RCC_OscConfig+0x7bc>)
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d119      	bne.n	80043fa <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80043c6:	4b99      	ldr	r3, [pc, #612]	@ (800462c <HAL_RCC_OscConfig+0x7bc>)
 80043c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ca:	4a98      	ldr	r2, [pc, #608]	@ (800462c <HAL_RCC_OscConfig+0x7bc>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043d2:	f7fd fb77 	bl	8001ac4 <HAL_GetTick>
 80043d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80043d8:	e009      	b.n	80043ee <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043da:	f7fd fb73 	bl	8001ac4 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d902      	bls.n	80043ee <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	f000 bc16 	b.w	8004c1a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80043ee:	4b8f      	ldr	r3, [pc, #572]	@ (800462c <HAL_RCC_OscConfig+0x7bc>)
 80043f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0ef      	beq.n	80043da <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d05f      	beq.n	80044c2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004402:	4b89      	ldr	r3, [pc, #548]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 8004404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004408:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699a      	ldr	r2, [r3, #24]
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004414:	429a      	cmp	r2, r3
 8004416:	d037      	beq.n	8004488 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d006      	beq.n	8004430 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e3f4      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d01b      	beq.n	8004472 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800443a:	4b7b      	ldr	r3, [pc, #492]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 800443c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004440:	4a79      	ldr	r2, [pc, #484]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 8004442:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004446:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800444a:	f7fd fb3b 	bl	8001ac4 <HAL_GetTick>
 800444e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004452:	f7fd fb37 	bl	8001ac4 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b05      	cmp	r3, #5
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e3da      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004464:	4b70      	ldr	r3, [pc, #448]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 8004466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800446a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1ef      	bne.n	8004452 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004472:	4b6d      	ldr	r3, [pc, #436]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 8004474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004478:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	4969      	ldr	r1, [pc, #420]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004488:	4b67      	ldr	r3, [pc, #412]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 800448a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800448e:	4a66      	ldr	r2, [pc, #408]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 8004490:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004494:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004498:	f7fd fb14 	bl	8001ac4 <HAL_GetTick>
 800449c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a0:	f7fd fb10 	bl	8001ac4 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b05      	cmp	r3, #5
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e3b3      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80044b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80044b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ef      	beq.n	80044a0 <HAL_RCC_OscConfig+0x630>
 80044c0:	e01b      	b.n	80044fa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80044c2:	4b59      	ldr	r3, [pc, #356]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80044c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044c8:	4a57      	ldr	r2, [pc, #348]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80044ca:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80044ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80044d2:	f7fd faf7 	bl	8001ac4 <HAL_GetTick>
 80044d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044da:	f7fd faf3 	bl	8001ac4 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b05      	cmp	r3, #5
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e396      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80044ec:	4b4e      	ldr	r3, [pc, #312]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80044ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1ef      	bne.n	80044da <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044fa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d107      	bne.n	8004512 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004502:	4b49      	ldr	r3, [pc, #292]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 8004504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004508:	4a47      	ldr	r2, [pc, #284]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 800450a:	f023 0304 	bic.w	r3, r3, #4
 800450e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8111 	beq.w	8004742 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004520:	2300      	movs	r3, #0
 8004522:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004526:	4b40      	ldr	r3, [pc, #256]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 8004528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d111      	bne.n	8004558 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004534:	4b3c      	ldr	r3, [pc, #240]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 8004536:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800453a:	4a3b      	ldr	r2, [pc, #236]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 800453c:	f043 0304 	orr.w	r3, r3, #4
 8004540:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004544:	4b38      	ldr	r3, [pc, #224]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 8004546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004552:	2301      	movs	r3, #1
 8004554:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004558:	4b34      	ldr	r3, [pc, #208]	@ (800462c <HAL_RCC_OscConfig+0x7bc>)
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d118      	bne.n	8004596 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004564:	4b31      	ldr	r3, [pc, #196]	@ (800462c <HAL_RCC_OscConfig+0x7bc>)
 8004566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004568:	4a30      	ldr	r2, [pc, #192]	@ (800462c <HAL_RCC_OscConfig+0x7bc>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004570:	f7fd faa8 	bl	8001ac4 <HAL_GetTick>
 8004574:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004578:	f7fd faa4 	bl	8001ac4 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e347      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800458a:	4b28      	ldr	r3, [pc, #160]	@ (800462c <HAL_RCC_OscConfig+0x7bc>)
 800458c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d01f      	beq.n	80045e2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d010      	beq.n	80045d0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80045ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80045b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80045b6:	f043 0304 	orr.w	r3, r3, #4
 80045ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045be:	4b1a      	ldr	r3, [pc, #104]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80045c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045c4:	4a18      	ldr	r2, [pc, #96]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045ce:	e018      	b.n	8004602 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045d0:	4b15      	ldr	r3, [pc, #84]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80045d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045d6:	4a14      	ldr	r2, [pc, #80]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045e0:	e00f      	b.n	8004602 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045e2:	4b11      	ldr	r3, [pc, #68]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80045e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045e8:	4a0f      	ldr	r2, [pc, #60]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80045f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80045f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004628 <HAL_RCC_OscConfig+0x7b8>)
 80045fa:	f023 0304 	bic.w	r3, r3, #4
 80045fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d057      	beq.n	80046ba <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800460a:	f7fd fa5b 	bl	8001ac4 <HAL_GetTick>
 800460e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004610:	e00e      	b.n	8004630 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fd fa57 	bl	8001ac4 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d905      	bls.n	8004630 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e2f8      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
 8004628:	46020c00 	.word	0x46020c00
 800462c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004630:	4b9c      	ldr	r3, [pc, #624]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 8004632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0e9      	beq.n	8004612 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01b      	beq.n	8004682 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800464a:	4b96      	ldr	r3, [pc, #600]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 800464c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004650:	4a94      	ldr	r2, [pc, #592]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 8004652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004656:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800465a:	e00a      	b.n	8004672 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f7fd fa32 	bl	8001ac4 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e2d3      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004672:	4b8c      	ldr	r3, [pc, #560]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 8004674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0ed      	beq.n	800465c <HAL_RCC_OscConfig+0x7ec>
 8004680:	e053      	b.n	800472a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004682:	4b88      	ldr	r3, [pc, #544]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 8004684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004688:	4a86      	ldr	r2, [pc, #536]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 800468a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800468e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004692:	e00a      	b.n	80046aa <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004694:	f7fd fa16 	bl	8001ac4 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e2b7      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046aa:	4b7e      	ldr	r3, [pc, #504]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 80046ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1ed      	bne.n	8004694 <HAL_RCC_OscConfig+0x824>
 80046b8:	e037      	b.n	800472a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80046ba:	f7fd fa03 	bl	8001ac4 <HAL_GetTick>
 80046be:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046c0:	e00a      	b.n	80046d8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c2:	f7fd f9ff 	bl	8001ac4 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e2a0      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046d8:	4b72      	ldr	r3, [pc, #456]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 80046da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1ed      	bne.n	80046c2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80046e6:	4b6f      	ldr	r3, [pc, #444]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 80046e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01a      	beq.n	800472a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046f4:	4b6b      	ldr	r3, [pc, #428]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 80046f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046fa:	4a6a      	ldr	r2, [pc, #424]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 80046fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004700:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004704:	e00a      	b.n	800471c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7fd f9dd 	bl	8001ac4 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e27e      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800471c:	4b61      	ldr	r3, [pc, #388]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 800471e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1ed      	bne.n	8004706 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800472a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800472e:	2b01      	cmp	r3, #1
 8004730:	d107      	bne.n	8004742 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004732:	4b5c      	ldr	r3, [pc, #368]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 8004734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004738:	4a5a      	ldr	r2, [pc, #360]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 800473a:	f023 0304 	bic.w	r3, r3, #4
 800473e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d036      	beq.n	80047bc <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d019      	beq.n	800478a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004756:	4b53      	ldr	r3, [pc, #332]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a52      	ldr	r2, [pc, #328]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 800475c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004760:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004762:	f7fd f9af 	bl	8001ac4 <HAL_GetTick>
 8004766:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800476a:	f7fd f9ab 	bl	8001ac4 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e24e      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800477c:	4b49      	ldr	r3, [pc, #292]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x8fa>
 8004788:	e018      	b.n	80047bc <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800478a:	4b46      	ldr	r3, [pc, #280]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a45      	ldr	r2, [pc, #276]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 8004790:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004794:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004796:	f7fd f995 	bl	8001ac4 <HAL_GetTick>
 800479a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800479e:	f7fd f991 	bl	8001ac4 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e234      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80047b0:	4b3c      	ldr	r3, [pc, #240]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f0      	bne.n	800479e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d036      	beq.n	8004836 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d019      	beq.n	8004804 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80047d0:	4b34      	ldr	r3, [pc, #208]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a33      	ldr	r2, [pc, #204]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 80047d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047da:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80047dc:	f7fd f972 	bl	8001ac4 <HAL_GetTick>
 80047e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80047e4:	f7fd f96e 	bl	8001ac4 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e211      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80047f6:	4b2b      	ldr	r3, [pc, #172]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f0      	beq.n	80047e4 <HAL_RCC_OscConfig+0x974>
 8004802:	e018      	b.n	8004836 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004804:	4b27      	ldr	r3, [pc, #156]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a26      	ldr	r2, [pc, #152]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 800480a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800480e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004810:	f7fd f958 	bl	8001ac4 <HAL_GetTick>
 8004814:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004818:	f7fd f954 	bl	8001ac4 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e1f7      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800482a:	4b1e      	ldr	r3, [pc, #120]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f0      	bne.n	8004818 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d07f      	beq.n	8004942 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004846:	2b00      	cmp	r3, #0
 8004848:	d062      	beq.n	8004910 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800484a:	4b16      	ldr	r3, [pc, #88]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	4a15      	ldr	r2, [pc, #84]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 8004850:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004854:	6093      	str	r3, [r2, #8]
 8004856:	4b13      	ldr	r3, [pc, #76]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004862:	4910      	ldr	r1, [pc, #64]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 8004864:	4313      	orrs	r3, r2
 8004866:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004870:	d309      	bcc.n	8004886 <HAL_RCC_OscConfig+0xa16>
 8004872:	4b0c      	ldr	r3, [pc, #48]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f023 021f 	bic.w	r2, r3, #31
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	4909      	ldr	r1, [pc, #36]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 8004880:	4313      	orrs	r3, r2
 8004882:	60cb      	str	r3, [r1, #12]
 8004884:	e02a      	b.n	80048dc <HAL_RCC_OscConfig+0xa6c>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	da0c      	bge.n	80048a8 <HAL_RCC_OscConfig+0xa38>
 800488e:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	015b      	lsls	r3, r3, #5
 800489c:	4901      	ldr	r1, [pc, #4]	@ (80048a4 <HAL_RCC_OscConfig+0xa34>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	60cb      	str	r3, [r1, #12]
 80048a2:	e01b      	b.n	80048dc <HAL_RCC_OscConfig+0xa6c>
 80048a4:	46020c00 	.word	0x46020c00
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b0:	d30a      	bcc.n	80048c8 <HAL_RCC_OscConfig+0xa58>
 80048b2:	4ba1      	ldr	r3, [pc, #644]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	029b      	lsls	r3, r3, #10
 80048c0:	499d      	ldr	r1, [pc, #628]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60cb      	str	r3, [r1, #12]
 80048c6:	e009      	b.n	80048dc <HAL_RCC_OscConfig+0xa6c>
 80048c8:	4b9b      	ldr	r3, [pc, #620]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	03db      	lsls	r3, r3, #15
 80048d6:	4998      	ldr	r1, [pc, #608]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80048dc:	4b96      	ldr	r3, [pc, #600]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a95      	ldr	r2, [pc, #596]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 80048e2:	f043 0310 	orr.w	r3, r3, #16
 80048e6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80048e8:	f7fd f8ec 	bl	8001ac4 <HAL_GetTick>
 80048ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80048f0:	f7fd f8e8 	bl	8001ac4 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e18b      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004902:	4b8d      	ldr	r3, [pc, #564]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0xa80>
 800490e:	e018      	b.n	8004942 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004910:	4b89      	ldr	r3, [pc, #548]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a88      	ldr	r2, [pc, #544]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004916:	f023 0310 	bic.w	r3, r3, #16
 800491a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800491c:	f7fd f8d2 	bl	8001ac4 <HAL_GetTick>
 8004920:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004924:	f7fd f8ce 	bl	8001ac4 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e171      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004936:	4b80      	ldr	r3, [pc, #512]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8166 	beq.w	8004c18 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800494c:	2300      	movs	r3, #0
 800494e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004952:	4b79      	ldr	r3, [pc, #484]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b0c      	cmp	r3, #12
 800495c:	f000 80f2 	beq.w	8004b44 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004964:	2b02      	cmp	r3, #2
 8004966:	f040 80c5 	bne.w	8004af4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800496a:	4b73      	ldr	r3, [pc, #460]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a72      	ldr	r2, [pc, #456]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004970:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004974:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004976:	f7fd f8a5 	bl	8001ac4 <HAL_GetTick>
 800497a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497e:	f7fd f8a1 	bl	8001ac4 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e144      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004990:	4b69      	ldr	r3, [pc, #420]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f0      	bne.n	800497e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800499c:	4b66      	ldr	r3, [pc, #408]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 800499e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d111      	bne.n	80049ce <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80049aa:	4b63      	ldr	r3, [pc, #396]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 80049ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049b0:	4a61      	ldr	r2, [pc, #388]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 80049b2:	f043 0304 	orr.w	r3, r3, #4
 80049b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80049ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 80049bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80049c8:	2301      	movs	r3, #1
 80049ca:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80049ce:	4b5b      	ldr	r3, [pc, #364]	@ (8004b3c <HAL_RCC_OscConfig+0xccc>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049da:	d102      	bne.n	80049e2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80049dc:	2301      	movs	r3, #1
 80049de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80049e2:	4b56      	ldr	r3, [pc, #344]	@ (8004b3c <HAL_RCC_OscConfig+0xccc>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	4a55      	ldr	r2, [pc, #340]	@ (8004b3c <HAL_RCC_OscConfig+0xccc>)
 80049e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ec:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80049ee:	4b52      	ldr	r3, [pc, #328]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 80049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049f6:	f023 0303 	bic.w	r3, r3, #3
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a02:	3a01      	subs	r2, #1
 8004a04:	0212      	lsls	r2, r2, #8
 8004a06:	4311      	orrs	r1, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	494a      	ldr	r1, [pc, #296]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a14:	4b48      	ldr	r3, [pc, #288]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004a16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a18:	4b49      	ldr	r3, [pc, #292]	@ (8004b40 <HAL_RCC_OscConfig+0xcd0>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a20:	3a01      	subs	r2, #1
 8004a22:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004a2a:	3a01      	subs	r2, #1
 8004a2c:	0252      	lsls	r2, r2, #9
 8004a2e:	b292      	uxth	r2, r2
 8004a30:	4311      	orrs	r1, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a36:	3a01      	subs	r2, #1
 8004a38:	0412      	lsls	r2, r2, #16
 8004a3a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004a3e:	4311      	orrs	r1, r2
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004a44:	3a01      	subs	r2, #1
 8004a46:	0612      	lsls	r2, r2, #24
 8004a48:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	493a      	ldr	r1, [pc, #232]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004a54:	4b38      	ldr	r3, [pc, #224]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a58:	4a37      	ldr	r2, [pc, #220]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004a5a:	f023 0310 	bic.w	r3, r3, #16
 8004a5e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a64:	4a34      	ldr	r2, [pc, #208]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004a6a:	4b33      	ldr	r3, [pc, #204]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6e:	4a32      	ldr	r2, [pc, #200]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004a70:	f043 0310 	orr.w	r3, r3, #16
 8004a74:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004a76:	4b30      	ldr	r3, [pc, #192]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7a:	f023 020c 	bic.w	r2, r3, #12
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a82:	492d      	ldr	r1, [pc, #180]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004a88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d105      	bne.n	8004a9c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004a90:	4b2a      	ldr	r3, [pc, #168]	@ (8004b3c <HAL_RCC_OscConfig+0xccc>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	4a29      	ldr	r2, [pc, #164]	@ (8004b3c <HAL_RCC_OscConfig+0xccc>)
 8004a96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a9a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004a9c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d107      	bne.n	8004ab4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004aa4:	4b24      	ldr	r3, [pc, #144]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aaa:	4a23      	ldr	r2, [pc, #140]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004aac:	f023 0304 	bic.w	r3, r3, #4
 8004ab0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004ab4:	4b20      	ldr	r3, [pc, #128]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004aba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004abe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004ac0:	f7fd f800 	bl	8001ac4 <HAL_GetTick>
 8004ac4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac8:	f7fc fffc 	bl	8001ac4 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e09f      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004ada:	4b17      	ldr	r3, [pc, #92]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ae6:	4b14      	ldr	r3, [pc, #80]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aea:	4a13      	ldr	r2, [pc, #76]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004af0:	6293      	str	r3, [r2, #40]	@ 0x28
 8004af2:	e091      	b.n	8004c18 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004af4:	4b10      	ldr	r3, [pc, #64]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a0f      	ldr	r2, [pc, #60]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004afa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004afe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b00:	f7fc ffe0 	bl	8001ac4 <HAL_GetTick>
 8004b04:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b08:	f7fc ffdc 	bl	8001ac4 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e07f      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004b1a:	4b07      	ldr	r3, [pc, #28]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004b26:	4b04      	ldr	r3, [pc, #16]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2a:	4a03      	ldr	r2, [pc, #12]	@ (8004b38 <HAL_RCC_OscConfig+0xcc8>)
 8004b2c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004b30:	f023 0303 	bic.w	r3, r3, #3
 8004b34:	6293      	str	r3, [r2, #40]	@ 0x28
 8004b36:	e06f      	b.n	8004c18 <HAL_RCC_OscConfig+0xda8>
 8004b38:	46020c00 	.word	0x46020c00
 8004b3c:	46020800 	.word	0x46020800
 8004b40:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004b44:	4b37      	ldr	r3, [pc, #220]	@ (8004c24 <HAL_RCC_OscConfig+0xdb4>)
 8004b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b48:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b4a:	4b36      	ldr	r3, [pc, #216]	@ (8004c24 <HAL_RCC_OscConfig+0xdb4>)
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b4e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d039      	beq.n	8004bcc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f003 0203 	and.w	r2, r3, #3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d132      	bne.n	8004bcc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d129      	bne.n	8004bcc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d122      	bne.n	8004bcc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b90:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d11a      	bne.n	8004bcc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	0a5b      	lsrs	r3, r3, #9
 8004b9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d111      	bne.n	8004bcc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	0c1b      	lsrs	r3, r3, #16
 8004bac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d108      	bne.n	8004bcc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	0e1b      	lsrs	r3, r3, #24
 8004bbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e024      	b.n	8004c1a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004bd0:	4b14      	ldr	r3, [pc, #80]	@ (8004c24 <HAL_RCC_OscConfig+0xdb4>)
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd4:	08db      	lsrs	r3, r3, #3
 8004bd6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d01a      	beq.n	8004c18 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004be2:	4b10      	ldr	r3, [pc, #64]	@ (8004c24 <HAL_RCC_OscConfig+0xdb4>)
 8004be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be6:	4a0f      	ldr	r2, [pc, #60]	@ (8004c24 <HAL_RCC_OscConfig+0xdb4>)
 8004be8:	f023 0310 	bic.w	r3, r3, #16
 8004bec:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bee:	f7fc ff69 	bl	8001ac4 <HAL_GetTick>
 8004bf2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004bf4:	bf00      	nop
 8004bf6:	f7fc ff65 	bl	8001ac4 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d0f9      	beq.n	8004bf6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c06:	4a07      	ldr	r2, [pc, #28]	@ (8004c24 <HAL_RCC_OscConfig+0xdb4>)
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004c0c:	4b05      	ldr	r3, [pc, #20]	@ (8004c24 <HAL_RCC_OscConfig+0xdb4>)
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c10:	4a04      	ldr	r2, [pc, #16]	@ (8004c24 <HAL_RCC_OscConfig+0xdb4>)
 8004c12:	f043 0310 	orr.w	r3, r3, #16
 8004c16:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3738      	adds	r7, #56	@ 0x38
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	46020c00 	.word	0x46020c00

08004c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e1d9      	b.n	8004ff0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b9b      	ldr	r3, [pc, #620]	@ (8004eac <HAL_RCC_ClockConfig+0x284>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d910      	bls.n	8004c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b98      	ldr	r3, [pc, #608]	@ (8004eac <HAL_RCC_ClockConfig+0x284>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 020f 	bic.w	r2, r3, #15
 8004c52:	4996      	ldr	r1, [pc, #600]	@ (8004eac <HAL_RCC_ClockConfig+0x284>)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	4b94      	ldr	r3, [pc, #592]	@ (8004eac <HAL_RCC_ClockConfig+0x284>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e1c1      	b.n	8004ff0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d010      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	4b8c      	ldr	r3, [pc, #560]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d908      	bls.n	8004c9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004c88:	4b89      	ldr	r3, [pc, #548]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	4986      	ldr	r1, [pc, #536]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d012      	beq.n	8004ccc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	4b81      	ldr	r3, [pc, #516]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d909      	bls.n	8004ccc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004cb8:	4b7d      	ldr	r3, [pc, #500]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	497a      	ldr	r1, [pc, #488]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d010      	beq.n	8004cfa <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	4b74      	ldr	r3, [pc, #464]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d908      	bls.n	8004cfa <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004ce8:	4b71      	ldr	r3, [pc, #452]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	496e      	ldr	r1, [pc, #440]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d010      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	4b69      	ldr	r3, [pc, #420]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d908      	bls.n	8004d28 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004d16:	4b66      	ldr	r3, [pc, #408]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f023 020f 	bic.w	r2, r3, #15
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	4963      	ldr	r1, [pc, #396]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80d2 	beq.w	8004eda <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004d36:	2300      	movs	r3, #0
 8004d38:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d143      	bne.n	8004dca <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d42:	4b5b      	ldr	r3, [pc, #364]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d110      	bne.n	8004d72 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004d50:	4b57      	ldr	r3, [pc, #348]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d56:	4a56      	ldr	r2, [pc, #344]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004d58:	f043 0304 	orr.w	r3, r3, #4
 8004d5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004d60:	4b53      	ldr	r3, [pc, #332]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d66:	f003 0304 	and.w	r3, r3, #4
 8004d6a:	60bb      	str	r3, [r7, #8]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004d72:	f7fc fea7 	bl	8001ac4 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004d78:	4b4e      	ldr	r3, [pc, #312]	@ (8004eb4 <HAL_RCC_ClockConfig+0x28c>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00f      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004d86:	f7fc fe9d 	bl	8001ac4 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e12b      	b.n	8004ff0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004d98:	4b46      	ldr	r3, [pc, #280]	@ (8004eb4 <HAL_RCC_ClockConfig+0x28c>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004da4:	7dfb      	ldrb	r3, [r7, #23]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d107      	bne.n	8004dba <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004daa:	4b41      	ldr	r3, [pc, #260]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004db0:	4a3f      	ldr	r2, [pc, #252]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004db2:	f023 0304 	bic.w	r3, r3, #4
 8004db6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004dba:	4b3d      	ldr	r3, [pc, #244]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d121      	bne.n	8004e0a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e112      	b.n	8004ff0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d107      	bne.n	8004de2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dd2:	4b37      	ldr	r3, [pc, #220]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d115      	bne.n	8004e0a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e106      	b.n	8004ff0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d107      	bne.n	8004dfa <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004dea:	4b31      	ldr	r3, [pc, #196]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e0fa      	b.n	8004ff0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e0f2      	b.n	8004ff0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004e0a:	4b29      	ldr	r3, [pc, #164]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f023 0203 	bic.w	r2, r3, #3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4926      	ldr	r1, [pc, #152]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004e1c:	f7fc fe52 	bl	8001ac4 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d112      	bne.n	8004e50 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2c:	f7fc fe4a 	bl	8001ac4 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e0d6      	b.n	8004ff0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e42:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	2b0c      	cmp	r3, #12
 8004e4c:	d1ee      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x204>
 8004e4e:	e044      	b.n	8004eda <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d112      	bne.n	8004e7e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e58:	e00a      	b.n	8004e70 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e5a:	f7fc fe33 	bl	8001ac4 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e0bf      	b.n	8004ff0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e70:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f003 030c 	and.w	r3, r3, #12
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d1ee      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x232>
 8004e7c:	e02d      	b.n	8004eda <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d123      	bne.n	8004ece <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e86:	e00a      	b.n	8004e9e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e88:	f7fc fe1c 	bl	8001ac4 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e0a8      	b.n	8004ff0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e9e:	4b04      	ldr	r3, [pc, #16]	@ (8004eb0 <HAL_RCC_ClockConfig+0x288>)
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1ee      	bne.n	8004e88 <HAL_RCC_ClockConfig+0x260>
 8004eaa:	e016      	b.n	8004eda <HAL_RCC_ClockConfig+0x2b2>
 8004eac:	40022000 	.word	0x40022000
 8004eb0:	46020c00 	.word	0x46020c00
 8004eb4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb8:	f7fc fe04 	bl	8001ac4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e090      	b.n	8004ff0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ece:	4b4a      	ldr	r3, [pc, #296]	@ (8004ff8 <HAL_RCC_ClockConfig+0x3d0>)
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d1ee      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d010      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	4b43      	ldr	r3, [pc, #268]	@ (8004ff8 <HAL_RCC_ClockConfig+0x3d0>)
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d208      	bcs.n	8004f08 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004ef6:	4b40      	ldr	r3, [pc, #256]	@ (8004ff8 <HAL_RCC_ClockConfig+0x3d0>)
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f023 020f 	bic.w	r2, r3, #15
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	493d      	ldr	r1, [pc, #244]	@ (8004ff8 <HAL_RCC_ClockConfig+0x3d0>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f08:	4b3c      	ldr	r3, [pc, #240]	@ (8004ffc <HAL_RCC_ClockConfig+0x3d4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d210      	bcs.n	8004f38 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f16:	4b39      	ldr	r3, [pc, #228]	@ (8004ffc <HAL_RCC_ClockConfig+0x3d4>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 020f 	bic.w	r2, r3, #15
 8004f1e:	4937      	ldr	r1, [pc, #220]	@ (8004ffc <HAL_RCC_ClockConfig+0x3d4>)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b35      	ldr	r3, [pc, #212]	@ (8004ffc <HAL_RCC_ClockConfig+0x3d4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e05b      	b.n	8004ff0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d010      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	4b2b      	ldr	r3, [pc, #172]	@ (8004ff8 <HAL_RCC_ClockConfig+0x3d0>)
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d208      	bcs.n	8004f66 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004f54:	4b28      	ldr	r3, [pc, #160]	@ (8004ff8 <HAL_RCC_ClockConfig+0x3d0>)
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	4925      	ldr	r1, [pc, #148]	@ (8004ff8 <HAL_RCC_ClockConfig+0x3d0>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d012      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	4b20      	ldr	r3, [pc, #128]	@ (8004ff8 <HAL_RCC_ClockConfig+0x3d0>)
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	091b      	lsrs	r3, r3, #4
 8004f7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d209      	bcs.n	8004f98 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004f84:	4b1c      	ldr	r3, [pc, #112]	@ (8004ff8 <HAL_RCC_ClockConfig+0x3d0>)
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	4919      	ldr	r1, [pc, #100]	@ (8004ff8 <HAL_RCC_ClockConfig+0x3d0>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d010      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	4b13      	ldr	r3, [pc, #76]	@ (8004ff8 <HAL_RCC_ClockConfig+0x3d0>)
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d208      	bcs.n	8004fc6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004fb4:	4b10      	ldr	r3, [pc, #64]	@ (8004ff8 <HAL_RCC_ClockConfig+0x3d0>)
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	490d      	ldr	r1, [pc, #52]	@ (8004ff8 <HAL_RCC_ClockConfig+0x3d0>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004fc6:	f000 f821 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff8 <HAL_RCC_ClockConfig+0x3d0>)
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	490a      	ldr	r1, [pc, #40]	@ (8005000 <HAL_RCC_ClockConfig+0x3d8>)
 8004fd6:	5ccb      	ldrb	r3, [r1, r3]
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fdc:	4a09      	ldr	r2, [pc, #36]	@ (8005004 <HAL_RCC_ClockConfig+0x3dc>)
 8004fde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fe0:	4b09      	ldr	r3, [pc, #36]	@ (8005008 <HAL_RCC_ClockConfig+0x3e0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fc fce3 	bl	80019b0 <HAL_InitTick>
 8004fea:	4603      	mov	r3, r0
 8004fec:	73fb      	strb	r3, [r7, #15]

  return status;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	46020c00 	.word	0x46020c00
 8004ffc:	40022000 	.word	0x40022000
 8005000:	0800b9dc 	.word	0x0800b9dc
 8005004:	20000010 	.word	0x20000010
 8005008:	20000014 	.word	0x20000014

0800500c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800500c:	b480      	push	{r7}
 800500e:	b08b      	sub	sp, #44	@ 0x2c
 8005010:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800501a:	4b78      	ldr	r3, [pc, #480]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f003 030c 	and.w	r3, r3, #12
 8005022:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005024:	4b75      	ldr	r3, [pc, #468]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <HAL_RCC_GetSysClockFreq+0x34>
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b0c      	cmp	r3, #12
 8005038:	d121      	bne.n	800507e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d11e      	bne.n	800507e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005040:	4b6e      	ldr	r3, [pc, #440]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d107      	bne.n	800505c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800504c:	4b6b      	ldr	r3, [pc, #428]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800504e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005052:	0b1b      	lsrs	r3, r3, #12
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	627b      	str	r3, [r7, #36]	@ 0x24
 800505a:	e005      	b.n	8005068 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800505c:	4b67      	ldr	r3, [pc, #412]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	0f1b      	lsrs	r3, r3, #28
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005068:	4a65      	ldr	r2, [pc, #404]	@ (8005200 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d110      	bne.n	800509a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800507c:	e00d      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800507e:	4b5f      	ldr	r3, [pc, #380]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b04      	cmp	r3, #4
 8005088:	d102      	bne.n	8005090 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800508a:	4b5e      	ldr	r3, [pc, #376]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800508c:	623b      	str	r3, [r7, #32]
 800508e:	e004      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b08      	cmp	r3, #8
 8005094:	d101      	bne.n	800509a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005096:	4b5b      	ldr	r3, [pc, #364]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005098:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	2b0c      	cmp	r3, #12
 800509e:	f040 80a5 	bne.w	80051ec <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80050a2:	4b56      	ldr	r3, [pc, #344]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80050ac:	4b53      	ldr	r3, [pc, #332]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	3301      	adds	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80050ba:	4b50      	ldr	r3, [pc, #320]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050be:	091b      	lsrs	r3, r3, #4
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80050c6:	4b4d      	ldr	r3, [pc, #308]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ca:	08db      	lsrs	r3, r3, #3
 80050cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	fb02 f303 	mul.w	r3, r2, r3
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050de:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d003      	beq.n	80050f0 <HAL_RCC_GetSysClockFreq+0xe4>
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d022      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x128>
 80050ee:	e043      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fa:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005208 <HAL_RCC_GetSysClockFreq+0x1fc>
 80050fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005102:	4b3e      	ldr	r3, [pc, #248]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005112:	ed97 6a01 	vldr	s12, [r7, #4]
 8005116:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800520c <HAL_RCC_GetSysClockFreq+0x200>
 800511a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800511e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005126:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800512a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800512e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005132:	e046      	b.n	80051c2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005208 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005146:	4b2d      	ldr	r3, [pc, #180]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005156:	ed97 6a01 	vldr	s12, [r7, #4]
 800515a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800520c <HAL_RCC_GetSysClockFreq+0x200>
 800515e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005162:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800516a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800516e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005176:	e024      	b.n	80051c2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	ee07 3a90 	vmov	s15, r3
 8005188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005190:	4b1a      	ldr	r3, [pc, #104]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005198:	ee07 3a90 	vmov	s15, r3
 800519c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80051a0:	ed97 6a01 	vldr	s12, [r7, #4]
 80051a4:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800520c <HAL_RCC_GetSysClockFreq+0x200>
 80051a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80051b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051c0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80051c2:	4b0e      	ldr	r3, [pc, #56]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80051c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051c6:	0e1b      	lsrs	r3, r3, #24
 80051c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051cc:	3301      	adds	r3, #1
 80051ce:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051da:	edd7 6a07 	vldr	s13, [r7, #28]
 80051de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e6:	ee17 3a90 	vmov	r3, s15
 80051ea:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80051ec:	6a3b      	ldr	r3, [r7, #32]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	372c      	adds	r7, #44	@ 0x2c
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	46020c00 	.word	0x46020c00
 8005200:	0800b9f4 	.word	0x0800b9f4
 8005204:	00f42400 	.word	0x00f42400
 8005208:	4b742400 	.word	0x4b742400
 800520c:	46000000 	.word	0x46000000

08005210 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005214:	f7ff fefa 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8005218:	4602      	mov	r2, r0
 800521a:	4b07      	ldr	r3, [pc, #28]	@ (8005238 <HAL_RCC_GetHCLKFreq+0x28>)
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	4906      	ldr	r1, [pc, #24]	@ (800523c <HAL_RCC_GetHCLKFreq+0x2c>)
 8005224:	5ccb      	ldrb	r3, [r1, r3]
 8005226:	fa22 f303 	lsr.w	r3, r2, r3
 800522a:	4a05      	ldr	r2, [pc, #20]	@ (8005240 <HAL_RCC_GetHCLKFreq+0x30>)
 800522c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800522e:	4b04      	ldr	r3, [pc, #16]	@ (8005240 <HAL_RCC_GetHCLKFreq+0x30>)
 8005230:	681b      	ldr	r3, [r3, #0]
}
 8005232:	4618      	mov	r0, r3
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	46020c00 	.word	0x46020c00
 800523c:	0800b9dc 	.word	0x0800b9dc
 8005240:	20000010 	.word	0x20000010

08005244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005248:	f7ff ffe2 	bl	8005210 <HAL_RCC_GetHCLKFreq>
 800524c:	4602      	mov	r2, r0
 800524e:	4b05      	ldr	r3, [pc, #20]	@ (8005264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	4903      	ldr	r1, [pc, #12]	@ (8005268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800525a:	5ccb      	ldrb	r3, [r1, r3]
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	bd80      	pop	{r7, pc}
 8005264:	46020c00 	.word	0x46020c00
 8005268:	0800b9ec 	.word	0x0800b9ec

0800526c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005270:	f7ff ffce 	bl	8005210 <HAL_RCC_GetHCLKFreq>
 8005274:	4602      	mov	r2, r0
 8005276:	4b05      	ldr	r3, [pc, #20]	@ (800528c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	0a1b      	lsrs	r3, r3, #8
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	4903      	ldr	r1, [pc, #12]	@ (8005290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005282:	5ccb      	ldrb	r3, [r1, r3]
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	bd80      	pop	{r7, pc}
 800528c:	46020c00 	.word	0x46020c00
 8005290:	0800b9ec 	.word	0x0800b9ec

08005294 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005298:	f7ff ffba 	bl	8005210 <HAL_RCC_GetHCLKFreq>
 800529c:	4602      	mov	r2, r0
 800529e:	4b05      	ldr	r3, [pc, #20]	@ (80052b4 <HAL_RCC_GetPCLK3Freq+0x20>)
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	091b      	lsrs	r3, r3, #4
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	4903      	ldr	r1, [pc, #12]	@ (80052b8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80052aa:	5ccb      	ldrb	r3, [r1, r3]
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	46020c00 	.word	0x46020c00
 80052b8:	0800b9ec 	.word	0x0800b9ec

080052bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052c4:	4b3e      	ldr	r3, [pc, #248]	@ (80053c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80052c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80052d2:	f7fe fd3f 	bl	8003d54 <HAL_PWREx_GetVoltageRange>
 80052d6:	6178      	str	r0, [r7, #20]
 80052d8:	e019      	b.n	800530e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052da:	4b39      	ldr	r3, [pc, #228]	@ (80053c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80052dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052e0:	4a37      	ldr	r2, [pc, #220]	@ (80053c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80052e2:	f043 0304 	orr.w	r3, r3, #4
 80052e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80052ea:	4b35      	ldr	r3, [pc, #212]	@ (80053c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80052ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80052f8:	f7fe fd2c 	bl	8003d54 <HAL_PWREx_GetVoltageRange>
 80052fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80052fe:	4b30      	ldr	r3, [pc, #192]	@ (80053c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005304:	4a2e      	ldr	r2, [pc, #184]	@ (80053c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005306:	f023 0304 	bic.w	r3, r3, #4
 800530a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005314:	d003      	beq.n	800531e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800531c:	d109      	bne.n	8005332 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005324:	d202      	bcs.n	800532c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005326:	2301      	movs	r3, #1
 8005328:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800532a:	e033      	b.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005330:	e030      	b.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005338:	d208      	bcs.n	800534c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005340:	d102      	bne.n	8005348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005342:	2303      	movs	r3, #3
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	e025      	b.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e035      	b.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005352:	d90f      	bls.n	8005374 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d109      	bne.n	800536e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005360:	d902      	bls.n	8005368 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005362:	2300      	movs	r3, #0
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	e015      	b.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005368:	2301      	movs	r3, #1
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	e012      	b.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800536e:	2300      	movs	r3, #0
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	e00f      	b.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800537a:	d109      	bne.n	8005390 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005382:	d102      	bne.n	800538a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005384:	2301      	movs	r3, #1
 8005386:	613b      	str	r3, [r7, #16]
 8005388:	e004      	b.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800538a:	2302      	movs	r3, #2
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	e001      	b.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005390:	2301      	movs	r3, #1
 8005392:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005394:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f023 020f 	bic.w	r2, r3, #15
 800539c:	4909      	ldr	r1, [pc, #36]	@ (80053c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80053a4:	4b07      	ldr	r3, [pc, #28]	@ (80053c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d001      	beq.n	80053b6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	46020c00 	.word	0x46020c00
 80053c4:	40022000 	.word	0x40022000

080053c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80053c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053cc:	b0b8      	sub	sp, #224	@ 0xe0
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053da:	2300      	movs	r3, #0
 80053dc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	f002 0401 	and.w	r4, r2, #1
 80053ec:	2500      	movs	r5, #0
 80053ee:	ea54 0305 	orrs.w	r3, r4, r5
 80053f2:	d00b      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80053f4:	4bca      	ldr	r3, [pc, #808]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80053f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053fa:	f023 0103 	bic.w	r1, r3, #3
 80053fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005404:	4ac6      	ldr	r2, [pc, #792]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005406:	430b      	orrs	r3, r1
 8005408:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800540c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f002 0802 	and.w	r8, r2, #2
 8005418:	f04f 0900 	mov.w	r9, #0
 800541c:	ea58 0309 	orrs.w	r3, r8, r9
 8005420:	d00b      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005422:	4bbf      	ldr	r3, [pc, #764]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005428:	f023 010c 	bic.w	r1, r3, #12
 800542c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005432:	4abb      	ldr	r2, [pc, #748]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005434:	430b      	orrs	r3, r1
 8005436:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800543a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	f002 0a04 	and.w	sl, r2, #4
 8005446:	f04f 0b00 	mov.w	fp, #0
 800544a:	ea5a 030b 	orrs.w	r3, sl, fp
 800544e:	d00b      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005450:	4bb3      	ldr	r3, [pc, #716]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005456:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800545a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800545e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005460:	4aaf      	ldr	r2, [pc, #700]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005462:	430b      	orrs	r3, r1
 8005464:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f002 0308 	and.w	r3, r2, #8
 8005474:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005478:	2300      	movs	r3, #0
 800547a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800547e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005482:	460b      	mov	r3, r1
 8005484:	4313      	orrs	r3, r2
 8005486:	d00b      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005488:	4ba5      	ldr	r3, [pc, #660]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800548a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800548e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005492:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005498:	4aa1      	ldr	r2, [pc, #644]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800549a:	430b      	orrs	r3, r1
 800549c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f002 0310 	and.w	r3, r2, #16
 80054ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054b0:	2300      	movs	r3, #0
 80054b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80054b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80054ba:	460b      	mov	r3, r1
 80054bc:	4313      	orrs	r3, r2
 80054be:	d00b      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80054c0:	4b97      	ldr	r3, [pc, #604]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80054c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80054ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054d0:	4a93      	ldr	r2, [pc, #588]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80054d2:	430b      	orrs	r3, r1
 80054d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f002 0320 	and.w	r3, r2, #32
 80054e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054e8:	2300      	movs	r3, #0
 80054ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4313      	orrs	r3, r2
 80054f6:	d00b      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80054f8:	4b89      	ldr	r3, [pc, #548]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80054fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054fe:	f023 0107 	bic.w	r1, r3, #7
 8005502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005508:	4a85      	ldr	r2, [pc, #532]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800550a:	430b      	orrs	r3, r1
 800550c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005510:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800551c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005520:	2300      	movs	r3, #0
 8005522:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005526:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800552a:	460b      	mov	r3, r1
 800552c:	4313      	orrs	r3, r2
 800552e:	d00b      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005530:	4b7b      	ldr	r3, [pc, #492]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005536:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800553a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800553e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005540:	4a77      	ldr	r2, [pc, #476]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005542:	430b      	orrs	r3, r1
 8005544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005554:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005558:	2300      	movs	r3, #0
 800555a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800555e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005562:	460b      	mov	r3, r1
 8005564:	4313      	orrs	r3, r2
 8005566:	d00b      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005568:	4b6d      	ldr	r3, [pc, #436]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800556a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800556e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005572:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005578:	4a69      	ldr	r2, [pc, #420]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800557a:	430b      	orrs	r3, r1
 800557c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800558c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005590:	2300      	movs	r3, #0
 8005592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005596:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800559a:	460b      	mov	r3, r1
 800559c:	4313      	orrs	r3, r2
 800559e:	d00b      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80055a0:	4b5f      	ldr	r3, [pc, #380]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80055a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80055aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b0:	4a5b      	ldr	r2, [pc, #364]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80055b2:	430b      	orrs	r3, r1
 80055b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80055c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055c8:	2300      	movs	r3, #0
 80055ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80055d2:	460b      	mov	r3, r1
 80055d4:	4313      	orrs	r3, r2
 80055d6:	d00b      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80055d8:	4b51      	ldr	r3, [pc, #324]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80055da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055de:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80055e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055e8:	4a4d      	ldr	r2, [pc, #308]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80055ea:	430b      	orrs	r3, r1
 80055ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80055fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005600:	2300      	movs	r3, #0
 8005602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005606:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800560a:	460b      	mov	r3, r1
 800560c:	4313      	orrs	r3, r2
 800560e:	d00b      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005610:	4b43      	ldr	r3, [pc, #268]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005616:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800561a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800561e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005620:	4a3f      	ldr	r2, [pc, #252]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005622:	430b      	orrs	r3, r1
 8005624:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005628:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005638:	2300      	movs	r3, #0
 800563a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800563e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005642:	460b      	mov	r3, r1
 8005644:	4313      	orrs	r3, r2
 8005646:	d00b      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005648:	4b35      	ldr	r3, [pc, #212]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800564a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800564e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005652:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005656:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005658:	4a31      	ldr	r2, [pc, #196]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800565a:	430b      	orrs	r3, r1
 800565c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800566c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800566e:	2300      	movs	r3, #0
 8005670:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005672:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005676:	460b      	mov	r3, r1
 8005678:	4313      	orrs	r3, r2
 800567a:	d00c      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800567c:	4b28      	ldr	r3, [pc, #160]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800567e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005682:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005686:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800568a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800568e:	4a24      	ldr	r2, [pc, #144]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005690:	430b      	orrs	r3, r1
 8005692:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005696:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80056a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80056a4:	2300      	movs	r3, #0
 80056a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80056a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80056ac:	460b      	mov	r3, r1
 80056ae:	4313      	orrs	r3, r2
 80056b0:	d04f      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80056b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ba:	2b80      	cmp	r3, #128	@ 0x80
 80056bc:	d02d      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x352>
 80056be:	2b80      	cmp	r3, #128	@ 0x80
 80056c0:	d827      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80056c2:	2b60      	cmp	r3, #96	@ 0x60
 80056c4:	d02e      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80056c6:	2b60      	cmp	r3, #96	@ 0x60
 80056c8:	d823      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80056ca:	2b40      	cmp	r3, #64	@ 0x40
 80056cc:	d006      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x314>
 80056ce:	2b40      	cmp	r3, #64	@ 0x40
 80056d0:	d81f      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x322>
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d011      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x336>
 80056da:	e01a      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056dc:	4b10      	ldr	r3, [pc, #64]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e0:	4a0f      	ldr	r2, [pc, #60]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056e6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80056e8:	e01d      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056ee:	3308      	adds	r3, #8
 80056f0:	4618      	mov	r0, r3
 80056f2:	f002 f9d1 	bl	8007a98 <RCCEx_PLL2_Config>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80056fc:	e013      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005702:	332c      	adds	r3, #44	@ 0x2c
 8005704:	4618      	mov	r0, r3
 8005706:	f002 fa5f 	bl	8007bc8 <RCCEx_PLL3_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005710:	e009      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005718:	e005      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800571a:	bf00      	nop
 800571c:	e003      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800571e:	bf00      	nop
 8005720:	46020c00 	.word	0x46020c00
        break;
 8005724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005726:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10d      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800572e:	4bb6      	ldr	r3, [pc, #728]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005730:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005734:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005738:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005740:	4ab1      	ldr	r2, [pc, #708]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005742:	430b      	orrs	r3, r1
 8005744:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005748:	e003      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800574a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800574e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005752:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800575e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005760:	2300      	movs	r3, #0
 8005762:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005764:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005768:	460b      	mov	r3, r1
 800576a:	4313      	orrs	r3, r2
 800576c:	d053      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800576e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577a:	d033      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800577c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005780:	d82c      	bhi.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005782:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005786:	d02f      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005788:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800578c:	d826      	bhi.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x414>
 800578e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005792:	d008      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005798:	d820      	bhi.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x414>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800579e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057a2:	d011      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80057a4:	e01a      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057a6:	4b98      	ldr	r3, [pc, #608]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80057a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057aa:	4a97      	ldr	r2, [pc, #604]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80057ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057b0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80057b2:	e01a      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057b8:	3308      	adds	r3, #8
 80057ba:	4618      	mov	r0, r3
 80057bc:	f002 f96c 	bl	8007a98 <RCCEx_PLL2_Config>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80057c6:	e010      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057cc:	332c      	adds	r3, #44	@ 0x2c
 80057ce:	4618      	mov	r0, r3
 80057d0:	f002 f9fa 	bl	8007bc8 <RCCEx_PLL3_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80057da:	e006      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80057e2:	e002      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80057e4:	bf00      	nop
 80057e6:	e000      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80057e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ea:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10d      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80057f2:	4b85      	ldr	r3, [pc, #532]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80057f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057f8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80057fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005800:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005804:	4a80      	ldr	r2, [pc, #512]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005806:	430b      	orrs	r3, r1
 8005808:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800580c:	e003      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005812:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005816:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005822:	663b      	str	r3, [r7, #96]	@ 0x60
 8005824:	2300      	movs	r3, #0
 8005826:	667b      	str	r3, [r7, #100]	@ 0x64
 8005828:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800582c:	460b      	mov	r3, r1
 800582e:	4313      	orrs	r3, r2
 8005830:	d046      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005832:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005836:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800583a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800583e:	d028      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005840:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005844:	d821      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005846:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800584a:	d022      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800584c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005850:	d81b      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005852:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005856:	d01c      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005858:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800585c:	d815      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800585e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005862:	d008      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005868:	d80f      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800586a:	2b00      	cmp	r3, #0
 800586c:	d011      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800586e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005872:	d00e      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005874:	e009      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005876:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800587a:	3308      	adds	r3, #8
 800587c:	4618      	mov	r0, r3
 800587e:	f002 f90b 	bl	8007a98 <RCCEx_PLL2_Config>
 8005882:	4603      	mov	r3, r0
 8005884:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005888:	e004      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005890:	e000      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8005892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005894:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10d      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800589c:	4b5a      	ldr	r3, [pc, #360]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800589e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058a2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80058a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80058ae:	4a56      	ldr	r2, [pc, #344]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80058b0:	430b      	orrs	r3, r1
 80058b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80058b6:	e003      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80058bc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80058c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80058cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058ce:	2300      	movs	r3, #0
 80058d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80058d6:	460b      	mov	r3, r1
 80058d8:	4313      	orrs	r3, r2
 80058da:	d03f      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80058dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d81e      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80058e8:	a201      	add	r2, pc, #4	@ (adr r2, 80058f0 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	0800592f 	.word	0x0800592f
 80058f4:	08005905 	.word	0x08005905
 80058f8:	08005913 	.word	0x08005913
 80058fc:	0800592f 	.word	0x0800592f
 8005900:	0800592f 	.word	0x0800592f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005904:	4b40      	ldr	r3, [pc, #256]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005908:	4a3f      	ldr	r2, [pc, #252]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800590a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800590e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005910:	e00e      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005912:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005916:	332c      	adds	r3, #44	@ 0x2c
 8005918:	4618      	mov	r0, r3
 800591a:	f002 f955 	bl	8007bc8 <RCCEx_PLL3_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005924:	e004      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800592c:	e000      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800592e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005930:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10d      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005938:	4b33      	ldr	r3, [pc, #204]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800593a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800593e:	f023 0107 	bic.w	r1, r3, #7
 8005942:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800594a:	4a2f      	ldr	r2, [pc, #188]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800594c:	430b      	orrs	r3, r1
 800594e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005952:	e003      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005954:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005958:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800595c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005964:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005968:	653b      	str	r3, [r7, #80]	@ 0x50
 800596a:	2300      	movs	r3, #0
 800596c:	657b      	str	r3, [r7, #84]	@ 0x54
 800596e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005972:	460b      	mov	r3, r1
 8005974:	4313      	orrs	r3, r2
 8005976:	d04d      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005978:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800597c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005980:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005984:	d028      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8005986:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800598a:	d821      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800598c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005990:	d024      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005992:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005996:	d81b      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800599c:	d00e      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800599e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059a2:	d815      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01b      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80059a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ac:	d110      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059ae:	4b16      	ldr	r3, [pc, #88]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80059b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b2:	4a15      	ldr	r2, [pc, #84]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80059b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059b8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80059ba:	e012      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059c0:	332c      	adds	r3, #44	@ 0x2c
 80059c2:	4618      	mov	r0, r3
 80059c4:	f002 f900 	bl	8007bc8 <RCCEx_PLL3_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80059ce:	e008      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80059d6:	e004      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80059d8:	bf00      	nop
 80059da:	e002      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80059dc:	bf00      	nop
 80059de:	e000      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80059e0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80059e2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d110      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80059ea:	4b07      	ldr	r3, [pc, #28]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80059ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80059f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059fc:	4a02      	ldr	r2, [pc, #8]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80059fe:	430b      	orrs	r3, r1
 8005a00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005a04:	e006      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005a06:	bf00      	nop
 8005a08:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005a10:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005a20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a22:	2300      	movs	r3, #0
 8005a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a26:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f000 80b5 	beq.w	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a32:	2300      	movs	r3, #0
 8005a34:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a38:	4b9d      	ldr	r3, [pc, #628]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d113      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a46:	4b9a      	ldr	r3, [pc, #616]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a4c:	4a98      	ldr	r2, [pc, #608]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a4e:	f043 0304 	orr.w	r3, r3, #4
 8005a52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005a56:	4b96      	ldr	r3, [pc, #600]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005a6e:	4b91      	ldr	r3, [pc, #580]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a72:	4a90      	ldr	r2, [pc, #576]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a74:	f043 0301 	orr.w	r3, r3, #1
 8005a78:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a7a:	f7fc f823 	bl	8001ac4 <HAL_GetTick>
 8005a7e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005a82:	e00b      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a84:	f7fc f81e 	bl	8001ac4 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d903      	bls.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005a9a:	e005      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005a9c:	4b85      	ldr	r3, [pc, #532]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0ed      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8005aa8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d165      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ab0:	4b7f      	ldr	r3, [pc, #508]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ab6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d023      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x746>
 8005ac6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005aca:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d01b      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ad6:	4b76      	ldr	r3, [pc, #472]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ae4:	4b72      	ldr	r3, [pc, #456]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005ae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005aea:	4a71      	ldr	r2, [pc, #452]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005af0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005af4:	4b6e      	ldr	r3, [pc, #440]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005afa:	4a6d      	ldr	r2, [pc, #436]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005afc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b04:	4a6a      	ldr	r2, [pc, #424]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d019      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1a:	f7fb ffd3 	bl	8001ac4 <HAL_GetTick>
 8005b1e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b22:	e00d      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b24:	f7fb ffce 	bl	8001ac4 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d903      	bls.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8005b3e:	e006      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b40:	4b5b      	ldr	r3, [pc, #364]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0ea      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8005b4e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10d      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005b56:	4b56      	ldr	r3, [pc, #344]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b5c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b68:	4a51      	ldr	r2, [pc, #324]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005b70:	e008      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b72:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005b76:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8005b7a:	e003      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005b80:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b84:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d107      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b8c:	4b48      	ldr	r3, [pc, #288]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b92:	4a47      	ldr	r2, [pc, #284]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b94:	f023 0304 	bic.w	r3, r3, #4
 8005b98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005b9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005baa:	2300      	movs	r3, #0
 8005bac:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	d042      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bc0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005bc4:	d022      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x844>
 8005bc6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005bca:	d81b      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005bcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bd0:	d011      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005bd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bd6:	d815      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d019      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005bdc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005be0:	d110      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005be2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005be6:	3308      	adds	r3, #8
 8005be8:	4618      	mov	r0, r3
 8005bea:	f001 ff55 	bl	8007a98 <RCCEx_PLL2_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005bf4:	e00d      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c00:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005c02:	e006      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005c0a:	e002      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005c0c:	bf00      	nop
 8005c0e:	e000      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005c10:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c12:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10d      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005c1a:	4b25      	ldr	r3, [pc, #148]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c20:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c2c:	4a20      	ldr	r2, [pc, #128]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c34:	e003      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c36:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005c3a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c46:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c50:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005c54:	460b      	mov	r3, r1
 8005c56:	4313      	orrs	r3, r2
 8005c58:	d032      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005c5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c66:	d00b      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c6c:	d804      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d008      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c76:	d007      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005c7e:	e004      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005c80:	bf00      	nop
 8005c82:	e002      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005c84:	bf00      	nop
 8005c86:	e000      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005c88:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c8a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d112      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005c92:	4b07      	ldr	r3, [pc, #28]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005c94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c98:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ca4:	4a02      	ldr	r2, [pc, #8]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005ca6:	430b      	orrs	r3, r1
 8005ca8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005cac:	e008      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005cae:	bf00      	nop
 8005cb0:	46020c00 	.word	0x46020c00
 8005cb4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005cbc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cce:	2300      	movs	r3, #0
 8005cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cd2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	d019      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005cdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ce0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ce4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ce8:	d105      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005cea:	4b88      	ldr	r3, [pc, #544]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cee:	4a87      	ldr	r2, [pc, #540]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cf4:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005cf6:	4b85      	ldr	r3, [pc, #532]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005cf8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cfc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d08:	4a80      	ldr	r2, [pc, #512]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d1e:	2300      	movs	r3, #0
 8005d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d22:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005d26:	460b      	mov	r3, r1
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	d00c      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005d2c:	4b77      	ldr	r3, [pc, #476]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d3e:	4973      	ldr	r1, [pc, #460]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005d46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005d52:	623b      	str	r3, [r7, #32]
 8005d54:	2300      	movs	r3, #0
 8005d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d58:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	d00c      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005d62:	4b6a      	ldr	r3, [pc, #424]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d74:	4965      	ldr	r1, [pc, #404]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005d7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d92:	460b      	mov	r3, r1
 8005d94:	4313      	orrs	r3, r2
 8005d96:	d00c      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005d98:	4b5c      	ldr	r3, [pc, #368]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d9e:	f023 0218 	bic.w	r2, r3, #24
 8005da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005da6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005daa:	4958      	ldr	r1, [pc, #352]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005db2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	d032      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005dce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005dd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dda:	d105      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ddc:	4b4b      	ldr	r3, [pc, #300]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de0:	4a4a      	ldr	r2, [pc, #296]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005de6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005de8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005df0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005df4:	d108      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005df6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f001 fe4b 	bl	8007a98 <RCCEx_PLL2_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8005e08:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10d      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005e10:	4b3e      	ldr	r3, [pc, #248]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e22:	493a      	ldr	r1, [pc, #232]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005e2a:	e003      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005e30:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	d03a      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e5c:	d00e      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005e5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e62:	d815      	bhi.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d017      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8005e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e6c:	d110      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e6e:	4b27      	ldr	r3, [pc, #156]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e72:	4a26      	ldr	r2, [pc, #152]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e78:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005e7a:	e00e      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e80:	3308      	adds	r3, #8
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 fe08 	bl	8007a98 <RCCEx_PLL2_Config>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005e8e:	e004      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005e96:	e000      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8005e98:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005e9a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10d      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ea8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eb4:	4915      	ldr	r1, [pc, #84]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005ebc:	e003      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005ec2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	607b      	str	r3, [r7, #4]
 8005ed8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005edc:	460b      	mov	r3, r1
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	d00c      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ee8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005eec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ef0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ef4:	4905      	ldr	r1, [pc, #20]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005efc:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	37e0      	adds	r7, #224	@ 0xe0
 8005f04:	46bd      	mov	sp, r7
 8005f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f0a:	bf00      	nop
 8005f0c:	46020c00 	.word	0x46020c00

08005f10 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b089      	sub	sp, #36	@ 0x24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005f18:	4ba6      	ldr	r3, [pc, #664]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f20:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005f22:	4ba4      	ldr	r3, [pc, #656]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005f2c:	4ba1      	ldr	r3, [pc, #644]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f30:	0a1b      	lsrs	r3, r3, #8
 8005f32:	f003 030f 	and.w	r3, r3, #15
 8005f36:	3301      	adds	r3, #1
 8005f38:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005f3a:	4b9e      	ldr	r3, [pc, #632]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3e:	091b      	lsrs	r3, r3, #4
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005f46:	4b9b      	ldr	r3, [pc, #620]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4a:	08db      	lsrs	r3, r3, #3
 8005f4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	fb02 f303 	mul.w	r3, r2, r3
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d062      	beq.n	800602e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	f200 8081 	bhi.w	8006072 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d024      	beq.n	8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d17a      	bne.n	8006072 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f86:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80061b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8e:	4b89      	ldr	r3, [pc, #548]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fa2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80061bc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fbe:	e08f      	b.n	80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005fc0:	4b7c      	ldr	r3, [pc, #496]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005fcc:	4b79      	ldr	r3, [pc, #484]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	0f1b      	lsrs	r3, r3, #28
 8005fd2:	f003 030f 	and.w	r3, r3, #15
 8005fd6:	e006      	b.n	8005fe6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005fd8:	4b76      	ldr	r3, [pc, #472]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005fda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005fde:	041b      	lsls	r3, r3, #16
 8005fe0:	0f1b      	lsrs	r3, r3, #28
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	4a76      	ldr	r2, [pc, #472]	@ (80061c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fec:	ee07 3a90 	vmov	s15, r3
 8005ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006010:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80061bc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006020:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006028:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800602c:	e058      	b.n	80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006038:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80061b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800603c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006040:	4b5c      	ldr	r3, [pc, #368]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006050:	ed97 6a02 	vldr	s12, [r7, #8]
 8006054:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80061bc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006058:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800605c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006060:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006064:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006070:	e036      	b.n	80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006072:	4b50      	ldr	r3, [pc, #320]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800607e:	4b4d      	ldr	r3, [pc, #308]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	0f1b      	lsrs	r3, r3, #28
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	e006      	b.n	8006098 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800608a:	4b4a      	ldr	r3, [pc, #296]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800608c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	0f1b      	lsrs	r3, r3, #28
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	4a49      	ldr	r2, [pc, #292]	@ (80061c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800609a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	ee07 3a90 	vmov	s15, r3
 80060ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060be:	ed97 6a02 	vldr	s12, [r7, #8]
 80060c2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80061bc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80060c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80060d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060de:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80060e0:	4b34      	ldr	r3, [pc, #208]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d017      	beq.n	800611c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80060ec:	4b31      	ldr	r3, [pc, #196]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f0:	0a5b      	lsrs	r3, r3, #9
 80060f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80060fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006102:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006106:	edd7 6a07 	vldr	s13, [r7, #28]
 800610a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800610e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006112:	ee17 2a90 	vmov	r2, s15
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	e002      	b.n	8006122 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006122:	4b24      	ldr	r3, [pc, #144]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d017      	beq.n	800615e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800612e:	4b21      	ldr	r3, [pc, #132]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006132:	0c1b      	lsrs	r3, r3, #16
 8006134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006138:	ee07 3a90 	vmov	s15, r3
 800613c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006140:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006144:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006148:	edd7 6a07 	vldr	s13, [r7, #28]
 800614c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006154:	ee17 2a90 	vmov	r2, s15
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	605a      	str	r2, [r3, #4]
 800615c:	e002      	b.n	8006164 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006164:	4b13      	ldr	r3, [pc, #76]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006168:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d017      	beq.n	80061a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006170:	4b10      	ldr	r3, [pc, #64]	@ (80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006174:	0e1b      	lsrs	r3, r3, #24
 8006176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006182:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006186:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800618a:	edd7 6a07 	vldr	s13, [r7, #28]
 800618e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006196:	ee17 2a90 	vmov	r2, s15
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800619e:	e002      	b.n	80061a6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	609a      	str	r2, [r3, #8]
}
 80061a6:	bf00      	nop
 80061a8:	3724      	adds	r7, #36	@ 0x24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	46020c00 	.word	0x46020c00
 80061b8:	4b742400 	.word	0x4b742400
 80061bc:	46000000 	.word	0x46000000
 80061c0:	0800b9f4 	.word	0x0800b9f4

080061c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b089      	sub	sp, #36	@ 0x24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80061cc:	4ba6      	ldr	r3, [pc, #664]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80061d6:	4ba4      	ldr	r3, [pc, #656]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80061e0:	4ba1      	ldr	r3, [pc, #644]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e4:	0a1b      	lsrs	r3, r3, #8
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	3301      	adds	r3, #1
 80061ec:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80061ee:	4b9e      	ldr	r3, [pc, #632]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f2:	091b      	lsrs	r3, r3, #4
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80061fa:	4b9b      	ldr	r3, [pc, #620]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fe:	08db      	lsrs	r3, r3, #3
 8006200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	fb02 f303 	mul.w	r3, r2, r3
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006212:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2b03      	cmp	r3, #3
 800621a:	d062      	beq.n	80062e2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b03      	cmp	r3, #3
 8006220:	f200 8081 	bhi.w	8006326 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d024      	beq.n	8006274 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b02      	cmp	r3, #2
 800622e:	d17a      	bne.n	8006326 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800646c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800623e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006242:	4b89      	ldr	r3, [pc, #548]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006252:	ed97 6a02 	vldr	s12, [r7, #8]
 8006256:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006470 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800625a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800625e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006266:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800626a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006272:	e08f      	b.n	8006394 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006274:	4b7c      	ldr	r3, [pc, #496]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006280:	4b79      	ldr	r3, [pc, #484]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	0f1b      	lsrs	r3, r3, #28
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	e006      	b.n	800629a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800628c:	4b76      	ldr	r3, [pc, #472]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800628e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006292:	041b      	lsls	r3, r3, #16
 8006294:	0f1b      	lsrs	r3, r3, #28
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	4a76      	ldr	r2, [pc, #472]	@ (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800629c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a0:	ee07 3a90 	vmov	s15, r3
 80062a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	ee07 3a90 	vmov	s15, r3
 80062bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80062c4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006470 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80062c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80062d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062e0:	e058      	b.n	8006394 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	ee07 3a90 	vmov	s15, r3
 80062e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ec:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800646c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80062f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fc:	ee07 3a90 	vmov	s15, r3
 8006300:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006304:	ed97 6a02 	vldr	s12, [r7, #8]
 8006308:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006470 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800630c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006310:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006314:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006318:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800631c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006320:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006324:	e036      	b.n	8006394 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006326:	4b50      	ldr	r3, [pc, #320]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006332:	4b4d      	ldr	r3, [pc, #308]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	0f1b      	lsrs	r3, r3, #28
 8006338:	f003 030f 	and.w	r3, r3, #15
 800633c:	e006      	b.n	800634c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800633e:	4b4a      	ldr	r3, [pc, #296]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006344:	041b      	lsls	r3, r3, #16
 8006346:	0f1b      	lsrs	r3, r3, #28
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	4a49      	ldr	r2, [pc, #292]	@ (8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800634e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	ee07 3a90 	vmov	s15, r3
 8006360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006372:	ed97 6a02 	vldr	s12, [r7, #8]
 8006376:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006470 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800637a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006386:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800638a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006392:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006394:	4b34      	ldr	r3, [pc, #208]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d017      	beq.n	80063d0 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80063a0:	4b31      	ldr	r3, [pc, #196]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80063a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a4:	0a5b      	lsrs	r3, r3, #9
 80063a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80063b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063b6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80063ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80063be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063c6:	ee17 2a90 	vmov	r2, s15
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	e002      	b.n	80063d6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80063d6:	4b24      	ldr	r3, [pc, #144]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80063d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d017      	beq.n	8006412 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80063e2:	4b21      	ldr	r3, [pc, #132]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80063e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e6:	0c1b      	lsrs	r3, r3, #16
 80063e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063ec:	ee07 3a90 	vmov	s15, r3
 80063f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80063f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063f8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80063fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006408:	ee17 2a90 	vmov	r2, s15
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	605a      	str	r2, [r3, #4]
 8006410:	e002      	b.n	8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006418:	4b13      	ldr	r3, [pc, #76]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800641a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d017      	beq.n	8006454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006424:	4b10      	ldr	r3, [pc, #64]	@ (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006428:	0e1b      	lsrs	r3, r3, #24
 800642a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006436:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800643a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800643e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800644a:	ee17 2a90 	vmov	r2, s15
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006452:	e002      	b.n	800645a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	609a      	str	r2, [r3, #8]
}
 800645a:	bf00      	nop
 800645c:	3724      	adds	r7, #36	@ 0x24
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	46020c00 	.word	0x46020c00
 800646c:	4b742400 	.word	0x4b742400
 8006470:	46000000 	.word	0x46000000
 8006474:	0800b9f4 	.word	0x0800b9f4

08006478 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006478:	b480      	push	{r7}
 800647a:	b089      	sub	sp, #36	@ 0x24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006480:	4ba6      	ldr	r3, [pc, #664]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006488:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800648a:	4ba4      	ldr	r3, [pc, #656]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800648c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006494:	4ba1      	ldr	r3, [pc, #644]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006498:	0a1b      	lsrs	r3, r3, #8
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	3301      	adds	r3, #1
 80064a0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80064a2:	4b9e      	ldr	r3, [pc, #632]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a6:	091b      	lsrs	r3, r3, #4
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80064ae:	4b9b      	ldr	r3, [pc, #620]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064b2:	08db      	lsrs	r3, r3, #3
 80064b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d062      	beq.n	8006596 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	f200 8081 	bhi.w	80065da <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d024      	beq.n	8006528 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d17a      	bne.n	80065da <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	ee07 3a90 	vmov	s15, r3
 80064ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ee:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80064f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f6:	4b89      	ldr	r3, [pc, #548]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006506:	ed97 6a02 	vldr	s12, [r7, #8]
 800650a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006724 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800650e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006512:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800651a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800651e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006522:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006526:	e08f      	b.n	8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006528:	4b7c      	ldr	r3, [pc, #496]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006534:	4b79      	ldr	r3, [pc, #484]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	0f1b      	lsrs	r3, r3, #28
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	e006      	b.n	800654e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006540:	4b76      	ldr	r3, [pc, #472]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006542:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006546:	041b      	lsls	r3, r3, #16
 8006548:	0f1b      	lsrs	r3, r3, #28
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	4a76      	ldr	r2, [pc, #472]	@ (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006554:	ee07 3a90 	vmov	s15, r3
 8006558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	ee07 3a90 	vmov	s15, r3
 8006570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006574:	ed97 6a02 	vldr	s12, [r7, #8]
 8006578:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006724 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800657c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006584:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006588:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800658c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006590:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006594:	e058      	b.n	8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	ee07 3a90 	vmov	s15, r3
 800659c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80065a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a8:	4b5c      	ldr	r3, [pc, #368]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b0:	ee07 3a90 	vmov	s15, r3
 80065b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80065b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80065bc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006724 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80065c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80065c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80065c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80065d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065d8:	e036      	b.n	8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80065da:	4b50      	ldr	r3, [pc, #320]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80065e6:	4b4d      	ldr	r3, [pc, #308]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	0f1b      	lsrs	r3, r3, #28
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	e006      	b.n	8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80065f2:	4b4a      	ldr	r3, [pc, #296]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	0f1b      	lsrs	r3, r3, #28
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	4a49      	ldr	r2, [pc, #292]	@ (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006606:	ee07 3a90 	vmov	s15, r3
 800660a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	ee07 3a90 	vmov	s15, r3
 8006614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006626:	ed97 6a02 	vldr	s12, [r7, #8]
 800662a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006724 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800662e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800663a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800663e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006646:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006648:	4b34      	ldr	r3, [pc, #208]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800664a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800664c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d017      	beq.n	8006684 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006654:	4b31      	ldr	r3, [pc, #196]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006658:	0a5b      	lsrs	r3, r3, #9
 800665a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006666:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800666a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800666e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800667a:	ee17 2a90 	vmov	r2, s15
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	e002      	b.n	800668a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800668a:	4b24      	ldr	r3, [pc, #144]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800668c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d017      	beq.n	80066c6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006696:	4b21      	ldr	r3, [pc, #132]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800669a:	0c1b      	lsrs	r3, r3, #16
 800669c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066a0:	ee07 3a90 	vmov	s15, r3
 80066a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80066a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066ac:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80066b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80066b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066bc:	ee17 2a90 	vmov	r2, s15
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	605a      	str	r2, [r3, #4]
 80066c4:	e002      	b.n	80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80066cc:	4b13      	ldr	r3, [pc, #76]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d017      	beq.n	8006708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80066d8:	4b10      	ldr	r3, [pc, #64]	@ (800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066dc:	0e1b      	lsrs	r3, r3, #24
 80066de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80066ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066ee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80066f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80066f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066fe:	ee17 2a90 	vmov	r2, s15
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006706:	e002      	b.n	800670e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	609a      	str	r2, [r3, #8]
}
 800670e:	bf00      	nop
 8006710:	3724      	adds	r7, #36	@ 0x24
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	46020c00 	.word	0x46020c00
 8006720:	4b742400 	.word	0x4b742400
 8006724:	46000000 	.word	0x46000000
 8006728:	0800b9f4 	.word	0x0800b9f4

0800672c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08e      	sub	sp, #56	@ 0x38
 8006730:	af00      	add	r7, sp, #0
 8006732:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800673a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800673e:	430b      	orrs	r3, r1
 8006740:	d145      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006742:	4baa      	ldr	r3, [pc, #680]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006748:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800674c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800674e:	4ba7      	ldr	r3, [pc, #668]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b02      	cmp	r3, #2
 800675a:	d108      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800675c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006762:	d104      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006764:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006768:	637b      	str	r3, [r7, #52]	@ 0x34
 800676a:	f001 b987 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800676e:	4b9f      	ldr	r3, [pc, #636]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006774:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006778:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800677c:	d114      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006784:	d110      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006786:	4b99      	ldr	r3, [pc, #612]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800678c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006790:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006794:	d103      	bne.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006796:	23fa      	movs	r3, #250	@ 0xfa
 8006798:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800679a:	f001 b96f 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800679e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80067a2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80067a4:	f001 b96a 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80067a8:	4b90      	ldr	r3, [pc, #576]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067b4:	d107      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80067b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067bc:	d103      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80067be:	4b8c      	ldr	r3, [pc, #560]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80067c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067c2:	f001 b95b 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ca:	f001 b957 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80067ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80067d6:	430b      	orrs	r3, r1
 80067d8:	d151      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80067da:	4b84      	ldr	r3, [pc, #528]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80067dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067e0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80067e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	2b80      	cmp	r3, #128	@ 0x80
 80067ea:	d035      	beq.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	2b80      	cmp	r3, #128	@ 0x80
 80067f0:	d841      	bhi.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	2b60      	cmp	r3, #96	@ 0x60
 80067f6:	d02a      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	2b60      	cmp	r3, #96	@ 0x60
 80067fc:	d83b      	bhi.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80067fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006800:	2b40      	cmp	r3, #64	@ 0x40
 8006802:	d009      	beq.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006806:	2b40      	cmp	r3, #64	@ 0x40
 8006808:	d835      	bhi.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00c      	beq.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006812:	2b20      	cmp	r3, #32
 8006814:	d012      	beq.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006816:	e02e      	b.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff fb77 	bl	8005f10 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006826:	f001 b929 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800682a:	f107 0318 	add.w	r3, r7, #24
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff fcc8 	bl	80061c4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006838:	f001 b920 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800683c:	f107 030c 	add.w	r3, r7, #12
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff fe19 	bl	8006478 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800684a:	f001 b917 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800684e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006852:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006854:	f001 b912 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006858:	4b64      	ldr	r3, [pc, #400]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006864:	d103      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006866:	4b63      	ldr	r3, [pc, #396]	@ (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006868:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800686a:	f001 b907 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006872:	f001 b903 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800687a:	f001 b8ff 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800687e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006882:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006886:	430b      	orrs	r3, r1
 8006888:	d158      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800688a:	4b58      	ldr	r3, [pc, #352]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800688c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006890:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006894:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800689c:	d03b      	beq.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068a4:	d846      	bhi.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068ac:	d02e      	beq.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068b4:	d83e      	bhi.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068bc:	d00b      	beq.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068c4:	d836      	bhi.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00d      	beq.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80068cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068d2:	d012      	beq.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80068d4:	e02e      	b.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff fb18 	bl	8005f10 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068e4:	f001 b8ca 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068e8:	f107 0318 	add.w	r3, r7, #24
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff fc69 	bl	80061c4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068f6:	f001 b8c1 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068fa:	f107 030c 	add.w	r3, r7, #12
 80068fe:	4618      	mov	r0, r3
 8006900:	f7ff fdba 	bl	8006478 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006908:	f001 b8b8 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800690c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006910:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006912:	f001 b8b3 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006916:	4b35      	ldr	r3, [pc, #212]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800691e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006922:	d103      	bne.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006924:	4b33      	ldr	r3, [pc, #204]	@ (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006928:	f001 b8a8 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006930:	f001 b8a4 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006938:	f001 b8a0 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800693c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006940:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006944:	430b      	orrs	r3, r1
 8006946:	d16e      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006948:	4b28      	ldr	r3, [pc, #160]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800694a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800694e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006952:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006956:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800695a:	d034      	beq.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 800695c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006962:	d85c      	bhi.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006966:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800696a:	d00b      	beq.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800696c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006972:	d854      	bhi.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006976:	2b00      	cmp	r3, #0
 8006978:	d016      	beq.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800697a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006980:	d009      	beq.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006982:	e04c      	b.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fac1 	bl	8005f10 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800698e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006990:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006992:	f001 b873 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006996:	f107 0318 	add.w	r3, r7, #24
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fc12 	bl	80061c4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069a4:	f001 b86a 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80069a8:	4b10      	ldr	r3, [pc, #64]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069b4:	d103      	bne.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 80069b6:	4b10      	ldr	r3, [pc, #64]	@ (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80069b8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069ba:	f001 b85f 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069c2:	f001 b85b 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069c6:	4b09      	ldr	r3, [pc, #36]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d121      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069d2:	4b06      	ldr	r3, [pc, #24]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00e      	beq.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80069de:	4b03      	ldr	r3, [pc, #12]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	0e1b      	lsrs	r3, r3, #24
 80069e4:	f003 030f 	and.w	r3, r3, #15
 80069e8:	e00f      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80069ea:	bf00      	nop
 80069ec:	46020c00 	.word	0x46020c00
 80069f0:	0007a120 	.word	0x0007a120
 80069f4:	00f42400 	.word	0x00f42400
 80069f8:	02dc6c00 	.word	0x02dc6c00
 80069fc:	4ba7      	ldr	r3, [pc, #668]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80069fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a02:	041b      	lsls	r3, r3, #16
 8006a04:	0e1b      	lsrs	r3, r3, #24
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	4aa5      	ldr	r2, [pc, #660]	@ (8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a10:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a12:	f001 b833 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a1a:	f001 b82f 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a22:	f001 b82b 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a2a:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	d17f      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006a32:	4b9a      	ldr	r3, [pc, #616]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006a34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a3c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d165      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006a44:	4b95      	ldr	r3, [pc, #596]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a4a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006a4e:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a52:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a56:	d034      	beq.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a5e:	d853      	bhi.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a66:	d00b      	beq.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a6e:	d84b      	bhi.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d016      	beq.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a7c:	d009      	beq.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006a7e:	e043      	b.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff fa43 	bl	8005f10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006a8e:	f000 bff5 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a92:	f107 0318 	add.w	r3, r7, #24
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff fb94 	bl	80061c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006aa0:	f000 bfec 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006aa4:	4b7d      	ldr	r3, [pc, #500]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ab0:	d103      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8006ab2:	4b7c      	ldr	r3, [pc, #496]	@ (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006ab4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006ab6:	f000 bfe1 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006abe:	f000 bfdd 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ac2:	4b76      	ldr	r3, [pc, #472]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d118      	bne.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ace:	4b73      	ldr	r3, [pc, #460]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006ada:	4b70      	ldr	r3, [pc, #448]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	0e1b      	lsrs	r3, r3, #24
 8006ae0:	f003 030f 	and.w	r3, r3, #15
 8006ae4:	e006      	b.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8006ae6:	4b6d      	ldr	r3, [pc, #436]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006aec:	041b      	lsls	r3, r3, #16
 8006aee:	0e1b      	lsrs	r3, r3, #24
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	4a6a      	ldr	r2, [pc, #424]	@ (8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006afa:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006afc:	f000 bfbe 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006b04:	f000 bfba 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006b0c:	f000 bfb6 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b16:	d108      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff f9f7 	bl	8005f10 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b26:	f000 bfa9 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2e:	f000 bfa5 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b36:	1e51      	subs	r1, r2, #1
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	d136      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006b3c:	4b57      	ldr	r3, [pc, #348]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d104      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006b4e:	f7fe fb8d 	bl	800526c <HAL_RCC_GetPCLK2Freq>
 8006b52:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b54:	f000 bf92 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d104      	bne.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b5e:	f7fe fa55 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8006b62:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b64:	f000 bf8a 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006b68:	4b4c      	ldr	r3, [pc, #304]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b74:	d106      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8006b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d103      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8006b7c:	4b4a      	ldr	r3, [pc, #296]	@ (8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006b7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b80:	f000 bf7c 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006b84:	4b45      	ldr	r3, [pc, #276]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d107      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d104      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8006b98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b9e:	f000 bf6d 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba6:	f000 bf69 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bae:	1e91      	subs	r1, r2, #2
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	d136      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006bb4:	4b39      	ldr	r3, [pc, #228]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bba:	f003 030c 	and.w	r3, r3, #12
 8006bbe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d104      	bne.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006bc6:	f7fe fb3d 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8006bca:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bcc:	f000 bf56 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d104      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006bd6:	f7fe fa19 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8006bda:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bdc:	f000 bf4e 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006be0:	4b2e      	ldr	r3, [pc, #184]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bec:	d106      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d103      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf8:	f000 bf40 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006bfc:	4b27      	ldr	r3, [pc, #156]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d107      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	2b0c      	cmp	r3, #12
 8006c0e:	d104      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006c10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c16:	f000 bf31 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c1e:	f000 bf2d 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c26:	1f11      	subs	r1, r2, #4
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	d13f      	bne.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c32:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c36:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d104      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c3e:	f7fe fb01 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8006c42:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c44:	f000 bf1a 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4a:	2b10      	cmp	r3, #16
 8006c4c:	d104      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c4e:	f7fe f9dd 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8006c52:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c54:	f000 bf12 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006c58:	4b10      	ldr	r3, [pc, #64]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c64:	d106      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d103      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c70:	f000 bf04 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006c74:	4b09      	ldr	r3, [pc, #36]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d107      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	2b30      	cmp	r3, #48	@ 0x30
 8006c86:	d104      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8006c88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c8e:	f000 bef5 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c96:	f000 bef1 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006c9a:	bf00      	nop
 8006c9c:	46020c00 	.word	0x46020c00
 8006ca0:	0800b9f4 	.word	0x0800b9f4
 8006ca4:	02dc6c00 	.word	0x02dc6c00
 8006ca8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cb0:	f1a2 0108 	sub.w	r1, r2, #8
 8006cb4:	430b      	orrs	r3, r1
 8006cb6:	d136      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006cb8:	4ba4      	ldr	r3, [pc, #656]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006cc2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d104      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006cca:	f7fe fabb 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8006cce:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cd0:	f000 bed4 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd6:	2b40      	cmp	r3, #64	@ 0x40
 8006cd8:	d104      	bne.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006cda:	f7fe f997 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8006cde:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ce0:	f000 becc 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006ce4:	4b99      	ldr	r3, [pc, #612]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cf0:	d106      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	2b80      	cmp	r3, #128	@ 0x80
 8006cf6:	d103      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8006cf8:	4b95      	ldr	r3, [pc, #596]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cfc:	f000 bebe 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006d00:	4b92      	ldr	r3, [pc, #584]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d107      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d10:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d12:	d104      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006d14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d1a:	f000 beaf 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d22:	f000 beab 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006d26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d2a:	f1a2 0110 	sub.w	r1, r2, #16
 8006d2e:	430b      	orrs	r3, r1
 8006d30:	d139      	bne.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006d32:	4b86      	ldr	r3, [pc, #536]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d3c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d44:	f7fe fa7e 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8006d48:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d4a:	f000 be97 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d54:	d104      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d56:	f7fe f959 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8006d5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d5c:	f000 be8e 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006d60:	4b7a      	ldr	r3, [pc, #488]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d6c:	d107      	bne.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d74:	d103      	bne.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8006d76:	4b76      	ldr	r3, [pc, #472]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d7a:	f000 be7f 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006d7e:	4b73      	ldr	r3, [pc, #460]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d108      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d92:	d104      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006d94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9a:	f000 be6f 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da2:	f000 be6b 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006daa:	f1a2 0120 	sub.w	r1, r2, #32
 8006dae:	430b      	orrs	r3, r1
 8006db0:	d158      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006db2:	4b66      	ldr	r3, [pc, #408]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d104      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006dc4:	f7fe fa66 	bl	8005294 <HAL_RCC_GetPCLK3Freq>
 8006dc8:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dca:	f000 be57 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d104      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006dd4:	f7fe f91a 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8006dd8:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dda:	f000 be4f 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006dde:	4b5b      	ldr	r3, [pc, #364]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dea:	d106      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8006dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d103      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8006df2:	4b57      	ldr	r3, [pc, #348]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df6:	f000 be41 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006dfa:	4b54      	ldr	r3, [pc, #336]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d107      	bne.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8006e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d104      	bne.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8006e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e14:	f000 be32 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006e18:	4b4c      	ldr	r3, [pc, #304]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d11b      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	d118      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e2a:	4b48      	ldr	r3, [pc, #288]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8006e36:	4b45      	ldr	r3, [pc, #276]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	0e1b      	lsrs	r3, r3, #24
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	e006      	b.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006e42:	4b42      	ldr	r3, [pc, #264]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e48:	041b      	lsls	r3, r3, #16
 8006e4a:	0e1b      	lsrs	r3, r3, #24
 8006e4c:	f003 030f 	and.w	r3, r3, #15
 8006e50:	4a40      	ldr	r2, [pc, #256]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e58:	f000 be10 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e60:	f000 be0c 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e68:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	d173      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006e70:	4b36      	ldr	r3, [pc, #216]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e76:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006e7a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e82:	d104      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e84:	f7fe f8c2 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8006e88:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e8a:	f000 bdf7 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e94:	d108      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e96:	f107 0318 	add.w	r3, r7, #24
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff f992 	bl	80061c4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea4:	f000 bdea 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d104      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006eae:	f7fe f9af 	bl	8005210 <HAL_RCC_GetHCLKFreq>
 8006eb2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006eb4:	f000 bde2 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006ebe:	d122      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ec0:	4b22      	ldr	r3, [pc, #136]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d118      	bne.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8006ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	0e1b      	lsrs	r3, r3, #24
 8006ede:	f003 030f 	and.w	r3, r3, #15
 8006ee2:	e006      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006ee4:	4b19      	ldr	r3, [pc, #100]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	0e1b      	lsrs	r3, r3, #24
 8006eee:	f003 030f 	and.w	r3, r3, #15
 8006ef2:	4a18      	ldr	r2, [pc, #96]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efa:	f000 bdbf 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f02:	f000 bdbb 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006f06:	4b11      	ldr	r3, [pc, #68]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f12:	d107      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f1a:	d103      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f20:	f000 bdac 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006f24:	4b09      	ldr	r3, [pc, #36]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f30:	d107      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f38:	d103      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8006f3a:	4b05      	ldr	r3, [pc, #20]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f3e:	f000 bd9d 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f46:	f000 bd99 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006f4a:	bf00      	nop
 8006f4c:	46020c00 	.word	0x46020c00
 8006f50:	00f42400 	.word	0x00f42400
 8006f54:	0800b9f4 	.word	0x0800b9f4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f5c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006f60:	430b      	orrs	r3, r1
 8006f62:	d158      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006f64:	4bad      	ldr	r3, [pc, #692]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d84b      	bhi.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006f76:	a201      	add	r2, pc, #4	@ (adr r2, 8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006fb5 	.word	0x08006fb5
 8006f80:	08006f91 	.word	0x08006f91
 8006f84:	08006fa3 	.word	0x08006fa3
 8006f88:	08006fbf 	.word	0x08006fbf
 8006f8c:	08006fc9 	.word	0x08006fc9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fe ffbb 	bl	8005f10 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f9e:	f000 bd6d 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fa2:	f107 030c 	add.w	r3, r7, #12
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7ff fa66 	bl	8006478 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fb0:	f000 bd64 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006fb4:	f7fe f92c 	bl	8005210 <HAL_RCC_GetHCLKFreq>
 8006fb8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006fba:	f000 bd5f 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006fbe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006fc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fc4:	f000 bd5a 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fc8:	4b94      	ldr	r3, [pc, #592]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b20      	cmp	r3, #32
 8006fd2:	d118      	bne.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fd4:	4b91      	ldr	r3, [pc, #580]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006fe0:	4b8e      	ldr	r3, [pc, #568]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	0e1b      	lsrs	r3, r3, #24
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	e006      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006fec:	4b8b      	ldr	r3, [pc, #556]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006fee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ff2:	041b      	lsls	r3, r3, #16
 8006ff4:	0e1b      	lsrs	r3, r3, #24
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	4a89      	ldr	r2, [pc, #548]	@ (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007000:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007002:	f000 bd3b 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800700a:	f000 bd37 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007012:	f000 bd33 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800701a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800701e:	430b      	orrs	r3, r1
 8007020:	d167      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007022:	4b7e      	ldr	r3, [pc, #504]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007028:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800702c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800702e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007030:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007034:	d036      	beq.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8007036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007038:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800703c:	d855      	bhi.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800703e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007040:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007044:	d029      	beq.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800704c:	d84d      	bhi.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007054:	d013      	beq.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8007056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800705c:	d845      	bhi.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	2b00      	cmp	r3, #0
 8007062:	d015      	beq.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007066:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800706a:	d13e      	bne.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800706c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007070:	4618      	mov	r0, r3
 8007072:	f7fe ff4d 	bl	8005f10 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800707a:	f000 bcff 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800707e:	f107 030c 	add.w	r3, r7, #12
 8007082:	4618      	mov	r0, r3
 8007084:	f7ff f9f8 	bl	8006478 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800708c:	f000 bcf6 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007090:	f7fe f8be 	bl	8005210 <HAL_RCC_GetHCLKFreq>
 8007094:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007096:	f000 bcf1 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800709a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800709e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070a0:	f000 bcec 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070a4:	4b5d      	ldr	r3, [pc, #372]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0320 	and.w	r3, r3, #32
 80070ac:	2b20      	cmp	r3, #32
 80070ae:	d118      	bne.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070b0:	4b5a      	ldr	r3, [pc, #360]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80070bc:	4b57      	ldr	r3, [pc, #348]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	0e1b      	lsrs	r3, r3, #24
 80070c2:	f003 030f 	and.w	r3, r3, #15
 80070c6:	e006      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80070c8:	4b54      	ldr	r3, [pc, #336]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	0e1b      	lsrs	r3, r3, #24
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	4a52      	ldr	r2, [pc, #328]	@ (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80070d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070de:	f000 bccd 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070e6:	f000 bcc9 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070ee:	f000 bcc5 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80070f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f6:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80070fa:	430b      	orrs	r3, r1
 80070fc:	d14c      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80070fe:	4b47      	ldr	r3, [pc, #284]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007104:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007108:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800710a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710c:	2b00      	cmp	r3, #0
 800710e:	d104      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007110:	f7fe f898 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8007114:	6378      	str	r0, [r7, #52]	@ 0x34
 8007116:	f000 bcb1 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800711a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007120:	d104      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007122:	f7fd ff73 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8007126:	6378      	str	r0, [r7, #52]	@ 0x34
 8007128:	f000 bca8 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800712c:	4b3b      	ldr	r3, [pc, #236]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007138:	d107      	bne.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007140:	d103      	bne.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8007142:	4b38      	ldr	r3, [pc, #224]	@ (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007144:	637b      	str	r3, [r7, #52]	@ 0x34
 8007146:	f000 bc99 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800714a:	4b34      	ldr	r3, [pc, #208]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b20      	cmp	r3, #32
 8007154:	d11c      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8007156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007158:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800715c:	d118      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800715e:	4b2f      	ldr	r3, [pc, #188]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800716a:	4b2c      	ldr	r3, [pc, #176]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	0e1b      	lsrs	r3, r3, #24
 8007170:	f003 030f 	and.w	r3, r3, #15
 8007174:	e006      	b.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8007176:	4b29      	ldr	r3, [pc, #164]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800717c:	041b      	lsls	r3, r3, #16
 800717e:	0e1b      	lsrs	r3, r3, #24
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	4a26      	ldr	r2, [pc, #152]	@ (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800718a:	637b      	str	r3, [r7, #52]	@ 0x34
 800718c:	f000 bc76 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	637b      	str	r3, [r7, #52]	@ 0x34
 8007194:	f000 bc72 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800719c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80071a0:	430b      	orrs	r3, r1
 80071a2:	d152      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80071a4:	4b1d      	ldr	r3, [pc, #116]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80071a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80071ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80071b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80071b6:	f7fe f845 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 80071ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80071bc:	f000 bc5e 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80071c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071c6:	d104      	bne.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80071c8:	f7fd ff20 	bl	800500c <HAL_RCC_GetSysClockFreq>
 80071cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80071ce:	f000 bc55 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80071d2:	4b12      	ldr	r3, [pc, #72]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071de:	d107      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 80071e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071e6:	d103      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 80071e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ec:	f000 bc46 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80071f0:	4b0a      	ldr	r3, [pc, #40]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0320 	and.w	r3, r3, #32
 80071f8:	2b20      	cmp	r3, #32
 80071fa:	d122      	bne.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007202:	d11e      	bne.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007204:	4b05      	ldr	r3, [pc, #20]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00b      	beq.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8007210:	4b02      	ldr	r3, [pc, #8]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	0e1b      	lsrs	r3, r3, #24
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	e00c      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 800721c:	46020c00 	.word	0x46020c00
 8007220:	0800b9f4 	.word	0x0800b9f4
 8007224:	00f42400 	.word	0x00f42400
 8007228:	4ba1      	ldr	r3, [pc, #644]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800722a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800722e:	041b      	lsls	r3, r3, #16
 8007230:	0e1b      	lsrs	r3, r3, #24
 8007232:	f003 030f 	and.w	r3, r3, #15
 8007236:	4a9f      	ldr	r2, [pc, #636]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800723c:	637b      	str	r3, [r7, #52]	@ 0x34
 800723e:	f000 bc1d 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	637b      	str	r3, [r7, #52]	@ 0x34
 8007246:	f000 bc19 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800724a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800724e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007252:	430b      	orrs	r3, r1
 8007254:	d151      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007256:	4b96      	ldr	r3, [pc, #600]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800725c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007260:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007264:	2bc0      	cmp	r3, #192	@ 0xc0
 8007266:	d024      	beq.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726a:	2bc0      	cmp	r3, #192	@ 0xc0
 800726c:	d842      	bhi.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800726e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007270:	2b80      	cmp	r3, #128	@ 0x80
 8007272:	d00d      	beq.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	2b80      	cmp	r3, #128	@ 0x80
 8007278:	d83c      	bhi.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800727a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8007280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007282:	2b40      	cmp	r3, #64	@ 0x40
 8007284:	d011      	beq.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8007286:	e035      	b.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007288:	f7fe f804 	bl	8005294 <HAL_RCC_GetPCLK3Freq>
 800728c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800728e:	e3f5      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007290:	4b87      	ldr	r3, [pc, #540]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800729c:	d102      	bne.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 800729e:	4b86      	ldr	r3, [pc, #536]	@ (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80072a0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072a2:	e3eb      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072a8:	e3e8      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80072aa:	f7fd feaf 	bl	800500c <HAL_RCC_GetSysClockFreq>
 80072ae:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80072b0:	e3e4      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072b2:	4b7f      	ldr	r3, [pc, #508]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0320 	and.w	r3, r3, #32
 80072ba:	2b20      	cmp	r3, #32
 80072bc:	d117      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072be:	4b7c      	ldr	r3, [pc, #496]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d005      	beq.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 80072ca:	4b79      	ldr	r3, [pc, #484]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	0e1b      	lsrs	r3, r3, #24
 80072d0:	f003 030f 	and.w	r3, r3, #15
 80072d4:	e006      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80072d6:	4b76      	ldr	r3, [pc, #472]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80072d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072dc:	041b      	lsls	r3, r3, #16
 80072de:	0e1b      	lsrs	r3, r3, #24
 80072e0:	f003 030f 	and.w	r3, r3, #15
 80072e4:	4a73      	ldr	r2, [pc, #460]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80072e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072ec:	e3c6      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072f2:	e3c3      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072f8:	e3c0      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80072fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072fe:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007302:	430b      	orrs	r3, r1
 8007304:	d147      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007306:	4b6a      	ldr	r3, [pc, #424]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800730c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007310:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007314:	2b00      	cmp	r3, #0
 8007316:	d103      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007318:	f7fd ff94 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 800731c:	6378      	str	r0, [r7, #52]	@ 0x34
 800731e:	e3ad      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007322:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007326:	d103      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007328:	f7fd fe70 	bl	800500c <HAL_RCC_GetSysClockFreq>
 800732c:	6378      	str	r0, [r7, #52]	@ 0x34
 800732e:	e3a5      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007330:	4b5f      	ldr	r3, [pc, #380]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800733c:	d106      	bne.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007344:	d102      	bne.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8007346:	4b5c      	ldr	r3, [pc, #368]	@ (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007348:	637b      	str	r3, [r7, #52]	@ 0x34
 800734a:	e397      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800734c:	4b58      	ldr	r3, [pc, #352]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0320 	and.w	r3, r3, #32
 8007354:	2b20      	cmp	r3, #32
 8007356:	d11b      	bne.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8007358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800735e:	d117      	bne.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007360:	4b53      	ldr	r3, [pc, #332]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d005      	beq.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 800736c:	4b50      	ldr	r3, [pc, #320]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	0e1b      	lsrs	r3, r3, #24
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	e006      	b.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8007378:	4b4d      	ldr	r3, [pc, #308]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800737a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800737e:	041b      	lsls	r3, r3, #16
 8007380:	0e1b      	lsrs	r3, r3, #24
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	4a4b      	ldr	r2, [pc, #300]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800738c:	637b      	str	r3, [r7, #52]	@ 0x34
 800738e:	e375      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	637b      	str	r3, [r7, #52]	@ 0x34
 8007394:	e372      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800739a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800739e:	430b      	orrs	r3, r1
 80073a0:	d164      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80073a2:	4b43      	ldr	r3, [pc, #268]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80073a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80073ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d120      	bne.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80073b4:	4b3e      	ldr	r3, [pc, #248]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b20      	cmp	r3, #32
 80073be:	d117      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073c0:	4b3b      	ldr	r3, [pc, #236]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d005      	beq.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80073cc:	4b38      	ldr	r3, [pc, #224]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	0e1b      	lsrs	r3, r3, #24
 80073d2:	f003 030f 	and.w	r3, r3, #15
 80073d6:	e006      	b.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80073d8:	4b35      	ldr	r3, [pc, #212]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80073da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073de:	041b      	lsls	r3, r3, #16
 80073e0:	0e1b      	lsrs	r3, r3, #24
 80073e2:	f003 030f 	and.w	r3, r3, #15
 80073e6:	4a33      	ldr	r2, [pc, #204]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80073e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ee:	e345      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073f4:	e342      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80073f6:	4b2e      	ldr	r3, [pc, #184]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80073f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007400:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007404:	d112      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8007406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800740c:	d10e      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800740e:	4b28      	ldr	r3, [pc, #160]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007418:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800741c:	d102      	bne.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 800741e:	23fa      	movs	r3, #250	@ 0xfa
 8007420:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007422:	e32b      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007424:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007428:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800742a:	e327      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800742c:	4b20      	ldr	r3, [pc, #128]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007438:	d106      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800743a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007440:	d102      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8007442:	4b1d      	ldr	r3, [pc, #116]	@ (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007444:	637b      	str	r3, [r7, #52]	@ 0x34
 8007446:	e319      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007448:	4b19      	ldr	r3, [pc, #100]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800744a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b02      	cmp	r3, #2
 8007454:	d107      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800745c:	d103      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 800745e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007462:	637b      	str	r3, [r7, #52]	@ 0x34
 8007464:	e30a      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	637b      	str	r3, [r7, #52]	@ 0x34
 800746a:	e307      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800746c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007470:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007474:	430b      	orrs	r3, r1
 8007476:	d16b      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007478:	4b0d      	ldr	r3, [pc, #52]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800747a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800747e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007482:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007486:	2b00      	cmp	r3, #0
 8007488:	d127      	bne.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800748a:	4b09      	ldr	r3, [pc, #36]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b20      	cmp	r3, #32
 8007494:	d11e      	bne.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007496:	4b06      	ldr	r3, [pc, #24]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00c      	beq.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80074a2:	4b03      	ldr	r3, [pc, #12]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	0e1b      	lsrs	r3, r3, #24
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	e00d      	b.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80074ae:	bf00      	nop
 80074b0:	46020c00 	.word	0x46020c00
 80074b4:	0800b9f4 	.word	0x0800b9f4
 80074b8:	00f42400 	.word	0x00f42400
 80074bc:	4b94      	ldr	r3, [pc, #592]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80074be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074c2:	041b      	lsls	r3, r3, #16
 80074c4:	0e1b      	lsrs	r3, r3, #24
 80074c6:	f003 030f 	and.w	r3, r3, #15
 80074ca:	4a92      	ldr	r2, [pc, #584]	@ (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80074cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d2:	e2d3      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d8:	e2d0      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80074da:	4b8d      	ldr	r3, [pc, #564]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80074dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074e8:	d112      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074f0:	d10e      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80074f2:	4b87      	ldr	r3, [pc, #540]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80074f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007500:	d102      	bne.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8007502:	23fa      	movs	r3, #250	@ 0xfa
 8007504:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007506:	e2b9      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007508:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800750c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800750e:	e2b5      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007510:	4b7f      	ldr	r3, [pc, #508]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800751c:	d106      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 800751e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007524:	d102      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8007526:	4b7c      	ldr	r3, [pc, #496]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007528:	637b      	str	r3, [r7, #52]	@ 0x34
 800752a:	e2a7      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800752c:	4b78      	ldr	r3, [pc, #480]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800752e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b02      	cmp	r3, #2
 8007538:	d107      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 800753a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007540:	d103      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8007542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007546:	637b      	str	r3, [r7, #52]	@ 0x34
 8007548:	e298      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	637b      	str	r3, [r7, #52]	@ 0x34
 800754e:	e295      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007554:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007558:	430b      	orrs	r3, r1
 800755a:	d147      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800755c:	4b6c      	ldr	r3, [pc, #432]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800755e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007562:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007566:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800756e:	f7fd fe69 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8007572:	6378      	str	r0, [r7, #52]	@ 0x34
 8007574:	e282      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007576:	4b66      	ldr	r3, [pc, #408]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800757c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007580:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007584:	d112      	bne.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800758c:	d10e      	bne.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800758e:	4b60      	ldr	r3, [pc, #384]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800759c:	d102      	bne.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 800759e:	23fa      	movs	r3, #250	@ 0xfa
 80075a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075a2:	e26b      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80075a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80075a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075aa:	e267      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80075ac:	4b58      	ldr	r3, [pc, #352]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075b8:	d106      	bne.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80075ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80075c0:	d102      	bne.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 80075c2:	4b55      	ldr	r3, [pc, #340]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80075c6:	e259      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80075c8:	4b51      	ldr	r3, [pc, #324]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80075ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d107      	bne.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 80075d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80075dc:	d103      	bne.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 80075de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075e4:	e24a      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ea:	e247      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80075ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075f0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80075f4:	430b      	orrs	r3, r1
 80075f6:	d12d      	bne.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80075f8:	4b45      	ldr	r3, [pc, #276]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80075fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075fe:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007602:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007604:	4b42      	ldr	r3, [pc, #264]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800760c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007610:	d105      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	2b00      	cmp	r3, #0
 8007616:	d102      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8007618:	4b3f      	ldr	r3, [pc, #252]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800761a:	637b      	str	r3, [r7, #52]	@ 0x34
 800761c:	e22e      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800761e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007624:	d107      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe fc70 	bl	8005f10 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007632:	637b      	str	r3, [r7, #52]	@ 0x34
 8007634:	e222      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800763c:	d107      	bne.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800763e:	f107 0318 	add.w	r3, r7, #24
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fdbe 	bl	80061c4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	637b      	str	r3, [r7, #52]	@ 0x34
 800764c:	e216      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	637b      	str	r3, [r7, #52]	@ 0x34
 8007652:	e213      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007658:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800765c:	430b      	orrs	r3, r1
 800765e:	d15d      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007660:	4b2b      	ldr	r3, [pc, #172]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007666:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800766a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800766c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007672:	d028      	beq.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8007674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007676:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800767a:	d845      	bhi.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800767c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007682:	d013      	beq.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8007684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007686:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800768a:	d83d      	bhi.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	2b00      	cmp	r3, #0
 8007690:	d004      	beq.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007698:	d004      	beq.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 800769a:	e035      	b.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800769c:	f7fd fde6 	bl	800526c <HAL_RCC_GetPCLK2Freq>
 80076a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076a2:	e1eb      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80076a4:	f7fd fcb2 	bl	800500c <HAL_RCC_GetSysClockFreq>
 80076a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076aa:	e1e7      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076ac:	4b18      	ldr	r3, [pc, #96]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076b8:	d102      	bne.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 80076ba:	4b17      	ldr	r3, [pc, #92]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076be:	e1dd      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076c4:	e1da      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076c6:	4b12      	ldr	r3, [pc, #72]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	d117      	bne.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80076de:	4b0c      	ldr	r3, [pc, #48]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	0e1b      	lsrs	r3, r3, #24
 80076e4:	f003 030f 	and.w	r3, r3, #15
 80076e8:	e006      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 80076ea:	4b09      	ldr	r3, [pc, #36]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80076ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076f0:	041b      	lsls	r3, r3, #16
 80076f2:	0e1b      	lsrs	r3, r3, #24
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	4a06      	ldr	r2, [pc, #24]	@ (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80076fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007700:	e1bc      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007706:	e1b9      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800770c:	e1b6      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800770e:	bf00      	nop
 8007710:	46020c00 	.word	0x46020c00
 8007714:	0800b9f4 	.word	0x0800b9f4
 8007718:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800771c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007720:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007724:	430b      	orrs	r3, r1
 8007726:	d156      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007728:	4ba5      	ldr	r3, [pc, #660]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800772a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800772e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007732:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007736:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800773a:	d028      	beq.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007742:	d845      	bhi.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8007744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007746:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800774a:	d013      	beq.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800774c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007752:	d83d      	bhi.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8007754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007756:	2b00      	cmp	r3, #0
 8007758:	d004      	beq.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007760:	d004      	beq.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8007762:	e035      	b.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007764:	f7fd fd6e 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8007768:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800776a:	e187      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800776c:	f7fd fc4e 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8007770:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007772:	e183      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007774:	4b92      	ldr	r3, [pc, #584]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800777c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007780:	d102      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8007782:	4b90      	ldr	r3, [pc, #576]	@ (80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007784:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007786:	e179      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800778c:	e176      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800778e:	4b8c      	ldr	r3, [pc, #560]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b20      	cmp	r3, #32
 8007798:	d117      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800779a:	4b89      	ldr	r3, [pc, #548]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d005      	beq.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 80077a6:	4b86      	ldr	r3, [pc, #536]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	0e1b      	lsrs	r3, r3, #24
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	e006      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 80077b2:	4b83      	ldr	r3, [pc, #524]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80077b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077b8:	041b      	lsls	r3, r3, #16
 80077ba:	0e1b      	lsrs	r3, r3, #24
 80077bc:	f003 030f 	and.w	r3, r3, #15
 80077c0:	4a81      	ldr	r2, [pc, #516]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80077c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077c8:	e158      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077ce:	e155      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077d4:	e152      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80077d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077da:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80077de:	430b      	orrs	r3, r1
 80077e0:	d177      	bne.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80077e2:	4b77      	ldr	r3, [pc, #476]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80077e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077e8:	f003 0318 	and.w	r3, r3, #24
 80077ec:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	2b18      	cmp	r3, #24
 80077f2:	d86b      	bhi.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80077f4:	a201      	add	r2, pc, #4	@ (adr r2, 80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80077f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fa:	bf00      	nop
 80077fc:	08007861 	.word	0x08007861
 8007800:	080078cd 	.word	0x080078cd
 8007804:	080078cd 	.word	0x080078cd
 8007808:	080078cd 	.word	0x080078cd
 800780c:	080078cd 	.word	0x080078cd
 8007810:	080078cd 	.word	0x080078cd
 8007814:	080078cd 	.word	0x080078cd
 8007818:	080078cd 	.word	0x080078cd
 800781c:	08007869 	.word	0x08007869
 8007820:	080078cd 	.word	0x080078cd
 8007824:	080078cd 	.word	0x080078cd
 8007828:	080078cd 	.word	0x080078cd
 800782c:	080078cd 	.word	0x080078cd
 8007830:	080078cd 	.word	0x080078cd
 8007834:	080078cd 	.word	0x080078cd
 8007838:	080078cd 	.word	0x080078cd
 800783c:	08007871 	.word	0x08007871
 8007840:	080078cd 	.word	0x080078cd
 8007844:	080078cd 	.word	0x080078cd
 8007848:	080078cd 	.word	0x080078cd
 800784c:	080078cd 	.word	0x080078cd
 8007850:	080078cd 	.word	0x080078cd
 8007854:	080078cd 	.word	0x080078cd
 8007858:	080078cd 	.word	0x080078cd
 800785c:	0800788b 	.word	0x0800788b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007860:	f7fd fd18 	bl	8005294 <HAL_RCC_GetPCLK3Freq>
 8007864:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007866:	e109      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007868:	f7fd fbd0 	bl	800500c <HAL_RCC_GetSysClockFreq>
 800786c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800786e:	e105      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007870:	4b53      	ldr	r3, [pc, #332]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800787c:	d102      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800787e:	4b51      	ldr	r3, [pc, #324]	@ (80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007880:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007882:	e0fb      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007888:	e0f8      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800788a:	4b4d      	ldr	r3, [pc, #308]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b20      	cmp	r3, #32
 8007894:	d117      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007896:	4b4a      	ldr	r3, [pc, #296]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d005      	beq.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 80078a2:	4b47      	ldr	r3, [pc, #284]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	0e1b      	lsrs	r3, r3, #24
 80078a8:	f003 030f 	and.w	r3, r3, #15
 80078ac:	e006      	b.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80078ae:	4b44      	ldr	r3, [pc, #272]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80078b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80078b4:	041b      	lsls	r3, r3, #16
 80078b6:	0e1b      	lsrs	r3, r3, #24
 80078b8:	f003 030f 	and.w	r3, r3, #15
 80078bc:	4a42      	ldr	r2, [pc, #264]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80078be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80078c4:	e0da      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078ca:	e0d7      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078d0:	e0d4      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80078d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078d6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80078da:	430b      	orrs	r3, r1
 80078dc:	d155      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80078de:	4b38      	ldr	r3, [pc, #224]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80078e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078e4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80078e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80078ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078f0:	d013      	beq.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80078f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078f8:	d844      	bhi.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80078fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007900:	d013      	beq.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8007902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007904:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007908:	d83c      	bhi.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800790a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790c:	2b00      	cmp	r3, #0
 800790e:	d014      	beq.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8007910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007916:	d014      	beq.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8007918:	e034      	b.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800791a:	f107 0318 	add.w	r3, r7, #24
 800791e:	4618      	mov	r0, r3
 8007920:	f7fe fc50 	bl	80061c4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007928:	e0a8      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800792a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe faee 	bl	8005f10 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007936:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007938:	e0a0      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800793a:	f7fd fb67 	bl	800500c <HAL_RCC_GetSysClockFreq>
 800793e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007940:	e09c      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007942:	4b1f      	ldr	r3, [pc, #124]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0320 	and.w	r3, r3, #32
 800794a:	2b20      	cmp	r3, #32
 800794c:	d117      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800794e:	4b1c      	ldr	r3, [pc, #112]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d005      	beq.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800795a:	4b19      	ldr	r3, [pc, #100]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	0e1b      	lsrs	r3, r3, #24
 8007960:	f003 030f 	and.w	r3, r3, #15
 8007964:	e006      	b.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8007966:	4b16      	ldr	r3, [pc, #88]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800796c:	041b      	lsls	r3, r3, #16
 800796e:	0e1b      	lsrs	r3, r3, #24
 8007970:	f003 030f 	and.w	r3, r3, #15
 8007974:	4a14      	ldr	r2, [pc, #80]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800797a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800797c:	e07e      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007982:	e07b      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007984:	2300      	movs	r3, #0
 8007986:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007988:	e078      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800798a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800798e:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007992:	430b      	orrs	r3, r1
 8007994:	d138      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007996:	4b0a      	ldr	r3, [pc, #40]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800799c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079a0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80079a2:	4b07      	ldr	r3, [pc, #28]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80079a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d10d      	bne.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 80079b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80079bc:	e05e      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80079be:	bf00      	nop
 80079c0:	46020c00 	.word	0x46020c00
 80079c4:	00f42400 	.word	0x00f42400
 80079c8:	0800b9f4 	.word	0x0800b9f4
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80079cc:	4b2e      	ldr	r3, [pc, #184]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80079ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079da:	d112      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 80079dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079e2:	d10e      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079e4:	4b28      	ldr	r3, [pc, #160]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80079e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079f2:	d102      	bne.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 80079f4:	23fa      	movs	r3, #250	@ 0xfa
 80079f6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079f8:	e040      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80079fa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80079fe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007a00:	e03c      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a06:	e039      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a0c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007a10:	430b      	orrs	r3, r1
 8007a12:	d131      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007a14:	4b1c      	ldr	r3, [pc, #112]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007a16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a1a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007a1e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007a20:	4b19      	ldr	r3, [pc, #100]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a2c:	d105      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d102      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8007a34:	4b15      	ldr	r3, [pc, #84]	@ (8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8007a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a38:	e020      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007a3a:	4b13      	ldr	r3, [pc, #76]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a46:	d106      	bne.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a4e:	d102      	bne.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007a50:	4b0f      	ldr	r3, [pc, #60]	@ (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8007a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a54:	e012      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007a56:	4b0c      	ldr	r3, [pc, #48]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a62:	d106      	bne.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a6a:	d102      	bne.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8007a6c:	4b09      	ldr	r3, [pc, #36]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a70:	e004      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a76:	e001      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3738      	adds	r7, #56	@ 0x38
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	46020c00 	.word	0x46020c00
 8007a8c:	02dc6c00 	.word	0x02dc6c00
 8007a90:	016e3600 	.word	0x016e3600
 8007a94:	00f42400 	.word	0x00f42400

08007a98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007aa0:	4b47      	ldr	r3, [pc, #284]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a46      	ldr	r2, [pc, #280]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007aa6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007aaa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007aac:	f7fa f80a 	bl	8001ac4 <HAL_GetTick>
 8007ab0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ab2:	e008      	b.n	8007ac6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ab4:	f7fa f806 	bl	8001ac4 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d901      	bls.n	8007ac6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e077      	b.n	8007bb6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1f0      	bne.n	8007ab4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007ada:	f023 0303 	bic.w	r3, r3, #3
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6811      	ldr	r1, [r2, #0]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6852      	ldr	r2, [r2, #4]
 8007ae6:	3a01      	subs	r2, #1
 8007ae8:	0212      	lsls	r2, r2, #8
 8007aea:	430a      	orrs	r2, r1
 8007aec:	4934      	ldr	r1, [pc, #208]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007af2:	4b33      	ldr	r3, [pc, #204]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007af4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007af6:	4b33      	ldr	r3, [pc, #204]	@ (8007bc4 <RCCEx_PLL2_Config+0x12c>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6892      	ldr	r2, [r2, #8]
 8007afe:	3a01      	subs	r2, #1
 8007b00:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	68d2      	ldr	r2, [r2, #12]
 8007b08:	3a01      	subs	r2, #1
 8007b0a:	0252      	lsls	r2, r2, #9
 8007b0c:	b292      	uxth	r2, r2
 8007b0e:	4311      	orrs	r1, r2
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	6912      	ldr	r2, [r2, #16]
 8007b14:	3a01      	subs	r2, #1
 8007b16:	0412      	lsls	r2, r2, #16
 8007b18:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007b1c:	4311      	orrs	r1, r2
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	6952      	ldr	r2, [r2, #20]
 8007b22:	3a01      	subs	r2, #1
 8007b24:	0612      	lsls	r2, r2, #24
 8007b26:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	4924      	ldr	r1, [pc, #144]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007b32:	4b23      	ldr	r3, [pc, #140]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b36:	f023 020c 	bic.w	r2, r3, #12
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	4920      	ldr	r1, [pc, #128]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007b44:	4b1e      	ldr	r3, [pc, #120]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	491c      	ldr	r1, [pc, #112]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007b52:	4b1b      	ldr	r3, [pc, #108]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b56:	4a1a      	ldr	r2, [pc, #104]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007b58:	f023 0310 	bic.w	r3, r3, #16
 8007b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b5e:	4b18      	ldr	r3, [pc, #96]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b66:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	69d2      	ldr	r2, [r2, #28]
 8007b6e:	00d2      	lsls	r2, r2, #3
 8007b70:	4913      	ldr	r1, [pc, #76]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007b76:	4b12      	ldr	r3, [pc, #72]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7a:	4a11      	ldr	r2, [pc, #68]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007b7c:	f043 0310 	orr.w	r3, r3, #16
 8007b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007b82:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a0e      	ldr	r2, [pc, #56]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007b88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b8c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b8e:	f7f9 ff99 	bl	8001ac4 <HAL_GetTick>
 8007b92:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b94:	e008      	b.n	8007ba8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b96:	f7f9 ff95 	bl	8001ac4 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d901      	bls.n	8007ba8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e006      	b.n	8007bb6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ba8:	4b05      	ldr	r3, [pc, #20]	@ (8007bc0 <RCCEx_PLL2_Config+0x128>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d0f0      	beq.n	8007b96 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0

}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	46020c00 	.word	0x46020c00
 8007bc4:	80800000 	.word	0x80800000

08007bc8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007bd0:	4b47      	ldr	r3, [pc, #284]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a46      	ldr	r2, [pc, #280]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bda:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007bdc:	f7f9 ff72 	bl	8001ac4 <HAL_GetTick>
 8007be0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007be2:	e008      	b.n	8007bf6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007be4:	f7f9 ff6e 	bl	8001ac4 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d901      	bls.n	8007bf6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e077      	b.n	8007ce6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1f0      	bne.n	8007be4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007c02:	4b3b      	ldr	r3, [pc, #236]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007c0a:	f023 0303 	bic.w	r3, r3, #3
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	6811      	ldr	r1, [r2, #0]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6852      	ldr	r2, [r2, #4]
 8007c16:	3a01      	subs	r2, #1
 8007c18:	0212      	lsls	r2, r2, #8
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	4934      	ldr	r1, [pc, #208]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	630b      	str	r3, [r1, #48]	@ 0x30
 8007c22:	4b33      	ldr	r3, [pc, #204]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c26:	4b33      	ldr	r3, [pc, #204]	@ (8007cf4 <RCCEx_PLL3_Config+0x12c>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	6892      	ldr	r2, [r2, #8]
 8007c2e:	3a01      	subs	r2, #1
 8007c30:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	68d2      	ldr	r2, [r2, #12]
 8007c38:	3a01      	subs	r2, #1
 8007c3a:	0252      	lsls	r2, r2, #9
 8007c3c:	b292      	uxth	r2, r2
 8007c3e:	4311      	orrs	r1, r2
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	6912      	ldr	r2, [r2, #16]
 8007c44:	3a01      	subs	r2, #1
 8007c46:	0412      	lsls	r2, r2, #16
 8007c48:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007c4c:	4311      	orrs	r1, r2
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	6952      	ldr	r2, [r2, #20]
 8007c52:	3a01      	subs	r2, #1
 8007c54:	0612      	lsls	r2, r2, #24
 8007c56:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	4924      	ldr	r1, [pc, #144]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007c62:	4b23      	ldr	r3, [pc, #140]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c66:	f023 020c 	bic.w	r2, r3, #12
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	4920      	ldr	r1, [pc, #128]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007c74:	4b1e      	ldr	r3, [pc, #120]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007c76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	491c      	ldr	r1, [pc, #112]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007c82:	4b1b      	ldr	r3, [pc, #108]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c86:	4a1a      	ldr	r2, [pc, #104]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007c88:	f023 0310 	bic.w	r3, r3, #16
 8007c8c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c8e:	4b18      	ldr	r3, [pc, #96]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c96:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	69d2      	ldr	r2, [r2, #28]
 8007c9e:	00d2      	lsls	r2, r2, #3
 8007ca0:	4913      	ldr	r1, [pc, #76]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007ca6:	4b12      	ldr	r3, [pc, #72]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007caa:	4a11      	ldr	r2, [pc, #68]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007cac:	f043 0310 	orr.w	r3, r3, #16
 8007cb0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a0e      	ldr	r2, [pc, #56]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cbc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007cbe:	f7f9 ff01 	bl	8001ac4 <HAL_GetTick>
 8007cc2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cc4:	e008      	b.n	8007cd8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cc6:	f7f9 fefd 	bl	8001ac4 <HAL_GetTick>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d901      	bls.n	8007cd8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e006      	b.n	8007ce6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cd8:	4b05      	ldr	r3, [pc, #20]	@ (8007cf0 <RCCEx_PLL3_Config+0x128>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d0f0      	beq.n	8007cc6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	46020c00 	.word	0x46020c00
 8007cf4:	80800000 	.word	0x80800000

08007cf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e042      	b.n	8007d90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d106      	bne.n	8007d22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7f9 fbc9 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2224      	movs	r2, #36	@ 0x24
 8007d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0201 	bic.w	r2, r2, #1
 8007d38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fe44 	bl	80089d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fc9f 	bl	800868c <UART_SetConfig>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d101      	bne.n	8007d58 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e01b      	b.n	8007d90 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0201 	orr.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fec3 	bl	8008b14 <UART_CheckIdleState>
 8007d8e:	4603      	mov	r3, r0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08a      	sub	sp, #40	@ 0x28
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	4613      	mov	r3, r2
 8007da6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	f040 808b 	bne.w	8007eca <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <HAL_UART_Transmit+0x28>
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e083      	b.n	8007ecc <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dce:	2b80      	cmp	r3, #128	@ 0x80
 8007dd0:	d107      	bne.n	8007de2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007de0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2221      	movs	r2, #33	@ 0x21
 8007dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007df2:	f7f9 fe67 	bl	8001ac4 <HAL_GetTick>
 8007df6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	88fa      	ldrh	r2, [r7, #6]
 8007dfc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	88fa      	ldrh	r2, [r7, #6]
 8007e04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e10:	d108      	bne.n	8007e24 <HAL_UART_Transmit+0x8c>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d104      	bne.n	8007e24 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	61bb      	str	r3, [r7, #24]
 8007e22:	e003      	b.n	8007e2c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e2c:	e030      	b.n	8007e90 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2200      	movs	r2, #0
 8007e36:	2180      	movs	r1, #128	@ 0x80
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f000 ff15 	bl	8008c68 <UART_WaitOnFlagUntilTimeout>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e03d      	b.n	8007ecc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10b      	bne.n	8007e6e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	3302      	adds	r3, #2
 8007e6a:	61bb      	str	r3, [r7, #24]
 8007e6c:	e007      	b.n	8007e7e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	781a      	ldrb	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1c8      	bne.n	8007e2e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2140      	movs	r1, #64	@ 0x40
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 fede 	bl	8008c68 <UART_WaitOnFlagUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d005      	beq.n	8007ebe <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e006      	b.n	8007ecc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e000      	b.n	8007ecc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8007eca:	2302      	movs	r3, #2
  }
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3720      	adds	r7, #32
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b091      	sub	sp, #68	@ 0x44
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ee8:	2b20      	cmp	r3, #32
 8007eea:	f040 8088 	bne.w	8007ffe <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <HAL_UART_Transmit_IT+0x26>
 8007ef4:	88fb      	ldrh	r3, [r7, #6]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e080      	b.n	8008000 <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f08:	2b80      	cmp	r3, #128	@ 0x80
 8007f0a:	d107      	bne.n	8007f1c <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689a      	ldr	r2, [r3, #8]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f1a:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	88fa      	ldrh	r2, [r7, #6]
 8007f26:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	88fa      	ldrh	r2, [r7, #6]
 8007f2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2221      	movs	r2, #33	@ 0x21
 8007f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f50:	d12a      	bne.n	8007fa8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f5a:	d107      	bne.n	8007f6c <HAL_UART_Transmit_IT+0x98>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d103      	bne.n	8007f6c <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4a29      	ldr	r2, [pc, #164]	@ (800800c <HAL_UART_Transmit_IT+0x138>)
 8007f68:	679a      	str	r2, [r3, #120]	@ 0x78
 8007f6a:	e002      	b.n	8007f72 <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4a28      	ldr	r2, [pc, #160]	@ (8008010 <HAL_UART_Transmit_IT+0x13c>)
 8007f70:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3308      	adds	r3, #8
 8007f78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3308      	adds	r3, #8
 8007f90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f92:	637a      	str	r2, [r7, #52]	@ 0x34
 8007f94:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e5      	bne.n	8007f72 <HAL_UART_Transmit_IT+0x9e>
 8007fa6:	e028      	b.n	8007ffa <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fb0:	d107      	bne.n	8007fc2 <HAL_UART_Transmit_IT+0xee>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d103      	bne.n	8007fc2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	4a15      	ldr	r2, [pc, #84]	@ (8008014 <HAL_UART_Transmit_IT+0x140>)
 8007fbe:	679a      	str	r2, [r3, #120]	@ 0x78
 8007fc0:	e002      	b.n	8007fc8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	4a14      	ldr	r2, [pc, #80]	@ (8008018 <HAL_UART_Transmit_IT+0x144>)
 8007fc6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	e853 3f00 	ldrex	r3, [r3]
 8007fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fe6:	623b      	str	r3, [r7, #32]
 8007fe8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fea:	69f9      	ldr	r1, [r7, #28]
 8007fec:	6a3a      	ldr	r2, [r7, #32]
 8007fee:	e841 2300 	strex	r3, r2, [r1]
 8007ff2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1e6      	bne.n	8007fc8 <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e000      	b.n	8008000 <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 8007ffe:	2302      	movs	r3, #2
  }
}
 8008000:	4618      	mov	r0, r3
 8008002:	3744      	adds	r7, #68	@ 0x44
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	080092db 	.word	0x080092db
 8008010:	080091fb 	.word	0x080091fb
 8008014:	08009139 	.word	0x08009139
 8008018:	08009081 	.word	0x08009081

0800801c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	@ 0x28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	4613      	mov	r3, r2
 8008028:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008030:	2b20      	cmp	r3, #32
 8008032:	d14b      	bne.n	80080cc <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <HAL_UART_Receive_IT+0x24>
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e044      	b.n	80080ce <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008054:	2b40      	cmp	r3, #64	@ 0x40
 8008056:	d107      	bne.n	8008068 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689a      	ldr	r2, [r3, #8]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008066:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a1a      	ldr	r2, [pc, #104]	@ (80080d8 <HAL_UART_Receive_IT+0xbc>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d024      	beq.n	80080bc <HAL_UART_Receive_IT+0xa0>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a19      	ldr	r2, [pc, #100]	@ (80080dc <HAL_UART_Receive_IT+0xc0>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d01f      	beq.n	80080bc <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d018      	beq.n	80080bc <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	e853 3f00 	ldrex	r3, [r3]
 8008096:	613b      	str	r3, [r7, #16]
   return(result);
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800809e:	627b      	str	r3, [r7, #36]	@ 0x24
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	461a      	mov	r2, r3
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	623b      	str	r3, [r7, #32]
 80080aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	69f9      	ldr	r1, [r7, #28]
 80080ae:	6a3a      	ldr	r2, [r7, #32]
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e6      	bne.n	800808a <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080bc:	88fb      	ldrh	r3, [r7, #6]
 80080be:	461a      	mov	r2, r3
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 fe3e 	bl	8008d44 <UART_Start_Receive_IT>
 80080c8:	4603      	mov	r3, r0
 80080ca:	e000      	b.n	80080ce <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80080cc:	2302      	movs	r3, #2
  }
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3728      	adds	r7, #40	@ 0x28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	46002400 	.word	0x46002400
 80080dc:	56002400 	.word	0x56002400

080080e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b0ae      	sub	sp, #184	@ 0xb8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800810a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800810e:	4013      	ands	r3, r2
 8008110:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8008114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008118:	2b00      	cmp	r3, #0
 800811a:	d11b      	bne.n	8008154 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800811c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008120:	f003 0320 	and.w	r3, r3, #32
 8008124:	2b00      	cmp	r3, #0
 8008126:	d015      	beq.n	8008154 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008128:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800812c:	f003 0320 	and.w	r3, r3, #32
 8008130:	2b00      	cmp	r3, #0
 8008132:	d105      	bne.n	8008140 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d009      	beq.n	8008154 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 827e 	beq.w	8008646 <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
      }
      return;
 8008152:	e278      	b.n	8008646 <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 80fd 	beq.w	8008358 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800815e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008162:	4b7a      	ldr	r3, [pc, #488]	@ (800834c <HAL_UART_IRQHandler+0x26c>)
 8008164:	4013      	ands	r3, r2
 8008166:	2b00      	cmp	r3, #0
 8008168:	d106      	bne.n	8008178 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800816a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800816e:	4b78      	ldr	r3, [pc, #480]	@ (8008350 <HAL_UART_IRQHandler+0x270>)
 8008170:	4013      	ands	r3, r2
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 80f0 	beq.w	8008358 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008178:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	2b00      	cmp	r3, #0
 8008182:	d011      	beq.n	80081a8 <HAL_UART_IRQHandler+0xc8>
 8008184:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2201      	movs	r2, #1
 8008196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819e:	f043 0201 	orr.w	r2, r3, #1
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d011      	beq.n	80081d8 <HAL_UART_IRQHandler+0xf8>
 80081b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00b      	beq.n	80081d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2202      	movs	r2, #2
 80081c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ce:	f043 0204 	orr.w	r2, r3, #4
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081dc:	f003 0304 	and.w	r3, r3, #4
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d011      	beq.n	8008208 <HAL_UART_IRQHandler+0x128>
 80081e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00b      	beq.n	8008208 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2204      	movs	r2, #4
 80081f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081fe:	f043 0202 	orr.w	r2, r3, #2
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008208:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b00      	cmp	r3, #0
 8008212:	d017      	beq.n	8008244 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008214:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	2b00      	cmp	r3, #0
 800821e:	d105      	bne.n	800822c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008220:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008224:	4b49      	ldr	r3, [pc, #292]	@ (800834c <HAL_UART_IRQHandler+0x26c>)
 8008226:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2208      	movs	r2, #8
 8008232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800823a:	f043 0208 	orr.w	r2, r3, #8
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008244:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800824c:	2b00      	cmp	r3, #0
 800824e:	d012      	beq.n	8008276 <HAL_UART_IRQHandler+0x196>
 8008250:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008254:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00c      	beq.n	8008276 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800826c:	f043 0220 	orr.w	r2, r3, #32
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 81e4 	beq.w	800864a <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008282:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	2b00      	cmp	r3, #0
 800828c:	d013      	beq.n	80082b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800828e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008292:	f003 0320 	and.w	r3, r3, #32
 8008296:	2b00      	cmp	r3, #0
 8008298:	d105      	bne.n	80082a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800829a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800829e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d007      	beq.n	80082b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ca:	2b40      	cmp	r3, #64	@ 0x40
 80082cc:	d005      	beq.n	80082da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80082d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d02e      	beq.n	8008338 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fe54 	bl	8008f88 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ea:	2b40      	cmp	r3, #64	@ 0x40
 80082ec:	d120      	bne.n	8008330 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d017      	beq.n	8008328 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082fe:	4a15      	ldr	r2, [pc, #84]	@ (8008354 <HAL_UART_IRQHandler+0x274>)
 8008300:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008308:	4618      	mov	r0, r3
 800830a:	f7fa f9e3 	bl	80026d4 <HAL_DMA_Abort_IT>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d019      	beq.n	8008348 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800831a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008322:	4610      	mov	r0, r2
 8008324:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008326:	e00f      	b.n	8008348 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f999 	bl	8008660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800832e:	e00b      	b.n	8008348 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f995 	bl	8008660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008336:	e007      	b.n	8008348 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f991 	bl	8008660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008346:	e180      	b.n	800864a <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008348:	bf00      	nop
    return;
 800834a:	e17e      	b.n	800864a <HAL_UART_IRQHandler+0x56a>
 800834c:	10000001 	.word	0x10000001
 8008350:	04000120 	.word	0x04000120
 8008354:	08009055 	.word	0x08009055

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800835c:	2b01      	cmp	r3, #1
 800835e:	f040 8129 	bne.w	80085b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008362:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008366:	f003 0310 	and.w	r3, r3, #16
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 8122 	beq.w	80085b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008370:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008374:	f003 0310 	and.w	r3, r3, #16
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 811b 	beq.w	80085b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2210      	movs	r2, #16
 8008384:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008390:	2b40      	cmp	r3, #64	@ 0x40
 8008392:	f040 8091 	bne.w	80084b8 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083a0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80083a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 8150 	beq.w	800864e <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083b4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80083b8:	429a      	cmp	r2, r3
 80083ba:	f080 8148 	bcs.w	800864e <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80083c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083d0:	2b81      	cmp	r3, #129	@ 0x81
 80083d2:	d060      	beq.n	8008496 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083dc:	e853 3f00 	ldrex	r3, [r3]
 80083e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80083e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80083e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	461a      	mov	r2, r3
 80083f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80083fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008402:	e841 2300 	strex	r3, r2, [r1]
 8008406:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008408:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1e2      	bne.n	80083d4 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3308      	adds	r3, #8
 8008414:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008416:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008418:	e853 3f00 	ldrex	r3, [r3]
 800841c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800841e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008420:	f023 0301 	bic.w	r3, r3, #1
 8008424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3308      	adds	r3, #8
 800842e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008432:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008434:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008438:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e3      	bne.n	800840e <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2220      	movs	r2, #32
 800844a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008464:	f023 0310 	bic.w	r3, r3, #16
 8008468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	461a      	mov	r2, r3
 8008472:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008476:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008478:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800847c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008484:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e4      	bne.n	8008454 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008490:	4618      	mov	r0, r3
 8008492:	f7fa f8a3 	bl	80025dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2202      	movs	r2, #2
 800849a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f8df 	bl	8008674 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084b6:	e0ca      	b.n	800864e <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 80bc 	beq.w	8008652 <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 80084da:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 80b7 	beq.w	8008652 <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ec:	e853 3f00 	ldrex	r3, [r3]
 80084f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008506:	647b      	str	r3, [r7, #68]	@ 0x44
 8008508:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800850c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800850e:	e841 2300 	strex	r3, r2, [r1]
 8008512:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1e4      	bne.n	80084e4 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3308      	adds	r3, #8
 8008520:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	e853 3f00 	ldrex	r3, [r3]
 8008528:	623b      	str	r3, [r7, #32]
   return(result);
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008530:	f023 0301 	bic.w	r3, r3, #1
 8008534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3308      	adds	r3, #8
 800853e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008542:	633a      	str	r2, [r7, #48]	@ 0x30
 8008544:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e1      	bne.n	800851a <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	e853 3f00 	ldrex	r3, [r3]
 8008576:	60fb      	str	r3, [r7, #12]
   return(result);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0310 	bic.w	r3, r3, #16
 800857e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800858c:	61fb      	str	r3, [r7, #28]
 800858e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008590:	69b9      	ldr	r1, [r7, #24]
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	e841 2300 	strex	r3, r2, [r1]
 8008598:	617b      	str	r3, [r7, #20]
   return(result);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e4      	bne.n	800856a <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2202      	movs	r2, #2
 80085a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085a6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f861 	bl	8008674 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085b2:	e04e      	b.n	8008652 <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d014      	beq.n	80085ea <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80085c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d105      	bne.n	80085d8 <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80085cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d008      	beq.n	80085ea <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d03a      	beq.n	8008656 <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	4798      	blx	r3
    }
    return;
 80085e8:	e035      	b.n	8008656 <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d009      	beq.n	800860a <HAL_UART_IRQHandler+0x52a>
 80085f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80085fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fede 	bl	80093c4 <UART_EndTransmit_IT>
    return;
 8008608:	e026      	b.n	8008658 <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800860a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800860e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d009      	beq.n	800862a <HAL_UART_IRQHandler+0x54a>
 8008616:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800861a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 fc3c 	bl	8009ea0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008628:	e016      	b.n	8008658 <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800862a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800862e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d010      	beq.n	8008658 <HAL_UART_IRQHandler+0x578>
 8008636:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800863a:	2b00      	cmp	r3, #0
 800863c:	da0c      	bge.n	8008658 <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f001 fc24 	bl	8009e8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008644:	e008      	b.n	8008658 <HAL_UART_IRQHandler+0x578>
      return;
 8008646:	bf00      	nop
 8008648:	e006      	b.n	8008658 <HAL_UART_IRQHandler+0x578>
    return;
 800864a:	bf00      	nop
 800864c:	e004      	b.n	8008658 <HAL_UART_IRQHandler+0x578>
      return;
 800864e:	bf00      	nop
 8008650:	e002      	b.n	8008658 <HAL_UART_IRQHandler+0x578>
      return;
 8008652:	bf00      	nop
 8008654:	e000      	b.n	8008658 <HAL_UART_IRQHandler+0x578>
    return;
 8008656:	bf00      	nop
  }
}
 8008658:	37b8      	adds	r7, #184	@ 0xb8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop

08008660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800868c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008690:	b094      	sub	sp, #80	@ 0x50
 8008692:	af00      	add	r7, sp, #0
 8008694:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800869c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	4b7e      	ldr	r3, [pc, #504]	@ (800889c <UART_SetConfig+0x210>)
 80086a2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a6:	689a      	ldr	r2, [r3, #8]
 80086a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	431a      	orrs	r2, r3
 80086ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	431a      	orrs	r2, r3
 80086b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4977      	ldr	r1, [pc, #476]	@ (80088a0 <UART_SetConfig+0x214>)
 80086c4:	4019      	ands	r1, r3
 80086c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086cc:	430b      	orrs	r3, r1
 80086ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80086da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086dc:	68d9      	ldr	r1, [r3, #12]
 80086de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	ea40 0301 	orr.w	r3, r0, r1
 80086e6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	4b6a      	ldr	r3, [pc, #424]	@ (800889c <UART_SetConfig+0x210>)
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d009      	beq.n	800870c <UART_SetConfig+0x80>
 80086f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	4b69      	ldr	r3, [pc, #420]	@ (80088a4 <UART_SetConfig+0x218>)
 80086fe:	429a      	cmp	r2, r3
 8008700:	d004      	beq.n	800870c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008704:	6a1a      	ldr	r2, [r3, #32]
 8008706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008708:	4313      	orrs	r3, r2
 800870a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800870c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008716:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800871a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008720:	430b      	orrs	r3, r1
 8008722:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872a:	f023 000f 	bic.w	r0, r3, #15
 800872e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008730:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	ea40 0301 	orr.w	r3, r0, r1
 800873a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800873c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	4b59      	ldr	r3, [pc, #356]	@ (80088a8 <UART_SetConfig+0x21c>)
 8008742:	429a      	cmp	r2, r3
 8008744:	d102      	bne.n	800874c <UART_SetConfig+0xc0>
 8008746:	2301      	movs	r3, #1
 8008748:	64bb      	str	r3, [r7, #72]	@ 0x48
 800874a:	e029      	b.n	80087a0 <UART_SetConfig+0x114>
 800874c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	4b56      	ldr	r3, [pc, #344]	@ (80088ac <UART_SetConfig+0x220>)
 8008752:	429a      	cmp	r2, r3
 8008754:	d102      	bne.n	800875c <UART_SetConfig+0xd0>
 8008756:	2302      	movs	r3, #2
 8008758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800875a:	e021      	b.n	80087a0 <UART_SetConfig+0x114>
 800875c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	4b53      	ldr	r3, [pc, #332]	@ (80088b0 <UART_SetConfig+0x224>)
 8008762:	429a      	cmp	r2, r3
 8008764:	d102      	bne.n	800876c <UART_SetConfig+0xe0>
 8008766:	2304      	movs	r3, #4
 8008768:	64bb      	str	r3, [r7, #72]	@ 0x48
 800876a:	e019      	b.n	80087a0 <UART_SetConfig+0x114>
 800876c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	4b50      	ldr	r3, [pc, #320]	@ (80088b4 <UART_SetConfig+0x228>)
 8008772:	429a      	cmp	r2, r3
 8008774:	d102      	bne.n	800877c <UART_SetConfig+0xf0>
 8008776:	2308      	movs	r3, #8
 8008778:	64bb      	str	r3, [r7, #72]	@ 0x48
 800877a:	e011      	b.n	80087a0 <UART_SetConfig+0x114>
 800877c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	4b4d      	ldr	r3, [pc, #308]	@ (80088b8 <UART_SetConfig+0x22c>)
 8008782:	429a      	cmp	r2, r3
 8008784:	d102      	bne.n	800878c <UART_SetConfig+0x100>
 8008786:	2310      	movs	r3, #16
 8008788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800878a:	e009      	b.n	80087a0 <UART_SetConfig+0x114>
 800878c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	4b42      	ldr	r3, [pc, #264]	@ (800889c <UART_SetConfig+0x210>)
 8008792:	429a      	cmp	r2, r3
 8008794:	d102      	bne.n	800879c <UART_SetConfig+0x110>
 8008796:	2320      	movs	r3, #32
 8008798:	64bb      	str	r3, [r7, #72]	@ 0x48
 800879a:	e001      	b.n	80087a0 <UART_SetConfig+0x114>
 800879c:	2300      	movs	r3, #0
 800879e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	4b3d      	ldr	r3, [pc, #244]	@ (800889c <UART_SetConfig+0x210>)
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d005      	beq.n	80087b6 <UART_SetConfig+0x12a>
 80087aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	4b3d      	ldr	r3, [pc, #244]	@ (80088a4 <UART_SetConfig+0x218>)
 80087b0:	429a      	cmp	r2, r3
 80087b2:	f040 8085 	bne.w	80088c0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80087b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087b8:	2200      	movs	r2, #0
 80087ba:	623b      	str	r3, [r7, #32]
 80087bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80087be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80087c2:	f7fd ffb3 	bl	800672c <HAL_RCCEx_GetPeriphCLKFreq>
 80087c6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80087c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 80e8 	beq.w	80089a0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d4:	4a39      	ldr	r2, [pc, #228]	@ (80088bc <UART_SetConfig+0x230>)
 80087d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087da:	461a      	mov	r2, r3
 80087dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087de:	fbb3 f3f2 	udiv	r3, r3, r2
 80087e2:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	4613      	mov	r3, r2
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	4413      	add	r3, r2
 80087ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d305      	bcc.n	8008800 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d903      	bls.n	8008808 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008806:	e048      	b.n	800889a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800880a:	2200      	movs	r2, #0
 800880c:	61bb      	str	r3, [r7, #24]
 800880e:	61fa      	str	r2, [r7, #28]
 8008810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008814:	4a29      	ldr	r2, [pc, #164]	@ (80088bc <UART_SetConfig+0x230>)
 8008816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800881a:	b29b      	uxth	r3, r3
 800881c:	2200      	movs	r2, #0
 800881e:	613b      	str	r3, [r7, #16]
 8008820:	617a      	str	r2, [r7, #20]
 8008822:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008826:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800882a:	f7f7 fd2d 	bl	8000288 <__aeabi_uldivmod>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	4610      	mov	r0, r2
 8008834:	4619      	mov	r1, r3
 8008836:	f04f 0200 	mov.w	r2, #0
 800883a:	f04f 0300 	mov.w	r3, #0
 800883e:	020b      	lsls	r3, r1, #8
 8008840:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008844:	0202      	lsls	r2, r0, #8
 8008846:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008848:	6849      	ldr	r1, [r1, #4]
 800884a:	0849      	lsrs	r1, r1, #1
 800884c:	2000      	movs	r0, #0
 800884e:	460c      	mov	r4, r1
 8008850:	4605      	mov	r5, r0
 8008852:	eb12 0804 	adds.w	r8, r2, r4
 8008856:	eb43 0905 	adc.w	r9, r3, r5
 800885a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	60bb      	str	r3, [r7, #8]
 8008862:	60fa      	str	r2, [r7, #12]
 8008864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008868:	4640      	mov	r0, r8
 800886a:	4649      	mov	r1, r9
 800886c:	f7f7 fd0c 	bl	8000288 <__aeabi_uldivmod>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4613      	mov	r3, r2
 8008876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800887a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800887e:	d308      	bcc.n	8008892 <UART_SetConfig+0x206>
 8008880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008886:	d204      	bcs.n	8008892 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800888e:	60da      	str	r2, [r3, #12]
 8008890:	e003      	b.n	800889a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008898:	e082      	b.n	80089a0 <UART_SetConfig+0x314>
 800889a:	e081      	b.n	80089a0 <UART_SetConfig+0x314>
 800889c:	46002400 	.word	0x46002400
 80088a0:	cfff69f3 	.word	0xcfff69f3
 80088a4:	56002400 	.word	0x56002400
 80088a8:	40013800 	.word	0x40013800
 80088ac:	40004400 	.word	0x40004400
 80088b0:	40004800 	.word	0x40004800
 80088b4:	40004c00 	.word	0x40004c00
 80088b8:	40005000 	.word	0x40005000
 80088bc:	0800bab4 	.word	0x0800bab4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088c8:	d13c      	bne.n	8008944 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80088ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088cc:	2200      	movs	r2, #0
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	607a      	str	r2, [r7, #4]
 80088d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088d6:	f7fd ff29 	bl	800672c <HAL_RCCEx_GetPeriphCLKFreq>
 80088da:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d05e      	beq.n	80089a0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e6:	4a39      	ldr	r2, [pc, #228]	@ (80089cc <UART_SetConfig+0x340>)
 80088e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088ec:	461a      	mov	r2, r3
 80088ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80088f4:	005a      	lsls	r2, r3, #1
 80088f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	085b      	lsrs	r3, r3, #1
 80088fc:	441a      	add	r2, r3
 80088fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	fbb2 f3f3 	udiv	r3, r2, r3
 8008906:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800890a:	2b0f      	cmp	r3, #15
 800890c:	d916      	bls.n	800893c <UART_SetConfig+0x2b0>
 800890e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008914:	d212      	bcs.n	800893c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008918:	b29b      	uxth	r3, r3
 800891a:	f023 030f 	bic.w	r3, r3, #15
 800891e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008922:	085b      	lsrs	r3, r3, #1
 8008924:	b29b      	uxth	r3, r3
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	b29a      	uxth	r2, r3
 800892c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800892e:	4313      	orrs	r3, r2
 8008930:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008938:	60da      	str	r2, [r3, #12]
 800893a:	e031      	b.n	80089a0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008942:	e02d      	b.n	80089a0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008946:	2200      	movs	r2, #0
 8008948:	469a      	mov	sl, r3
 800894a:	4693      	mov	fp, r2
 800894c:	4650      	mov	r0, sl
 800894e:	4659      	mov	r1, fp
 8008950:	f7fd feec 	bl	800672c <HAL_RCCEx_GetPeriphCLKFreq>
 8008954:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008958:	2b00      	cmp	r3, #0
 800895a:	d021      	beq.n	80089a0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800895c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008960:	4a1a      	ldr	r2, [pc, #104]	@ (80089cc <UART_SetConfig+0x340>)
 8008962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008966:	461a      	mov	r2, r3
 8008968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800896a:	fbb3 f2f2 	udiv	r2, r3, r2
 800896e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	085b      	lsrs	r3, r3, #1
 8008974:	441a      	add	r2, r3
 8008976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	fbb2 f3f3 	udiv	r3, r2, r3
 800897e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008982:	2b0f      	cmp	r3, #15
 8008984:	d909      	bls.n	800899a <UART_SetConfig+0x30e>
 8008986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800898c:	d205      	bcs.n	800899a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800898e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008990:	b29a      	uxth	r2, r3
 8008992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60da      	str	r2, [r3, #12]
 8008998:	e002      	b.n	80089a0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80089a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a2:	2201      	movs	r2, #1
 80089a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80089a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089aa:	2201      	movs	r2, #1
 80089ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b2:	2200      	movs	r2, #0
 80089b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80089b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b8:	2200      	movs	r2, #0
 80089ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80089bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3750      	adds	r7, #80	@ 0x50
 80089c4:	46bd      	mov	sp, r7
 80089c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089ca:	bf00      	nop
 80089cc:	0800bab4 	.word	0x0800bab4

080089d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089dc:	f003 0308 	and.w	r3, r3, #8
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00a      	beq.n	80089fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	430a      	orrs	r2, r1
 80089f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fe:	f003 0301 	and.w	r3, r3, #1
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00a      	beq.n	8008a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a20:	f003 0302 	and.w	r3, r3, #2
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00a      	beq.n	8008a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a42:	f003 0304 	and.w	r3, r3, #4
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00a      	beq.n	8008a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a64:	f003 0310 	and.w	r3, r3, #16
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00a      	beq.n	8008a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d01a      	beq.n	8008ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ace:	d10a      	bne.n	8008ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00a      	beq.n	8008b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	605a      	str	r2, [r3, #4]
  }
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b098      	sub	sp, #96	@ 0x60
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b24:	f7f8 ffce 	bl	8001ac4 <HAL_GetTick>
 8008b28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0308 	and.w	r3, r3, #8
 8008b34:	2b08      	cmp	r3, #8
 8008b36:	d12f      	bne.n	8008b98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b40:	2200      	movs	r2, #0
 8008b42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f88e 	bl	8008c68 <UART_WaitOnFlagUntilTimeout>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d022      	beq.n	8008b98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	e853 3f00 	ldrex	r3, [r3]
 8008b5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b66:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b78:	e841 2300 	strex	r3, r2, [r1]
 8008b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e6      	bne.n	8008b52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e063      	b.n	8008c60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0304 	and.w	r3, r3, #4
 8008ba2:	2b04      	cmp	r3, #4
 8008ba4:	d149      	bne.n	8008c3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ba6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f857 	bl	8008c68 <UART_WaitOnFlagUntilTimeout>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d03c      	beq.n	8008c3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc8:	e853 3f00 	ldrex	r3, [r3]
 8008bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bde:	633b      	str	r3, [r7, #48]	@ 0x30
 8008be0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008be6:	e841 2300 	strex	r3, r2, [r1]
 8008bea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1e6      	bne.n	8008bc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	e853 3f00 	ldrex	r3, [r3]
 8008c00:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f023 0301 	bic.w	r3, r3, #1
 8008c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	3308      	adds	r3, #8
 8008c10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c12:	61fa      	str	r2, [r7, #28]
 8008c14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c16:	69b9      	ldr	r1, [r7, #24]
 8008c18:	69fa      	ldr	r2, [r7, #28]
 8008c1a:	e841 2300 	strex	r3, r2, [r1]
 8008c1e:	617b      	str	r3, [r7, #20]
   return(result);
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1e5      	bne.n	8008bf2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2220      	movs	r2, #32
 8008c2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e012      	b.n	8008c60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2220      	movs	r2, #32
 8008c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3758      	adds	r7, #88	@ 0x58
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	603b      	str	r3, [r7, #0]
 8008c74:	4613      	mov	r3, r2
 8008c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c78:	e04f      	b.n	8008d1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c80:	d04b      	beq.n	8008d1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c82:	f7f8 ff1f 	bl	8001ac4 <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d302      	bcc.n	8008c98 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e04e      	b.n	8008d3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0304 	and.w	r3, r3, #4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d037      	beq.n	8008d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2b80      	cmp	r3, #128	@ 0x80
 8008cae:	d034      	beq.n	8008d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2b40      	cmp	r3, #64	@ 0x40
 8008cb4:	d031      	beq.n	8008d1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	f003 0308 	and.w	r3, r3, #8
 8008cc0:	2b08      	cmp	r3, #8
 8008cc2:	d110      	bne.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2208      	movs	r2, #8
 8008cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 f95b 	bl	8008f88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2208      	movs	r2, #8
 8008cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e029      	b.n	8008d3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	69db      	ldr	r3, [r3, #28]
 8008cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cf4:	d111      	bne.n	8008d1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 f941 	bl	8008f88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2220      	movs	r2, #32
 8008d0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e00f      	b.n	8008d3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	69da      	ldr	r2, [r3, #28]
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	4013      	ands	r3, r2
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	bf0c      	ite	eq
 8008d2a:	2301      	moveq	r3, #1
 8008d2c:	2300      	movne	r3, #0
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	461a      	mov	r2, r3
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d0a0      	beq.n	8008c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b0a3      	sub	sp, #140	@ 0x8c
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	88fa      	ldrh	r2, [r7, #6]
 8008d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	88fa      	ldrh	r2, [r7, #6]
 8008d64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d76:	d10e      	bne.n	8008d96 <UART_Start_Receive_IT+0x52>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d105      	bne.n	8008d8c <UART_Start_Receive_IT+0x48>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008d86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d8a:	e02d      	b.n	8008de8 <UART_Start_Receive_IT+0xa4>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	22ff      	movs	r2, #255	@ 0xff
 8008d90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d94:	e028      	b.n	8008de8 <UART_Start_Receive_IT+0xa4>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10d      	bne.n	8008dba <UART_Start_Receive_IT+0x76>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d104      	bne.n	8008db0 <UART_Start_Receive_IT+0x6c>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	22ff      	movs	r2, #255	@ 0xff
 8008daa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008dae:	e01b      	b.n	8008de8 <UART_Start_Receive_IT+0xa4>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	227f      	movs	r2, #127	@ 0x7f
 8008db4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008db8:	e016      	b.n	8008de8 <UART_Start_Receive_IT+0xa4>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dc2:	d10d      	bne.n	8008de0 <UART_Start_Receive_IT+0x9c>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d104      	bne.n	8008dd6 <UART_Start_Receive_IT+0x92>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	227f      	movs	r2, #127	@ 0x7f
 8008dd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008dd4:	e008      	b.n	8008de8 <UART_Start_Receive_IT+0xa4>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	223f      	movs	r2, #63	@ 0x3f
 8008dda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008dde:	e003      	b.n	8008de8 <UART_Start_Receive_IT+0xa4>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2222      	movs	r2, #34	@ 0x22
 8008df4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3308      	adds	r3, #8
 8008dfe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e02:	e853 3f00 	ldrex	r3, [r3]
 8008e06:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008e08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e0a:	f043 0301 	orr.w	r3, r3, #1
 8008e0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3308      	adds	r3, #8
 8008e18:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008e1c:	673a      	str	r2, [r7, #112]	@ 0x70
 8008e1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e20:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008e22:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008e24:	e841 2300 	strex	r3, r2, [r1]
 8008e28:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008e2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1e3      	bne.n	8008df8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e38:	d14f      	bne.n	8008eda <UART_Start_Receive_IT+0x196>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e40:	88fa      	ldrh	r2, [r7, #6]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d349      	bcc.n	8008eda <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e4e:	d107      	bne.n	8008e60 <UART_Start_Receive_IT+0x11c>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d103      	bne.n	8008e60 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4a47      	ldr	r2, [pc, #284]	@ (8008f78 <UART_Start_Receive_IT+0x234>)
 8008e5c:	675a      	str	r2, [r3, #116]	@ 0x74
 8008e5e:	e002      	b.n	8008e66 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4a46      	ldr	r2, [pc, #280]	@ (8008f7c <UART_Start_Receive_IT+0x238>)
 8008e64:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d01a      	beq.n	8008ea4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e76:	e853 3f00 	ldrex	r3, [r3]
 8008e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e92:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008e96:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e4      	bne.n	8008e6e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008eba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3308      	adds	r3, #8
 8008ec2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008ec4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008ec6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008eca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008ed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e5      	bne.n	8008ea4 <UART_Start_Receive_IT+0x160>
 8008ed8:	e046      	b.n	8008f68 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ee2:	d107      	bne.n	8008ef4 <UART_Start_Receive_IT+0x1b0>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d103      	bne.n	8008ef4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4a24      	ldr	r2, [pc, #144]	@ (8008f80 <UART_Start_Receive_IT+0x23c>)
 8008ef0:	675a      	str	r2, [r3, #116]	@ 0x74
 8008ef2:	e002      	b.n	8008efa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4a23      	ldr	r2, [pc, #140]	@ (8008f84 <UART_Start_Receive_IT+0x240>)
 8008ef8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d019      	beq.n	8008f36 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f0a:	e853 3f00 	ldrex	r3, [r3]
 8008f0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f12:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008f16:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f22:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f28:	e841 2300 	strex	r3, r2, [r1]
 8008f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1e6      	bne.n	8008f02 <UART_Start_Receive_IT+0x1be>
 8008f34:	e018      	b.n	8008f68 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	e853 3f00 	ldrex	r3, [r3]
 8008f42:	613b      	str	r3, [r7, #16]
   return(result);
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	f043 0320 	orr.w	r3, r3, #32
 8008f4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f54:	623b      	str	r3, [r7, #32]
 8008f56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f58:	69f9      	ldr	r1, [r7, #28]
 8008f5a:	6a3a      	ldr	r2, [r7, #32]
 8008f5c:	e841 2300 	strex	r3, r2, [r1]
 8008f60:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1e6      	bne.n	8008f36 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	378c      	adds	r7, #140	@ 0x8c
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	08009b15 	.word	0x08009b15
 8008f7c:	080097a5 	.word	0x080097a5
 8008f80:	080095e1 	.word	0x080095e1
 8008f84:	0800941d 	.word	0x0800941d

08008f88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b095      	sub	sp, #84	@ 0x54
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f98:	e853 3f00 	ldrex	r3, [r3]
 8008f9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fae:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fb6:	e841 2300 	strex	r3, r2, [r1]
 8008fba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e6      	bne.n	8008f90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fd8:	f023 0301 	bic.w	r3, r3, #1
 8008fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fe6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e3      	bne.n	8008fc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d118      	bne.n	8009034 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	e853 3f00 	ldrex	r3, [r3]
 800900e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f023 0310 	bic.w	r3, r3, #16
 8009016:	647b      	str	r3, [r7, #68]	@ 0x44
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	461a      	mov	r2, r3
 800901e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009020:	61bb      	str	r3, [r7, #24]
 8009022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009024:	6979      	ldr	r1, [r7, #20]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	e841 2300 	strex	r3, r2, [r1]
 800902c:	613b      	str	r3, [r7, #16]
   return(result);
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1e6      	bne.n	8009002 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2220      	movs	r2, #32
 8009038:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009048:	bf00      	nop
 800904a:	3754      	adds	r7, #84	@ 0x54
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009060:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7ff faf4 	bl	8008660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009078:	bf00      	nop
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009080:	b480      	push	{r7}
 8009082:	b08f      	sub	sp, #60	@ 0x3c
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800908e:	2b21      	cmp	r3, #33	@ 0x21
 8009090:	d14c      	bne.n	800912c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009098:	b29b      	uxth	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d132      	bne.n	8009104 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090be:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e6      	bne.n	800909e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ee:	61bb      	str	r3, [r7, #24]
 80090f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	6979      	ldr	r1, [r7, #20]
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	613b      	str	r3, [r7, #16]
   return(result);
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e6      	bne.n	80090d0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009102:	e013      	b.n	800912c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009108:	781a      	ldrb	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009114:	1c5a      	adds	r2, r3, #1
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009120:	b29b      	uxth	r3, r3
 8009122:	3b01      	subs	r3, #1
 8009124:	b29a      	uxth	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800912c:	bf00      	nop
 800912e:	373c      	adds	r7, #60	@ 0x3c
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009138:	b480      	push	{r7}
 800913a:	b091      	sub	sp, #68	@ 0x44
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009146:	2b21      	cmp	r3, #33	@ 0x21
 8009148:	d151      	bne.n	80091ee <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009150:	b29b      	uxth	r3, r3
 8009152:	2b00      	cmp	r3, #0
 8009154:	d132      	bne.n	80091bc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915e:	e853 3f00 	ldrex	r3, [r3]
 8009162:	623b      	str	r3, [r7, #32]
   return(result);
 8009164:	6a3b      	ldr	r3, [r7, #32]
 8009166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800916a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	461a      	mov	r2, r3
 8009172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009174:	633b      	str	r3, [r7, #48]	@ 0x30
 8009176:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009178:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800917a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800917c:	e841 2300 	strex	r3, r2, [r1]
 8009180:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1e6      	bne.n	8009156 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	e853 3f00 	ldrex	r3, [r3]
 8009194:	60fb      	str	r3, [r7, #12]
   return(result);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800919c:	637b      	str	r3, [r7, #52]	@ 0x34
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a6:	61fb      	str	r3, [r7, #28]
 80091a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	69b9      	ldr	r1, [r7, #24]
 80091ac:	69fa      	ldr	r2, [r7, #28]
 80091ae:	e841 2300 	strex	r3, r2, [r1]
 80091b2:	617b      	str	r3, [r7, #20]
   return(result);
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1e6      	bne.n	8009188 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80091ba:	e018      	b.n	80091ee <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80091c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c4:	881b      	ldrh	r3, [r3, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091d0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091d6:	1c9a      	adds	r2, r3, #2
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	3b01      	subs	r3, #1
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80091ee:	bf00      	nop
 80091f0:	3744      	adds	r7, #68	@ 0x44
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b091      	sub	sp, #68	@ 0x44
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009208:	2b21      	cmp	r3, #33	@ 0x21
 800920a:	d160      	bne.n	80092ce <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009212:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009214:	e057      	b.n	80092c6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800921c:	b29b      	uxth	r3, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	d133      	bne.n	800928a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3308      	adds	r3, #8
 8009228:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	623b      	str	r3, [r7, #32]
   return(result);
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009238:	63bb      	str	r3, [r7, #56]	@ 0x38
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3308      	adds	r3, #8
 8009240:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009242:	633a      	str	r2, [r7, #48]	@ 0x30
 8009244:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009246:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800924a:	e841 2300 	strex	r3, r2, [r1]
 800924e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1e5      	bne.n	8009222 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	e853 3f00 	ldrex	r3, [r3]
 8009262:	60fb      	str	r3, [r7, #12]
   return(result);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800926a:	637b      	str	r3, [r7, #52]	@ 0x34
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	461a      	mov	r2, r3
 8009272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009274:	61fb      	str	r3, [r7, #28]
 8009276:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009278:	69b9      	ldr	r1, [r7, #24]
 800927a:	69fa      	ldr	r2, [r7, #28]
 800927c:	e841 2300 	strex	r3, r2, [r1]
 8009280:	617b      	str	r3, [r7, #20]
   return(result);
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1e6      	bne.n	8009256 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009288:	e021      	b.n	80092ce <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009294:	2b00      	cmp	r3, #0
 8009296:	d013      	beq.n	80092c0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800929c:	781a      	ldrb	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	3b01      	subs	r3, #1
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80092c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80092c2:	3b01      	subs	r3, #1
 80092c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80092c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1a4      	bne.n	8009216 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80092cc:	e7ff      	b.n	80092ce <UART_TxISR_8BIT_FIFOEN+0xd4>
 80092ce:	bf00      	nop
 80092d0:	3744      	adds	r7, #68	@ 0x44
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092da:	b480      	push	{r7}
 80092dc:	b091      	sub	sp, #68	@ 0x44
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092e8:	2b21      	cmp	r3, #33	@ 0x21
 80092ea:	d165      	bne.n	80093b8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80092f4:	e05c      	b.n	80093b0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d133      	bne.n	800936a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3308      	adds	r3, #8
 8009308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	61fb      	str	r3, [r7, #28]
   return(result);
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009318:	637b      	str	r3, [r7, #52]	@ 0x34
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3308      	adds	r3, #8
 8009320:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009322:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009324:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009328:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e5      	bne.n	8009302 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	e853 3f00 	ldrex	r3, [r3]
 8009342:	60bb      	str	r3, [r7, #8]
   return(result);
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800934a:	633b      	str	r3, [r7, #48]	@ 0x30
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009354:	61bb      	str	r3, [r7, #24]
 8009356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	6979      	ldr	r1, [r7, #20]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	e841 2300 	strex	r3, r2, [r1]
 8009360:	613b      	str	r3, [r7, #16]
   return(result);
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e6      	bne.n	8009336 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009368:	e026      	b.n	80093b8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	69db      	ldr	r3, [r3, #28]
 8009370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009374:	2b00      	cmp	r3, #0
 8009376:	d018      	beq.n	80093aa <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800937c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800937e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800938c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009392:	1c9a      	adds	r2, r3, #2
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800939e:	b29b      	uxth	r3, r3
 80093a0:	3b01      	subs	r3, #1
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80093aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80093ac:	3b01      	subs	r3, #1
 80093ae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80093b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d19f      	bne.n	80092f6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80093b6:	e7ff      	b.n	80093b8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80093b8:	bf00      	nop
 80093ba:	3744      	adds	r7, #68	@ 0x44
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b088      	sub	sp, #32
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	e853 3f00 	ldrex	r3, [r3]
 80093d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093e0:	61fb      	str	r3, [r7, #28]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	61bb      	str	r3, [r7, #24]
 80093ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ee:	6979      	ldr	r1, [r7, #20]
 80093f0:	69ba      	ldr	r2, [r7, #24]
 80093f2:	e841 2300 	strex	r3, r2, [r1]
 80093f6:	613b      	str	r3, [r7, #16]
   return(result);
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1e6      	bne.n	80093cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2220      	movs	r2, #32
 8009402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7f7 fcdb 	bl	8000dc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009412:	bf00      	nop
 8009414:	3720      	adds	r7, #32
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
	...

0800941c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b09c      	sub	sp, #112	@ 0x70
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800942a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009434:	2b22      	cmp	r3, #34	@ 0x22
 8009436:	f040 80c3 	bne.w	80095c0 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009440:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009444:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009448:	b2d9      	uxtb	r1, r3
 800944a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800944e:	b2da      	uxtb	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009454:	400a      	ands	r2, r1
 8009456:	b2d2      	uxtb	r2, r2
 8009458:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800945e:	1c5a      	adds	r2, r3, #1
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800946a:	b29b      	uxth	r3, r3
 800946c:	3b01      	subs	r3, #1
 800946e:	b29a      	uxth	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800947c:	b29b      	uxth	r3, r3
 800947e:	2b00      	cmp	r3, #0
 8009480:	f040 80a6 	bne.w	80095d0 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009494:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009498:	66bb      	str	r3, [r7, #104]	@ 0x68
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e6      	bne.n	8009484 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3308      	adds	r3, #8
 80094bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094c8:	f023 0301 	bic.w	r3, r3, #1
 80094cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3308      	adds	r3, #8
 80094d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80094d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80094d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e5      	bne.n	80094b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2220      	movs	r2, #32
 80094ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a35      	ldr	r2, [pc, #212]	@ (80095d8 <UART_RxISR_8BIT+0x1bc>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d024      	beq.n	8009552 <UART_RxISR_8BIT+0x136>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a33      	ldr	r2, [pc, #204]	@ (80095dc <UART_RxISR_8BIT+0x1c0>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d01f      	beq.n	8009552 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d018      	beq.n	8009552 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	623b      	str	r3, [r7, #32]
   return(result);
 800952e:	6a3b      	ldr	r3, [r7, #32]
 8009530:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009534:	663b      	str	r3, [r7, #96]	@ 0x60
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800953e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009540:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800954c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e6      	bne.n	8009520 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009556:	2b01      	cmp	r3, #1
 8009558:	d12e      	bne.n	80095b8 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	60fb      	str	r3, [r7, #12]
   return(result);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f023 0310 	bic.w	r3, r3, #16
 8009574:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800957e:	61fb      	str	r3, [r7, #28]
 8009580:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	69b9      	ldr	r1, [r7, #24]
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	e841 2300 	strex	r3, r2, [r1]
 800958a:	617b      	str	r3, [r7, #20]
   return(result);
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1e6      	bne.n	8009560 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	f003 0310 	and.w	r3, r3, #16
 800959c:	2b10      	cmp	r3, #16
 800959e:	d103      	bne.n	80095a8 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2210      	movs	r2, #16
 80095a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7ff f85f 	bl	8008674 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095b6:	e00b      	b.n	80095d0 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f7f7 fb63 	bl	8000c84 <HAL_UART_RxCpltCallback>
}
 80095be:	e007      	b.n	80095d0 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	699a      	ldr	r2, [r3, #24]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f042 0208 	orr.w	r2, r2, #8
 80095ce:	619a      	str	r2, [r3, #24]
}
 80095d0:	bf00      	nop
 80095d2:	3770      	adds	r7, #112	@ 0x70
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	46002400 	.word	0x46002400
 80095dc:	56002400 	.word	0x56002400

080095e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b09c      	sub	sp, #112	@ 0x70
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095f8:	2b22      	cmp	r3, #34	@ 0x22
 80095fa:	f040 80c3 	bne.w	8009784 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009604:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800960c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800960e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009612:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009616:	4013      	ands	r3, r2
 8009618:	b29a      	uxth	r2, r3
 800961a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800961c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009622:	1c9a      	adds	r2, r3, #2
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800962e:	b29b      	uxth	r3, r3
 8009630:	3b01      	subs	r3, #1
 8009632:	b29a      	uxth	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009640:	b29b      	uxth	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	f040 80a6 	bne.w	8009794 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009650:	e853 3f00 	ldrex	r3, [r3]
 8009654:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009658:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800965c:	667b      	str	r3, [r7, #100]	@ 0x64
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009666:	657b      	str	r3, [r7, #84]	@ 0x54
 8009668:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800966c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800966e:	e841 2300 	strex	r3, r2, [r1]
 8009672:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e6      	bne.n	8009648 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3308      	adds	r3, #8
 8009680:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009684:	e853 3f00 	ldrex	r3, [r3]
 8009688:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800968a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968c:	f023 0301 	bic.w	r3, r3, #1
 8009690:	663b      	str	r3, [r7, #96]	@ 0x60
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	3308      	adds	r3, #8
 8009698:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800969a:	643a      	str	r2, [r7, #64]	@ 0x40
 800969c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096a2:	e841 2300 	strex	r3, r2, [r1]
 80096a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1e5      	bne.n	800967a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2220      	movs	r2, #32
 80096b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a35      	ldr	r2, [pc, #212]	@ (800979c <UART_RxISR_16BIT+0x1bc>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d024      	beq.n	8009716 <UART_RxISR_16BIT+0x136>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a33      	ldr	r2, [pc, #204]	@ (80097a0 <UART_RxISR_16BIT+0x1c0>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d01f      	beq.n	8009716 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d018      	beq.n	8009716 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	e853 3f00 	ldrex	r3, [r3]
 80096f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009704:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009706:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1e6      	bne.n	80096e4 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800971a:	2b01      	cmp	r3, #1
 800971c:	d12e      	bne.n	800977c <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	e853 3f00 	ldrex	r3, [r3]
 8009730:	60bb      	str	r3, [r7, #8]
   return(result);
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	f023 0310 	bic.w	r3, r3, #16
 8009738:	65bb      	str	r3, [r7, #88]	@ 0x58
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	461a      	mov	r2, r3
 8009740:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009742:	61bb      	str	r3, [r7, #24]
 8009744:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009746:	6979      	ldr	r1, [r7, #20]
 8009748:	69ba      	ldr	r2, [r7, #24]
 800974a:	e841 2300 	strex	r3, r2, [r1]
 800974e:	613b      	str	r3, [r7, #16]
   return(result);
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1e6      	bne.n	8009724 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	69db      	ldr	r3, [r3, #28]
 800975c:	f003 0310 	and.w	r3, r3, #16
 8009760:	2b10      	cmp	r3, #16
 8009762:	d103      	bne.n	800976c <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2210      	movs	r2, #16
 800976a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7fe ff7d 	bl	8008674 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800977a:	e00b      	b.n	8009794 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7f7 fa81 	bl	8000c84 <HAL_UART_RxCpltCallback>
}
 8009782:	e007      	b.n	8009794 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	699a      	ldr	r2, [r3, #24]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f042 0208 	orr.w	r2, r2, #8
 8009792:	619a      	str	r2, [r3, #24]
}
 8009794:	bf00      	nop
 8009796:	3770      	adds	r7, #112	@ 0x70
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	46002400 	.word	0x46002400
 80097a0:	56002400 	.word	0x56002400

080097a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b0ac      	sub	sp, #176	@ 0xb0
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	69db      	ldr	r3, [r3, #28]
 80097bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097da:	2b22      	cmp	r3, #34	@ 0x22
 80097dc:	f040 8187 	bne.w	8009aee <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80097e6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097ea:	e12a      	b.n	8009a42 <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097f2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80097f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80097fa:	b2d9      	uxtb	r1, r3
 80097fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009800:	b2da      	uxtb	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009806:	400a      	ands	r2, r1
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009810:	1c5a      	adds	r2, r3, #1
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800981c:	b29b      	uxth	r3, r3
 800981e:	3b01      	subs	r3, #1
 8009820:	b29a      	uxth	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009836:	f003 0307 	and.w	r3, r3, #7
 800983a:	2b00      	cmp	r3, #0
 800983c:	d053      	beq.n	80098e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800983e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d011      	beq.n	800986e <UART_RxISR_8BIT_FIFOEN+0xca>
 800984a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800984e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00b      	beq.n	800986e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2201      	movs	r2, #1
 800985c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009864:	f043 0201 	orr.w	r2, r3, #1
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800986e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009872:	f003 0302 	and.w	r3, r3, #2
 8009876:	2b00      	cmp	r3, #0
 8009878:	d011      	beq.n	800989e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800987a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00b      	beq.n	800989e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2202      	movs	r2, #2
 800988c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009894:	f043 0204 	orr.w	r2, r3, #4
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800989e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098a2:	f003 0304 	and.w	r3, r3, #4
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d011      	beq.n	80098ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 80098aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00b      	beq.n	80098ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2204      	movs	r2, #4
 80098bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098c4:	f043 0202 	orr.w	r2, r3, #2
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d006      	beq.n	80098e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7fe fec1 	bl	8008660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f040 80a7 	bne.w	8009a42 <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098fc:	e853 3f00 	ldrex	r3, [r3]
 8009900:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009908:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	461a      	mov	r2, r3
 8009912:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009916:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009918:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800991c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009924:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e4      	bne.n	80098f4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3308      	adds	r3, #8
 8009930:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009934:	e853 3f00 	ldrex	r3, [r3]
 8009938:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800993a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800993c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009940:	f023 0301 	bic.w	r3, r3, #1
 8009944:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3308      	adds	r3, #8
 800994e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009952:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009954:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009956:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009958:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800995a:	e841 2300 	strex	r3, r2, [r1]
 800995e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009960:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1e1      	bne.n	800992a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2220      	movs	r2, #32
 800996a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a62      	ldr	r2, [pc, #392]	@ (8009b08 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d026      	beq.n	80099d2 <UART_RxISR_8BIT_FIFOEN+0x22e>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a60      	ldr	r2, [pc, #384]	@ (8009b0c <UART_RxISR_8BIT_FIFOEN+0x368>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d021      	beq.n	80099d2 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009998:	2b00      	cmp	r3, #0
 800999a:	d01a      	beq.n	80099d2 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099a4:	e853 3f00 	ldrex	r3, [r3]
 80099a8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80099aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80099b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	461a      	mov	r2, r3
 80099ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80099be:	657b      	str	r3, [r7, #84]	@ 0x54
 80099c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80099c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80099cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e4      	bne.n	800999c <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d130      	bne.n	8009a3c <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e8:	e853 3f00 	ldrex	r3, [r3]
 80099ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f0:	f023 0310 	bic.w	r3, r3, #16
 80099f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	461a      	mov	r2, r3
 80099fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a02:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a0a:	e841 2300 	strex	r3, r2, [r1]
 8009a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1e4      	bne.n	80099e0 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	f003 0310 	and.w	r3, r3, #16
 8009a20:	2b10      	cmp	r3, #16
 8009a22:	d103      	bne.n	8009a2c <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2210      	movs	r2, #16
 8009a2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7fe fe1d 	bl	8008674 <HAL_UARTEx_RxEventCallback>
 8009a3a:	e002      	b.n	8009a42 <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7f7 f921 	bl	8000c84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a42:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d006      	beq.n	8009a58 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 8009a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a4e:	f003 0320 	and.w	r3, r3, #32
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	f47f aeca 	bne.w	80097ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a5e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d049      	beq.n	8009afe <UART_RxISR_8BIT_FIFOEN+0x35a>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a70:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d242      	bcs.n	8009afe <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3308      	adds	r3, #8
 8009a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	e853 3f00 	ldrex	r3, [r3]
 8009a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009a9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009aa4:	e841 2300 	strex	r3, r2, [r1]
 8009aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1e3      	bne.n	8009a78 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a17      	ldr	r2, [pc, #92]	@ (8009b10 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8009ab4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	e853 3f00 	ldrex	r3, [r3]
 8009ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	f043 0320 	orr.w	r3, r3, #32
 8009aca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ad8:	61bb      	str	r3, [r7, #24]
 8009ada:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	6979      	ldr	r1, [r7, #20]
 8009ade:	69ba      	ldr	r2, [r7, #24]
 8009ae0:	e841 2300 	strex	r3, r2, [r1]
 8009ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e4      	bne.n	8009ab6 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009aec:	e007      	b.n	8009afe <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	699a      	ldr	r2, [r3, #24]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f042 0208 	orr.w	r2, r2, #8
 8009afc:	619a      	str	r2, [r3, #24]
}
 8009afe:	bf00      	nop
 8009b00:	37b0      	adds	r7, #176	@ 0xb0
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	46002400 	.word	0x46002400
 8009b0c:	56002400 	.word	0x56002400
 8009b10:	0800941d 	.word	0x0800941d

08009b14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b0ae      	sub	sp, #184	@ 0xb8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b22:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b4a:	2b22      	cmp	r3, #34	@ 0x22
 8009b4c:	f040 818b 	bne.w	8009e66 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b56:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b5a:	e12e      	b.n	8009dba <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b62:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009b6e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009b72:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009b76:	4013      	ands	r3, r2
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b84:	1c9a      	adds	r2, r3, #2
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	3b01      	subs	r3, #1
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ba6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009baa:	f003 0307 	and.w	r3, r3, #7
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d053      	beq.n	8009c5a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bb6:	f003 0301 	and.w	r3, r3, #1
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d011      	beq.n	8009be2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00b      	beq.n	8009be2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bd8:	f043 0201 	orr.w	r2, r3, #1
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009be2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009be6:	f003 0302 	and.w	r3, r3, #2
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d011      	beq.n	8009c12 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009bee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00b      	beq.n	8009c12 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2202      	movs	r2, #2
 8009c00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c08:	f043 0204 	orr.w	r2, r3, #4
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c16:	f003 0304 	and.w	r3, r3, #4
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d011      	beq.n	8009c42 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009c1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00b      	beq.n	8009c42 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2204      	movs	r2, #4
 8009c30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c38:	f043 0202 	orr.w	r2, r3, #2
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d006      	beq.n	8009c5a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f7fe fd07 	bl	8008660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f040 80a9 	bne.w	8009dba <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c70:	e853 3f00 	ldrex	r3, [r3]
 8009c74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009c76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	461a      	mov	r2, r3
 8009c86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c96:	e841 2300 	strex	r3, r2, [r1]
 8009c9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1e2      	bne.n	8009c68 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009caa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cac:	e853 3f00 	ldrex	r3, [r3]
 8009cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cb8:	f023 0301 	bic.w	r3, r3, #1
 8009cbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	3308      	adds	r3, #8
 8009cc6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009cca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009cd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009cd2:	e841 2300 	strex	r3, r2, [r1]
 8009cd6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009cd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1e1      	bne.n	8009ca2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2220      	movs	r2, #32
 8009ce2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a62      	ldr	r2, [pc, #392]	@ (8009e80 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d026      	beq.n	8009d4a <UART_RxISR_16BIT_FIFOEN+0x236>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a60      	ldr	r2, [pc, #384]	@ (8009e84 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d021      	beq.n	8009d4a <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d01a      	beq.n	8009d4a <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d1c:	e853 3f00 	ldrex	r3, [r3]
 8009d20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d24:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	461a      	mov	r2, r3
 8009d32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009d36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d3e:	e841 2300 	strex	r3, r2, [r1]
 8009d42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1e4      	bne.n	8009d14 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d130      	bne.n	8009db4 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d60:	e853 3f00 	ldrex	r3, [r3]
 8009d64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d68:	f023 0310 	bic.w	r3, r3, #16
 8009d6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	461a      	mov	r2, r3
 8009d76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d7c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d82:	e841 2300 	strex	r3, r2, [r1]
 8009d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1e4      	bne.n	8009d58 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	69db      	ldr	r3, [r3, #28]
 8009d94:	f003 0310 	and.w	r3, r3, #16
 8009d98:	2b10      	cmp	r3, #16
 8009d9a:	d103      	bne.n	8009da4 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2210      	movs	r2, #16
 8009da2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f7fe fc61 	bl	8008674 <HAL_UARTEx_RxEventCallback>
 8009db2:	e002      	b.n	8009dba <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7f6 ff65 	bl	8000c84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dba:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d006      	beq.n	8009dd0 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 8009dc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009dc6:	f003 0320 	and.w	r3, r3, #32
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f47f aec6 	bne.w	8009b5c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dd6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009dda:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d049      	beq.n	8009e76 <UART_RxISR_16BIT_FIFOEN+0x362>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009de8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d242      	bcs.n	8009e76 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3308      	adds	r3, #8
 8009df6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfa:	e853 3f00 	ldrex	r3, [r3]
 8009dfe:	623b      	str	r3, [r7, #32]
   return(result);
 8009e00:	6a3b      	ldr	r3, [r7, #32]
 8009e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3308      	adds	r3, #8
 8009e10:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009e14:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e1c:	e841 2300 	strex	r3, r2, [r1]
 8009e20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1e3      	bne.n	8009df0 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a17      	ldr	r2, [pc, #92]	@ (8009e88 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8009e2c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	e853 3f00 	ldrex	r3, [r3]
 8009e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f043 0320 	orr.w	r3, r3, #32
 8009e42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e50:	61fb      	str	r3, [r7, #28]
 8009e52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e54:	69b9      	ldr	r1, [r7, #24]
 8009e56:	69fa      	ldr	r2, [r7, #28]
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e4      	bne.n	8009e2e <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e64:	e007      	b.n	8009e76 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	699a      	ldr	r2, [r3, #24]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f042 0208 	orr.w	r2, r2, #8
 8009e74:	619a      	str	r2, [r3, #24]
}
 8009e76:	bf00      	nop
 8009e78:	37b8      	adds	r7, #184	@ 0xb8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	46002400 	.word	0x46002400
 8009e84:	56002400 	.word	0x56002400
 8009e88:	080095e1 	.word	0x080095e1

08009e8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d101      	bne.n	8009eca <HAL_UARTEx_DisableFifoMode+0x16>
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	e027      	b.n	8009f1a <HAL_UARTEx_DisableFifoMode+0x66>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2224      	movs	r2, #36	@ 0x24
 8009ed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f022 0201 	bic.w	r2, r2, #1
 8009ef0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009ef8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b084      	sub	sp, #16
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d101      	bne.n	8009f3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f3a:	2302      	movs	r3, #2
 8009f3c:	e02d      	b.n	8009f9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2224      	movs	r2, #36	@ 0x24
 8009f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f022 0201 	bic.w	r2, r2, #1
 8009f64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f850 	bl	800a020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d101      	bne.n	8009fba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	e02d      	b.n	800a016 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2224      	movs	r2, #36	@ 0x24
 8009fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f022 0201 	bic.w	r2, r2, #1
 8009fe0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	430a      	orrs	r2, r1
 8009ff4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f812 	bl	800a020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2220      	movs	r2, #32
 800a008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
	...

0800a020 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d108      	bne.n	800a042 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a040:	e031      	b.n	800a0a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a042:	2308      	movs	r3, #8
 800a044:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a046:	2308      	movs	r3, #8
 800a048:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	0e5b      	lsrs	r3, r3, #25
 800a052:	b2db      	uxtb	r3, r3
 800a054:	f003 0307 	and.w	r3, r3, #7
 800a058:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	0f5b      	lsrs	r3, r3, #29
 800a062:	b2db      	uxtb	r3, r3
 800a064:	f003 0307 	and.w	r3, r3, #7
 800a068:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a06a:	7bbb      	ldrb	r3, [r7, #14]
 800a06c:	7b3a      	ldrb	r2, [r7, #12]
 800a06e:	4911      	ldr	r1, [pc, #68]	@ (800a0b4 <UARTEx_SetNbDataToProcess+0x94>)
 800a070:	5c8a      	ldrb	r2, [r1, r2]
 800a072:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a076:	7b3a      	ldrb	r2, [r7, #12]
 800a078:	490f      	ldr	r1, [pc, #60]	@ (800a0b8 <UARTEx_SetNbDataToProcess+0x98>)
 800a07a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a07c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a080:	b29a      	uxth	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a088:	7bfb      	ldrb	r3, [r7, #15]
 800a08a:	7b7a      	ldrb	r2, [r7, #13]
 800a08c:	4909      	ldr	r1, [pc, #36]	@ (800a0b4 <UARTEx_SetNbDataToProcess+0x94>)
 800a08e:	5c8a      	ldrb	r2, [r1, r2]
 800a090:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a094:	7b7a      	ldrb	r2, [r7, #13]
 800a096:	4908      	ldr	r1, [pc, #32]	@ (800a0b8 <UARTEx_SetNbDataToProcess+0x98>)
 800a098:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a09a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a0a6:	bf00      	nop
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	0800bacc 	.word	0x0800bacc
 800a0b8:	0800bad4 	.word	0x0800bad4

0800a0bc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b08b      	sub	sp, #44	@ 0x2c
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	fa93 f3a3 	rbit	r3, r3
 800a0d6:	613b      	str	r3, [r7, #16]
  return result;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a0e2:	2320      	movs	r3, #32
 800a0e4:	e003      	b.n	800a0ee <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	fab3 f383 	clz	r3, r3
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	2103      	movs	r1, #3
 800a0f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f6:	43db      	mvns	r3, r3
 800a0f8:	401a      	ands	r2, r3
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0fe:	6a3b      	ldr	r3, [r7, #32]
 800a100:	fa93 f3a3 	rbit	r3, r3
 800a104:	61fb      	str	r3, [r7, #28]
  return result;
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d101      	bne.n	800a114 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a110:	2320      	movs	r3, #32
 800a112:	e003      	b.n	800a11c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a116:	fab3 f383 	clz	r3, r3
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	6879      	ldr	r1, [r7, #4]
 800a120:	fa01 f303 	lsl.w	r3, r1, r3
 800a124:	431a      	orrs	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 800a12a:	bf00      	nop
 800a12c:	372c      	adds	r7, #44	@ 0x2c
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a136:	b480      	push	{r7}
 800a138:	b085      	sub	sp, #20
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	60f8      	str	r0, [r7, #12]
 800a13e:	60b9      	str	r1, [r7, #8]
 800a140:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	43db      	mvns	r3, r3
 800a14a:	401a      	ands	r2, r3
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	6879      	ldr	r1, [r7, #4]
 800a150:	fb01 f303 	mul.w	r3, r1, r3
 800a154:	431a      	orrs	r2, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	605a      	str	r2, [r3, #4]
}
 800a15a:	bf00      	nop
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a166:	b480      	push	{r7}
 800a168:	b08b      	sub	sp, #44	@ 0x2c
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	60f8      	str	r0, [r7, #12]
 800a16e:	60b9      	str	r1, [r7, #8]
 800a170:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	689a      	ldr	r2, [r3, #8]
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	fa93 f3a3 	rbit	r3, r3
 800a180:	613b      	str	r3, [r7, #16]
  return result;
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d101      	bne.n	800a190 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a18c:	2320      	movs	r3, #32
 800a18e:	e003      	b.n	800a198 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	fab3 f383 	clz	r3, r3
 800a196:	b2db      	uxtb	r3, r3
 800a198:	005b      	lsls	r3, r3, #1
 800a19a:	2103      	movs	r1, #3
 800a19c:	fa01 f303 	lsl.w	r3, r1, r3
 800a1a0:	43db      	mvns	r3, r3
 800a1a2:	401a      	ands	r2, r3
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1a8:	6a3b      	ldr	r3, [r7, #32]
 800a1aa:	fa93 f3a3 	rbit	r3, r3
 800a1ae:	61fb      	str	r3, [r7, #28]
  return result;
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a1ba:	2320      	movs	r3, #32
 800a1bc:	e003      	b.n	800a1c6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c0:	fab3 f383 	clz	r3, r3
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	005b      	lsls	r3, r3, #1
 800a1c8:	6879      	ldr	r1, [r7, #4]
 800a1ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 800a1d4:	bf00      	nop
 800a1d6:	372c      	adds	r7, #44	@ 0x2c
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b08b      	sub	sp, #44	@ 0x2c
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	68da      	ldr	r2, [r3, #12]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	fa93 f3a3 	rbit	r3, r3
 800a1fa:	613b      	str	r3, [r7, #16]
  return result;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d101      	bne.n	800a20a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a206:	2320      	movs	r3, #32
 800a208:	e003      	b.n	800a212 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	fab3 f383 	clz	r3, r3
 800a210:	b2db      	uxtb	r3, r3
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	2103      	movs	r1, #3
 800a216:	fa01 f303 	lsl.w	r3, r1, r3
 800a21a:	43db      	mvns	r3, r3
 800a21c:	401a      	ands	r2, r3
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	fa93 f3a3 	rbit	r3, r3
 800a228:	61fb      	str	r3, [r7, #28]
  return result;
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a230:	2b00      	cmp	r3, #0
 800a232:	d101      	bne.n	800a238 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a234:	2320      	movs	r3, #32
 800a236:	e003      	b.n	800a240 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a23a:	fab3 f383 	clz	r3, r3
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	6879      	ldr	r1, [r7, #4]
 800a244:	fa01 f303 	lsl.w	r3, r1, r3
 800a248:	431a      	orrs	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 800a24e:	bf00      	nop
 800a250:	372c      	adds	r7, #44	@ 0x2c
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b08b      	sub	sp, #44	@ 0x2c
 800a25e:	af00      	add	r7, sp, #0
 800a260:	60f8      	str	r0, [r7, #12]
 800a262:	60b9      	str	r1, [r7, #8]
 800a264:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6a1a      	ldr	r2, [r3, #32]
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	fa93 f3a3 	rbit	r3, r3
 800a274:	613b      	str	r3, [r7, #16]
  return result;
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a280:	2320      	movs	r3, #32
 800a282:	e003      	b.n	800a28c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	fab3 f383 	clz	r3, r3
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	210f      	movs	r1, #15
 800a290:	fa01 f303 	lsl.w	r3, r1, r3
 800a294:	43db      	mvns	r3, r3
 800a296:	401a      	ands	r2, r3
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a29c:	6a3b      	ldr	r3, [r7, #32]
 800a29e:	fa93 f3a3 	rbit	r3, r3
 800a2a2:	61fb      	str	r3, [r7, #28]
  return result;
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a2ae:	2320      	movs	r3, #32
 800a2b0:	e003      	b.n	800a2ba <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b4:	fab3 f383 	clz	r3, r3
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	fa01 f303 	lsl.w	r3, r1, r3
 800a2c2:	431a      	orrs	r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 800a2c8:	bf00      	nop
 800a2ca:	372c      	adds	r7, #44	@ 0x2c
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b08b      	sub	sp, #44	@ 0x2c
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	0a1b      	lsrs	r3, r3, #8
 800a2e8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	fa93 f3a3 	rbit	r3, r3
 800a2f0:	613b      	str	r3, [r7, #16]
  return result;
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a2fc:	2320      	movs	r3, #32
 800a2fe:	e003      	b.n	800a308 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	fab3 f383 	clz	r3, r3
 800a306:	b2db      	uxtb	r3, r3
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	210f      	movs	r1, #15
 800a30c:	fa01 f303 	lsl.w	r3, r1, r3
 800a310:	43db      	mvns	r3, r3
 800a312:	401a      	ands	r2, r3
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	0a1b      	lsrs	r3, r3, #8
 800a318:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	fa93 f3a3 	rbit	r3, r3
 800a320:	61fb      	str	r3, [r7, #28]
  return result;
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d101      	bne.n	800a330 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a32c:	2320      	movs	r3, #32
 800a32e:	e003      	b.n	800a338 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a332:	fab3 f383 	clz	r3, r3
 800a336:	b2db      	uxtb	r3, r3
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	6879      	ldr	r1, [r7, #4]
 800a33c:	fa01 f303 	lsl.w	r3, r1, r3
 800a340:	431a      	orrs	r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 800a346:	bf00      	nop
 800a348:	372c      	adds	r7, #44	@ 0x2c
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b08a      	sub	sp, #40	@ 0x28
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	fa93 f3a3 	rbit	r3, r3
 800a368:	617b      	str	r3, [r7, #20]
  return result;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <LL_GPIO_Init+0x26>
    return 32U;
 800a374:	2320      	movs	r3, #32
 800a376:	e003      	b.n	800a380 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	fab3 f383 	clz	r3, r3
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a382:	e058      	b.n	800a436 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	2101      	movs	r1, #1
 800a38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38c:	fa01 f303 	lsl.w	r3, r1, r3
 800a390:	4013      	ands	r3, r2
 800a392:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800a394:	6a3b      	ldr	r3, [r7, #32]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d04a      	beq.n	800a430 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d003      	beq.n	800a3aa <LL_GPIO_Init+0x58>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d10e      	bne.n	800a3c8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	6a39      	ldr	r1, [r7, #32]
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7ff fed7 	bl	800a166 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	6819      	ldr	r1, [r3, #0]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7ff feb7 	bl	800a136 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	6a39      	ldr	r1, [r7, #32]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f7ff ff05 	bl	800a1e0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d121      	bne.n	800a422 <LL_GPIO_Init+0xd0>
 800a3de:	6a3b      	ldr	r3, [r7, #32]
 800a3e0:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	fa93 f3a3 	rbit	r3, r3
 800a3e8:	60bb      	str	r3, [r7, #8]
  return result;
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d101      	bne.n	800a3f8 <LL_GPIO_Init+0xa6>
    return 32U;
 800a3f4:	2320      	movs	r3, #32
 800a3f6:	e003      	b.n	800a400 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	fab3 f383 	clz	r3, r3
 800a3fe:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800a400:	2b07      	cmp	r3, #7
 800a402:	d807      	bhi.n	800a414 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	461a      	mov	r2, r3
 800a40a:	6a39      	ldr	r1, [r7, #32]
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7ff ff24 	bl	800a25a <LL_GPIO_SetAFPin_0_7>
 800a412:	e006      	b.n	800a422 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	461a      	mov	r2, r3
 800a41a:	6a39      	ldr	r1, [r7, #32]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7ff ff59 	bl	800a2d4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	461a      	mov	r2, r3
 800a428:	6a39      	ldr	r1, [r7, #32]
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7ff fe46 	bl	800a0bc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a432:	3301      	adds	r3, #1
 800a434:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43c:	fa22 f303 	lsr.w	r3, r2, r3
 800a440:	2b00      	cmp	r3, #0
 800a442:	d19f      	bne.n	800a384 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3728      	adds	r7, #40	@ 0x28
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a44e:	b084      	sub	sp, #16
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	f107 001c 	add.w	r0, r7, #28
 800a45c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fd89 	bl	800af84 <USB_CoreReset>
 800a472:	4603      	mov	r3, r0
 800a474:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a476:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d106      	bne.n	800a48c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a482:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	639a      	str	r2, [r3, #56]	@ 0x38
 800a48a:	e005      	b.n	800a498 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a490:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800a498:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a4a4:	b004      	add	sp, #16
 800a4a6:	4770      	bx	lr

0800a4a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a4b6:	79fb      	ldrb	r3, [r7, #7]
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d165      	bne.n	800a588 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	4a41      	ldr	r2, [pc, #260]	@ (800a5c4 <USB_SetTurnaroundTime+0x11c>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d906      	bls.n	800a4d2 <USB_SetTurnaroundTime+0x2a>
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	4a40      	ldr	r2, [pc, #256]	@ (800a5c8 <USB_SetTurnaroundTime+0x120>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d202      	bcs.n	800a4d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a4cc:	230f      	movs	r3, #15
 800a4ce:	617b      	str	r3, [r7, #20]
 800a4d0:	e062      	b.n	800a598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	4a3c      	ldr	r2, [pc, #240]	@ (800a5c8 <USB_SetTurnaroundTime+0x120>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d306      	bcc.n	800a4e8 <USB_SetTurnaroundTime+0x40>
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	4a3b      	ldr	r2, [pc, #236]	@ (800a5cc <USB_SetTurnaroundTime+0x124>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d202      	bcs.n	800a4e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a4e2:	230e      	movs	r3, #14
 800a4e4:	617b      	str	r3, [r7, #20]
 800a4e6:	e057      	b.n	800a598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	4a38      	ldr	r2, [pc, #224]	@ (800a5cc <USB_SetTurnaroundTime+0x124>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d306      	bcc.n	800a4fe <USB_SetTurnaroundTime+0x56>
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	4a37      	ldr	r2, [pc, #220]	@ (800a5d0 <USB_SetTurnaroundTime+0x128>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d202      	bcs.n	800a4fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a4f8:	230d      	movs	r3, #13
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	e04c      	b.n	800a598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	4a33      	ldr	r2, [pc, #204]	@ (800a5d0 <USB_SetTurnaroundTime+0x128>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d306      	bcc.n	800a514 <USB_SetTurnaroundTime+0x6c>
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	4a32      	ldr	r2, [pc, #200]	@ (800a5d4 <USB_SetTurnaroundTime+0x12c>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d802      	bhi.n	800a514 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a50e:	230c      	movs	r3, #12
 800a510:	617b      	str	r3, [r7, #20]
 800a512:	e041      	b.n	800a598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	4a2f      	ldr	r2, [pc, #188]	@ (800a5d4 <USB_SetTurnaroundTime+0x12c>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d906      	bls.n	800a52a <USB_SetTurnaroundTime+0x82>
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	4a2e      	ldr	r2, [pc, #184]	@ (800a5d8 <USB_SetTurnaroundTime+0x130>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d802      	bhi.n	800a52a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a524:	230b      	movs	r3, #11
 800a526:	617b      	str	r3, [r7, #20]
 800a528:	e036      	b.n	800a598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	4a2a      	ldr	r2, [pc, #168]	@ (800a5d8 <USB_SetTurnaroundTime+0x130>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d906      	bls.n	800a540 <USB_SetTurnaroundTime+0x98>
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	4a29      	ldr	r2, [pc, #164]	@ (800a5dc <USB_SetTurnaroundTime+0x134>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d802      	bhi.n	800a540 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a53a:	230a      	movs	r3, #10
 800a53c:	617b      	str	r3, [r7, #20]
 800a53e:	e02b      	b.n	800a598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	4a26      	ldr	r2, [pc, #152]	@ (800a5dc <USB_SetTurnaroundTime+0x134>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d906      	bls.n	800a556 <USB_SetTurnaroundTime+0xae>
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	4a25      	ldr	r2, [pc, #148]	@ (800a5e0 <USB_SetTurnaroundTime+0x138>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d202      	bcs.n	800a556 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a550:	2309      	movs	r3, #9
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	e020      	b.n	800a598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	4a21      	ldr	r2, [pc, #132]	@ (800a5e0 <USB_SetTurnaroundTime+0x138>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d306      	bcc.n	800a56c <USB_SetTurnaroundTime+0xc4>
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	4a20      	ldr	r2, [pc, #128]	@ (800a5e4 <USB_SetTurnaroundTime+0x13c>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d802      	bhi.n	800a56c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a566:	2308      	movs	r3, #8
 800a568:	617b      	str	r3, [r7, #20]
 800a56a:	e015      	b.n	800a598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	4a1d      	ldr	r2, [pc, #116]	@ (800a5e4 <USB_SetTurnaroundTime+0x13c>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d906      	bls.n	800a582 <USB_SetTurnaroundTime+0xda>
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	4a1c      	ldr	r2, [pc, #112]	@ (800a5e8 <USB_SetTurnaroundTime+0x140>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d202      	bcs.n	800a582 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a57c:	2307      	movs	r3, #7
 800a57e:	617b      	str	r3, [r7, #20]
 800a580:	e00a      	b.n	800a598 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a582:	2306      	movs	r3, #6
 800a584:	617b      	str	r3, [r7, #20]
 800a586:	e007      	b.n	800a598 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a588:	79fb      	ldrb	r3, [r7, #7]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d102      	bne.n	800a594 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a58e:	2309      	movs	r3, #9
 800a590:	617b      	str	r3, [r7, #20]
 800a592:	e001      	b.n	800a598 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a594:	2309      	movs	r3, #9
 800a596:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	68da      	ldr	r2, [r3, #12]
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	029b      	lsls	r3, r3, #10
 800a5ac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a5b0:	431a      	orrs	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	371c      	adds	r7, #28
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr
 800a5c4:	00d8acbf 	.word	0x00d8acbf
 800a5c8:	00e4e1c0 	.word	0x00e4e1c0
 800a5cc:	00f42400 	.word	0x00f42400
 800a5d0:	01067380 	.word	0x01067380
 800a5d4:	011a499f 	.word	0x011a499f
 800a5d8:	01312cff 	.word	0x01312cff
 800a5dc:	014ca43f 	.word	0x014ca43f
 800a5e0:	016e3600 	.word	0x016e3600
 800a5e4:	01a6ab1f 	.word	0x01a6ab1f
 800a5e8:	01e84800 	.word	0x01e84800

0800a5ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	f023 0201 	bic.w	r2, r3, #1
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr

0800a60e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	460b      	mov	r3, r1
 800a618:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a61a:	2300      	movs	r3, #0
 800a61c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d115      	bne.n	800a65c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a63c:	200a      	movs	r0, #10
 800a63e:	f7f7 fa4d 	bl	8001adc <HAL_Delay>
      ms += 10U;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	330a      	adds	r3, #10
 800a646:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fc0b 	bl	800ae64 <USB_GetMode>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b01      	cmp	r3, #1
 800a652:	d01e      	beq.n	800a692 <USB_SetCurrentMode+0x84>
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2bc7      	cmp	r3, #199	@ 0xc7
 800a658:	d9f0      	bls.n	800a63c <USB_SetCurrentMode+0x2e>
 800a65a:	e01a      	b.n	800a692 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a65c:	78fb      	ldrb	r3, [r7, #3]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d115      	bne.n	800a68e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a66e:	200a      	movs	r0, #10
 800a670:	f7f7 fa34 	bl	8001adc <HAL_Delay>
      ms += 10U;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	330a      	adds	r3, #10
 800a678:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fbf2 	bl	800ae64 <USB_GetMode>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d005      	beq.n	800a692 <USB_SetCurrentMode+0x84>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2bc7      	cmp	r3, #199	@ 0xc7
 800a68a:	d9f0      	bls.n	800a66e <USB_SetCurrentMode+0x60>
 800a68c:	e001      	b.n	800a692 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e005      	b.n	800a69e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2bc8      	cmp	r3, #200	@ 0xc8
 800a696:	d101      	bne.n	800a69c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e000      	b.n	800a69e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
	...

0800a6a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6a8:	b084      	sub	sp, #16
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b086      	sub	sp, #24
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a6b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	613b      	str	r3, [r7, #16]
 800a6c6:	e009      	b.n	800a6dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	3340      	adds	r3, #64	@ 0x40
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4413      	add	r3, r2
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	613b      	str	r3, [r7, #16]
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	2b0e      	cmp	r3, #14
 800a6e0:	d9f2      	bls.n	800a6c8 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a6e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d11c      	bne.n	800a724 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6f8:	f043 0302 	orr.w	r3, r3, #2
 800a6fc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a702:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	e005      	b.n	800a730 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a728:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a736:	461a      	mov	r2, r3
 800a738:	2300      	movs	r3, #0
 800a73a:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a73c:	2103      	movs	r1, #3
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f95e 	bl	800aa00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a744:	2110      	movs	r1, #16
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f8fa 	bl	800a940 <USB_FlushTxFifo>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f924 	bl	800a9a4 <USB_FlushRxFifo>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a76c:	461a      	mov	r2, r3
 800a76e:	2300      	movs	r3, #0
 800a770:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a778:	461a      	mov	r2, r3
 800a77a:	2300      	movs	r3, #0
 800a77c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a784:	461a      	mov	r2, r3
 800a786:	2300      	movs	r3, #0
 800a788:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a78a:	2300      	movs	r3, #0
 800a78c:	613b      	str	r3, [r7, #16]
 800a78e:	e043      	b.n	800a818 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7a6:	d118      	bne.n	800a7da <USB_DevInit+0x132>
    {
      if (i == 0U)
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d10a      	bne.n	800a7c4 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	015a      	lsls	r2, r3, #5
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a7c0:	6013      	str	r3, [r2, #0]
 800a7c2:	e013      	b.n	800a7ec <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a7d6:	6013      	str	r3, [r2, #0]
 800a7d8:	e008      	b.n	800a7ec <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	015a      	lsls	r2, r3, #5
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	015a      	lsls	r2, r3, #5
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	015a      	lsls	r2, r3, #5
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	4413      	add	r3, r2
 800a806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a80a:	461a      	mov	r2, r3
 800a80c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a810:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	3301      	adds	r3, #1
 800a816:	613b      	str	r3, [r7, #16]
 800a818:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a81c:	461a      	mov	r2, r3
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	4293      	cmp	r3, r2
 800a822:	d3b5      	bcc.n	800a790 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a824:	2300      	movs	r3, #0
 800a826:	613b      	str	r3, [r7, #16]
 800a828:	e043      	b.n	800a8b2 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	015a      	lsls	r2, r3, #5
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	4413      	add	r3, r2
 800a832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a83c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a840:	d118      	bne.n	800a874 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10a      	bne.n	800a85e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a854:	461a      	mov	r2, r3
 800a856:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a85a:	6013      	str	r3, [r2, #0]
 800a85c:	e013      	b.n	800a886 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	015a      	lsls	r2, r3, #5
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	4413      	add	r3, r2
 800a866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a86a:	461a      	mov	r2, r3
 800a86c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a870:	6013      	str	r3, [r2, #0]
 800a872:	e008      	b.n	800a886 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	015a      	lsls	r2, r3, #5
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4413      	add	r3, r2
 800a87c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a880:	461a      	mov	r2, r3
 800a882:	2300      	movs	r3, #0
 800a884:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a892:	461a      	mov	r2, r3
 800a894:	2300      	movs	r3, #0
 800a896:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a8aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	613b      	str	r3, [r7, #16]
 800a8b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d3b5      	bcc.n	800a82a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8d0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a8de:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a8e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d105      	bne.n	800a8f4 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	f043 0210 	orr.w	r2, r3, #16
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	699a      	ldr	r2, [r3, #24]
 800a8f8:	4b10      	ldr	r3, [pc, #64]	@ (800a93c <USB_DevInit+0x294>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a900:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a904:	2b00      	cmp	r3, #0
 800a906:	d005      	beq.n	800a914 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	699b      	ldr	r3, [r3, #24]
 800a90c:	f043 0208 	orr.w	r2, r3, #8
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a914:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d107      	bne.n	800a92c <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a924:	f043 0304 	orr.w	r3, r3, #4
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a938:	b004      	add	sp, #16
 800a93a:	4770      	bx	lr
 800a93c:	803c3800 	.word	0x803c3800

0800a940 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3301      	adds	r3, #1
 800a952:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a95a:	d901      	bls.n	800a960 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e01b      	b.n	800a998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	2b00      	cmp	r3, #0
 800a966:	daf2      	bge.n	800a94e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a968:	2300      	movs	r3, #0
 800a96a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	019b      	lsls	r3, r3, #6
 800a970:	f043 0220 	orr.w	r2, r3, #32
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	3301      	adds	r3, #1
 800a97c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a984:	d901      	bls.n	800a98a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	e006      	b.n	800a998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	f003 0320 	and.w	r3, r3, #32
 800a992:	2b20      	cmp	r3, #32
 800a994:	d0f0      	beq.n	800a978 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a9bc:	d901      	bls.n	800a9c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a9be:	2303      	movs	r3, #3
 800a9c0:	e018      	b.n	800a9f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	daf2      	bge.n	800a9b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2210      	movs	r2, #16
 800a9d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a9e0:	d901      	bls.n	800a9e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	e006      	b.n	800a9f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	f003 0310 	and.w	r3, r3, #16
 800a9ee:	2b10      	cmp	r3, #16
 800a9f0:	d0f0      	beq.n	800a9d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3714      	adds	r7, #20
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	78fb      	ldrb	r3, [r7, #3]
 800aa1a:	68f9      	ldr	r1, [r7, #12]
 800aa1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa20:	4313      	orrs	r3, r2
 800aa22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa32:	b480      	push	{r7}
 800aa34:	b087      	sub	sp, #28
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	f003 0306 	and.w	r3, r3, #6
 800aa4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d102      	bne.n	800aa58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800aa52:	2300      	movs	r3, #0
 800aa54:	75fb      	strb	r3, [r7, #23]
 800aa56:	e00a      	b.n	800aa6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d002      	beq.n	800aa64 <USB_GetDevSpeed+0x32>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2b06      	cmp	r3, #6
 800aa62:	d102      	bne.n	800aa6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800aa64:	2302      	movs	r3, #2
 800aa66:	75fb      	strb	r3, [r7, #23]
 800aa68:	e001      	b.n	800aa6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800aa6a:	230f      	movs	r3, #15
 800aa6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800aa6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	371c      	adds	r7, #28
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b087      	sub	sp, #28
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa86:	2300      	movs	r3, #0
 800aa88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	785b      	ldrb	r3, [r3, #1]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d14a      	bne.n	800ab30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	015a      	lsls	r2, r3, #5
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aaae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aab2:	f040 8086 	bne.w	800abc2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	7812      	ldrb	r2, [r2, #0]
 800aaca:	0151      	lsls	r1, r2, #5
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	440a      	add	r2, r1
 800aad0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aad4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aad8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	015a      	lsls	r2, r3, #5
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	4413      	add	r3, r2
 800aae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	7812      	ldrb	r2, [r2, #0]
 800aaee:	0151      	lsls	r1, r2, #5
 800aaf0:	693a      	ldr	r2, [r7, #16]
 800aaf2:	440a      	add	r2, r1
 800aaf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaf8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aafc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3301      	adds	r3, #1
 800ab02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d902      	bls.n	800ab14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	75fb      	strb	r3, [r7, #23]
          break;
 800ab12:	e056      	b.n	800abc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	015a      	lsls	r2, r3, #5
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab2c:	d0e7      	beq.n	800aafe <USB_EPStopXfer+0x82>
 800ab2e:	e048      	b.n	800abc2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	015a      	lsls	r2, r3, #5
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	4413      	add	r3, r2
 800ab3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab48:	d13b      	bne.n	800abc2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	015a      	lsls	r2, r3, #5
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	4413      	add	r3, r2
 800ab54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	7812      	ldrb	r2, [r2, #0]
 800ab5e:	0151      	lsls	r1, r2, #5
 800ab60:	693a      	ldr	r2, [r7, #16]
 800ab62:	440a      	add	r2, r1
 800ab64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	7812      	ldrb	r2, [r2, #0]
 800ab82:	0151      	lsls	r1, r2, #5
 800ab84:	693a      	ldr	r2, [r7, #16]
 800ab86:	440a      	add	r2, r1
 800ab88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3301      	adds	r3, #1
 800ab96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d902      	bls.n	800aba8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	75fb      	strb	r3, [r7, #23]
          break;
 800aba6:	e00c      	b.n	800abc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	015a      	lsls	r2, r3, #5
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	4413      	add	r3, r2
 800abb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800abbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800abc0:	d0e7      	beq.n	800ab92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800abc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	371c      	adds	r7, #28
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b089      	sub	sp, #36	@ 0x24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	4611      	mov	r1, r2
 800abdc:	461a      	mov	r2, r3
 800abde:	460b      	mov	r3, r1
 800abe0:	71fb      	strb	r3, [r7, #7]
 800abe2:	4613      	mov	r3, r2
 800abe4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800abee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d123      	bne.n	800ac3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800abf6:	88bb      	ldrh	r3, [r7, #4]
 800abf8:	3303      	adds	r3, #3
 800abfa:	089b      	lsrs	r3, r3, #2
 800abfc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800abfe:	2300      	movs	r3, #0
 800ac00:	61bb      	str	r3, [r7, #24]
 800ac02:	e018      	b.n	800ac36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ac04:	79fb      	ldrb	r3, [r7, #7]
 800ac06:	031a      	lsls	r2, r3, #12
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac10:	461a      	mov	r2, r3
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	3301      	adds	r3, #1
 800ac22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	3301      	adds	r3, #1
 800ac28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	3301      	adds	r3, #1
 800ac34:	61bb      	str	r3, [r7, #24]
 800ac36:	69ba      	ldr	r2, [r7, #24]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d3e2      	bcc.n	800ac04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3724      	adds	r7, #36	@ 0x24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b08b      	sub	sp, #44	@ 0x2c
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	4613      	mov	r3, r2
 800ac58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ac62:	88fb      	ldrh	r3, [r7, #6]
 800ac64:	089b      	lsrs	r3, r3, #2
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ac6a:	88fb      	ldrh	r3, [r7, #6]
 800ac6c:	f003 0303 	and.w	r3, r3, #3
 800ac70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ac72:	2300      	movs	r3, #0
 800ac74:	623b      	str	r3, [r7, #32]
 800ac76:	e014      	b.n	800aca2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac82:	601a      	str	r2, [r3, #0]
    pDest++;
 800ac84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac86:	3301      	adds	r3, #1
 800ac88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ac90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac92:	3301      	adds	r3, #1
 800ac94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ac96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac98:	3301      	adds	r3, #1
 800ac9a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	623b      	str	r3, [r7, #32]
 800aca2:	6a3a      	ldr	r2, [r7, #32]
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d3e6      	bcc.n	800ac78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800acaa:	8bfb      	ldrh	r3, [r7, #30]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d01e      	beq.n	800acee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800acb0:	2300      	movs	r3, #0
 800acb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acba:	461a      	mov	r2, r3
 800acbc:	f107 0310 	add.w	r3, r7, #16
 800acc0:	6812      	ldr	r2, [r2, #0]
 800acc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800acc4:	693a      	ldr	r2, [r7, #16]
 800acc6:	6a3b      	ldr	r3, [r7, #32]
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	00db      	lsls	r3, r3, #3
 800accc:	fa22 f303 	lsr.w	r3, r2, r3
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd4:	701a      	strb	r2, [r3, #0]
      i++;
 800acd6:	6a3b      	ldr	r3, [r7, #32]
 800acd8:	3301      	adds	r3, #1
 800acda:	623b      	str	r3, [r7, #32]
      pDest++;
 800acdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acde:	3301      	adds	r3, #1
 800ace0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ace2:	8bfb      	ldrh	r3, [r7, #30]
 800ace4:	3b01      	subs	r3, #1
 800ace6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ace8:	8bfb      	ldrh	r3, [r7, #30]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d1ea      	bne.n	800acc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	372c      	adds	r7, #44	@ 0x2c
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b085      	sub	sp, #20
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ad16:	f023 0303 	bic.w	r3, r3, #3
 800ad1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad2a:	f043 0302 	orr.w	r3, r3, #2
 800ad2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3714      	adds	r7, #20
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr

0800ad3e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad3e:	b480      	push	{r7}
 800ad40:	b085      	sub	sp, #20
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	699b      	ldr	r3, [r3, #24]
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	4013      	ands	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad56:	68fb      	ldr	r3, [r7, #12]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3714      	adds	r7, #20
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad76:	699b      	ldr	r3, [r3, #24]
 800ad78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad80:	69db      	ldr	r3, [r3, #28]
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	4013      	ands	r3, r2
 800ad86:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	0c1b      	lsrs	r3, r3, #16
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3714      	adds	r7, #20
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adaa:	699b      	ldr	r3, [r3, #24]
 800adac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adb4:	69db      	ldr	r3, [r3, #28]
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	4013      	ands	r3, r2
 800adba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	b29b      	uxth	r3, r3
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3714      	adds	r7, #20
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800addc:	78fb      	ldrb	r3, [r7, #3]
 800adde:	015a      	lsls	r2, r3, #5
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4413      	add	r3, r2
 800ade4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adf2:	695b      	ldr	r3, [r3, #20]
 800adf4:	68ba      	ldr	r2, [r7, #8]
 800adf6:	4013      	ands	r3, r2
 800adf8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800adfa:	68bb      	ldr	r3, [r7, #8]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	460b      	mov	r3, r1
 800ae12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae2a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae2c:	78fb      	ldrb	r3, [r7, #3]
 800ae2e:	f003 030f 	and.w	r3, r3, #15
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	fa22 f303 	lsr.w	r3, r2, r3
 800ae38:	01db      	lsls	r3, r3, #7
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	693a      	ldr	r2, [r7, #16]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae42:	78fb      	ldrb	r3, [r7, #3]
 800ae44:	015a      	lsls	r2, r3, #5
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	4413      	add	r3, r2
 800ae4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	4013      	ands	r3, r2
 800ae54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae56:	68bb      	ldr	r3, [r7, #8]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	371c      	adds	r7, #28
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	f003 0301 	and.w	r3, r3, #1
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae9a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ae9e:	f023 0307 	bic.w	r3, r3, #7
 800aea2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aeb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aeb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
	...

0800aec8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b087      	sub	sp, #28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	460b      	mov	r3, r1
 800aed2:	607a      	str	r2, [r7, #4]
 800aed4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	333c      	adds	r3, #60	@ 0x3c
 800aede:	3304      	adds	r3, #4
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	4a26      	ldr	r2, [pc, #152]	@ (800af80 <USB_EP0_OutStart+0xb8>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d90a      	bls.n	800af02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aefc:	d101      	bne.n	800af02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	e037      	b.n	800af72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af08:	461a      	mov	r2, r3
 800af0a:	2300      	movs	r3, #0
 800af0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	697a      	ldr	r2, [r7, #20]
 800af18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af30:	f043 0318 	orr.w	r3, r3, #24
 800af34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af44:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800af48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800af4a:	7afb      	ldrb	r3, [r7, #11]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d10f      	bne.n	800af70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af56:	461a      	mov	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af6a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800af6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	371c      	adds	r7, #28
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	4f54300a 	.word	0x4f54300a

0800af84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af8c:	2300      	movs	r3, #0
 800af8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	3301      	adds	r3, #1
 800af94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af9c:	d901      	bls.n	800afa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e01b      	b.n	800afda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	daf2      	bge.n	800af90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800afaa:	2300      	movs	r3, #0
 800afac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	f043 0201 	orr.w	r2, r3, #1
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3301      	adds	r3, #1
 800afbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800afc6:	d901      	bls.n	800afcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800afc8:	2303      	movs	r3, #3
 800afca:	e006      	b.n	800afda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	f003 0301 	and.w	r3, r3, #1
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d0f0      	beq.n	800afba <USB_CoreReset+0x36>

  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3714      	adds	r7, #20
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
	...

0800afe8 <malloc>:
 800afe8:	4b02      	ldr	r3, [pc, #8]	@ (800aff4 <malloc+0xc>)
 800afea:	4601      	mov	r1, r0
 800afec:	6818      	ldr	r0, [r3, #0]
 800afee:	f000 b82d 	b.w	800b04c <_malloc_r>
 800aff2:	bf00      	nop
 800aff4:	2000001c 	.word	0x2000001c

0800aff8 <free>:
 800aff8:	4b02      	ldr	r3, [pc, #8]	@ (800b004 <free+0xc>)
 800affa:	4601      	mov	r1, r0
 800affc:	6818      	ldr	r0, [r3, #0]
 800affe:	f000 b915 	b.w	800b22c <_free_r>
 800b002:	bf00      	nop
 800b004:	2000001c 	.word	0x2000001c

0800b008 <sbrk_aligned>:
 800b008:	b570      	push	{r4, r5, r6, lr}
 800b00a:	4e0f      	ldr	r6, [pc, #60]	@ (800b048 <sbrk_aligned+0x40>)
 800b00c:	460c      	mov	r4, r1
 800b00e:	4605      	mov	r5, r0
 800b010:	6831      	ldr	r1, [r6, #0]
 800b012:	b911      	cbnz	r1, 800b01a <sbrk_aligned+0x12>
 800b014:	f000 f8ce 	bl	800b1b4 <_sbrk_r>
 800b018:	6030      	str	r0, [r6, #0]
 800b01a:	4621      	mov	r1, r4
 800b01c:	4628      	mov	r0, r5
 800b01e:	f000 f8c9 	bl	800b1b4 <_sbrk_r>
 800b022:	1c43      	adds	r3, r0, #1
 800b024:	d103      	bne.n	800b02e <sbrk_aligned+0x26>
 800b026:	f04f 34ff 	mov.w	r4, #4294967295
 800b02a:	4620      	mov	r0, r4
 800b02c:	bd70      	pop	{r4, r5, r6, pc}
 800b02e:	1cc4      	adds	r4, r0, #3
 800b030:	f024 0403 	bic.w	r4, r4, #3
 800b034:	42a0      	cmp	r0, r4
 800b036:	d0f8      	beq.n	800b02a <sbrk_aligned+0x22>
 800b038:	1a21      	subs	r1, r4, r0
 800b03a:	4628      	mov	r0, r5
 800b03c:	f000 f8ba 	bl	800b1b4 <_sbrk_r>
 800b040:	3001      	adds	r0, #1
 800b042:	d1f2      	bne.n	800b02a <sbrk_aligned+0x22>
 800b044:	e7ef      	b.n	800b026 <sbrk_aligned+0x1e>
 800b046:	bf00      	nop
 800b048:	20000740 	.word	0x20000740

0800b04c <_malloc_r>:
 800b04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b050:	1ccd      	adds	r5, r1, #3
 800b052:	4606      	mov	r6, r0
 800b054:	f025 0503 	bic.w	r5, r5, #3
 800b058:	3508      	adds	r5, #8
 800b05a:	2d0c      	cmp	r5, #12
 800b05c:	bf38      	it	cc
 800b05e:	250c      	movcc	r5, #12
 800b060:	2d00      	cmp	r5, #0
 800b062:	db01      	blt.n	800b068 <_malloc_r+0x1c>
 800b064:	42a9      	cmp	r1, r5
 800b066:	d904      	bls.n	800b072 <_malloc_r+0x26>
 800b068:	230c      	movs	r3, #12
 800b06a:	6033      	str	r3, [r6, #0]
 800b06c:	2000      	movs	r0, #0
 800b06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b072:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b148 <_malloc_r+0xfc>
 800b076:	f000 f869 	bl	800b14c <__malloc_lock>
 800b07a:	f8d8 3000 	ldr.w	r3, [r8]
 800b07e:	461c      	mov	r4, r3
 800b080:	bb44      	cbnz	r4, 800b0d4 <_malloc_r+0x88>
 800b082:	4629      	mov	r1, r5
 800b084:	4630      	mov	r0, r6
 800b086:	f7ff ffbf 	bl	800b008 <sbrk_aligned>
 800b08a:	1c43      	adds	r3, r0, #1
 800b08c:	4604      	mov	r4, r0
 800b08e:	d158      	bne.n	800b142 <_malloc_r+0xf6>
 800b090:	f8d8 4000 	ldr.w	r4, [r8]
 800b094:	4627      	mov	r7, r4
 800b096:	2f00      	cmp	r7, #0
 800b098:	d143      	bne.n	800b122 <_malloc_r+0xd6>
 800b09a:	2c00      	cmp	r4, #0
 800b09c:	d04b      	beq.n	800b136 <_malloc_r+0xea>
 800b09e:	6823      	ldr	r3, [r4, #0]
 800b0a0:	4639      	mov	r1, r7
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	eb04 0903 	add.w	r9, r4, r3
 800b0a8:	f000 f884 	bl	800b1b4 <_sbrk_r>
 800b0ac:	4581      	cmp	r9, r0
 800b0ae:	d142      	bne.n	800b136 <_malloc_r+0xea>
 800b0b0:	6821      	ldr	r1, [r4, #0]
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	1a6d      	subs	r5, r5, r1
 800b0b6:	4629      	mov	r1, r5
 800b0b8:	f7ff ffa6 	bl	800b008 <sbrk_aligned>
 800b0bc:	3001      	adds	r0, #1
 800b0be:	d03a      	beq.n	800b136 <_malloc_r+0xea>
 800b0c0:	6823      	ldr	r3, [r4, #0]
 800b0c2:	442b      	add	r3, r5
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	bb62      	cbnz	r2, 800b128 <_malloc_r+0xdc>
 800b0ce:	f8c8 7000 	str.w	r7, [r8]
 800b0d2:	e00f      	b.n	800b0f4 <_malloc_r+0xa8>
 800b0d4:	6822      	ldr	r2, [r4, #0]
 800b0d6:	1b52      	subs	r2, r2, r5
 800b0d8:	d420      	bmi.n	800b11c <_malloc_r+0xd0>
 800b0da:	2a0b      	cmp	r2, #11
 800b0dc:	d917      	bls.n	800b10e <_malloc_r+0xc2>
 800b0de:	1961      	adds	r1, r4, r5
 800b0e0:	42a3      	cmp	r3, r4
 800b0e2:	6025      	str	r5, [r4, #0]
 800b0e4:	bf18      	it	ne
 800b0e6:	6059      	strne	r1, [r3, #4]
 800b0e8:	6863      	ldr	r3, [r4, #4]
 800b0ea:	bf08      	it	eq
 800b0ec:	f8c8 1000 	streq.w	r1, [r8]
 800b0f0:	5162      	str	r2, [r4, r5]
 800b0f2:	604b      	str	r3, [r1, #4]
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f000 f82f 	bl	800b158 <__malloc_unlock>
 800b0fa:	f104 000b 	add.w	r0, r4, #11
 800b0fe:	1d23      	adds	r3, r4, #4
 800b100:	f020 0007 	bic.w	r0, r0, #7
 800b104:	1ac2      	subs	r2, r0, r3
 800b106:	bf1c      	itt	ne
 800b108:	1a1b      	subne	r3, r3, r0
 800b10a:	50a3      	strne	r3, [r4, r2]
 800b10c:	e7af      	b.n	800b06e <_malloc_r+0x22>
 800b10e:	6862      	ldr	r2, [r4, #4]
 800b110:	42a3      	cmp	r3, r4
 800b112:	bf0c      	ite	eq
 800b114:	f8c8 2000 	streq.w	r2, [r8]
 800b118:	605a      	strne	r2, [r3, #4]
 800b11a:	e7eb      	b.n	800b0f4 <_malloc_r+0xa8>
 800b11c:	4623      	mov	r3, r4
 800b11e:	6864      	ldr	r4, [r4, #4]
 800b120:	e7ae      	b.n	800b080 <_malloc_r+0x34>
 800b122:	463c      	mov	r4, r7
 800b124:	687f      	ldr	r7, [r7, #4]
 800b126:	e7b6      	b.n	800b096 <_malloc_r+0x4a>
 800b128:	461a      	mov	r2, r3
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	42a3      	cmp	r3, r4
 800b12e:	d1fb      	bne.n	800b128 <_malloc_r+0xdc>
 800b130:	2300      	movs	r3, #0
 800b132:	6053      	str	r3, [r2, #4]
 800b134:	e7de      	b.n	800b0f4 <_malloc_r+0xa8>
 800b136:	230c      	movs	r3, #12
 800b138:	4630      	mov	r0, r6
 800b13a:	6033      	str	r3, [r6, #0]
 800b13c:	f000 f80c 	bl	800b158 <__malloc_unlock>
 800b140:	e794      	b.n	800b06c <_malloc_r+0x20>
 800b142:	6005      	str	r5, [r0, #0]
 800b144:	e7d6      	b.n	800b0f4 <_malloc_r+0xa8>
 800b146:	bf00      	nop
 800b148:	20000744 	.word	0x20000744

0800b14c <__malloc_lock>:
 800b14c:	4801      	ldr	r0, [pc, #4]	@ (800b154 <__malloc_lock+0x8>)
 800b14e:	f000 b86b 	b.w	800b228 <__retarget_lock_acquire_recursive>
 800b152:	bf00      	nop
 800b154:	20000884 	.word	0x20000884

0800b158 <__malloc_unlock>:
 800b158:	4801      	ldr	r0, [pc, #4]	@ (800b160 <__malloc_unlock+0x8>)
 800b15a:	f000 b866 	b.w	800b22a <__retarget_lock_release_recursive>
 800b15e:	bf00      	nop
 800b160:	20000884 	.word	0x20000884

0800b164 <siprintf>:
 800b164:	b40e      	push	{r1, r2, r3}
 800b166:	b500      	push	{lr}
 800b168:	b09c      	sub	sp, #112	@ 0x70
 800b16a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b16e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b170:	9002      	str	r0, [sp, #8]
 800b172:	9006      	str	r0, [sp, #24]
 800b174:	9107      	str	r1, [sp, #28]
 800b176:	9104      	str	r1, [sp, #16]
 800b178:	4808      	ldr	r0, [pc, #32]	@ (800b19c <siprintf+0x38>)
 800b17a:	4909      	ldr	r1, [pc, #36]	@ (800b1a0 <siprintf+0x3c>)
 800b17c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b180:	9105      	str	r1, [sp, #20]
 800b182:	a902      	add	r1, sp, #8
 800b184:	6800      	ldr	r0, [r0, #0]
 800b186:	9301      	str	r3, [sp, #4]
 800b188:	f000 f8f6 	bl	800b378 <_svfiprintf_r>
 800b18c:	9b02      	ldr	r3, [sp, #8]
 800b18e:	2200      	movs	r2, #0
 800b190:	701a      	strb	r2, [r3, #0]
 800b192:	b01c      	add	sp, #112	@ 0x70
 800b194:	f85d eb04 	ldr.w	lr, [sp], #4
 800b198:	b003      	add	sp, #12
 800b19a:	4770      	bx	lr
 800b19c:	2000001c 	.word	0x2000001c
 800b1a0:	ffff0208 	.word	0xffff0208

0800b1a4 <memset>:
 800b1a4:	4402      	add	r2, r0
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d100      	bne.n	800b1ae <memset+0xa>
 800b1ac:	4770      	bx	lr
 800b1ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b1b2:	e7f9      	b.n	800b1a8 <memset+0x4>

0800b1b4 <_sbrk_r>:
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	4d05      	ldr	r5, [pc, #20]	@ (800b1d0 <_sbrk_r+0x1c>)
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	4608      	mov	r0, r1
 800b1be:	602b      	str	r3, [r5, #0]
 800b1c0:	f7f6 fb20 	bl	8001804 <_sbrk>
 800b1c4:	1c43      	adds	r3, r0, #1
 800b1c6:	d102      	bne.n	800b1ce <_sbrk_r+0x1a>
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	b103      	cbz	r3, 800b1ce <_sbrk_r+0x1a>
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	20000880 	.word	0x20000880

0800b1d4 <__errno>:
 800b1d4:	4b01      	ldr	r3, [pc, #4]	@ (800b1dc <__errno+0x8>)
 800b1d6:	6818      	ldr	r0, [r3, #0]
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	2000001c 	.word	0x2000001c

0800b1e0 <__libc_init_array>:
 800b1e0:	b570      	push	{r4, r5, r6, lr}
 800b1e2:	4d0d      	ldr	r5, [pc, #52]	@ (800b218 <__libc_init_array+0x38>)
 800b1e4:	2600      	movs	r6, #0
 800b1e6:	4c0d      	ldr	r4, [pc, #52]	@ (800b21c <__libc_init_array+0x3c>)
 800b1e8:	1b64      	subs	r4, r4, r5
 800b1ea:	10a4      	asrs	r4, r4, #2
 800b1ec:	42a6      	cmp	r6, r4
 800b1ee:	d109      	bne.n	800b204 <__libc_init_array+0x24>
 800b1f0:	4d0b      	ldr	r5, [pc, #44]	@ (800b220 <__libc_init_array+0x40>)
 800b1f2:	2600      	movs	r6, #0
 800b1f4:	4c0b      	ldr	r4, [pc, #44]	@ (800b224 <__libc_init_array+0x44>)
 800b1f6:	f000 fbb9 	bl	800b96c <_init>
 800b1fa:	1b64      	subs	r4, r4, r5
 800b1fc:	10a4      	asrs	r4, r4, #2
 800b1fe:	42a6      	cmp	r6, r4
 800b200:	d105      	bne.n	800b20e <__libc_init_array+0x2e>
 800b202:	bd70      	pop	{r4, r5, r6, pc}
 800b204:	f855 3b04 	ldr.w	r3, [r5], #4
 800b208:	3601      	adds	r6, #1
 800b20a:	4798      	blx	r3
 800b20c:	e7ee      	b.n	800b1ec <__libc_init_array+0xc>
 800b20e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b212:	3601      	adds	r6, #1
 800b214:	4798      	blx	r3
 800b216:	e7f2      	b.n	800b1fe <__libc_init_array+0x1e>
 800b218:	0800bb18 	.word	0x0800bb18
 800b21c:	0800bb18 	.word	0x0800bb18
 800b220:	0800bb18 	.word	0x0800bb18
 800b224:	0800bb1c 	.word	0x0800bb1c

0800b228 <__retarget_lock_acquire_recursive>:
 800b228:	4770      	bx	lr

0800b22a <__retarget_lock_release_recursive>:
 800b22a:	4770      	bx	lr

0800b22c <_free_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	4605      	mov	r5, r0
 800b230:	2900      	cmp	r1, #0
 800b232:	d041      	beq.n	800b2b8 <_free_r+0x8c>
 800b234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b238:	1f0c      	subs	r4, r1, #4
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	bfb8      	it	lt
 800b23e:	18e4      	addlt	r4, r4, r3
 800b240:	f7ff ff84 	bl	800b14c <__malloc_lock>
 800b244:	4a1d      	ldr	r2, [pc, #116]	@ (800b2bc <_free_r+0x90>)
 800b246:	6813      	ldr	r3, [r2, #0]
 800b248:	b933      	cbnz	r3, 800b258 <_free_r+0x2c>
 800b24a:	6063      	str	r3, [r4, #4]
 800b24c:	6014      	str	r4, [r2, #0]
 800b24e:	4628      	mov	r0, r5
 800b250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b254:	f7ff bf80 	b.w	800b158 <__malloc_unlock>
 800b258:	42a3      	cmp	r3, r4
 800b25a:	d908      	bls.n	800b26e <_free_r+0x42>
 800b25c:	6820      	ldr	r0, [r4, #0]
 800b25e:	1821      	adds	r1, r4, r0
 800b260:	428b      	cmp	r3, r1
 800b262:	bf01      	itttt	eq
 800b264:	6819      	ldreq	r1, [r3, #0]
 800b266:	685b      	ldreq	r3, [r3, #4]
 800b268:	1809      	addeq	r1, r1, r0
 800b26a:	6021      	streq	r1, [r4, #0]
 800b26c:	e7ed      	b.n	800b24a <_free_r+0x1e>
 800b26e:	461a      	mov	r2, r3
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	b10b      	cbz	r3, 800b278 <_free_r+0x4c>
 800b274:	42a3      	cmp	r3, r4
 800b276:	d9fa      	bls.n	800b26e <_free_r+0x42>
 800b278:	6811      	ldr	r1, [r2, #0]
 800b27a:	1850      	adds	r0, r2, r1
 800b27c:	42a0      	cmp	r0, r4
 800b27e:	d10b      	bne.n	800b298 <_free_r+0x6c>
 800b280:	6820      	ldr	r0, [r4, #0]
 800b282:	4401      	add	r1, r0
 800b284:	1850      	adds	r0, r2, r1
 800b286:	6011      	str	r1, [r2, #0]
 800b288:	4283      	cmp	r3, r0
 800b28a:	d1e0      	bne.n	800b24e <_free_r+0x22>
 800b28c:	6818      	ldr	r0, [r3, #0]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	4408      	add	r0, r1
 800b292:	6053      	str	r3, [r2, #4]
 800b294:	6010      	str	r0, [r2, #0]
 800b296:	e7da      	b.n	800b24e <_free_r+0x22>
 800b298:	d902      	bls.n	800b2a0 <_free_r+0x74>
 800b29a:	230c      	movs	r3, #12
 800b29c:	602b      	str	r3, [r5, #0]
 800b29e:	e7d6      	b.n	800b24e <_free_r+0x22>
 800b2a0:	6820      	ldr	r0, [r4, #0]
 800b2a2:	1821      	adds	r1, r4, r0
 800b2a4:	428b      	cmp	r3, r1
 800b2a6:	bf02      	ittt	eq
 800b2a8:	6819      	ldreq	r1, [r3, #0]
 800b2aa:	685b      	ldreq	r3, [r3, #4]
 800b2ac:	1809      	addeq	r1, r1, r0
 800b2ae:	6063      	str	r3, [r4, #4]
 800b2b0:	bf08      	it	eq
 800b2b2:	6021      	streq	r1, [r4, #0]
 800b2b4:	6054      	str	r4, [r2, #4]
 800b2b6:	e7ca      	b.n	800b24e <_free_r+0x22>
 800b2b8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20000744 	.word	0x20000744

0800b2c0 <__ssputs_r>:
 800b2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c4:	461f      	mov	r7, r3
 800b2c6:	688e      	ldr	r6, [r1, #8]
 800b2c8:	4682      	mov	sl, r0
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	42be      	cmp	r6, r7
 800b2ce:	4690      	mov	r8, r2
 800b2d0:	680b      	ldr	r3, [r1, #0]
 800b2d2:	d82d      	bhi.n	800b330 <__ssputs_r+0x70>
 800b2d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b2dc:	d026      	beq.n	800b32c <__ssputs_r+0x6c>
 800b2de:	6965      	ldr	r5, [r4, #20]
 800b2e0:	6909      	ldr	r1, [r1, #16]
 800b2e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2e6:	eba3 0901 	sub.w	r9, r3, r1
 800b2ea:	1c7b      	adds	r3, r7, #1
 800b2ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2f0:	444b      	add	r3, r9
 800b2f2:	106d      	asrs	r5, r5, #1
 800b2f4:	429d      	cmp	r5, r3
 800b2f6:	bf38      	it	cc
 800b2f8:	461d      	movcc	r5, r3
 800b2fa:	0553      	lsls	r3, r2, #21
 800b2fc:	d527      	bpl.n	800b34e <__ssputs_r+0x8e>
 800b2fe:	4629      	mov	r1, r5
 800b300:	f7ff fea4 	bl	800b04c <_malloc_r>
 800b304:	4606      	mov	r6, r0
 800b306:	b360      	cbz	r0, 800b362 <__ssputs_r+0xa2>
 800b308:	464a      	mov	r2, r9
 800b30a:	6921      	ldr	r1, [r4, #16]
 800b30c:	f000 faea 	bl	800b8e4 <memcpy>
 800b310:	89a3      	ldrh	r3, [r4, #12]
 800b312:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b31a:	81a3      	strh	r3, [r4, #12]
 800b31c:	6126      	str	r6, [r4, #16]
 800b31e:	444e      	add	r6, r9
 800b320:	6165      	str	r5, [r4, #20]
 800b322:	eba5 0509 	sub.w	r5, r5, r9
 800b326:	6026      	str	r6, [r4, #0]
 800b328:	463e      	mov	r6, r7
 800b32a:	60a5      	str	r5, [r4, #8]
 800b32c:	42be      	cmp	r6, r7
 800b32e:	d900      	bls.n	800b332 <__ssputs_r+0x72>
 800b330:	463e      	mov	r6, r7
 800b332:	4632      	mov	r2, r6
 800b334:	4641      	mov	r1, r8
 800b336:	6820      	ldr	r0, [r4, #0]
 800b338:	f000 faac 	bl	800b894 <memmove>
 800b33c:	68a3      	ldr	r3, [r4, #8]
 800b33e:	2000      	movs	r0, #0
 800b340:	1b9b      	subs	r3, r3, r6
 800b342:	60a3      	str	r3, [r4, #8]
 800b344:	6823      	ldr	r3, [r4, #0]
 800b346:	4433      	add	r3, r6
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34e:	462a      	mov	r2, r5
 800b350:	f000 fad5 	bl	800b8fe <_realloc_r>
 800b354:	4606      	mov	r6, r0
 800b356:	2800      	cmp	r0, #0
 800b358:	d1e0      	bne.n	800b31c <__ssputs_r+0x5c>
 800b35a:	6921      	ldr	r1, [r4, #16]
 800b35c:	4650      	mov	r0, sl
 800b35e:	f7ff ff65 	bl	800b22c <_free_r>
 800b362:	230c      	movs	r3, #12
 800b364:	f04f 30ff 	mov.w	r0, #4294967295
 800b368:	f8ca 3000 	str.w	r3, [sl]
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b372:	81a3      	strh	r3, [r4, #12]
 800b374:	e7e9      	b.n	800b34a <__ssputs_r+0x8a>
	...

0800b378 <_svfiprintf_r>:
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	4698      	mov	r8, r3
 800b37e:	898b      	ldrh	r3, [r1, #12]
 800b380:	b09d      	sub	sp, #116	@ 0x74
 800b382:	4607      	mov	r7, r0
 800b384:	061b      	lsls	r3, r3, #24
 800b386:	460d      	mov	r5, r1
 800b388:	4614      	mov	r4, r2
 800b38a:	d510      	bpl.n	800b3ae <_svfiprintf_r+0x36>
 800b38c:	690b      	ldr	r3, [r1, #16]
 800b38e:	b973      	cbnz	r3, 800b3ae <_svfiprintf_r+0x36>
 800b390:	2140      	movs	r1, #64	@ 0x40
 800b392:	f7ff fe5b 	bl	800b04c <_malloc_r>
 800b396:	6028      	str	r0, [r5, #0]
 800b398:	6128      	str	r0, [r5, #16]
 800b39a:	b930      	cbnz	r0, 800b3aa <_svfiprintf_r+0x32>
 800b39c:	230c      	movs	r3, #12
 800b39e:	603b      	str	r3, [r7, #0]
 800b3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a4:	b01d      	add	sp, #116	@ 0x74
 800b3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3aa:	2340      	movs	r3, #64	@ 0x40
 800b3ac:	616b      	str	r3, [r5, #20]
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3b4:	f04f 0901 	mov.w	r9, #1
 800b3b8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800b55c <_svfiprintf_r+0x1e4>
 800b3bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3be:	2320      	movs	r3, #32
 800b3c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3c4:	2330      	movs	r3, #48	@ 0x30
 800b3c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3ca:	4623      	mov	r3, r4
 800b3cc:	469a      	mov	sl, r3
 800b3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3d2:	b10a      	cbz	r2, 800b3d8 <_svfiprintf_r+0x60>
 800b3d4:	2a25      	cmp	r2, #37	@ 0x25
 800b3d6:	d1f9      	bne.n	800b3cc <_svfiprintf_r+0x54>
 800b3d8:	ebba 0b04 	subs.w	fp, sl, r4
 800b3dc:	d00b      	beq.n	800b3f6 <_svfiprintf_r+0x7e>
 800b3de:	465b      	mov	r3, fp
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	4638      	mov	r0, r7
 800b3e6:	f7ff ff6b 	bl	800b2c0 <__ssputs_r>
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	f000 80a7 	beq.w	800b53e <_svfiprintf_r+0x1c6>
 800b3f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3f2:	445a      	add	r2, fp
 800b3f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f000 809f 	beq.w	800b53e <_svfiprintf_r+0x1c6>
 800b400:	2300      	movs	r3, #0
 800b402:	f04f 32ff 	mov.w	r2, #4294967295
 800b406:	f10a 0a01 	add.w	sl, sl, #1
 800b40a:	9304      	str	r3, [sp, #16]
 800b40c:	9307      	str	r3, [sp, #28]
 800b40e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b412:	931a      	str	r3, [sp, #104]	@ 0x68
 800b414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b418:	4654      	mov	r4, sl
 800b41a:	2205      	movs	r2, #5
 800b41c:	484f      	ldr	r0, [pc, #316]	@ (800b55c <_svfiprintf_r+0x1e4>)
 800b41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b422:	f000 fa51 	bl	800b8c8 <memchr>
 800b426:	9a04      	ldr	r2, [sp, #16]
 800b428:	b9d8      	cbnz	r0, 800b462 <_svfiprintf_r+0xea>
 800b42a:	06d0      	lsls	r0, r2, #27
 800b42c:	bf44      	itt	mi
 800b42e:	2320      	movmi	r3, #32
 800b430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b434:	0711      	lsls	r1, r2, #28
 800b436:	bf44      	itt	mi
 800b438:	232b      	movmi	r3, #43	@ 0x2b
 800b43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b43e:	f89a 3000 	ldrb.w	r3, [sl]
 800b442:	2b2a      	cmp	r3, #42	@ 0x2a
 800b444:	d015      	beq.n	800b472 <_svfiprintf_r+0xfa>
 800b446:	9a07      	ldr	r2, [sp, #28]
 800b448:	4654      	mov	r4, sl
 800b44a:	2000      	movs	r0, #0
 800b44c:	f04f 0c0a 	mov.w	ip, #10
 800b450:	4621      	mov	r1, r4
 800b452:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b456:	3b30      	subs	r3, #48	@ 0x30
 800b458:	2b09      	cmp	r3, #9
 800b45a:	d94b      	bls.n	800b4f4 <_svfiprintf_r+0x17c>
 800b45c:	b1b0      	cbz	r0, 800b48c <_svfiprintf_r+0x114>
 800b45e:	9207      	str	r2, [sp, #28]
 800b460:	e014      	b.n	800b48c <_svfiprintf_r+0x114>
 800b462:	eba0 0308 	sub.w	r3, r0, r8
 800b466:	46a2      	mov	sl, r4
 800b468:	fa09 f303 	lsl.w	r3, r9, r3
 800b46c:	4313      	orrs	r3, r2
 800b46e:	9304      	str	r3, [sp, #16]
 800b470:	e7d2      	b.n	800b418 <_svfiprintf_r+0xa0>
 800b472:	9b03      	ldr	r3, [sp, #12]
 800b474:	1d19      	adds	r1, r3, #4
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	9103      	str	r1, [sp, #12]
 800b47c:	bfbb      	ittet	lt
 800b47e:	425b      	neglt	r3, r3
 800b480:	f042 0202 	orrlt.w	r2, r2, #2
 800b484:	9307      	strge	r3, [sp, #28]
 800b486:	9307      	strlt	r3, [sp, #28]
 800b488:	bfb8      	it	lt
 800b48a:	9204      	strlt	r2, [sp, #16]
 800b48c:	7823      	ldrb	r3, [r4, #0]
 800b48e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b490:	d10a      	bne.n	800b4a8 <_svfiprintf_r+0x130>
 800b492:	7863      	ldrb	r3, [r4, #1]
 800b494:	2b2a      	cmp	r3, #42	@ 0x2a
 800b496:	d132      	bne.n	800b4fe <_svfiprintf_r+0x186>
 800b498:	9b03      	ldr	r3, [sp, #12]
 800b49a:	3402      	adds	r4, #2
 800b49c:	1d1a      	adds	r2, r3, #4
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4a4:	9203      	str	r2, [sp, #12]
 800b4a6:	9305      	str	r3, [sp, #20]
 800b4a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b56c <_svfiprintf_r+0x1f4>
 800b4ac:	2203      	movs	r2, #3
 800b4ae:	7821      	ldrb	r1, [r4, #0]
 800b4b0:	4650      	mov	r0, sl
 800b4b2:	f000 fa09 	bl	800b8c8 <memchr>
 800b4b6:	b138      	cbz	r0, 800b4c8 <_svfiprintf_r+0x150>
 800b4b8:	eba0 000a 	sub.w	r0, r0, sl
 800b4bc:	2240      	movs	r2, #64	@ 0x40
 800b4be:	9b04      	ldr	r3, [sp, #16]
 800b4c0:	3401      	adds	r4, #1
 800b4c2:	4082      	lsls	r2, r0
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	9304      	str	r3, [sp, #16]
 800b4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4cc:	2206      	movs	r2, #6
 800b4ce:	4824      	ldr	r0, [pc, #144]	@ (800b560 <_svfiprintf_r+0x1e8>)
 800b4d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4d4:	f000 f9f8 	bl	800b8c8 <memchr>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d036      	beq.n	800b54a <_svfiprintf_r+0x1d2>
 800b4dc:	4b21      	ldr	r3, [pc, #132]	@ (800b564 <_svfiprintf_r+0x1ec>)
 800b4de:	bb1b      	cbnz	r3, 800b528 <_svfiprintf_r+0x1b0>
 800b4e0:	9b03      	ldr	r3, [sp, #12]
 800b4e2:	3307      	adds	r3, #7
 800b4e4:	f023 0307 	bic.w	r3, r3, #7
 800b4e8:	3308      	adds	r3, #8
 800b4ea:	9303      	str	r3, [sp, #12]
 800b4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ee:	4433      	add	r3, r6
 800b4f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4f2:	e76a      	b.n	800b3ca <_svfiprintf_r+0x52>
 800b4f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4f8:	460c      	mov	r4, r1
 800b4fa:	2001      	movs	r0, #1
 800b4fc:	e7a8      	b.n	800b450 <_svfiprintf_r+0xd8>
 800b4fe:	2300      	movs	r3, #0
 800b500:	3401      	adds	r4, #1
 800b502:	f04f 0c0a 	mov.w	ip, #10
 800b506:	4619      	mov	r1, r3
 800b508:	9305      	str	r3, [sp, #20]
 800b50a:	4620      	mov	r0, r4
 800b50c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b510:	3a30      	subs	r2, #48	@ 0x30
 800b512:	2a09      	cmp	r2, #9
 800b514:	d903      	bls.n	800b51e <_svfiprintf_r+0x1a6>
 800b516:	2b00      	cmp	r3, #0
 800b518:	d0c6      	beq.n	800b4a8 <_svfiprintf_r+0x130>
 800b51a:	9105      	str	r1, [sp, #20]
 800b51c:	e7c4      	b.n	800b4a8 <_svfiprintf_r+0x130>
 800b51e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b522:	4604      	mov	r4, r0
 800b524:	2301      	movs	r3, #1
 800b526:	e7f0      	b.n	800b50a <_svfiprintf_r+0x192>
 800b528:	ab03      	add	r3, sp, #12
 800b52a:	462a      	mov	r2, r5
 800b52c:	a904      	add	r1, sp, #16
 800b52e:	4638      	mov	r0, r7
 800b530:	9300      	str	r3, [sp, #0]
 800b532:	4b0d      	ldr	r3, [pc, #52]	@ (800b568 <_svfiprintf_r+0x1f0>)
 800b534:	f3af 8000 	nop.w
 800b538:	1c42      	adds	r2, r0, #1
 800b53a:	4606      	mov	r6, r0
 800b53c:	d1d6      	bne.n	800b4ec <_svfiprintf_r+0x174>
 800b53e:	89ab      	ldrh	r3, [r5, #12]
 800b540:	065b      	lsls	r3, r3, #25
 800b542:	f53f af2d 	bmi.w	800b3a0 <_svfiprintf_r+0x28>
 800b546:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b548:	e72c      	b.n	800b3a4 <_svfiprintf_r+0x2c>
 800b54a:	ab03      	add	r3, sp, #12
 800b54c:	462a      	mov	r2, r5
 800b54e:	a904      	add	r1, sp, #16
 800b550:	4638      	mov	r0, r7
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	4b04      	ldr	r3, [pc, #16]	@ (800b568 <_svfiprintf_r+0x1f0>)
 800b556:	f000 f87d 	bl	800b654 <_printf_i>
 800b55a:	e7ed      	b.n	800b538 <_svfiprintf_r+0x1c0>
 800b55c:	0800badc 	.word	0x0800badc
 800b560:	0800bae6 	.word	0x0800bae6
 800b564:	00000000 	.word	0x00000000
 800b568:	0800b2c1 	.word	0x0800b2c1
 800b56c:	0800bae2 	.word	0x0800bae2

0800b570 <_printf_common>:
 800b570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b574:	4616      	mov	r6, r2
 800b576:	4698      	mov	r8, r3
 800b578:	688a      	ldr	r2, [r1, #8]
 800b57a:	4607      	mov	r7, r0
 800b57c:	690b      	ldr	r3, [r1, #16]
 800b57e:	460c      	mov	r4, r1
 800b580:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b584:	4293      	cmp	r3, r2
 800b586:	bfb8      	it	lt
 800b588:	4613      	movlt	r3, r2
 800b58a:	6033      	str	r3, [r6, #0]
 800b58c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b590:	b10a      	cbz	r2, 800b596 <_printf_common+0x26>
 800b592:	3301      	adds	r3, #1
 800b594:	6033      	str	r3, [r6, #0]
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	0699      	lsls	r1, r3, #26
 800b59a:	bf42      	ittt	mi
 800b59c:	6833      	ldrmi	r3, [r6, #0]
 800b59e:	3302      	addmi	r3, #2
 800b5a0:	6033      	strmi	r3, [r6, #0]
 800b5a2:	6825      	ldr	r5, [r4, #0]
 800b5a4:	f015 0506 	ands.w	r5, r5, #6
 800b5a8:	d106      	bne.n	800b5b8 <_printf_common+0x48>
 800b5aa:	f104 0a19 	add.w	sl, r4, #25
 800b5ae:	68e3      	ldr	r3, [r4, #12]
 800b5b0:	6832      	ldr	r2, [r6, #0]
 800b5b2:	1a9b      	subs	r3, r3, r2
 800b5b4:	42ab      	cmp	r3, r5
 800b5b6:	dc2b      	bgt.n	800b610 <_printf_common+0xa0>
 800b5b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b5bc:	6822      	ldr	r2, [r4, #0]
 800b5be:	3b00      	subs	r3, #0
 800b5c0:	bf18      	it	ne
 800b5c2:	2301      	movne	r3, #1
 800b5c4:	0692      	lsls	r2, r2, #26
 800b5c6:	d430      	bmi.n	800b62a <_printf_common+0xba>
 800b5c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b5cc:	4641      	mov	r1, r8
 800b5ce:	4638      	mov	r0, r7
 800b5d0:	47c8      	blx	r9
 800b5d2:	3001      	adds	r0, #1
 800b5d4:	d023      	beq.n	800b61e <_printf_common+0xae>
 800b5d6:	6823      	ldr	r3, [r4, #0]
 800b5d8:	341a      	adds	r4, #26
 800b5da:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b5de:	f003 0306 	and.w	r3, r3, #6
 800b5e2:	2b04      	cmp	r3, #4
 800b5e4:	bf0a      	itet	eq
 800b5e6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b5ea:	2500      	movne	r5, #0
 800b5ec:	6833      	ldreq	r3, [r6, #0]
 800b5ee:	f04f 0600 	mov.w	r6, #0
 800b5f2:	bf08      	it	eq
 800b5f4:	1aed      	subeq	r5, r5, r3
 800b5f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b5fa:	bf08      	it	eq
 800b5fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b600:	4293      	cmp	r3, r2
 800b602:	bfc4      	itt	gt
 800b604:	1a9b      	subgt	r3, r3, r2
 800b606:	18ed      	addgt	r5, r5, r3
 800b608:	42b5      	cmp	r5, r6
 800b60a:	d11a      	bne.n	800b642 <_printf_common+0xd2>
 800b60c:	2000      	movs	r0, #0
 800b60e:	e008      	b.n	800b622 <_printf_common+0xb2>
 800b610:	2301      	movs	r3, #1
 800b612:	4652      	mov	r2, sl
 800b614:	4641      	mov	r1, r8
 800b616:	4638      	mov	r0, r7
 800b618:	47c8      	blx	r9
 800b61a:	3001      	adds	r0, #1
 800b61c:	d103      	bne.n	800b626 <_printf_common+0xb6>
 800b61e:	f04f 30ff 	mov.w	r0, #4294967295
 800b622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b626:	3501      	adds	r5, #1
 800b628:	e7c1      	b.n	800b5ae <_printf_common+0x3e>
 800b62a:	18e1      	adds	r1, r4, r3
 800b62c:	1c5a      	adds	r2, r3, #1
 800b62e:	2030      	movs	r0, #48	@ 0x30
 800b630:	3302      	adds	r3, #2
 800b632:	4422      	add	r2, r4
 800b634:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b638:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b63c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b640:	e7c2      	b.n	800b5c8 <_printf_common+0x58>
 800b642:	2301      	movs	r3, #1
 800b644:	4622      	mov	r2, r4
 800b646:	4641      	mov	r1, r8
 800b648:	4638      	mov	r0, r7
 800b64a:	47c8      	blx	r9
 800b64c:	3001      	adds	r0, #1
 800b64e:	d0e6      	beq.n	800b61e <_printf_common+0xae>
 800b650:	3601      	adds	r6, #1
 800b652:	e7d9      	b.n	800b608 <_printf_common+0x98>

0800b654 <_printf_i>:
 800b654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b658:	7e0f      	ldrb	r7, [r1, #24]
 800b65a:	4691      	mov	r9, r2
 800b65c:	4680      	mov	r8, r0
 800b65e:	460c      	mov	r4, r1
 800b660:	2f78      	cmp	r7, #120	@ 0x78
 800b662:	469a      	mov	sl, r3
 800b664:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b66a:	d807      	bhi.n	800b67c <_printf_i+0x28>
 800b66c:	2f62      	cmp	r7, #98	@ 0x62
 800b66e:	d80a      	bhi.n	800b686 <_printf_i+0x32>
 800b670:	2f00      	cmp	r7, #0
 800b672:	f000 80d2 	beq.w	800b81a <_printf_i+0x1c6>
 800b676:	2f58      	cmp	r7, #88	@ 0x58
 800b678:	f000 80b9 	beq.w	800b7ee <_printf_i+0x19a>
 800b67c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b684:	e03a      	b.n	800b6fc <_printf_i+0xa8>
 800b686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b68a:	2b15      	cmp	r3, #21
 800b68c:	d8f6      	bhi.n	800b67c <_printf_i+0x28>
 800b68e:	a101      	add	r1, pc, #4	@ (adr r1, 800b694 <_printf_i+0x40>)
 800b690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b694:	0800b6ed 	.word	0x0800b6ed
 800b698:	0800b701 	.word	0x0800b701
 800b69c:	0800b67d 	.word	0x0800b67d
 800b6a0:	0800b67d 	.word	0x0800b67d
 800b6a4:	0800b67d 	.word	0x0800b67d
 800b6a8:	0800b67d 	.word	0x0800b67d
 800b6ac:	0800b701 	.word	0x0800b701
 800b6b0:	0800b67d 	.word	0x0800b67d
 800b6b4:	0800b67d 	.word	0x0800b67d
 800b6b8:	0800b67d 	.word	0x0800b67d
 800b6bc:	0800b67d 	.word	0x0800b67d
 800b6c0:	0800b801 	.word	0x0800b801
 800b6c4:	0800b72b 	.word	0x0800b72b
 800b6c8:	0800b7bb 	.word	0x0800b7bb
 800b6cc:	0800b67d 	.word	0x0800b67d
 800b6d0:	0800b67d 	.word	0x0800b67d
 800b6d4:	0800b823 	.word	0x0800b823
 800b6d8:	0800b67d 	.word	0x0800b67d
 800b6dc:	0800b72b 	.word	0x0800b72b
 800b6e0:	0800b67d 	.word	0x0800b67d
 800b6e4:	0800b67d 	.word	0x0800b67d
 800b6e8:	0800b7c3 	.word	0x0800b7c3
 800b6ec:	6833      	ldr	r3, [r6, #0]
 800b6ee:	1d1a      	adds	r2, r3, #4
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6032      	str	r2, [r6, #0]
 800b6f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e09d      	b.n	800b83c <_printf_i+0x1e8>
 800b700:	6833      	ldr	r3, [r6, #0]
 800b702:	6820      	ldr	r0, [r4, #0]
 800b704:	1d19      	adds	r1, r3, #4
 800b706:	6031      	str	r1, [r6, #0]
 800b708:	0606      	lsls	r6, r0, #24
 800b70a:	d501      	bpl.n	800b710 <_printf_i+0xbc>
 800b70c:	681d      	ldr	r5, [r3, #0]
 800b70e:	e003      	b.n	800b718 <_printf_i+0xc4>
 800b710:	0645      	lsls	r5, r0, #25
 800b712:	d5fb      	bpl.n	800b70c <_printf_i+0xb8>
 800b714:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b718:	2d00      	cmp	r5, #0
 800b71a:	da03      	bge.n	800b724 <_printf_i+0xd0>
 800b71c:	232d      	movs	r3, #45	@ 0x2d
 800b71e:	426d      	negs	r5, r5
 800b720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b724:	4859      	ldr	r0, [pc, #356]	@ (800b88c <_printf_i+0x238>)
 800b726:	230a      	movs	r3, #10
 800b728:	e011      	b.n	800b74e <_printf_i+0xfa>
 800b72a:	6821      	ldr	r1, [r4, #0]
 800b72c:	6833      	ldr	r3, [r6, #0]
 800b72e:	0608      	lsls	r0, r1, #24
 800b730:	f853 5b04 	ldr.w	r5, [r3], #4
 800b734:	d402      	bmi.n	800b73c <_printf_i+0xe8>
 800b736:	0649      	lsls	r1, r1, #25
 800b738:	bf48      	it	mi
 800b73a:	b2ad      	uxthmi	r5, r5
 800b73c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b73e:	6033      	str	r3, [r6, #0]
 800b740:	4852      	ldr	r0, [pc, #328]	@ (800b88c <_printf_i+0x238>)
 800b742:	bf14      	ite	ne
 800b744:	230a      	movne	r3, #10
 800b746:	2308      	moveq	r3, #8
 800b748:	2100      	movs	r1, #0
 800b74a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b74e:	6866      	ldr	r6, [r4, #4]
 800b750:	2e00      	cmp	r6, #0
 800b752:	60a6      	str	r6, [r4, #8]
 800b754:	bfa2      	ittt	ge
 800b756:	6821      	ldrge	r1, [r4, #0]
 800b758:	f021 0104 	bicge.w	r1, r1, #4
 800b75c:	6021      	strge	r1, [r4, #0]
 800b75e:	b90d      	cbnz	r5, 800b764 <_printf_i+0x110>
 800b760:	2e00      	cmp	r6, #0
 800b762:	d04b      	beq.n	800b7fc <_printf_i+0x1a8>
 800b764:	4616      	mov	r6, r2
 800b766:	fbb5 f1f3 	udiv	r1, r5, r3
 800b76a:	fb03 5711 	mls	r7, r3, r1, r5
 800b76e:	5dc7      	ldrb	r7, [r0, r7]
 800b770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b774:	462f      	mov	r7, r5
 800b776:	460d      	mov	r5, r1
 800b778:	42bb      	cmp	r3, r7
 800b77a:	d9f4      	bls.n	800b766 <_printf_i+0x112>
 800b77c:	2b08      	cmp	r3, #8
 800b77e:	d10b      	bne.n	800b798 <_printf_i+0x144>
 800b780:	6823      	ldr	r3, [r4, #0]
 800b782:	07df      	lsls	r7, r3, #31
 800b784:	d508      	bpl.n	800b798 <_printf_i+0x144>
 800b786:	6923      	ldr	r3, [r4, #16]
 800b788:	6861      	ldr	r1, [r4, #4]
 800b78a:	4299      	cmp	r1, r3
 800b78c:	bfde      	ittt	le
 800b78e:	2330      	movle	r3, #48	@ 0x30
 800b790:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b794:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b798:	1b92      	subs	r2, r2, r6
 800b79a:	6122      	str	r2, [r4, #16]
 800b79c:	464b      	mov	r3, r9
 800b79e:	aa03      	add	r2, sp, #12
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	4640      	mov	r0, r8
 800b7a4:	f8cd a000 	str.w	sl, [sp]
 800b7a8:	f7ff fee2 	bl	800b570 <_printf_common>
 800b7ac:	3001      	adds	r0, #1
 800b7ae:	d14a      	bne.n	800b846 <_printf_i+0x1f2>
 800b7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b4:	b004      	add	sp, #16
 800b7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ba:	6823      	ldr	r3, [r4, #0]
 800b7bc:	f043 0320 	orr.w	r3, r3, #32
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	2778      	movs	r7, #120	@ 0x78
 800b7c4:	4832      	ldr	r0, [pc, #200]	@ (800b890 <_printf_i+0x23c>)
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b7cc:	061f      	lsls	r7, r3, #24
 800b7ce:	6831      	ldr	r1, [r6, #0]
 800b7d0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b7d4:	d402      	bmi.n	800b7dc <_printf_i+0x188>
 800b7d6:	065f      	lsls	r7, r3, #25
 800b7d8:	bf48      	it	mi
 800b7da:	b2ad      	uxthmi	r5, r5
 800b7dc:	6031      	str	r1, [r6, #0]
 800b7de:	07d9      	lsls	r1, r3, #31
 800b7e0:	bf44      	itt	mi
 800b7e2:	f043 0320 	orrmi.w	r3, r3, #32
 800b7e6:	6023      	strmi	r3, [r4, #0]
 800b7e8:	b11d      	cbz	r5, 800b7f2 <_printf_i+0x19e>
 800b7ea:	2310      	movs	r3, #16
 800b7ec:	e7ac      	b.n	800b748 <_printf_i+0xf4>
 800b7ee:	4827      	ldr	r0, [pc, #156]	@ (800b88c <_printf_i+0x238>)
 800b7f0:	e7e9      	b.n	800b7c6 <_printf_i+0x172>
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	f023 0320 	bic.w	r3, r3, #32
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	e7f6      	b.n	800b7ea <_printf_i+0x196>
 800b7fc:	4616      	mov	r6, r2
 800b7fe:	e7bd      	b.n	800b77c <_printf_i+0x128>
 800b800:	6833      	ldr	r3, [r6, #0]
 800b802:	6825      	ldr	r5, [r4, #0]
 800b804:	1d18      	adds	r0, r3, #4
 800b806:	6961      	ldr	r1, [r4, #20]
 800b808:	6030      	str	r0, [r6, #0]
 800b80a:	062e      	lsls	r6, r5, #24
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	d501      	bpl.n	800b814 <_printf_i+0x1c0>
 800b810:	6019      	str	r1, [r3, #0]
 800b812:	e002      	b.n	800b81a <_printf_i+0x1c6>
 800b814:	0668      	lsls	r0, r5, #25
 800b816:	d5fb      	bpl.n	800b810 <_printf_i+0x1bc>
 800b818:	8019      	strh	r1, [r3, #0]
 800b81a:	2300      	movs	r3, #0
 800b81c:	4616      	mov	r6, r2
 800b81e:	6123      	str	r3, [r4, #16]
 800b820:	e7bc      	b.n	800b79c <_printf_i+0x148>
 800b822:	6833      	ldr	r3, [r6, #0]
 800b824:	2100      	movs	r1, #0
 800b826:	1d1a      	adds	r2, r3, #4
 800b828:	6032      	str	r2, [r6, #0]
 800b82a:	681e      	ldr	r6, [r3, #0]
 800b82c:	6862      	ldr	r2, [r4, #4]
 800b82e:	4630      	mov	r0, r6
 800b830:	f000 f84a 	bl	800b8c8 <memchr>
 800b834:	b108      	cbz	r0, 800b83a <_printf_i+0x1e6>
 800b836:	1b80      	subs	r0, r0, r6
 800b838:	6060      	str	r0, [r4, #4]
 800b83a:	6863      	ldr	r3, [r4, #4]
 800b83c:	6123      	str	r3, [r4, #16]
 800b83e:	2300      	movs	r3, #0
 800b840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b844:	e7aa      	b.n	800b79c <_printf_i+0x148>
 800b846:	6923      	ldr	r3, [r4, #16]
 800b848:	4632      	mov	r2, r6
 800b84a:	4649      	mov	r1, r9
 800b84c:	4640      	mov	r0, r8
 800b84e:	47d0      	blx	sl
 800b850:	3001      	adds	r0, #1
 800b852:	d0ad      	beq.n	800b7b0 <_printf_i+0x15c>
 800b854:	6823      	ldr	r3, [r4, #0]
 800b856:	079b      	lsls	r3, r3, #30
 800b858:	d413      	bmi.n	800b882 <_printf_i+0x22e>
 800b85a:	68e0      	ldr	r0, [r4, #12]
 800b85c:	9b03      	ldr	r3, [sp, #12]
 800b85e:	4298      	cmp	r0, r3
 800b860:	bfb8      	it	lt
 800b862:	4618      	movlt	r0, r3
 800b864:	e7a6      	b.n	800b7b4 <_printf_i+0x160>
 800b866:	2301      	movs	r3, #1
 800b868:	4632      	mov	r2, r6
 800b86a:	4649      	mov	r1, r9
 800b86c:	4640      	mov	r0, r8
 800b86e:	47d0      	blx	sl
 800b870:	3001      	adds	r0, #1
 800b872:	d09d      	beq.n	800b7b0 <_printf_i+0x15c>
 800b874:	3501      	adds	r5, #1
 800b876:	68e3      	ldr	r3, [r4, #12]
 800b878:	9903      	ldr	r1, [sp, #12]
 800b87a:	1a5b      	subs	r3, r3, r1
 800b87c:	42ab      	cmp	r3, r5
 800b87e:	dcf2      	bgt.n	800b866 <_printf_i+0x212>
 800b880:	e7eb      	b.n	800b85a <_printf_i+0x206>
 800b882:	2500      	movs	r5, #0
 800b884:	f104 0619 	add.w	r6, r4, #25
 800b888:	e7f5      	b.n	800b876 <_printf_i+0x222>
 800b88a:	bf00      	nop
 800b88c:	0800baed 	.word	0x0800baed
 800b890:	0800bafe 	.word	0x0800bafe

0800b894 <memmove>:
 800b894:	4288      	cmp	r0, r1
 800b896:	b510      	push	{r4, lr}
 800b898:	eb01 0402 	add.w	r4, r1, r2
 800b89c:	d902      	bls.n	800b8a4 <memmove+0x10>
 800b89e:	4284      	cmp	r4, r0
 800b8a0:	4623      	mov	r3, r4
 800b8a2:	d807      	bhi.n	800b8b4 <memmove+0x20>
 800b8a4:	1e43      	subs	r3, r0, #1
 800b8a6:	42a1      	cmp	r1, r4
 800b8a8:	d008      	beq.n	800b8bc <memmove+0x28>
 800b8aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8b2:	e7f8      	b.n	800b8a6 <memmove+0x12>
 800b8b4:	4402      	add	r2, r0
 800b8b6:	4601      	mov	r1, r0
 800b8b8:	428a      	cmp	r2, r1
 800b8ba:	d100      	bne.n	800b8be <memmove+0x2a>
 800b8bc:	bd10      	pop	{r4, pc}
 800b8be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8c6:	e7f7      	b.n	800b8b8 <memmove+0x24>

0800b8c8 <memchr>:
 800b8c8:	b2c9      	uxtb	r1, r1
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	4402      	add	r2, r0
 800b8ce:	b510      	push	{r4, lr}
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	d101      	bne.n	800b8da <memchr+0x12>
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	e003      	b.n	800b8e2 <memchr+0x1a>
 800b8da:	7804      	ldrb	r4, [r0, #0]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	428c      	cmp	r4, r1
 800b8e0:	d1f6      	bne.n	800b8d0 <memchr+0x8>
 800b8e2:	bd10      	pop	{r4, pc}

0800b8e4 <memcpy>:
 800b8e4:	440a      	add	r2, r1
 800b8e6:	1e43      	subs	r3, r0, #1
 800b8e8:	4291      	cmp	r1, r2
 800b8ea:	d100      	bne.n	800b8ee <memcpy+0xa>
 800b8ec:	4770      	bx	lr
 800b8ee:	b510      	push	{r4, lr}
 800b8f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8f4:	4291      	cmp	r1, r2
 800b8f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8fa:	d1f9      	bne.n	800b8f0 <memcpy+0xc>
 800b8fc:	bd10      	pop	{r4, pc}

0800b8fe <_realloc_r>:
 800b8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b902:	4680      	mov	r8, r0
 800b904:	4615      	mov	r5, r2
 800b906:	460c      	mov	r4, r1
 800b908:	b921      	cbnz	r1, 800b914 <_realloc_r+0x16>
 800b90a:	4611      	mov	r1, r2
 800b90c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b910:	f7ff bb9c 	b.w	800b04c <_malloc_r>
 800b914:	b92a      	cbnz	r2, 800b922 <_realloc_r+0x24>
 800b916:	f7ff fc89 	bl	800b22c <_free_r>
 800b91a:	2400      	movs	r4, #0
 800b91c:	4620      	mov	r0, r4
 800b91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b922:	f000 f81a 	bl	800b95a <_malloc_usable_size_r>
 800b926:	4285      	cmp	r5, r0
 800b928:	4606      	mov	r6, r0
 800b92a:	d802      	bhi.n	800b932 <_realloc_r+0x34>
 800b92c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b930:	d8f4      	bhi.n	800b91c <_realloc_r+0x1e>
 800b932:	4629      	mov	r1, r5
 800b934:	4640      	mov	r0, r8
 800b936:	f7ff fb89 	bl	800b04c <_malloc_r>
 800b93a:	4607      	mov	r7, r0
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d0ec      	beq.n	800b91a <_realloc_r+0x1c>
 800b940:	42b5      	cmp	r5, r6
 800b942:	462a      	mov	r2, r5
 800b944:	4621      	mov	r1, r4
 800b946:	bf28      	it	cs
 800b948:	4632      	movcs	r2, r6
 800b94a:	f7ff ffcb 	bl	800b8e4 <memcpy>
 800b94e:	4621      	mov	r1, r4
 800b950:	4640      	mov	r0, r8
 800b952:	463c      	mov	r4, r7
 800b954:	f7ff fc6a 	bl	800b22c <_free_r>
 800b958:	e7e0      	b.n	800b91c <_realloc_r+0x1e>

0800b95a <_malloc_usable_size_r>:
 800b95a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b95e:	1f18      	subs	r0, r3, #4
 800b960:	2b00      	cmp	r3, #0
 800b962:	bfbc      	itt	lt
 800b964:	580b      	ldrlt	r3, [r1, r0]
 800b966:	18c0      	addlt	r0, r0, r3
 800b968:	4770      	bx	lr
	...

0800b96c <_init>:
 800b96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b96e:	bf00      	nop
 800b970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b972:	bc08      	pop	{r3}
 800b974:	469e      	mov	lr, r3
 800b976:	4770      	bx	lr

0800b978 <_fini>:
 800b978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97a:	bf00      	nop
 800b97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b97e:	bc08      	pop	{r3}
 800b980:	469e      	mov	lr, r3
 800b982:	4770      	bx	lr
