
RIDE_Drone_Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6f0  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000187  0800b928  0800b928  0000c928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bab0  0800bab0  0000cab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bab8  0800bab8  0000cab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800babc  0800babc  0000cabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  20000000  0800bac0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000819  2000006c  0800bb2c  0000d06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000603  20000885  0800bb2c  0000d885  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019e9c  00000000  00000000  0000d0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003343  00000000  00000000  00026f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013c0  00000000  00000000  0002a288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037780  00000000  00000000  0002b648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00019fed  00000000  00000000  00062dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015ba26  00000000  00000000  0007cdb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001d87db  2**0
                  CONTENTS, READONLY
 17 .debug_rnglists 00000f14  00000000  00000000  001d881e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000058d0  00000000  00000000  001d9734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  001df004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000006c 	.word	0x2000006c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b910 	.word	0x0800b910

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000070 	.word	0x20000070
 8000274:	0800b910 	.word	0x0800b910

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b97e 	b.w	800059c <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	460c      	mov	r4, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14d      	bne.n	8000360 <__udivmoddi4+0xa8>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	460f      	mov	r7, r1
 80002c8:	4684      	mov	ip, r0
 80002ca:	4696      	mov	lr, r2
 80002cc:	fab2 f382 	clz	r3, r2
 80002d0:	d960      	bls.n	8000394 <__udivmoddi4+0xdc>
 80002d2:	b14b      	cbz	r3, 80002e8 <__udivmoddi4+0x30>
 80002d4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002d8:	f1c3 0220 	rsb	r2, r3, #32
 80002dc:	409f      	lsls	r7, r3
 80002de:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e2:	fa20 f202 	lsr.w	r2, r0, r2
 80002e6:	4317      	orrs	r7, r2
 80002e8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002ec:	fa1f f48e 	uxth.w	r4, lr
 80002f0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002f8:	fb06 7711 	mls	r7, r6, r1, r7
 80002fc:	fb01 f004 	mul.w	r0, r1, r4
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x62>
 8000308:	eb1e 0202 	adds.w	r2, lr, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x60>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 812d 	bhi.w	8000572 <__udivmoddi4+0x2ba>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fa1f fc8c 	uxth.w	ip, ip
 8000320:	fbb2 f0f6 	udiv	r0, r2, r6
 8000324:	fb06 2210 	mls	r2, r6, r0, r2
 8000328:	fb00 f404 	mul.w	r4, r0, r4
 800032c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000330:	4564      	cmp	r4, ip
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x8e>
 8000334:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x8c>
 800033e:	4564      	cmp	r4, ip
 8000340:	f200 811a 	bhi.w	8000578 <__udivmoddi4+0x2c0>
 8000344:	4610      	mov	r0, r2
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	ebac 0c04 	sub.w	ip, ip, r4
 800034e:	2100      	movs	r1, #0
 8000350:	b125      	cbz	r5, 800035c <__udivmoddi4+0xa4>
 8000352:	fa2c f303 	lsr.w	r3, ip, r3
 8000356:	2200      	movs	r2, #0
 8000358:	e9c5 3200 	strd	r3, r2, [r5]
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	428b      	cmp	r3, r1
 8000362:	d905      	bls.n	8000370 <__udivmoddi4+0xb8>
 8000364:	b10d      	cbz	r5, 800036a <__udivmoddi4+0xb2>
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	2100      	movs	r1, #0
 800036c:	4608      	mov	r0, r1
 800036e:	e7f5      	b.n	800035c <__udivmoddi4+0xa4>
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14d      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000378:	42a3      	cmp	r3, r4
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2aa>
 800037e:	4290      	cmp	r0, r2
 8000380:	f080 80ef 	bcs.w	8000562 <__udivmoddi4+0x2aa>
 8000384:	4606      	mov	r6, r0
 8000386:	4623      	mov	r3, r4
 8000388:	4608      	mov	r0, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0e6      	beq.n	800035c <__udivmoddi4+0xa4>
 800038e:	e9c5 6300 	strd	r6, r3, [r5]
 8000392:	e7e3      	b.n	800035c <__udivmoddi4+0xa4>
 8000394:	2b00      	cmp	r3, #0
 8000396:	f040 80a2 	bne.w	80004de <__udivmoddi4+0x226>
 800039a:	1a8a      	subs	r2, r1, r2
 800039c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a0:	fa1f f68e 	uxth.w	r6, lr
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003aa:	fb07 2014 	mls	r0, r7, r4, r2
 80003ae:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b6:	fb06 f004 	mul.w	r0, r6, r4
 80003ba:	4290      	cmp	r0, r2
 80003bc:	d90f      	bls.n	80003de <__udivmoddi4+0x126>
 80003be:	eb1e 0202 	adds.w	r2, lr, r2
 80003c2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	4290      	cmp	r0, r2
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80c8 	beq.w	800056c <__udivmoddi4+0x2b4>
 80003dc:	4644      	mov	r4, r8
 80003de:	1a12      	subs	r2, r2, r0
 80003e0:	fa1f fc8c 	uxth.w	ip, ip
 80003e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e8:	fb07 2210 	mls	r2, r7, r0, r2
 80003ec:	fb00 f606 	mul.w	r6, r0, r6
 80003f0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f4:	4566      	cmp	r6, ip
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x152>
 80003f8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x150>
 8000402:	4566      	cmp	r6, ip
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2c6>
 8000408:	4610      	mov	r0, r2
 800040a:	ebac 0c06 	sub.w	ip, ip, r6
 800040e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa04 fe01 	lsl.w	lr, r4, r1
 800041e:	fa22 f706 	lsr.w	r7, r2, r6
 8000422:	fa20 fc06 	lsr.w	ip, r0, r6
 8000426:	40f4      	lsrs	r4, r6
 8000428:	408a      	lsls	r2, r1
 800042a:	431f      	orrs	r7, r3
 800042c:	ea4e 030c 	orr.w	r3, lr, ip
 8000430:	fa00 fe01 	lsl.w	lr, r0, r1
 8000434:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fa1f fc87 	uxth.w	ip, r7
 8000440:	fbb4 f0f8 	udiv	r0, r4, r8
 8000444:	fb08 4410 	mls	r4, r8, r0, r4
 8000448:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044c:	fb00 f90c 	mul.w	r9, r0, ip
 8000450:	45a1      	cmp	r9, r4
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1ba>
 8000454:	193c      	adds	r4, r7, r4
 8000456:	f100 3aff 	add.w	sl, r0, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a1      	cmp	r9, r4
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b8>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 8093 	beq.w	8000596 <__udivmoddi4+0x2de>
 8000470:	4650      	mov	r0, sl
 8000472:	eba4 0409 	sub.w	r4, r4, r9
 8000476:	fa1f f983 	uxth.w	r9, r3
 800047a:	fbb4 f3f8 	udiv	r3, r4, r8
 800047e:	fb08 4413 	mls	r4, r8, r3, r4
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	45a4      	cmp	ip, r4
 800048c:	d906      	bls.n	800049c <__udivmoddi4+0x1e4>
 800048e:	193c      	adds	r4, r7, r4
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295
 8000494:	d201      	bcs.n	800049a <__udivmoddi4+0x1e2>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d87a      	bhi.n	8000590 <__udivmoddi4+0x2d8>
 800049a:	4643      	mov	r3, r8
 800049c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a0:	eba4 040c 	sub.w	r4, r4, ip
 80004a4:	fba0 9802 	umull	r9, r8, r0, r2
 80004a8:	4544      	cmp	r4, r8
 80004aa:	46cc      	mov	ip, r9
 80004ac:	4643      	mov	r3, r8
 80004ae:	d302      	bcc.n	80004b6 <__udivmoddi4+0x1fe>
 80004b0:	d106      	bne.n	80004c0 <__udivmoddi4+0x208>
 80004b2:	45ce      	cmp	lr, r9
 80004b4:	d204      	bcs.n	80004c0 <__udivmoddi4+0x208>
 80004b6:	3801      	subs	r0, #1
 80004b8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004bc:	eb68 0307 	sbc.w	r3, r8, r7
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x222>
 80004c2:	ebbe 020c 	subs.w	r2, lr, ip
 80004c6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ca:	fa04 f606 	lsl.w	r6, r4, r6
 80004ce:	fa22 f301 	lsr.w	r3, r2, r1
 80004d2:	40cc      	lsrs	r4, r1
 80004d4:	431e      	orrs	r6, r3
 80004d6:	e9c5 6400 	strd	r6, r4, [r5]
 80004da:	2100      	movs	r1, #0
 80004dc:	e73e      	b.n	800035c <__udivmoddi4+0xa4>
 80004de:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e2:	f1c3 0120 	rsb	r1, r3, #32
 80004e6:	fa04 f203 	lsl.w	r2, r4, r3
 80004ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ee:	40cc      	lsrs	r4, r1
 80004f0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f4:	fa20 f101 	lsr.w	r1, r0, r1
 80004f8:	fa1f f68e 	uxth.w	r6, lr
 80004fc:	fbb4 f0f7 	udiv	r0, r4, r7
 8000500:	430a      	orrs	r2, r1
 8000502:	fb07 4410 	mls	r4, r7, r0, r4
 8000506:	0c11      	lsrs	r1, r2, #16
 8000508:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800050c:	fb00 f406 	mul.w	r4, r0, r6
 8000510:	428c      	cmp	r4, r1
 8000512:	d90e      	bls.n	8000532 <__udivmoddi4+0x27a>
 8000514:	eb1e 0101 	adds.w	r1, lr, r1
 8000518:	f100 38ff 	add.w	r8, r0, #4294967295
 800051c:	bf2c      	ite	cs
 800051e:	f04f 0901 	movcs.w	r9, #1
 8000522:	f04f 0900 	movcc.w	r9, #0
 8000526:	428c      	cmp	r4, r1
 8000528:	d902      	bls.n	8000530 <__udivmoddi4+0x278>
 800052a:	f1b9 0f00 	cmp.w	r9, #0
 800052e:	d02c      	beq.n	800058a <__udivmoddi4+0x2d2>
 8000530:	4640      	mov	r0, r8
 8000532:	1b09      	subs	r1, r1, r4
 8000534:	b292      	uxth	r2, r2
 8000536:	fbb1 f4f7 	udiv	r4, r1, r7
 800053a:	fb07 1114 	mls	r1, r7, r4, r1
 800053e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000542:	fb04 f106 	mul.w	r1, r4, r6
 8000546:	4291      	cmp	r1, r2
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x2a2>
 800054a:	eb1e 0202 	adds.w	r2, lr, r2
 800054e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000552:	d201      	bcs.n	8000558 <__udivmoddi4+0x2a0>
 8000554:	4291      	cmp	r1, r2
 8000556:	d815      	bhi.n	8000584 <__udivmoddi4+0x2cc>
 8000558:	4644      	mov	r4, r8
 800055a:	1a52      	subs	r2, r2, r1
 800055c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000560:	e721      	b.n	80003a6 <__udivmoddi4+0xee>
 8000562:	1a86      	subs	r6, r0, r2
 8000564:	eb64 0303 	sbc.w	r3, r4, r3
 8000568:	2001      	movs	r0, #1
 800056a:	e70e      	b.n	800038a <__udivmoddi4+0xd2>
 800056c:	3c02      	subs	r4, #2
 800056e:	4472      	add	r2, lr
 8000570:	e735      	b.n	80003de <__udivmoddi4+0x126>
 8000572:	3902      	subs	r1, #2
 8000574:	4472      	add	r2, lr
 8000576:	e6d0      	b.n	800031a <__udivmoddi4+0x62>
 8000578:	44f4      	add	ip, lr
 800057a:	3802      	subs	r0, #2
 800057c:	e6e3      	b.n	8000346 <__udivmoddi4+0x8e>
 800057e:	44f4      	add	ip, lr
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x152>
 8000584:	3c02      	subs	r4, #2
 8000586:	4472      	add	r2, lr
 8000588:	e7e7      	b.n	800055a <__udivmoddi4+0x2a2>
 800058a:	3802      	subs	r0, #2
 800058c:	4471      	add	r1, lr
 800058e:	e7d0      	b.n	8000532 <__udivmoddi4+0x27a>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e782      	b.n	800049c <__udivmoddi4+0x1e4>
 8000596:	3802      	subs	r0, #2
 8000598:	443c      	add	r4, r7
 800059a:	e76a      	b.n	8000472 <__udivmoddi4+0x1ba>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <transmit>:
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
#include "TxHandler.h"

bool transmit(UART_HandleTypeDef *huart, uint8_t data[], size_t size, DataType dataType, uint64_t destAddr){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0c2      	sub	sp, #264	@ 0x108
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80005ac:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 80005b0:	6001      	str	r1, [r0, #0]
 80005b2:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80005b6:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 80005ba:	600a      	str	r2, [r1, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005c2:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80005c6:	701a      	strb	r2, [r3, #0]
    // prepare for rand num generation
    //srand(time(NULL));
    
    // local variables
    uint32_t fragmentNumber = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    uint8_t messageId = 0x00; //rand() % 256;
 80005ce:	2300      	movs	r3, #0
 80005d0:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

    if(size > 200){
 80005d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2bc8      	cmp	r3, #200	@ 0xc8
 80005e0:	d858      	bhi.n	8000694 <transmit+0xf4>
        // framgent the data array
    }else{
        // transmit the data array in its entirety
        TXPacket packet = defaultTxPacket();
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f85e 	bl	80006a8 <defaultTxPacket>

        // fill remaining fields: length, frameId, destination address, fragment number, data type, payload data, checksum
        // length
        packet.length = DEFAULT_TX_LENGTH;
 80005ec:	4b2c      	ldr	r3, [pc, #176]	@ (80006a0 <transmit+0x100>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	827b      	strh	r3, [r7, #18]
        // frameId
        packet.frameId = messageId;
 80005f2:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80005f6:	757b      	strb	r3, [r7, #21]
        // destination address
        packet.destinationAddress = destAddr;
 80005f8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80005fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
        // fragment number
        packet.fragmentNumber = fragmentNumber;
 8000600:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
        // data type
        packet.dataType = dataType;
 8000606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800060a:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        // payload data
        for(size_t i = 0; i<size; i++){
 8000614:	2300      	movs	r3, #0
 8000616:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800061a:	e014      	b.n	8000646 <transmit+0xa6>
            packet.payloadData[i] = data[i];
 800061c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000620:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800062a:	4413      	add	r3, r2
 800062c:	7819      	ldrb	r1, [r3, #0]
 800062e:	f107 0229 	add.w	r2, r7, #41	@ 0x29
 8000632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000636:	4413      	add	r3, r2
 8000638:	460a      	mov	r2, r1
 800063a:	701a      	strb	r2, [r3, #0]
        for(size_t i = 0; i<size; i++){
 800063c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000640:	3301      	adds	r3, #1
 8000642:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800064a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800064e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	429a      	cmp	r2, r3
 8000656:	d3e1      	bcc.n	800061c <transmit+0x7c>
        }
        // checksum
        packet.checksum = calcChecksum(&packet);
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f88d 	bl	800077c <calcChecksum>
 8000662:	4603      	mov	r3, r0
 8000664:	f887 30f1 	strb.w	r3, [r7, #241]	@ 0xf1

        // create TX buffer
        uint8_t *txBuffer = packetToArray(&packet);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f9ae 	bl	80009ce <packetToArray>
 8000672:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
            printf("%02X ", txBuffer[i]);
        }
        printf("\n");*/

        // HAL_Transmit...
        HAL_UART_Transmit_IT(huart, txBuffer, DEFAULT_TX_BUFFER_SIZE);
 8000676:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <transmit+0x104>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	b29b      	uxth	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	f007 fbf8 	bl	8007e78 <HAL_UART_Transmit_IT>

        // clean up dynamic memory for TX Buffer
        free(txBuffer);
 8000688:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800068c:	f00a fc86 	bl	800af9c <free>

        // indicate good transmission
        return true;
 8000690:	2301      	movs	r3, #1
 8000692:	e000      	b.n	8000696 <transmit+0xf6>
    }

    return false;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	0800b950 	.word	0x0800b950
 80006a4:	0800b954 	.word	0x0800b954

080006a8 <defaultTxPacket>:

TXPacket defaultTxPacket(){
 80006a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006ac:	b0c1      	sub	sp, #260	@ 0x104
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6178      	str	r0, [r7, #20]
    return (TXPacket){
 80006b2:	4b27      	ldr	r3, [pc, #156]	@ (8000750 <defaultTxPacket+0xa8>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <defaultTxPacket+0xac>)
 80006ba:	881a      	ldrh	r2, [r3, #0]
 80006bc:	60fa      	str	r2, [r7, #12]
 80006be:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <defaultTxPacket+0xb0>)
 80006c0:	7819      	ldrb	r1, [r3, #0]
 80006c2:	60b9      	str	r1, [r7, #8]
 80006c4:	4b25      	ldr	r3, [pc, #148]	@ (800075c <defaultTxPacket+0xb4>)
 80006c6:	7818      	ldrb	r0, [r3, #0]
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <defaultTxPacket+0xb8>)
 80006cc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80006d0:	4b24      	ldr	r3, [pc, #144]	@ (8000764 <defaultTxPacket+0xbc>)
 80006d2:	881e      	ldrh	r6, [r3, #0]
 80006d4:	603e      	str	r6, [r7, #0]
 80006d6:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <defaultTxPacket+0xc0>)
 80006d8:	f893 b000 	ldrb.w	fp, [r3]
 80006dc:	4b23      	ldr	r3, [pc, #140]	@ (800076c <defaultTxPacket+0xc4>)
 80006de:	f893 a000 	ldrb.w	sl, [r3]
 80006e2:	4b23      	ldr	r3, [pc, #140]	@ (8000770 <defaultTxPacket+0xc8>)
 80006e4:	681e      	ldr	r6, [r3, #0]
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <defaultTxPacket+0xcc>)
 80006e8:	f893 9000 	ldrb.w	r9, [r3]
 80006ec:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <defaultTxPacket+0xd0>)
 80006ee:	f893 8000 	ldrb.w	r8, [r3]
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	4618      	mov	r0, r3
 80006f6:	23e8      	movs	r3, #232	@ 0xe8
 80006f8:	461a      	mov	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f00a fd24 	bl	800b148 <memset>
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	7c3a      	ldrb	r2, [r7, #16]
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	89ba      	ldrh	r2, [r7, #12]
 800070a:	805a      	strh	r2, [r3, #2]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	7a3a      	ldrb	r2, [r7, #8]
 8000710:	711a      	strb	r2, [r3, #4]
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	793a      	ldrb	r2, [r7, #4]
 8000716:	715a      	strb	r2, [r3, #5]
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	e9c3 4502 	strd	r4, r5, [r3, #8]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	883a      	ldrh	r2, [r7, #0]
 8000722:	821a      	strh	r2, [r3, #16]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	465a      	mov	r2, fp
 8000728:	749a      	strb	r2, [r3, #18]
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	4652      	mov	r2, sl
 800072e:	74da      	strb	r2, [r3, #19]
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	615e      	str	r6, [r3, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	464a      	mov	r2, r9
 8000738:	761a      	strb	r2, [r3, #24]
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	4642      	mov	r2, r8
 800073e:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1
        .fragmentNumber = DEFAULT_FRAG_NUM,
        .dataType = DEFAULT_DATA_TYPE,
        .payloadData = {0x00},
        .checksum = DEFAULT_CHECKSUM
    };
}
 8000742:	6978      	ldr	r0, [r7, #20]
 8000744:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8000748:	46bd      	mov	sp, r7
 800074a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800074e:	bf00      	nop
 8000750:	0800b94f 	.word	0x0800b94f
 8000754:	0800b950 	.word	0x0800b950
 8000758:	0800b958 	.word	0x0800b958
 800075c:	0800b959 	.word	0x0800b959
 8000760:	0800b968 	.word	0x0800b968
 8000764:	0800b970 	.word	0x0800b970
 8000768:	0800b972 	.word	0x0800b972
 800076c:	0800b973 	.word	0x0800b973
 8000770:	0800b974 	.word	0x0800b974
 8000774:	0800b978 	.word	0x0800b978
 8000778:	0800b979 	.word	0x0800b979

0800077c <calcChecksum>:

uint8_t calcChecksum(TXPacket *packet){
 800077c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000780:	b09e      	sub	sp, #120	@ 0x78
 8000782:	af00      	add	r7, sp, #0
 8000784:	66f8      	str	r0, [r7, #108]	@ 0x6c
    // add all the bytes between length and checksum
    uint64_t sum = 0;
 8000786:	f04f 0200 	mov.w	r2, #0
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    sum += packet->frameType;
 8000792:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2200      	movs	r2, #0
 800079a:	461c      	mov	r4, r3
 800079c:	4615      	mov	r5, r2
 800079e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80007a2:	eb12 0804 	adds.w	r8, r2, r4
 80007a6:	eb43 0905 	adc.w	r9, r3, r5
 80007aa:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    sum += packet->frameId;
 80007ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007b0:	795b      	ldrb	r3, [r3, #5]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2200      	movs	r2, #0
 80007b6:	469a      	mov	sl, r3
 80007b8:	4693      	mov	fp, r2
 80007ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80007be:	eb12 010a 	adds.w	r1, r2, sl
 80007c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80007c4:	eb43 030b 	adc.w	r3, r3, fp
 80007c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80007ca:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80007ce:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    sum += sumAllBytes(packet->destinationAddress, sizeof(packet->destinationAddress));
 80007d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80007d8:	2208      	movs	r2, #8
 80007da:	f000 f88b 	bl	80008f4 <sumAllBytes>
 80007de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80007e2:	1814      	adds	r4, r2, r0
 80007e4:	633c      	str	r4, [r7, #48]	@ 0x30
 80007e6:	414b      	adcs	r3, r1
 80007e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80007ea:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80007ee:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    sum += sumAllBytes(packet->reserved, sizeof(packet->reserved));
 80007f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007f4:	8a1b      	ldrh	r3, [r3, #16]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	2200      	movs	r2, #0
 80007fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80007fc:	667a      	str	r2, [r7, #100]	@ 0x64
 80007fe:	2202      	movs	r2, #2
 8000800:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8000804:	f000 f876 	bl	80008f4 <sumAllBytes>
 8000808:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800080c:	1814      	adds	r4, r2, r0
 800080e:	62bc      	str	r4, [r7, #40]	@ 0x28
 8000810:	414b      	adcs	r3, r1
 8000812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000814:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000818:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    sum += packet->broadcastRadius;
 800081c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800081e:	7c9b      	ldrb	r3, [r3, #18]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2200      	movs	r2, #0
 8000824:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000826:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000828:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800082c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000830:	4621      	mov	r1, r4
 8000832:	1851      	adds	r1, r2, r1
 8000834:	6239      	str	r1, [r7, #32]
 8000836:	4629      	mov	r1, r5
 8000838:	eb43 0101 	adc.w	r1, r3, r1
 800083c:	6279      	str	r1, [r7, #36]	@ 0x24
 800083e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000842:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    sum += packet->transmitOptions;
 8000846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000848:	7cdb      	ldrb	r3, [r3, #19]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2200      	movs	r2, #0
 800084e:	653b      	str	r3, [r7, #80]	@ 0x50
 8000850:	657a      	str	r2, [r7, #84]	@ 0x54
 8000852:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000856:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800085a:	4621      	mov	r1, r4
 800085c:	1851      	adds	r1, r2, r1
 800085e:	61b9      	str	r1, [r7, #24]
 8000860:	4629      	mov	r1, r5
 8000862:	eb43 0101 	adc.w	r1, r3, r1
 8000866:	61f9      	str	r1, [r7, #28]
 8000868:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800086c:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    sum += sumAllBytes(packet->fragmentNumber, sizeof(packet->fragmentNumber));
 8000870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	2200      	movs	r2, #0
 8000876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000878:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800087a:	2204      	movs	r2, #4
 800087c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8000880:	f000 f838 	bl	80008f4 <sumAllBytes>
 8000884:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000888:	1814      	adds	r4, r2, r0
 800088a:	613c      	str	r4, [r7, #16]
 800088c:	414b      	adcs	r3, r1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000894:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    sum += packet->dataType;
 8000898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800089a:	7e1b      	ldrb	r3, [r3, #24]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2200      	movs	r2, #0
 80008a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80008a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80008a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80008a8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80008ac:	4621      	mov	r1, r4
 80008ae:	1851      	adds	r1, r2, r1
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	4629      	mov	r1, r5
 80008b4:	eb43 0101 	adc.w	r1, r3, r1
 80008b8:	60f9      	str	r1, [r7, #12]
 80008ba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80008be:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    sum += sumAllBytesArray(packet->payloadData, MAX_DATA_SIZE);
 80008c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008c4:	3319      	adds	r3, #25
 80008c6:	21c8      	movs	r1, #200	@ 0xc8
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f851 	bl	8000970 <sumAllBytesArray>
 80008ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80008d2:	1814      	adds	r4, r2, r0
 80008d4:	603c      	str	r4, [r7, #0]
 80008d6:	414b      	adcs	r3, r1
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80008de:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    // return the last 8 bits (1 byte) subtracted from 0xFF
    return 0xFF - (sum & 0xFF);
 80008e2:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80008e6:	43db      	mvns	r3, r3
 80008e8:	b2db      	uxtb	r3, r3
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3778      	adds	r7, #120	@ 0x78
 80008ee:	46bd      	mov	sp, r7
 80008f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080008f4 <sumAllBytes>:

uint64_t sumAllBytes(uint64_t num, size_t byteCount){
 80008f4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80008f8:	b088      	sub	sp, #32
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
    uint64_t sum = 0x00;
 8000902:	f04f 0200 	mov.w	r2, #0
 8000906:	f04f 0300 	mov.w	r3, #0
 800090a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for(size_t i=0; i<byteCount; i++){
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	e020      	b.n	8000956 <sumAllBytes+0x62>
        sum += (num >> i*8) & 0xFF;
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	00d9      	lsls	r1, r3, #3
 8000918:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800091c:	f1c1 0620 	rsb	r6, r1, #32
 8000920:	f1a1 0020 	sub.w	r0, r1, #32
 8000924:	fa22 f401 	lsr.w	r4, r2, r1
 8000928:	fa03 f606 	lsl.w	r6, r3, r6
 800092c:	4334      	orrs	r4, r6
 800092e:	fa23 f000 	lsr.w	r0, r3, r0
 8000932:	4304      	orrs	r4, r0
 8000934:	fa23 f501 	lsr.w	r5, r3, r1
 8000938:	f004 08ff 	and.w	r8, r4, #255	@ 0xff
 800093c:	f04f 0900 	mov.w	r9, #0
 8000940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000944:	eb12 0a08 	adds.w	sl, r2, r8
 8000948:	eb43 0b09 	adc.w	fp, r3, r9
 800094c:	e9c7 ab06 	strd	sl, fp, [r7, #24]
    for(size_t i=0; i<byteCount; i++){
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	3301      	adds	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	429a      	cmp	r2, r3
 800095c:	d3da      	bcc.n	8000914 <sumAllBytes+0x20>
    }
    return sum;
 800095e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800096e:	4770      	bx	lr

08000970 <sumAllBytesArray>:

uint64_t sumAllBytesArray(uint8_t arr[], size_t byteCount){
 8000970:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000974:	b087      	sub	sp, #28
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
    uint64_t sum = 0x00;
 800097c:	f04f 0200 	mov.w	r2, #0
 8000980:	f04f 0300 	mov.w	r3, #0
 8000984:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for(size_t i=0; i<byteCount; i++){
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	e012      	b.n	80009b4 <sumAllBytesArray+0x44>
        sum += arr[i];
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2200      	movs	r2, #0
 800099a:	461c      	mov	r4, r3
 800099c:	4615      	mov	r5, r2
 800099e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80009a2:	eb12 0804 	adds.w	r8, r2, r4
 80009a6:	eb43 0905 	adc.w	r9, r3, r5
 80009aa:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for(size_t i=0; i<byteCount; i++){
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	3301      	adds	r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d3e8      	bcc.n	800098e <sumAllBytesArray+0x1e>
    }
    return sum;
 80009bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80009c0:	4610      	mov	r0, r2
 80009c2:	4619      	mov	r1, r3
 80009c4:	371c      	adds	r7, #28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80009cc:	4770      	bx	lr

080009ce <packetToArray>:

uint8_t* packetToArray(TXPacket *packet){
 80009ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d0:	b08b      	sub	sp, #44	@ 0x2c
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
    uint8_t *output = (uint8_t*)malloc((packet->length + 4) * sizeof(uint8_t));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	885b      	ldrh	r3, [r3, #2]
 80009da:	3304      	adds	r3, #4
 80009dc:	4618      	mov	r0, r3
 80009de:	f00a fad5 	bl	800af8c <malloc>
 80009e2:	4603      	mov	r3, r0
 80009e4:	613b      	str	r3, [r7, #16]
    if (output == NULL) {
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d101      	bne.n	80009f0 <packetToArray+0x22>
        // Handle memory allocation failure
        return NULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	e0df      	b.n	8000bb0 <packetToArray+0x1e2>
    }

    size_t shift = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
    int offset = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
    
    // start delimiter
    output[offset] = packet->startDelimiter;
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4413      	add	r3, r2
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	701a      	strb	r2, [r3, #0]
    // length
    shift = sizeof(packet->length);
 8000a04:	2302      	movs	r3, #2
 8000a06:	60fb      	str	r3, [r7, #12]
    offset += 1;
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	60bb      	str	r3, [r7, #8]
    for(size_t i=shift; i>0; i--){output[shift-i+offset] = packet->length>>(i-1)*8 & 0xFF;}
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a12:	e013      	b.n	8000a3c <packetToArray+0x6e>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	885b      	ldrh	r3, [r3, #2]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	fa42 f103 	asr.w	r1, r2, r3
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a28:	1ad2      	subs	r2, r2, r3
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4413      	add	r3, r2
 8000a32:	b2ca      	uxtb	r2, r1
 8000a34:	701a      	strb	r2, [r3, #0]
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1e8      	bne.n	8000a14 <packetToArray+0x46>
    // frame type
    offset += 2;
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	3302      	adds	r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
    output[offset] = packet->frameType;
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	7912      	ldrb	r2, [r2, #4]
 8000a52:	701a      	strb	r2, [r3, #0]
    // frame ID
    offset += 1;
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]
    output[offset] = packet->frameId;
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4413      	add	r3, r2
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	7952      	ldrb	r2, [r2, #5]
 8000a64:	701a      	strb	r2, [r3, #0]
    // Destination address
    shift = sizeof(packet->destinationAddress);
 8000a66:	2308      	movs	r3, #8
 8000a68:	60fb      	str	r3, [r7, #12]
    offset += 1;
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
    for(size_t i=shift; i>0; i--){output[shift-i+offset] = packet->destinationAddress>>(i-1)*8 & 0xFF;}
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	623b      	str	r3, [r7, #32]
 8000a74:	e01f      	b.n	8000ab6 <packetToArray+0xe8>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000a7c:	6a39      	ldr	r1, [r7, #32]
 8000a7e:	3901      	subs	r1, #1
 8000a80:	00c9      	lsls	r1, r1, #3
 8000a82:	f1c1 0620 	rsb	r6, r1, #32
 8000a86:	f1a1 0020 	sub.w	r0, r1, #32
 8000a8a:	fa22 f401 	lsr.w	r4, r2, r1
 8000a8e:	fa03 f606 	lsl.w	r6, r3, r6
 8000a92:	4334      	orrs	r4, r6
 8000a94:	fa23 f000 	lsr.w	r0, r3, r0
 8000a98:	4304      	orrs	r4, r0
 8000a9a:	fa23 f501 	lsr.w	r5, r3, r1
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	1ad2      	subs	r2, r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4413      	add	r3, r2
 8000aac:	b2e2      	uxtb	r2, r4
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	623b      	str	r3, [r7, #32]
 8000ab6:	6a3b      	ldr	r3, [r7, #32]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1dc      	bne.n	8000a76 <packetToArray+0xa8>
    // reserved
    shift = sizeof(packet->reserved);
 8000abc:	2302      	movs	r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
    offset += 8;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	3308      	adds	r3, #8
 8000ac4:	60bb      	str	r3, [r7, #8]
    for(size_t i=shift; i>0; i--){output[shift-i+offset] = packet->reserved>>(i-1)*8 & 0xFF;}
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	61fb      	str	r3, [r7, #28]
 8000aca:	e013      	b.n	8000af4 <packetToArray+0x126>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	8a1b      	ldrh	r3, [r3, #16]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	fa42 f103 	asr.w	r1, r2, r3
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	1ad2      	subs	r2, r2, r3
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4413      	add	r3, r2
 8000aea:	b2ca      	uxtb	r2, r1
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1e8      	bne.n	8000acc <packetToArray+0xfe>
    // broadcast radius
    offset += 2;
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	3302      	adds	r3, #2
 8000afe:	60bb      	str	r3, [r7, #8]
    output[offset] = packet->broadcastRadius;
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4413      	add	r3, r2
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	7c92      	ldrb	r2, [r2, #18]
 8000b0a:	701a      	strb	r2, [r3, #0]
    // Transmit options
    offset += 1;
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
    output[offset] = packet->transmitOptions;
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4413      	add	r3, r2
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	7cd2      	ldrb	r2, [r2, #19]
 8000b1c:	701a      	strb	r2, [r3, #0]
    // fragment number
    shift = sizeof(packet->fragmentNumber);
 8000b1e:	2304      	movs	r3, #4
 8000b20:	60fb      	str	r3, [r7, #12]
    offset += 1;
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	3301      	adds	r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
    for(size_t i=shift; i>0; i--){output[shift-i+offset] = packet->fragmentNumber>>(i-1)*8 & 0xFF;}
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e012      	b.n	8000b54 <packetToArray+0x186>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	695a      	ldr	r2, [r3, #20]
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	fa22 f103 	lsr.w	r1, r2, r3
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	1ad2      	subs	r2, r2, r3
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4413      	add	r3, r2
 8000b4a:	b2ca      	uxtb	r2, r1
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1e9      	bne.n	8000b2e <packetToArray+0x160>
    // data type
    offset += 4;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	60bb      	str	r3, [r7, #8]
    output[offset] = packet->dataType;
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4413      	add	r3, r2
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	7e12      	ldrb	r2, [r2, #24]
 8000b6a:	701a      	strb	r2, [r3, #0]
    // payload data
    offset += 1;
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
    for(size_t i=0; i<MAX_DATA_SIZE; i++){output[i+offset] = packet->payloadData[i];}
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e00d      	b.n	8000b94 <packetToArray+0x1c6>
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4413      	add	r3, r2
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	440a      	add	r2, r1
 8000b88:	3219      	adds	r2, #25
 8000b8a:	7812      	ldrb	r2, [r2, #0]
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	2bc7      	cmp	r3, #199	@ 0xc7
 8000b98:	d9ee      	bls.n	8000b78 <packetToArray+0x1aa>
    // checksum
    offset += MAX_DATA_SIZE;
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	33c8      	adds	r3, #200	@ 0xc8
 8000b9e:	60bb      	str	r3, [r7, #8]
    output[offset] = packet->checksum;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	f892 20e1 	ldrb.w	r2, [r2, #225]	@ 0xe1
 8000bac:	701a      	strb	r2, [r3, #0]

    return output;
 8000bae:	693b      	ldr	r3, [r7, #16]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	372c      	adds	r7, #44	@ 0x2c
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bb8 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <LL_AHB2_GRP1_EnableClock+0x34>)
 8000bc2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000bc6:	4909      	ldr	r1, [pc, #36]	@ (8000bec <LL_AHB2_GRP1_EnableClock+0x34>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <LL_AHB2_GRP1_EnableClock+0x34>)
 8000bd2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	46020c00 	.word	0x46020c00

08000bf0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <LL_APB1_GRP2_EnableClock+0x34>)
 8000bfa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8000bfe:	4909      	ldr	r1, [pc, #36]	@ (8000c24 <LL_APB1_GRP2_EnableClock+0x34>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <LL_APB1_GRP2_EnableClock+0x34>)
 8000c0a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4013      	ands	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c14:	68fb      	ldr	r3, [r7, #12]
}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	46020c00 	.word	0x46020c00

08000c28 <HAL_UART_RxCpltCallback>:
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* Callback for when data is received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c2c:	b089      	sub	sp, #36	@ 0x24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a45      	ldr	r2, [pc, #276]	@ (8000d4c <HAL_UART_RxCpltCallback+0x124>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	f040 8082 	bne.w	8000d42 <HAL_UART_RxCpltCallback+0x11a>
 8000c3e:	466b      	mov	r3, sp
 8000c40:	461e      	mov	r6, r3
        // Store received byte in buffer for later use
        for(int i = 0; i<sizeof(newRxData); i++){
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
 8000c46:	e00b      	b.n	8000c60 <HAL_UART_RxCpltCallback+0x38>
        	rxData[i] = newRxData[i];
 8000c48:	4a41      	ldr	r2, [pc, #260]	@ (8000d50 <HAL_UART_RxCpltCallback+0x128>)
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	7819      	ldrb	r1, [r3, #0]
 8000c50:	4a40      	ldr	r2, [pc, #256]	@ (8000d54 <HAL_UART_RxCpltCallback+0x12c>)
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	4413      	add	r3, r2
 8000c56:	460a      	mov	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i<sizeof(newRxData); i++){
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	61fb      	str	r3, [r7, #28]
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	2b0a      	cmp	r3, #10
 8000c64:	d9f0      	bls.n	8000c48 <HAL_UART_RxCpltCallback+0x20>
        }

        const char *output = "Received Acknowledgment: ";
 8000c66:	4b3c      	ldr	r3, [pc, #240]	@ (8000d58 <HAL_UART_RxCpltCallback+0x130>)
 8000c68:	617b      	str	r3, [r7, #20]
        HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), 1000);
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff fb04 	bl	8000278 <strlen>
 8000c70:	4603      	mov	r3, r0
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c78:	6979      	ldr	r1, [r7, #20]
 8000c7a:	4838      	ldr	r0, [pc, #224]	@ (8000d5c <HAL_UART_RxCpltCallback+0x134>)
 8000c7c:	f007 f85e 	bl	8007d3c <HAL_UART_Transmit>

        size_t msgLength = sizeof(rxData) / sizeof(rxData[0]);
 8000c80:	230b      	movs	r3, #11
 8000c82:	613b      	str	r3, [r7, #16]
        char msg[msgLength * 2 + 1];
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	1c59      	adds	r1, r3, #1
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	2300      	movs	r3, #0
 8000c92:	4688      	mov	r8, r1
 8000c94:	4699      	mov	r9, r3
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	f04f 0300 	mov.w	r3, #0
 8000c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000caa:	2300      	movs	r3, #0
 8000cac:	460c      	mov	r4, r1
 8000cae:	461d      	mov	r5, r3
 8000cb0:	f04f 0200 	mov.w	r2, #0
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	00eb      	lsls	r3, r5, #3
 8000cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cbe:	00e2      	lsls	r2, r4, #3
 8000cc0:	1dcb      	adds	r3, r1, #7
 8000cc2:	08db      	lsrs	r3, r3, #3
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	ebad 0d03 	sub.w	sp, sp, r3
 8000cca:	466b      	mov	r3, sp
 8000ccc:	3300      	adds	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]

        for(size_t i = 0; i<msgLength; i++){
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	e00e      	b.n	8000cf4 <HAL_UART_RxCpltCallback+0xcc>
        	sprintf(msg + (i*2), "%02X", rxData[i]);
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	18d0      	adds	r0, r2, r3
 8000cde:	4a1d      	ldr	r2, [pc, #116]	@ (8000d54 <HAL_UART_RxCpltCallback+0x12c>)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	491d      	ldr	r1, [pc, #116]	@ (8000d60 <HAL_UART_RxCpltCallback+0x138>)
 8000cea:	f00a fa0d 	bl	800b108 <siprintf>
        for(size_t i = 0; i<msgLength; i++){
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d3ec      	bcc.n	8000cd6 <HAL_UART_RxCpltCallback+0xae>
        }
        msg[msgLength*2] = '\0';
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	68ba      	ldr	r2, [r7, #8]
 8000d02:	2100      	movs	r1, #0
 8000d04:	54d1      	strb	r1, [r2, r3]

        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f7ff fab6 	bl	8000278 <strlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	4811      	ldr	r0, [pc, #68]	@ (8000d5c <HAL_UART_RxCpltCallback+0x134>)
 8000d18:	f007 f810 	bl	8007d3c <HAL_UART_Transmit>

        output = "\r\n";
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <HAL_UART_RxCpltCallback+0x13c>)
 8000d1e:	617b      	str	r3, [r7, #20]
        HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), 1000);
 8000d20:	6978      	ldr	r0, [r7, #20]
 8000d22:	f7ff faa9 	bl	8000278 <strlen>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2e:	6979      	ldr	r1, [r7, #20]
 8000d30:	480a      	ldr	r0, [pc, #40]	@ (8000d5c <HAL_UART_RxCpltCallback+0x134>)
 8000d32:	f007 f803 	bl	8007d3c <HAL_UART_Transmit>

        HAL_UART_Receive_IT(&huart2, newRxData, 11);
 8000d36:	220b      	movs	r2, #11
 8000d38:	4905      	ldr	r1, [pc, #20]	@ (8000d50 <HAL_UART_RxCpltCallback+0x128>)
 8000d3a:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <HAL_UART_RxCpltCallback+0x140>)
 8000d3c:	f007 f940 	bl	8007fc0 <HAL_UART_Receive_IT>
 8000d40:	46b5      	mov	sp, r6
    }
}
 8000d42:	bf00      	nop
 8000d44:	3724      	adds	r7, #36	@ 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d4c:	40004400 	.word	0x40004400
 8000d50:	2000072c 	.word	0x2000072c
 8000d54:	20000720 	.word	0x20000720
 8000d58:	0800b928 	.word	0x0800b928
 8000d5c:	20000114 	.word	0x20000114
 8000d60:	0800b944 	.word	0x0800b944
 8000d64:	0800b94c 	.word	0x0800b94c
 8000d68:	200001a8 	.word	0x200001a8

08000d6c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a09      	ldr	r2, [pc, #36]	@ (8000da0 <HAL_UART_TxCpltCallback+0x34>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d102      	bne.n	8000d84 <HAL_UART_TxCpltCallback+0x18>
		transmitFinished = true;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <HAL_UART_TxCpltCallback+0x38>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
	}
	if(huart->Instance == USART2){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	@ (8000da8 <HAL_UART_TxCpltCallback+0x3c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d102      	bne.n	8000d94 <HAL_UART_TxCpltCallback+0x28>
		transmitFinished = true;
 8000d8e:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <HAL_UART_TxCpltCallback+0x38>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
	}
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	40013800 	.word	0x40013800
 8000da4:	20000000 	.word	0x20000000
 8000da8:	40004400 	.word	0x40004400

08000dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db2:	f000 fd9f 	bl	80018f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db6:	f000 f847 	bl	8000e48 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000dba:	f000 f8a9 	bl	8000f10 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dbe:	f000 fa0d 	bl	80011dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dc2:	f000 f8b3 	bl	8000f2c <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000dc6:	f000 f8f5 	bl	8000fb4 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 8000dca:	f000 f907 	bl	8000fdc <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dce:	f000 f9d3 	bl	8001178 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 8000dd2:	f000 f939 	bl	8001048 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000dd6:	f000 f983 	bl	80010e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, newRxData, 11);
 8000dda:	220b      	movs	r2, #11
 8000ddc:	4915      	ldr	r1, [pc, #84]	@ (8000e34 <main+0x88>)
 8000dde:	4816      	ldr	r0, [pc, #88]	@ (8000e38 <main+0x8c>)
 8000de0:	f007 f8ee 	bl	8007fc0 <HAL_UART_Receive_IT>

  // testing library functionality
  int num = sumOfTwoNumbers(3, 4);
 8000de4:	2104      	movs	r1, #4
 8000de6:	2003      	movs	r0, #3
 8000de8:	f000 fd4c 	bl	8001884 <sumOfTwoNumbers>
 8000dec:	6078      	str	r0, [r7, #4]
  num++;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3301      	adds	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]

  size_t size = strlen(data);
 8000df4:	4811      	ldr	r0, [pc, #68]	@ (8000e3c <main+0x90>)
 8000df6:	f7ff fa3f 	bl	8000278 <strlen>
 8000dfa:	6038      	str	r0, [r7, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	if(transmitFinished && huart2.gState == HAL_UART_STATE_READY){
 8000dfc:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <main+0x94>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d012      	beq.n	8000e2a <main+0x7e>
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <main+0x8c>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0a:	2b20      	cmp	r3, #32
 8000e0c:	d10d      	bne.n	8000e2a <main+0x7e>
		//HAL_UART_Transmit_IT(&huart2, txData, sizeof(txData));
		transmit(&huart2, data, size, TEXT, XBEE_GROUND_TEST_MAC_ADDR);
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <main+0x98>)
 8000e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e14:	e9cd 2300 	strd	r2, r3, [sp]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	4907      	ldr	r1, [pc, #28]	@ (8000e3c <main+0x90>)
 8000e1e:	4806      	ldr	r0, [pc, #24]	@ (8000e38 <main+0x8c>)
 8000e20:	f7ff fbbe 	bl	80005a0 <transmit>
		transmitFinished = false;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <main+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(100);
 8000e2a:	2064      	movs	r0, #100	@ 0x64
 8000e2c:	f000 fe28 	bl	8001a80 <HAL_Delay>
	if(transmitFinished && huart2.gState == HAL_UART_STATE_READY){
 8000e30:	e7e4      	b.n	8000dfc <main+0x50>
 8000e32:	bf00      	nop
 8000e34:	2000072c 	.word	0x2000072c
 8000e38:	200001a8 	.word	0x200001a8
 8000e3c:	20000004 	.word	0x20000004
 8000e40:	20000000 	.word	0x20000000
 8000e44:	0800b960 	.word	0x0800b960

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b09e      	sub	sp, #120	@ 0x78
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0318 	add.w	r3, r7, #24
 8000e52:	2260      	movs	r2, #96	@ 0x60
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f00a f976 	bl	800b148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e6c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000e70:	f002 fec4 	bl	8003bfc <HAL_PWREx_ControlVoltageScaling>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000e7a:	f000 fa65 	bl	8001348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000e7e:	2332      	movs	r3, #50	@ 0x32
 8000e80:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e8e:	2310      	movs	r3, #16
 8000e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e92:	2301      	movs	r3, #1
 8000e94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000e96:	2310      	movs	r3, #16
 8000e98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000e9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000eb0:	2350      	movs	r3, #80	@ 0x50
 8000eb2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec8:	f107 0318 	add.w	r3, r7, #24
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f002 ffa1 	bl	8003e14 <HAL_RCC_OscConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ed8:	f000 fa36 	bl	8001348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000edc:	231f      	movs	r3, #31
 8000ede:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 fe67 	bl	8004bcc <HAL_RCC_ClockConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f04:	f000 fa20 	bl	8001348 <Error_Handler>
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3778      	adds	r7, #120	@ 0x78
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000f14:	f002 ff5e 	bl	8003dd4 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f002 fefb 	bl	8003d14 <HAL_PWREx_ConfigSupply>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000f24:	f000 fa10 	bl	8001348 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f32:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb0 <MX_ADC1_Init+0x84>)
 8000f34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f50:	2204      	movs	r2, #4
 8000f52:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000f62:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f68:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f70:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	@ (8000fac <MX_ADC1_Init+0x80>)
 8000f9a:	f000 fe93 	bl	8001cc4 <HAL_ADC_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000fa4:	f000 f9d0 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000088 	.word	0x20000088
 8000fb0:	42028000 	.word	0x42028000

08000fb4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f001 fd77 	bl	8002aac <HAL_ICACHE_ConfigAssociativityMode>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000fc4:	f000 f9c0 	bl	8001348 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000fc8:	f001 fd90 	bl	8002aec <HAL_ICACHE_Enable>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000fd2:	f000 f9b9 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000ff2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000ff6:	f7ff fdfb 	bl	8000bf0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f7ff fddc 	bl	8000bb8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001000:	2001      	movs	r0, #1
 8001002:	f7ff fdd9 	bl	8000bb8 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800100a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800100c:	2303      	movs	r3, #3
 800100e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	463b      	mov	r3, r7
 8001016:	4619      	mov	r1, r3
 8001018:	4809      	ldr	r0, [pc, #36]	@ (8001040 <MX_UCPD1_Init+0x64>)
 800101a:	f009 f96c 	bl	800a2f6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800101e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001022:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001024:	2303      	movs	r3, #3
 8001026:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <MX_UCPD1_Init+0x68>)
 8001032:	f009 f960 	bl	800a2f6 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	42020400 	.word	0x42020400
 8001044:	42020000 	.word	0x42020000

08001048 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800104c:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 800104e:	4a23      	ldr	r2, [pc, #140]	@ (80010dc <MX_USART1_UART_Init+0x94>)
 8001050:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001052:	4b21      	ldr	r3, [pc, #132]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 8001054:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001058:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 800108c:	2200      	movs	r2, #0
 800108e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001090:	4811      	ldr	r0, [pc, #68]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 8001092:	f006 fe03 	bl	8007c9c <HAL_UART_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800109c:	f000 f954 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a0:	2100      	movs	r1, #0
 80010a2:	480d      	ldr	r0, [pc, #52]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 80010a4:	f008 ff11 	bl	8009eca <HAL_UARTEx_SetTxFifoThreshold>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010ae:	f000 f94b 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4808      	ldr	r0, [pc, #32]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 80010b6:	f008 ff46 	bl	8009f46 <HAL_UARTEx_SetRxFifoThreshold>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010c0:	f000 f942 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <MX_USART1_UART_Init+0x90>)
 80010c6:	f008 fec7 	bl	8009e58 <HAL_UARTEx_DisableFifoMode>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010d0:	f000 f93a 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000114 	.word	0x20000114
 80010dc:	40013800 	.word	0x40013800

080010e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e4:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 80010e6:	4a23      	ldr	r2, [pc, #140]	@ (8001174 <MX_USART2_UART_Init+0x94>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ea:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001116:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001122:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001128:	4811      	ldr	r0, [pc, #68]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 800112a:	f006 fdb7 	bl	8007c9c <HAL_UART_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001134:	f000 f908 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001138:	2100      	movs	r1, #0
 800113a:	480d      	ldr	r0, [pc, #52]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 800113c:	f008 fec5 	bl	8009eca <HAL_UARTEx_SetTxFifoThreshold>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001146:	f000 f8ff 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114a:	2100      	movs	r1, #0
 800114c:	4808      	ldr	r0, [pc, #32]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 800114e:	f008 fefa 	bl	8009f46 <HAL_UARTEx_SetRxFifoThreshold>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001158:	f000 f8f6 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <MX_USART2_UART_Init+0x90>)
 800115e:	f008 fe7b 	bl	8009e58 <HAL_UARTEx_DisableFifoMode>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001168:	f000 f8ee 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200001a8 	.word	0x200001a8
 8001174:	40004400 	.word	0x40004400

08001178 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800117e:	4a16      	ldr	r2, [pc, #88]	@ (80011d8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001180:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001184:	2206      	movs	r2, #6
 8001186:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800118a:	2202      	movs	r2, #2
 800118c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001190:	2202      	movs	r2, #2
 8001192:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001196:	2200      	movs	r2, #0
 8001198:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800119c:	2200      	movs	r2, #0
 800119e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c0:	f001 fca4 	bl	8002b0c <HAL_PCD_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80011ca:	f000 f8bd 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000023c 	.word	0x2000023c
 80011d8:	42040000 	.word	0x42040000

080011dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	4b50      	ldr	r3, [pc, #320]	@ (8001334 <MX_GPIO_Init+0x158>)
 80011f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001334 <MX_GPIO_Init+0x158>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001202:	4b4c      	ldr	r3, [pc, #304]	@ (8001334 <MX_GPIO_Init+0x158>)
 8001204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b48      	ldr	r3, [pc, #288]	@ (8001334 <MX_GPIO_Init+0x158>)
 8001212:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001216:	4a47      	ldr	r2, [pc, #284]	@ (8001334 <MX_GPIO_Init+0x158>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001220:	4b44      	ldr	r3, [pc, #272]	@ (8001334 <MX_GPIO_Init+0x158>)
 8001222:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b41      	ldr	r3, [pc, #260]	@ (8001334 <MX_GPIO_Init+0x158>)
 8001230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001234:	4a3f      	ldr	r2, [pc, #252]	@ (8001334 <MX_GPIO_Init+0x158>)
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800123e:	4b3d      	ldr	r3, [pc, #244]	@ (8001334 <MX_GPIO_Init+0x158>)
 8001240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800124c:	4b39      	ldr	r3, [pc, #228]	@ (8001334 <MX_GPIO_Init+0x158>)
 800124e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001252:	4a38      	ldr	r2, [pc, #224]	@ (8001334 <MX_GPIO_Init+0x158>)
 8001254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001258:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800125c:	4b35      	ldr	r3, [pc, #212]	@ (8001334 <MX_GPIO_Init+0x158>)
 800125e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2104      	movs	r1, #4
 800126e:	4832      	ldr	r0, [pc, #200]	@ (8001338 <MX_GPIO_Init+0x15c>)
 8001270:	f001 fc04 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2180      	movs	r1, #128	@ 0x80
 8001278:	4830      	ldr	r0, [pc, #192]	@ (800133c <MX_GPIO_Init+0x160>)
 800127a:	f001 fbff 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	21a0      	movs	r1, #160	@ 0xa0
 8001282:	482f      	ldr	r0, [pc, #188]	@ (8001340 <MX_GPIO_Init+0x164>)
 8001284:	f001 fbfa 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001288:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800128e:	4b2d      	ldr	r3, [pc, #180]	@ (8001344 <MX_GPIO_Init+0x168>)
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4827      	ldr	r0, [pc, #156]	@ (800133c <MX_GPIO_Init+0x160>)
 800129e:	f001 fa15 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80012a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	4822      	ldr	r0, [pc, #136]	@ (8001340 <MX_GPIO_Init+0x164>)
 80012b8:	f001 fa08 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80012bc:	2304      	movs	r3, #4
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c8:	2302      	movs	r3, #2
 80012ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4819      	ldr	r0, [pc, #100]	@ (8001338 <MX_GPIO_Init+0x15c>)
 80012d4:	f001 f9fa 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80012d8:	2380      	movs	r3, #128	@ 0x80
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	4813      	ldr	r0, [pc, #76]	@ (800133c <MX_GPIO_Init+0x160>)
 80012f0:	f001 f9ec 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 80012f4:	2320      	movs	r3, #32
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	480d      	ldr	r0, [pc, #52]	@ (8001340 <MX_GPIO_Init+0x164>)
 800130c:	f001 f9de 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001310:	2380      	movs	r3, #128	@ 0x80
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001318:	2301      	movs	r3, #1
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131c:	2302      	movs	r3, #2
 800131e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	@ (8001340 <MX_GPIO_Init+0x164>)
 8001328:	f001 f9d0 	bl	80026cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	@ 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	46020c00 	.word	0x46020c00
 8001338:	42021800 	.word	0x42021800
 800133c:	42020800 	.word	0x42020800
 8001340:	42020400 	.word	0x42020400
 8001344:	10210000 	.word	0x10210000

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <Error_Handler+0x8>

08001354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <HAL_MspInit+0x38>)
 800135c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001360:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <HAL_MspInit+0x38>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800136a:	4b08      	ldr	r3, [pc, #32]	@ (800138c <HAL_MspInit+0x38>)
 800136c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001378:	f002 fd3c 	bl	8003df4 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800137c:	2004      	movs	r0, #4
 800137e:	f001 f818 	bl	80023b2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	46020c00 	.word	0x46020c00

08001390 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0ba      	sub	sp, #232	@ 0xe8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	22c0      	movs	r2, #192	@ 0xc0
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f009 fec9 	bl	800b148 <memset>
  if(hadc->Instance==ADC1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a24      	ldr	r2, [pc, #144]	@ (800144c <HAL_ADC_MspInit+0xbc>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d140      	bne.n	8001442 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80013c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80013cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4618      	mov	r0, r3
 80013da:	f003 ffc7 	bl	800536c <HAL_RCCEx_PeriphCLKConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80013e4:	f7ff ffb0 	bl	8001348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013e8:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <HAL_ADC_MspInit+0xc0>)
 80013ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ee:	4a18      	ldr	r2, [pc, #96]	@ (8001450 <HAL_ADC_MspInit+0xc0>)
 80013f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <HAL_ADC_MspInit+0xc0>)
 80013fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_ADC_MspInit+0xc0>)
 8001408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140c:	4a10      	ldr	r2, [pc, #64]	@ (8001450 <HAL_ADC_MspInit+0xc0>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <HAL_ADC_MspInit+0xc0>)
 8001418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001424:	2304      	movs	r3, #4
 8001426:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142a:	2303      	movs	r3, #3
 800142c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	@ (8001454 <HAL_ADC_MspInit+0xc4>)
 800143e:	f001 f945 	bl	80026cc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001442:	bf00      	nop
 8001444:	37e8      	adds	r7, #232	@ 0xe8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	42028000 	.word	0x42028000
 8001450:	46020c00 	.word	0x46020c00
 8001454:	42020800 	.word	0x42020800

08001458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b0bc      	sub	sp, #240	@ 0xf0
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001470:	f107 0318 	add.w	r3, r7, #24
 8001474:	22c0      	movs	r2, #192	@ 0xc0
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f009 fe65 	bl	800b148 <memset>
  if(huart->Instance==USART1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a54      	ldr	r2, [pc, #336]	@ (80015d4 <HAL_UART_MspInit+0x17c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d14e      	bne.n	8001526 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001488:	f04f 0201 	mov.w	r2, #1
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001494:	2300      	movs	r3, #0
 8001496:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	f107 0318 	add.w	r3, r7, #24
 800149c:	4618      	mov	r0, r3
 800149e:	f003 ff65 	bl	800536c <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80014a8:	f7ff ff4e 	bl	8001348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ac:	4b4a      	ldr	r3, [pc, #296]	@ (80015d8 <HAL_UART_MspInit+0x180>)
 80014ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014b2:	4a49      	ldr	r2, [pc, #292]	@ (80015d8 <HAL_UART_MspInit+0x180>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80014bc:	4b46      	ldr	r3, [pc, #280]	@ (80015d8 <HAL_UART_MspInit+0x180>)
 80014be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b43      	ldr	r3, [pc, #268]	@ (80015d8 <HAL_UART_MspInit+0x180>)
 80014cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d0:	4a41      	ldr	r2, [pc, #260]	@ (80015d8 <HAL_UART_MspInit+0x180>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014da:	4b3f      	ldr	r3, [pc, #252]	@ (80015d8 <HAL_UART_MspInit+0x180>)
 80014dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80014e8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014f6:	2302      	movs	r3, #2
 80014f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001502:	2307      	movs	r3, #7
 8001504:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800150c:	4619      	mov	r1, r3
 800150e:	4833      	ldr	r0, [pc, #204]	@ (80015dc <HAL_UART_MspInit+0x184>)
 8001510:	f001 f8dc 	bl	80026cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	203d      	movs	r0, #61	@ 0x3d
 800151a:	f000 ff55 	bl	80023c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800151e:	203d      	movs	r0, #61	@ 0x3d
 8001520:	f000 ff6c 	bl	80023fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001524:	e051      	b.n	80015ca <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART2)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a2d      	ldr	r2, [pc, #180]	@ (80015e0 <HAL_UART_MspInit+0x188>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d14c      	bne.n	80015ca <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001530:	f04f 0202 	mov.w	r2, #2
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800153c:	2300      	movs	r3, #0
 800153e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	4618      	mov	r0, r3
 8001546:	f003 ff11 	bl	800536c <HAL_RCCEx_PeriphCLKConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8001550:	f7ff fefa 	bl	8001348 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001554:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <HAL_UART_MspInit+0x180>)
 8001556:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800155a:	4a1f      	ldr	r2, [pc, #124]	@ (80015d8 <HAL_UART_MspInit+0x180>)
 800155c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001560:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001564:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <HAL_UART_MspInit+0x180>)
 8001566:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_UART_MspInit+0x180>)
 8001574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001578:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <HAL_UART_MspInit+0x180>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_UART_MspInit+0x180>)
 8001584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001590:	230c      	movs	r3, #12
 8001592:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a8:	2307      	movs	r3, #7
 80015aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015b2:	4619      	mov	r1, r3
 80015b4:	4809      	ldr	r0, [pc, #36]	@ (80015dc <HAL_UART_MspInit+0x184>)
 80015b6:	f001 f889 	bl	80026cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	203e      	movs	r0, #62	@ 0x3e
 80015c0:	f000 ff02 	bl	80023c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015c4:	203e      	movs	r0, #62	@ 0x3e
 80015c6:	f000 ff19 	bl	80023fc <HAL_NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	37f0      	adds	r7, #240	@ 0xf0
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40013800 	.word	0x40013800
 80015d8:	46020c00 	.word	0x46020c00
 80015dc:	42020000 	.word	0x42020000
 80015e0:	40004400 	.word	0x40004400

080015e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b0bc      	sub	sp, #240	@ 0xf0
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	22c0      	movs	r2, #192	@ 0xc0
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f009 fd9f 	bl	800b148 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a3c      	ldr	r2, [pc, #240]	@ (8001700 <HAL_PCD_MspInit+0x11c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d171      	bne.n	80016f8 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001614:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	4618      	mov	r0, r3
 800162c:	f003 fe9e 	bl	800536c <HAL_RCCEx_PeriphCLKConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001636:	f7ff fe87 	bl	8001348 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b32      	ldr	r3, [pc, #200]	@ (8001704 <HAL_PCD_MspInit+0x120>)
 800163c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001640:	4a30      	ldr	r2, [pc, #192]	@ (8001704 <HAL_PCD_MspInit+0x120>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800164a:	4b2e      	ldr	r3, [pc, #184]	@ (8001704 <HAL_PCD_MspInit+0x120>)
 800164c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001658:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800165c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001672:	230a      	movs	r3, #10
 8001674:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800167c:	4619      	mov	r1, r3
 800167e:	4822      	ldr	r0, [pc, #136]	@ (8001708 <HAL_PCD_MspInit+0x124>)
 8001680:	f001 f824 	bl	80026cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001684:	4b1f      	ldr	r3, [pc, #124]	@ (8001704 <HAL_PCD_MspInit+0x120>)
 8001686:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800168a:	4a1e      	ldr	r2, [pc, #120]	@ (8001704 <HAL_PCD_MspInit+0x120>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001690:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001694:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <HAL_PCD_MspInit+0x120>)
 8001696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800169a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <HAL_PCD_MspInit+0x120>)
 80016a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d119      	bne.n	80016e4 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b0:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <HAL_PCD_MspInit+0x120>)
 80016b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b6:	4a13      	ldr	r2, [pc, #76]	@ (8001704 <HAL_PCD_MspInit+0x120>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80016c0:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <HAL_PCD_MspInit+0x120>)
 80016c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80016ce:	f002 fb71 	bl	8003db4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <HAL_PCD_MspInit+0x120>)
 80016d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <HAL_PCD_MspInit+0x120>)
 80016da:	f023 0304 	bic.w	r3, r3, #4
 80016de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80016e2:	e001      	b.n	80016e8 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80016e4:	f002 fb66 	bl	8003db4 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	2049      	movs	r0, #73	@ 0x49
 80016ee:	f000 fe6b 	bl	80023c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80016f2:	2049      	movs	r0, #73	@ 0x49
 80016f4:	f000 fe82 	bl	80023fc <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80016f8:	bf00      	nop
 80016fa:	37f0      	adds	r7, #240	@ 0xf0
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	42040000 	.word	0x42040000
 8001704:	46020c00 	.word	0x46020c00
 8001708:	42020000 	.word	0x42020000

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <NMI_Handler+0x4>

08001714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <MemManage_Handler+0x4>

08001724 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <UsageFault_Handler+0x4>

08001734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001762:	f000 f96d 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <USART1_IRQHandler+0x10>)
 8001772:	f006 fc87 	bl	8008084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000114 	.word	0x20000114

08001780 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <USART2_IRQHandler+0x10>)
 8001786:	f006 fc7d 	bl	8008084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200001a8 	.word	0x200001a8

08001794 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <OTG_FS_IRQHandler+0x10>)
 800179a:	f001 facf 	bl	8002d3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000023c 	.word	0x2000023c

080017a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b0:	4a14      	ldr	r2, [pc, #80]	@ (8001804 <_sbrk+0x5c>)
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <_sbrk+0x60>)
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <_sbrk+0x64>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <_sbrk+0x68>)
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d207      	bcs.n	80017e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d8:	f009 fcce 	bl	800b178 <__errno>
 80017dc:	4603      	mov	r3, r0
 80017de:	220c      	movs	r2, #12
 80017e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	e009      	b.n	80017fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e8:	4b08      	ldr	r3, [pc, #32]	@ (800180c <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ee:	4b07      	ldr	r3, [pc, #28]	@ (800180c <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a05      	ldr	r2, [pc, #20]	@ (800180c <_sbrk+0x64>)
 80017f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200c0000 	.word	0x200c0000
 8001808:	00000400 	.word	0x00000400
 800180c:	20000738 	.word	0x20000738
 8001810:	20000888 	.word	0x20000888

08001814 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001818:	4b18      	ldr	r3, [pc, #96]	@ (800187c <SystemInit+0x68>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181e:	4a17      	ldr	r2, [pc, #92]	@ (800187c <SystemInit+0x68>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001828:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <SystemInit+0x6c>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800182e:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <SystemInit+0x6c>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001834:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <SystemInit+0x6c>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800183a:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <SystemInit+0x6c>)
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001840:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <SystemInit+0x6c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0e      	ldr	r2, [pc, #56]	@ (8001880 <SystemInit+0x6c>)
 8001846:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800184a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800184e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <SystemInit+0x6c>)
 8001852:	2200      	movs	r2, #0
 8001854:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001856:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <SystemInit+0x6c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a09      	ldr	r2, [pc, #36]	@ (8001880 <SystemInit+0x6c>)
 800185c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001860:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <SystemInit+0x6c>)
 8001864:	2200      	movs	r2, #0
 8001866:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001868:	4b04      	ldr	r3, [pc, #16]	@ (800187c <SystemInit+0x68>)
 800186a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800186e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00
 8001880:	46020c00 	.word	0x46020c00

08001884 <sumOfTwoNumbers>:
 *  Created on: Oct 24, 2024
 *      Author: memo4
 */
#include "test.h"

int sumOfTwoNumbers(int a, int b){
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	return a+b;
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4413      	add	r3, r2
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018d8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018a4:	f7ff ffb6 	bl	8001814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018aa:	e003      	b.n	80018b4 <LoopCopyDataInit>

080018ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018b2:	3104      	adds	r1, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018b4:	480a      	ldr	r0, [pc, #40]	@ (80018e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018b6:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018bc:	d3f6      	bcc.n	80018ac <CopyDataInit>
	ldr	r2, =_sbss
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018c0:	e002      	b.n	80018c8 <LoopFillZerobss>

080018c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018c4:	f842 3b04 	str.w	r3, [r2], #4

080018c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <LoopForever+0x16>)
	cmp	r2, r3
 80018ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018cc:	d3f9      	bcc.n	80018c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ce:	f009 fc59 	bl	800b184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018d2:	f7ff fa6b 	bl	8000dac <main>

080018d6 <LoopForever>:

LoopForever:
    b LoopForever
 80018d6:	e7fe      	b.n	80018d6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80018d8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80018dc:	0800bac0 	.word	0x0800bac0
	ldr	r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018e4:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 80018e8:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 80018ec:	20000885 	.word	0x20000885

080018f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC1_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_Init+0x50>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a11      	ldr	r2, [pc, #68]	@ (8001944 <HAL_Init+0x50>)
 80018fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001902:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001904:	2003      	movs	r0, #3
 8001906:	f000 fd54 	bl	80023b2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800190a:	f003 fb51 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 800190e:	4602      	mov	r2, r0
 8001910:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <HAL_Init+0x54>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	490c      	ldr	r1, [pc, #48]	@ (800194c <HAL_Init+0x58>)
 800191a:	5ccb      	ldrb	r3, [r1, r3]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
 8001920:	4a0b      	ldr	r2, [pc, #44]	@ (8001950 <HAL_Init+0x5c>)
 8001922:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001924:	2004      	movs	r0, #4
 8001926:	f000 fd99 	bl	800245c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800192a:	2000      	movs	r0, #0
 800192c:	f000 f812 	bl	8001954 <HAL_InitTick>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e002      	b.n	8001940 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800193a:	f7ff fd0b 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40022000 	.word	0x40022000
 8001948:	46020c00 	.word	0x46020c00
 800194c:	0800b97c 	.word	0x0800b97c
 8001950:	20000010 	.word	0x20000010

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001960:	4b33      	ldr	r3, [pc, #204]	@ (8001a30 <HAL_InitTick+0xdc>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e05c      	b.n	8001a26 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800196c:	4b31      	ldr	r3, [pc, #196]	@ (8001a34 <HAL_InitTick+0xe0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b04      	cmp	r3, #4
 8001976:	d10c      	bne.n	8001992 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001978:	4b2f      	ldr	r3, [pc, #188]	@ (8001a38 <HAL_InitTick+0xe4>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a30 <HAL_InitTick+0xdc>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e037      	b.n	8001a02 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001992:	f000 fdbb 	bl	800250c <HAL_SYSTICK_GetCLKSourceConfig>
 8001996:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d023      	beq.n	80019e6 <HAL_InitTick+0x92>
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d82d      	bhi.n	8001a00 <HAL_InitTick+0xac>
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_InitTick+0x5e>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d00d      	beq.n	80019cc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80019b0:	e026      	b.n	8001a00 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80019b2:	4b21      	ldr	r3, [pc, #132]	@ (8001a38 <HAL_InitTick+0xe4>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a30 <HAL_InitTick+0xdc>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	4619      	mov	r1, r3
 80019bc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80019c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	60fb      	str	r3, [r7, #12]
        break;
 80019ca:	e01a      	b.n	8001a02 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80019cc:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <HAL_InitTick+0xdc>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80019da:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	60fb      	str	r3, [r7, #12]
        break;
 80019e4:	e00d      	b.n	8001a02 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_InitTick+0xdc>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80019f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fc:	60fb      	str	r3, [r7, #12]
        break;
 80019fe:	e000      	b.n	8001a02 <HAL_InitTick+0xae>
        break;
 8001a00:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fd08 	bl	8002418 <HAL_SYSTICK_Config>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e009      	b.n	8001a26 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a12:	2200      	movs	r2, #0
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1a:	f000 fcd5 	bl	80023c8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001a1e:	4a07      	ldr	r2, [pc, #28]	@ (8001a3c <HAL_InitTick+0xe8>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000018 	.word	0x20000018
 8001a34:	e000e010 	.word	0xe000e010
 8001a38:	20000010 	.word	0x20000010
 8001a3c:	20000014 	.word	0x20000014

08001a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_IncTick+0x20>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_IncTick+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <HAL_IncTick+0x24>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000018 	.word	0x20000018
 8001a64:	2000073c 	.word	0x2000073c

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	2000073c 	.word	0x2000073c

08001a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff ffee 	bl	8001a68 <HAL_GetTick>
 8001a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d005      	beq.n	8001aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <HAL_Delay+0x44>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aa6:	bf00      	nop
 8001aa8:	f7ff ffde 	bl	8001a68 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d8f7      	bhi.n	8001aa8 <HAL_Delay+0x28>
  {
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000018 	.word	0x20000018

08001ac8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	601a      	str	r2, [r3, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <LL_ADC_SetResolution+0x3c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d104      	bne.n	8001b10 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f023 020c 	bic.w	r2, r3, #12
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	60da      	str	r2, [r3, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	46021000 	.word	0x46021000

08001b30 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b42:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	2a00      	cmp	r2, #0
 8001b5a:	d002      	beq.n	8001b62 <LL_ADC_SetGainCompensation+0x32>
 8001b5c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001b60:	e000      	b.n	8001b64 <LL_ADC_SetGainCompensation+0x34>
 8001b62:	2200      	movs	r2, #0
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b085      	sub	sp, #20
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2107      	movs	r1, #7
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	401a      	ands	r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001bc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6093      	str	r3, [r2, #8]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bec:	d101      	bne.n	8001bf2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c3c:	d101      	bne.n	8001c42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <LL_ADC_IsEnabled+0x18>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <LL_ADC_IsEnabled+0x1a>
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d101      	bne.n	8001c8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d101      	bne.n	8001cb4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	@ 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e2b3      	b.n	800224c <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a8b      	ldr	r2, [pc, #556]	@ (8001f20 <HAL_ADC_Init+0x25c>)
 8001cf2:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d109      	bne.n	8001d10 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff fb47 	bl	8001390 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff5f 	bl	8001bd8 <LL_ADC_IsDeepPowerDownEnabled>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d004      	beq.n	8001d2a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff45 	bl	8001bb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff7a 	bl	8001c28 <LL_ADC_IsInternalRegulatorEnabled>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d115      	bne.n	8001d66 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff5e 	bl	8001c00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d44:	4b77      	ldr	r3, [pc, #476]	@ (8001f24 <HAL_ADC_Init+0x260>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	4a77      	ldr	r2, [pc, #476]	@ (8001f28 <HAL_ADC_Init+0x264>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	099b      	lsrs	r3, r3, #6
 8001d52:	3301      	adds	r3, #1
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d58:	e002      	b.n	8001d60 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f9      	bne.n	8001d5a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff5c 	bl	8001c28 <LL_ADC_IsInternalRegulatorEnabled>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10e      	bne.n	8001d94 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001d7a:	f043 0210 	orr.w	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff6c 	bl	8001c76 <LL_ADC_REG_IsConversionOngoing>
 8001d9e:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001da4:	f003 0310 	and.w	r3, r3, #16
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f040 8244 	bne.w	8002236 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 8240 	bne.w	8002236 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001dba:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001dbe:	f043 0202 	orr.w	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff40 	bl	8001c50 <LL_ADC_IsEnabled>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d140      	bne.n	8001e58 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a51      	ldr	r2, [pc, #324]	@ (8001f20 <HAL_ADC_Init+0x25c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d028      	beq.n	8001e32 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a51      	ldr	r2, [pc, #324]	@ (8001f2c <HAL_ADC_Init+0x268>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d109      	bne.n	8001dfe <HAL_ADC_Init+0x13a>
 8001dea:	4850      	ldr	r0, [pc, #320]	@ (8001f2c <HAL_ADC_Init+0x268>)
 8001dec:	f7ff ff30 	bl	8001c50 <LL_ADC_IsEnabled>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	bf0c      	ite	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	2300      	movne	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	e008      	b.n	8001e10 <HAL_ADC_Init+0x14c>
 8001dfe:	4848      	ldr	r0, [pc, #288]	@ (8001f20 <HAL_ADC_Init+0x25c>)
 8001e00:	f7ff ff26 	bl	8001c50 <LL_ADC_IsEnabled>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf0c      	ite	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	2300      	movne	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d021      	beq.n	8001e58 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a44      	ldr	r2, [pc, #272]	@ (8001f2c <HAL_ADC_Init+0x268>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_Init+0x15e>
 8001e1e:	4a44      	ldr	r2, [pc, #272]	@ (8001f30 <HAL_ADC_Init+0x26c>)
 8001e20:	e000      	b.n	8001e24 <HAL_ADC_Init+0x160>
 8001e22:	4a44      	ldr	r2, [pc, #272]	@ (8001f34 <HAL_ADC_Init+0x270>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	f7ff fe4c 	bl	8001ac8 <LL_ADC_SetCommonClock>
 8001e30:	e012      	b.n	8001e58 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	f7ff fe57 	bl	8001af0 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001e42:	4b3c      	ldr	r3, [pc, #240]	@ (8001f34 <HAL_ADC_Init+0x270>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001e52:	4938      	ldr	r1, [pc, #224]	@ (8001f34 <HAL_ADC_Init+0x270>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a30      	ldr	r2, [pc, #192]	@ (8001f20 <HAL_ADC_Init+0x25c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d010      	beq.n	8001e84 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e68:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e6e:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001e74:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001e7c:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	623b      	str	r3, [r7, #32]
 8001e82:	e030      	b.n	8001ee6 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7f1b      	ldrb	r3, [r3, #28]
 8001e88:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e90:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e92:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e98:	2a00      	cmp	r2, #0
 8001e9a:	d002      	beq.n	8001ea2 <HAL_ADC_Init+0x1de>
 8001e9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ea0:	e000      	b.n	8001ea4 <HAL_ADC_Init+0x1e0>
 8001ea2:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ea4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001eaa:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	da04      	bge.n	8001ebe <HAL_ADC_Init+0x1fa>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ebc:	e001      	b.n	8001ec2 <HAL_ADC_Init+0x1fe>
 8001ebe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8001ec2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4918      	ldr	r1, [pc, #96]	@ (8001f2c <HAL_ADC_Init+0x268>)
 8001eca:	428b      	cmp	r3, r1
 8001ecc:	d103      	bne.n	8001ed6 <HAL_ADC_Init+0x212>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ed4:	e003      	b.n	8001ede <HAL_ADC_Init+0x21a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001edc:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001ede:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ee0:	6a3a      	ldr	r2, [r7, #32]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d12f      	bne.n	8001f50 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <HAL_ADC_Init+0x25c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	3b01      	subs	r3, #1
 8001f00:	045b      	lsls	r3, r3, #17
 8001f02:	6a3a      	ldr	r2, [r7, #32]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	623b      	str	r3, [r7, #32]
 8001f08:	e022      	b.n	8001f50 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d111      	bne.n	8001f38 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1a:	623b      	str	r3, [r7, #32]
 8001f1c:	e018      	b.n	8001f50 <HAL_ADC_Init+0x28c>
 8001f1e:	bf00      	nop
 8001f20:	46021000 	.word	0x46021000
 8001f24:	20000010 	.word	0x20000010
 8001f28:	053e2d63 	.word	0x053e2d63
 8001f2c:	42028000 	.word	0x42028000
 8001f30:	42028308 	.word	0x42028308
 8001f34:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f3c:	f043 0220 	orr.w	r2, r3, #32
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a92      	ldr	r2, [pc, #584]	@ (80021a0 <HAL_ADC_Init+0x4dc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d018      	beq.n	8001f8c <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f66:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	6a3a      	ldr	r2, [r7, #32]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	4b89      	ldr	r3, [pc, #548]	@ (80021a4 <HAL_ADC_Init+0x4e0>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	6a39      	ldr	r1, [r7, #32]
 8001f86:	430b      	orrs	r3, r1
 8001f88:	60d3      	str	r3, [r2, #12]
 8001f8a:	e031      	b.n	8001ff0 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d009      	beq.n	8001fa8 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f98:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	6a3a      	ldr	r2, [r7, #32]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	4b7e      	ldr	r3, [pc, #504]	@ (80021a8 <HAL_ADC_Init+0x4e4>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	6a39      	ldr	r1, [r7, #32]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1a      	ldr	r2, [r3, #32]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d008      	beq.n	8001ff0 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a6a      	ldr	r2, [pc, #424]	@ (80021a0 <HAL_ADC_Init+0x4dc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	f000 8093 	beq.w	8002122 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fe38 	bl	8001c76 <LL_ADC_REG_IsConversionOngoing>
 8002006:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fe45 	bl	8001c9c <LL_ADC_INJ_IsConversionOngoing>
 8002012:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d161      	bne.n	80020de <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d15e      	bne.n	80020de <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7f1b      	ldrb	r3, [r3, #28]
 8002024:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4960      	ldr	r1, [pc, #384]	@ (80021ac <HAL_ADC_Init+0x4e8>)
 800202c:	428b      	cmp	r3, r1
 800202e:	d102      	bne.n	8002036 <HAL_ADC_Init+0x372>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002034:	e002      	b.n	800203c <HAL_ADC_Init+0x378>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800203a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800203c:	4313      	orrs	r3, r2
 800203e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	6a39      	ldr	r1, [r7, #32]
 8002054:	430b      	orrs	r3, r1
 8002056:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4619      	mov	r1, r3
 800206a:	4610      	mov	r0, r2
 800206c:	f7ff fd60 	bl	8001b30 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002076:	2b01      	cmp	r3, #1
 8002078:	d11e      	bne.n	80020b8 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800207e:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	4b4a      	ldr	r3, [pc, #296]	@ (80021b0 <HAL_ADC_Init+0x4ec>)
 8002088:	4013      	ands	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800208e:	0411      	lsls	r1, r2, #16
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002094:	4311      	orrs	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800209a:	4311      	orrs	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80020a0:	4311      	orrs	r1, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80020a6:	0892      	lsrs	r2, r2, #2
 80020a8:	430a      	orrs	r2, r1
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	611a      	str	r2, [r3, #16]
 80020b6:	e007      	b.n	80020c8 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d10c      	bne.n	8002100 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ec:	f023 010f 	bic.w	r1, r3, #15
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f4:	1e5a      	subs	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80020fe:	e007      	b.n	8002110 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 020f 	bic.w	r2, r2, #15
 800210e:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002114:	f023 0303 	bic.w	r3, r3, #3
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002120:	e092      	b.n	8002248 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002128:	2b01      	cmp	r3, #1
 800212a:	d111      	bne.n	8002150 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002134:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 800213a:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002140:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	4313      	orrs	r3, r2
 8002146:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	4b17      	ldr	r3, [pc, #92]	@ (80021b4 <HAL_ADC_Init+0x4f0>)
 8002158:	4013      	ands	r3, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	69f9      	ldr	r1, [r7, #28]
 8002160:	430b      	orrs	r3, r1
 8002162:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800216c:	461a      	mov	r2, r3
 800216e:	2100      	movs	r1, #0
 8002170:	f7ff fd01 	bl	8001b76 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217c:	461a      	mov	r2, r3
 800217e:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8002182:	f7ff fcf8 	bl	8001b76 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d114      	bne.n	80021b8 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f062 020f 	orn	r2, r2, #15
 800219c:	629a      	str	r2, [r3, #40]	@ 0x28
 800219e:	e024      	b.n	80021ea <HAL_ADC_Init+0x526>
 80021a0:	46021000 	.word	0x46021000
 80021a4:	fff0c013 	.word	0xfff0c013
 80021a8:	ffde800d 	.word	0xffde800d
 80021ac:	42028000 	.word	0x42028000
 80021b0:	fc00f81e 	.word	0xfc00f81e
 80021b4:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021c0:	d113      	bne.n	80021ea <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021cc:	3b01      	subs	r3, #1
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	f003 031c 	and.w	r3, r3, #28
 80021d4:	f06f 020f 	mvn.w	r2, #15
 80021d8:	fa02 f103 	lsl.w	r1, r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	4b18      	ldr	r3, [pc, #96]	@ (8002254 <HAL_ADC_Init+0x590>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	6a3a      	ldr	r2, [r7, #32]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d10b      	bne.n	8002212 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002204:	f023 0303 	bic.w	r3, r3, #3
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002210:	e01a      	b.n	8002248 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002216:	f023 0312 	bic.w	r3, r3, #18
 800221a:	f043 0210 	orr.w	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002234:	e008      	b.n	8002248 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800223a:	f043 0210 	orr.w	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800224c:	4618      	mov	r0, r3
 800224e:	3728      	adds	r7, #40	@ 0x28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	833ffff3 	.word	0x833ffff3

08002258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002268:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002274:	4013      	ands	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228a:	4a04      	ldr	r2, [pc, #16]	@ (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	60d3      	str	r3, [r2, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a4:	4b04      	ldr	r3, [pc, #16]	@ (80022b8 <__NVIC_GetPriorityGrouping+0x18>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	f003 0307 	and.w	r3, r3, #7
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	db0b      	blt.n	80022e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	f003 021f 	and.w	r2, r3, #31
 80022d4:	4907      	ldr	r1, [pc, #28]	@ (80022f4 <__NVIC_EnableIRQ+0x38>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2001      	movs	r0, #1
 80022de:	fa00 f202 	lsl.w	r2, r0, r2
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000e100 	.word	0xe000e100

080022f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002308:	2b00      	cmp	r3, #0
 800230a:	db0a      	blt.n	8002322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	490c      	ldr	r1, [pc, #48]	@ (8002344 <__NVIC_SetPriority+0x4c>)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	0112      	lsls	r2, r2, #4
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	440b      	add	r3, r1
 800231c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002320:	e00a      	b.n	8002338 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4908      	ldr	r1, [pc, #32]	@ (8002348 <__NVIC_SetPriority+0x50>)
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	3b04      	subs	r3, #4
 8002330:	0112      	lsls	r2, r2, #4
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	440b      	add	r3, r1
 8002336:	761a      	strb	r2, [r3, #24]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000e100 	.word	0xe000e100
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	@ 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f1c3 0307 	rsb	r3, r3, #7
 8002366:	2b04      	cmp	r3, #4
 8002368:	bf28      	it	cs
 800236a:	2304      	movcs	r3, #4
 800236c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3304      	adds	r3, #4
 8002372:	2b06      	cmp	r3, #6
 8002374:	d902      	bls.n	800237c <NVIC_EncodePriority+0x30>
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3b03      	subs	r3, #3
 800237a:	e000      	b.n	800237e <NVIC_EncodePriority+0x32>
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	f04f 32ff 	mov.w	r2, #4294967295
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	401a      	ands	r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002394:	f04f 31ff 	mov.w	r1, #4294967295
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	fa01 f303 	lsl.w	r3, r1, r3
 800239e:	43d9      	mvns	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	4313      	orrs	r3, r2
         );
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3724      	adds	r7, #36	@ 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ff4c 	bl	8002258 <__NVIC_SetPriorityGrouping>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023d6:	f7ff ff63 	bl	80022a0 <__NVIC_GetPriorityGrouping>
 80023da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	6978      	ldr	r0, [r7, #20]
 80023e2:	f7ff ffb3 	bl	800234c <NVIC_EncodePriority>
 80023e6:	4602      	mov	r2, r0
 80023e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ff82 	bl	80022f8 <__NVIC_SetPriority>
}
 80023f4:	bf00      	nop
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff56 	bl	80022bc <__NVIC_EnableIRQ>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002428:	d301      	bcc.n	800242e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800242a:	2301      	movs	r3, #1
 800242c:	e00d      	b.n	800244a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800242e:	4a0a      	ldr	r2, [pc, #40]	@ (8002458 <HAL_SYSTICK_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002436:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <HAL_SYSTICK_Config+0x40>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800243c:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_SYSTICK_Config+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a05      	ldr	r2, [pc, #20]	@ (8002458 <HAL_SYSTICK_Config+0x40>)
 8002442:	f043 0303 	orr.w	r3, r3, #3
 8002446:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b04      	cmp	r3, #4
 8002468:	d844      	bhi.n	80024f4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800246a:	a201      	add	r2, pc, #4	@ (adr r2, 8002470 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800246c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002470:	08002493 	.word	0x08002493
 8002474:	080024b1 	.word	0x080024b1
 8002478:	080024d3 	.word	0x080024d3
 800247c:	080024f5 	.word	0x080024f5
 8002480:	08002485 	.word	0x08002485
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002484:	4b1f      	ldr	r3, [pc, #124]	@ (8002504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1e      	ldr	r2, [pc, #120]	@ (8002504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6013      	str	r3, [r2, #0]
      break;
 8002490:	e031      	b.n	80024f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002492:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a1b      	ldr	r2, [pc, #108]	@ (8002504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800249e:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80024a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a4:	4a18      	ldr	r2, [pc, #96]	@ (8002508 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80024a6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80024aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80024ae:	e022      	b.n	80024f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80024b0:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a13      	ldr	r2, [pc, #76]	@ (8002504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024b6:	f023 0304 	bic.w	r3, r3, #4
 80024ba:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80024bc:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80024be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80024c6:	4a10      	ldr	r2, [pc, #64]	@ (8002508 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80024c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80024d0:	e011      	b.n	80024f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80024d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80024de:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80024e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80024e8:	4a07      	ldr	r2, [pc, #28]	@ (8002508 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80024ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80024f2:	e000      	b.n	80024f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80024f4:	bf00      	nop
  }
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e010 	.word	0xe000e010
 8002508:	46020c00 	.word	0x46020c00

0800250c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002512:	4b19      	ldr	r3, [pc, #100]	@ (8002578 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800251e:	2304      	movs	r3, #4
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	e021      	b.n	8002568 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002524:	4b15      	ldr	r3, [pc, #84]	@ (800257c <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800252a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800252e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002536:	d011      	beq.n	800255c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800253e:	d810      	bhi.n	8002562 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800254c:	d003      	beq.n	8002556 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800254e:	e008      	b.n	8002562 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002550:	2300      	movs	r3, #0
 8002552:	607b      	str	r3, [r7, #4]
        break;
 8002554:	e008      	b.n	8002568 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002556:	2301      	movs	r3, #1
 8002558:	607b      	str	r3, [r7, #4]
        break;
 800255a:	e005      	b.n	8002568 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800255c:	2302      	movs	r3, #2
 800255e:	607b      	str	r3, [r7, #4]
        break;
 8002560:	e002      	b.n	8002568 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
        break;
 8002566:	bf00      	nop
    }
  }
  return systick_source;
 8002568:	687b      	ldr	r3, [r7, #4]
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000e010 	.word	0xe000e010
 800257c:	46020c00 	.word	0x46020c00

08002580 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002588:	f7ff fa6e 	bl	8001a68 <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e06b      	b.n	8002670 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d008      	beq.n	80025b6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e05c      	b.n	8002670 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0204 	orr.w	r2, r2, #4
 80025c4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2205      	movs	r2, #5
 80025ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80025ce:	e020      	b.n	8002612 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80025d0:	f7ff fa4a 	bl	8001a68 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d919      	bls.n	8002612 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e2:	f043 0210 	orr.w	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2203      	movs	r2, #3
 80025ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002602:	2201      	movs	r2, #1
 8002604:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e02e      	b.n	8002670 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0d7      	beq.n	80025d0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0202 	orr.w	r2, r2, #2
 800262e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2204      	movs	r2, #4
 8002634:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002640:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800264e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800265a:	2201      	movs	r2, #1
 800265c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2200      	movs	r2, #0
 8002664:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e019      	b.n	80026be <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d004      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e00e      	b.n	80026be <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2204      	movs	r2, #4
 80026a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026b6:	f043 0304 	orr.w	r3, r3, #4
 80026ba:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	@ 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80026de:	e1ba      	b.n	8002a56 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	2101      	movs	r1, #1
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 81aa 	beq.w	8002a50 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a55      	ldr	r2, [pc, #340]	@ (8002854 <HAL_GPIO_Init+0x188>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d15d      	bne.n	80027c0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800270a:	2201      	movs	r2, #1
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	4013      	ands	r3, r2
 8002718:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0201 	and.w	r2, r3, #1
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	4313      	orrs	r3, r2
 800272c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002734:	4a48      	ldr	r2, [pc, #288]	@ (8002858 <HAL_GPIO_Init+0x18c>)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800273c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800273e:	4a46      	ldr	r2, [pc, #280]	@ (8002858 <HAL_GPIO_Init+0x18c>)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	08da      	lsrs	r2, r3, #3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	3208      	adds	r2, #8
 8002752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002756:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	220f      	movs	r2, #15
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	4013      	ands	r3, r2
 800276c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220b      	movs	r2, #11
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	4313      	orrs	r3, r2
 8002780:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	08da      	lsrs	r2, r3, #3
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	3208      	adds	r2, #8
 800278a:	69f9      	ldr	r1, [r7, #28]
 800278c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	2202      	movs	r2, #2
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e067      	b.n	8002890 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x104>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b12      	cmp	r3, #18
 80027ce:	d145      	bne.n	800285c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	08da      	lsrs	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3208      	adds	r2, #8
 80027d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	220f      	movs	r2, #15
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f003 020f 	and.w	r2, r3, #15
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	4313      	orrs	r3, r2
 800280c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	08da      	lsrs	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3208      	adds	r2, #8
 8002816:	69f9      	ldr	r1, [r7, #28]
 8002818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	2203      	movs	r2, #3
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	4013      	ands	r3, r2
 8002832:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0203 	and.w	r2, r3, #3
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	4313      	orrs	r3, r2
 8002848:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	e01e      	b.n	8002890 <HAL_GPIO_Init+0x1c4>
 8002852:	bf00      	nop
 8002854:	46020000 	.word	0x46020000
 8002858:	0800b9d4 	.word	0x0800b9d4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	2203      	movs	r2, #3
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	4013      	ands	r3, r2
 8002872:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0203 	and.w	r2, r3, #3
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	4313      	orrs	r3, r2
 8002888:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d00b      	beq.n	80028b0 <HAL_GPIO_Init+0x1e4>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d007      	beq.n	80028b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028a4:	2b11      	cmp	r3, #17
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b12      	cmp	r3, #18
 80028ae:	d130      	bne.n	8002912 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80028e6:	2201      	movs	r2, #1
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f003 0201 	and.w	r2, r3, #1
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	4313      	orrs	r3, r2
 800290a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d017      	beq.n	800294a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	2203      	movs	r2, #3
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	4013      	ands	r3, r2
 8002930:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	4313      	orrs	r3, r2
 8002942:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d07c      	beq.n	8002a50 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002956:	4a47      	ldr	r2, [pc, #284]	@ (8002a74 <HAL_GPIO_Init+0x3a8>)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	3318      	adds	r3, #24
 800295e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002962:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	220f      	movs	r2, #15
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	4013      	ands	r3, r2
 8002978:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0a9a      	lsrs	r2, r3, #10
 800297e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a78 <HAL_GPIO_Init+0x3ac>)
 8002980:	4013      	ands	r3, r2
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	f002 0203 	and.w	r2, r2, #3
 8002988:	00d2      	lsls	r2, r2, #3
 800298a:	4093      	lsls	r3, r2
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	4313      	orrs	r3, r2
 8002990:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002992:	4938      	ldr	r1, [pc, #224]	@ (8002a74 <HAL_GPIO_Init+0x3a8>)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3318      	adds	r3, #24
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80029a0:	4b34      	ldr	r3, [pc, #208]	@ (8002a74 <HAL_GPIO_Init+0x3a8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80029c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a74 <HAL_GPIO_Init+0x3a8>)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80029ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002a74 <HAL_GPIO_Init+0x3a8>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80029ee:	4a21      	ldr	r2, [pc, #132]	@ (8002a74 <HAL_GPIO_Init+0x3a8>)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80029f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a74 <HAL_GPIO_Init+0x3a8>)
 80029f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002a1a:	4a16      	ldr	r2, [pc, #88]	@ (8002a74 <HAL_GPIO_Init+0x3a8>)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002a22:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <HAL_GPIO_Init+0x3a8>)
 8002a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a28:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002a48:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <HAL_GPIO_Init+0x3a8>)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3301      	adds	r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f47f ae3d 	bne.w	80026e0 <HAL_GPIO_Init+0x14>
  }
}
 8002a66:	bf00      	nop
 8002a68:	bf00      	nop
 8002a6a:	3724      	adds	r7, #36	@ 0x24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	46022000 	.word	0x46022000
 8002a78:	002f7f7f 	.word	0x002f7f7f

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002a98:	e002      	b.n	8002aa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
 8002ac8:	e007      	b.n	8002ada <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002aca:	4b07      	ldr	r3, [pc, #28]	@ (8002ae8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 0204 	bic.w	r2, r3, #4
 8002ad2:	4905      	ldr	r1, [pc, #20]	@ (8002ae8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	40030400 	.word	0x40030400

08002aec <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002af0:	4b05      	ldr	r3, [pc, #20]	@ (8002b08 <HAL_ICACHE_Enable+0x1c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a04      	ldr	r2, [pc, #16]	@ (8002b08 <HAL_ICACHE_Enable+0x1c>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	40030400 	.word	0x40030400

08002b0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e108      	b.n	8002d30 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fe fd53 	bl	80015e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2203      	movs	r2, #3
 8002b42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4a7b      	ldr	r2, [pc, #492]	@ (8002d38 <HAL_PCD_Init+0x22c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d102      	bne.n	8002b54 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f007 fd19 	bl	800a590 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7c1a      	ldrb	r2, [r3, #16]
 8002b66:	f88d 2000 	strb.w	r2, [sp]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b6e:	f007 fc40 	bl	800a3f2 <USB_CoreInit>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0d5      	b.n	8002d30 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f007 fd11 	bl	800a5b2 <USB_SetCurrentMode>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0c6      	b.n	8002d30 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	e04a      	b.n	8002c3e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3315      	adds	r3, #21
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3314      	adds	r3, #20
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	b298      	uxth	r0, r3
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	332e      	adds	r3, #46	@ 0x2e
 8002be4:	4602      	mov	r2, r0
 8002be6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3318      	adds	r3, #24
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	331c      	adds	r3, #28
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3320      	adds	r3, #32
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3324      	adds	r3, #36	@ 0x24
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	791b      	ldrb	r3, [r3, #4]
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d3af      	bcc.n	8002ba8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
 8002c4c:	e044      	b.n	8002cd8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	791b      	ldrb	r3, [r3, #4]
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d3b5      	bcc.n	8002c4e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7c1a      	ldrb	r2, [r3, #16]
 8002cea:	f88d 2000 	strb.w	r2, [sp]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cf2:	f007 fcab 	bl	800a64c <USB_DevInit>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e013      	b.n	8002d30 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	7b1b      	ldrb	r3, [r3, #12]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d102      	bne.n	8002d24 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 ff3c 	bl	8003b9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f007 ffb9 	bl	800aca0 <USB_DevDisconnect>

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	42040000 	.word	0x42040000

08002d3c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b08d      	sub	sp, #52	@ 0x34
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f008 f858 	bl	800ae08 <USB_GetMode>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 84b9 	bne.w	80036d2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f007 ffbc 	bl	800ace2 <USB_ReadInterrupts>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 84af 	beq.w	80036d0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	0a1b      	lsrs	r3, r3, #8
 8002d7c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f007 ffa9 	bl	800ace2 <USB_ReadInterrupts>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d107      	bne.n	8002daa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f002 0202 	and.w	r2, r2, #2
 8002da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f007 ff97 	bl	800ace2 <USB_ReadInterrupts>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b10      	cmp	r3, #16
 8002dbc:	d161      	bne.n	8002e82 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0210 	bic.w	r2, r2, #16
 8002dcc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	f003 020f 	and.w	r2, r3, #15
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	3304      	adds	r3, #4
 8002dec:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	0c5b      	lsrs	r3, r3, #17
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d124      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d035      	beq.n	8002e72 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	6a38      	ldr	r0, [r7, #32]
 8002e1a:	f007 fee9 	bl	800abf0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e2a:	441a      	add	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e3c:	441a      	add	r2, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	615a      	str	r2, [r3, #20]
 8002e42:	e016      	b.n	8002e72 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	0c5b      	lsrs	r3, r3, #17
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	2b06      	cmp	r3, #6
 8002e4e:	d110      	bne.n	8002e72 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e56:	2208      	movs	r2, #8
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6a38      	ldr	r0, [r7, #32]
 8002e5c:	f007 fec8 	bl	800abf0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e6c:	441a      	add	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0210 	orr.w	r2, r2, #16
 8002e80:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f007 ff2b 	bl	800ace2 <USB_ReadInterrupts>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e92:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e96:	f040 80a7 	bne.w	8002fe8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f007 ff30 	bl	800ad08 <USB_ReadDevAllOutEpInterrupt>
 8002ea8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002eaa:	e099      	b.n	8002fe0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 808e 	beq.w	8002fd4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f007 ff54 	bl	800ad70 <USB_ReadDevOutEPInterrupt>
 8002ec8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00c      	beq.n	8002eee <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ee6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fd29 	bl	8003940 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00c      	beq.n	8002f12 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f04:	461a      	mov	r2, r3
 8002f06:	2308      	movs	r3, #8
 8002f08:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fdff 	bl	8003b10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2310      	movs	r3, #16
 8002f2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d030      	beq.n	8002f9a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f40:	2b80      	cmp	r3, #128	@ 0x80
 8002f42:	d109      	bne.n	8002f58 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f56:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	78db      	ldrb	r3, [r3, #3]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d108      	bne.n	8002f88 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	4619      	mov	r1, r3
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fbf2 	bl	800376c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f94:	461a      	mov	r2, r3
 8002f96:	2302      	movs	r3, #2
 8002f98:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d009      	beq.n	8002fd4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fd2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f47f af62 	bne.w	8002eac <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f007 fe78 	bl	800ace2 <USB_ReadInterrupts>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ff8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ffc:	f040 80db 	bne.w	80031b6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f007 fe99 	bl	800ad3c <USB_ReadDevAllInEpInterrupt>
 800300a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003010:	e0cd      	b.n	80031ae <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80c2 	beq.w	80031a2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f007 febf 	bl	800adac <USB_ReadDevInEPInterrupt>
 800302e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d057      	beq.n	80030ea <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	2201      	movs	r2, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800304e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	43db      	mvns	r3, r3
 8003054:	69f9      	ldr	r1, [r7, #28]
 8003056:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800305a:	4013      	ands	r3, r2
 800305c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	4413      	add	r3, r2
 8003066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800306a:	461a      	mov	r2, r3
 800306c:	2301      	movs	r3, #1
 800306e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	799b      	ldrb	r3, [r3, #6]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d132      	bne.n	80030de <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	3320      	adds	r3, #32
 8003088:	6819      	ldr	r1, [r3, #0]
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4403      	add	r3, r0
 8003098:	331c      	adds	r3, #28
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4419      	add	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4403      	add	r3, r0
 80030ac:	3320      	adds	r3, #32
 80030ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d113      	bne.n	80030de <HAL_PCD_IRQHandler+0x3a2>
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	3324      	adds	r3, #36	@ 0x24
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d108      	bne.n	80030de <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030d6:	461a      	mov	r2, r3
 80030d8:	2101      	movs	r1, #1
 80030da:	f007 fec7 	bl	800ae6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	4619      	mov	r1, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fb03 	bl	80036f0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003100:	461a      	mov	r2, r3
 8003102:	2308      	movs	r3, #8
 8003104:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800311c:	461a      	mov	r2, r3
 800311e:	2310      	movs	r3, #16
 8003120:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003138:	461a      	mov	r2, r3
 800313a:	2340      	movs	r3, #64	@ 0x40
 800313c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d023      	beq.n	8003190 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003148:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800314a:	6a38      	ldr	r0, [r7, #32]
 800314c:	f007 fbca 	bl	800a8e4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	3310      	adds	r3, #16
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	4413      	add	r3, r2
 8003160:	3304      	adds	r3, #4
 8003162:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	78db      	ldrb	r3, [r3, #3]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d108      	bne.n	800317e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2200      	movs	r2, #0
 8003170:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	b2db      	uxtb	r3, r3
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fb03 	bl	8003784 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	4413      	add	r3, r2
 8003186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800318a:	461a      	mov	r2, r3
 800318c:	2302      	movs	r3, #2
 800318e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800319a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fb42 	bl	8003826 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	3301      	adds	r3, #1
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80031a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80031ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f47f af2e 	bne.w	8003012 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f007 fd91 	bl	800ace2 <USB_ReadInterrupts>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031ca:	d122      	bne.n	8003212 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d108      	bne.n	80031fc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031f2:	2100      	movs	r1, #0
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fcf5 	bl	8003be4 <HAL_PCDEx_LPM_Callback>
 80031fa:	e002      	b.n	8003202 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 faab 	bl	8003758 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003210:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f007 fd63 	bl	800ace2 <USB_ReadInterrupts>
 800321c:	4603      	mov	r3, r0
 800321e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003222:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003226:	d112      	bne.n	800324e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d102      	bne.n	800323e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fa83 	bl	8003744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800324c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f007 fd45 	bl	800ace2 <USB_ReadInterrupts>
 8003258:	4603      	mov	r3, r0
 800325a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800325e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003262:	d121      	bne.n	80032a8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003272:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800327a:	2b00      	cmp	r3, #0
 800327c:	d111      	bne.n	80032a2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328c:	089b      	lsrs	r3, r3, #2
 800328e:	f003 020f 	and.w	r2, r3, #15
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003298:	2101      	movs	r1, #1
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fca2 	bl	8003be4 <HAL_PCDEx_LPM_Callback>
 80032a0:	e002      	b.n	80032a8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fa4e 	bl	8003744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f007 fd18 	bl	800ace2 <USB_ReadInterrupts>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032bc:	f040 80b7 	bne.w	800342e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2110      	movs	r1, #16
 80032da:	4618      	mov	r0, r3
 80032dc:	f007 fb02 	bl	800a8e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e0:	2300      	movs	r3, #0
 80032e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032e4:	e046      	b.n	8003374 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032f2:	461a      	mov	r2, r3
 80032f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80032f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	4413      	add	r3, r2
 8003302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800330a:	0151      	lsls	r1, r2, #5
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	440a      	add	r2, r1
 8003310:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003314:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003318:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800331a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003326:	461a      	mov	r2, r3
 8003328:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800332c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800332e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	4413      	add	r3, r2
 8003336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800333e:	0151      	lsls	r1, r2, #5
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	440a      	add	r2, r1
 8003344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003348:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800334c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800334e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800335e:	0151      	lsls	r1, r2, #5
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	440a      	add	r2, r1
 8003364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003368:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800336c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800336e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003370:	3301      	adds	r3, #1
 8003372:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	791b      	ldrb	r3, [r3, #4]
 8003378:	461a      	mov	r2, r3
 800337a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337c:	4293      	cmp	r3, r2
 800337e:	d3b2      	bcc.n	80032e6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800338e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003392:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	7bdb      	ldrb	r3, [r3, #15]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d016      	beq.n	80033ca <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033ac:	f043 030b 	orr.w	r3, r3, #11
 80033b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033c2:	f043 030b 	orr.w	r3, r3, #11
 80033c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80033c8:	e015      	b.n	80033f6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80033dc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80033e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033f0:	f043 030b 	orr.w	r3, r3, #11
 80033f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003404:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003408:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003418:	461a      	mov	r2, r3
 800341a:	f007 fd27 	bl	800ae6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800342c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f007 fc55 	bl	800ace2 <USB_ReadInterrupts>
 8003438:	4603      	mov	r3, r0
 800343a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800343e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003442:	d123      	bne.n	800348c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f007 fceb 	bl	800ae24 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f007 fabf 	bl	800a9d6 <USB_GetDevSpeed>
 8003458:	4603      	mov	r3, r0
 800345a:	461a      	mov	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681c      	ldr	r4, [r3, #0]
 8003464:	f001 fea6 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 8003468:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800346e:	461a      	mov	r2, r3
 8003470:	4620      	mov	r0, r4
 8003472:	f006 ffeb 	bl	800a44c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f95a 	bl	8003730 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800348a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f007 fc26 	bl	800ace2 <USB_ReadInterrupts>
 8003496:	4603      	mov	r3, r0
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b08      	cmp	r3, #8
 800349e:	d10a      	bne.n	80034b6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f93b 	bl	800371c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f002 0208 	and.w	r2, r2, #8
 80034b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f007 fc11 	bl	800ace2 <USB_ReadInterrupts>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c6:	2b80      	cmp	r3, #128	@ 0x80
 80034c8:	d123      	bne.n	8003512 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034d6:	2301      	movs	r3, #1
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034da:	e014      	b.n	8003506 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d105      	bne.n	8003500 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	4619      	mov	r1, r3
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f962 	bl	80037c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	3301      	adds	r3, #1
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	791b      	ldrb	r3, [r3, #4]
 800350a:	461a      	mov	r2, r3
 800350c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350e:	4293      	cmp	r3, r2
 8003510:	d3e4      	bcc.n	80034dc <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f007 fbe3 	bl	800ace2 <USB_ReadInterrupts>
 800351c:	4603      	mov	r3, r0
 800351e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003526:	d13c      	bne.n	80035a2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003528:	2301      	movs	r3, #1
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
 800352c:	e02b      	b.n	8003586 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3318      	adds	r3, #24
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d115      	bne.n	8003580 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003554:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003556:	2b00      	cmp	r3, #0
 8003558:	da12      	bge.n	8003580 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	3317      	adds	r3, #23
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003576:	b2db      	uxtb	r3, r3
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f922 	bl	80037c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	3301      	adds	r3, #1
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	791b      	ldrb	r3, [r3, #4]
 800358a:	461a      	mov	r2, r3
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	4293      	cmp	r3, r2
 8003590:	d3cd      	bcc.n	800352e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80035a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f007 fb9b 	bl	800ace2 <USB_ReadInterrupts>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035b6:	d156      	bne.n	8003666 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035b8:	2301      	movs	r3, #1
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80035bc:	e045      	b.n	800364a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d12e      	bne.n	8003644 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	da2b      	bge.n	8003644 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80035f8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d121      	bne.n	8003644 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10a      	bne.n	8003644 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800363c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003640:	6053      	str	r3, [r2, #4]
            break;
 8003642:	e008      	b.n	8003656 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	3301      	adds	r3, #1
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	791b      	ldrb	r3, [r3, #4]
 800364e:	461a      	mov	r2, r3
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003652:	4293      	cmp	r3, r2
 8003654:	d3b3      	bcc.n	80035be <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f007 fb39 	bl	800ace2 <USB_ReadInterrupts>
 8003670:	4603      	mov	r3, r0
 8003672:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367a:	d10a      	bne.n	8003692 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f88d 	bl	800379c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003690:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f007 fb23 	bl	800ace2 <USB_ReadInterrupts>
 800369c:	4603      	mov	r3, r0
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d115      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f879 	bl	80037b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6859      	ldr	r1, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	e000      	b.n	80036d2 <HAL_PCD_IRQHandler+0x996>
      return;
 80036d0:	bf00      	nop
    }
  }
}
 80036d2:	3734      	adds	r7, #52	@ 0x34
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd90      	pop	{r4, r7, pc}

080036d8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80037d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	da0c      	bge.n	80037f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	f003 020f 	and.w	r2, r3, #15
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	3310      	adds	r3, #16
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4413      	add	r3, r2
 80037ec:	3304      	adds	r3, #4
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	e00c      	b.n	800380c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 020f 	and.w	r2, r3, #15
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	3304      	adds	r3, #4
 800380a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68f9      	ldr	r1, [r7, #12]
 8003812:	4618      	mov	r0, r3
 8003814:	f007 f904 	bl	800aa20 <USB_EPStopXfer>
 8003818:	4603      	mov	r3, r0
 800381a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800381c:	7afb      	ldrb	r3, [r7, #11]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b08a      	sub	sp, #40	@ 0x28
 800382a:	af02      	add	r7, sp, #8
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	4613      	mov	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	3310      	adds	r3, #16
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4413      	add	r3, r2
 800384a:	3304      	adds	r3, #4
 800384c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	429a      	cmp	r2, r3
 8003858:	d901      	bls.n	800385e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e06b      	b.n	8003936 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	429a      	cmp	r2, r3
 8003872:	d902      	bls.n	800387a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3303      	adds	r3, #3
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003882:	e02a      	b.n	80038da <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	429a      	cmp	r2, r3
 8003898:	d902      	bls.n	80038a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	3303      	adds	r3, #3
 80038a4:	089b      	lsrs	r3, r3, #2
 80038a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	68d9      	ldr	r1, [r3, #12]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	4603      	mov	r3, r0
 80038bc:	6978      	ldr	r0, [r7, #20]
 80038be:	f007 f959 	bl	800ab74 <USB_WritePacket>

    ep->xfer_buff  += len;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	441a      	add	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	441a      	add	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d809      	bhi.n	8003904 <PCD_WriteEmptyTxFifo+0xde>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d203      	bcs.n	8003904 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1bf      	bne.n	8003884 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	429a      	cmp	r2, r3
 800390e:	d811      	bhi.n	8003934 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	2201      	movs	r2, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	43db      	mvns	r3, r3
 800392a:	6939      	ldr	r1, [r7, #16]
 800392c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003930:	4013      	ands	r3, r2
 8003932:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	333c      	adds	r3, #60	@ 0x3c
 8003958:	3304      	adds	r3, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	799b      	ldrb	r3, [r3, #6]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d17b      	bne.n	8003a6e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d015      	beq.n	80039ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	4a61      	ldr	r2, [pc, #388]	@ (8003b08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	f240 80b9 	bls.w	8003afc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80b3 	beq.w	8003afc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a2:	461a      	mov	r2, r3
 80039a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039a8:	6093      	str	r3, [r2, #8]
 80039aa:	e0a7      	b.n	8003afc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c2:	461a      	mov	r2, r3
 80039c4:	2320      	movs	r3, #32
 80039c6:	6093      	str	r3, [r2, #8]
 80039c8:	e098      	b.n	8003afc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f040 8093 	bne.w	8003afc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003b08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d90f      	bls.n	80039fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f4:	461a      	mov	r2, r3
 80039f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039fa:	6093      	str	r3, [r2, #8]
 80039fc:	e07e      	b.n	8003afc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	4413      	add	r3, r2
 8003a10:	3304      	adds	r3, #4
 8003a12:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1a      	ldr	r2, [r3, #32]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	0159      	lsls	r1, r3, #5
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	440b      	add	r3, r1
 8003a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2a:	1ad2      	subs	r2, r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d114      	bne.n	8003a60 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	f007 fa0e 	bl	800ae6c <USB_EP0_OutStart>
 8003a50:	e006      	b.n	8003a60 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	441a      	add	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fe36 	bl	80036d8 <HAL_PCD_DataOutStageCallback>
 8003a6c:	e046      	b.n	8003afc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	4a26      	ldr	r2, [pc, #152]	@ (8003b0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d124      	bne.n	8003ac0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a92:	6093      	str	r3, [r2, #8]
 8003a94:	e032      	b.n	8003afc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aac:	461a      	mov	r2, r3
 8003aae:	2320      	movs	r3, #32
 8003ab0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff fe0d 	bl	80036d8 <HAL_PCD_DataOutStageCallback>
 8003abe:	e01d      	b.n	8003afc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d114      	bne.n	8003af0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d108      	bne.n	8003af0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2100      	movs	r1, #0
 8003aec:	f007 f9be 	bl	800ae6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	4619      	mov	r1, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff fdee 	bl	80036d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3720      	adds	r7, #32
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	4f54300a 	.word	0x4f54300a
 8003b0c:	4f54310a 	.word	0x4f54310a

08003b10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	333c      	adds	r3, #60	@ 0x3c
 8003b28:	3304      	adds	r3, #4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4a15      	ldr	r2, [pc, #84]	@ (8003b98 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d90e      	bls.n	8003b64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d009      	beq.n	8003b64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff fdcf 	bl	8003708 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b98 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d90c      	bls.n	8003b8c <PCD_EP_OutSetupPacket_int+0x7c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	799b      	ldrb	r3, [r3, #6]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d108      	bne.n	8003b8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b84:	461a      	mov	r2, r3
 8003b86:	2101      	movs	r1, #1
 8003b88:	f007 f970 	bl	800ae6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	4f54300a 	.word	0x4f54300a

08003b9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bce:	f043 0303 	orr.w	r3, r3, #3
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003c04:	4b39      	ldr	r3, [pc, #228]	@ (8003cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c0c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d10b      	bne.n	8003c2e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c1c:	d905      	bls.n	8003c2a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003c1e:	4b33      	ldr	r3, [pc, #204]	@ (8003cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4a32      	ldr	r2, [pc, #200]	@ (8003cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c28:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e057      	b.n	8003cde <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c34:	d90a      	bls.n	8003c4c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003c36:	4b2d      	ldr	r3, [pc, #180]	@ (8003cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	4a2a      	ldr	r2, [pc, #168]	@ (8003cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c48:	60d3      	str	r3, [r2, #12]
 8003c4a:	e007      	b.n	8003c5c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003c4c:	4b27      	ldr	r3, [pc, #156]	@ (8003cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003c54:	4925      	ldr	r1, [pc, #148]	@ (8003cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003c5c:	4b24      	ldr	r3, [pc, #144]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a24      	ldr	r2, [pc, #144]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	2232      	movs	r2, #50	@ 0x32
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	4a21      	ldr	r2, [pc, #132]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	099b      	lsrs	r3, r3, #6
 8003c76:	3301      	adds	r3, #1
 8003c78:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003c7a:	e002      	b.n	8003c82 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003c82:	4b1a      	ldr	r3, [pc, #104]	@ (8003cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1f3      	bne.n	8003c7c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01b      	beq.n	8003cd2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003c9a:	4b15      	ldr	r3, [pc, #84]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a15      	ldr	r2, [pc, #84]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	099b      	lsrs	r3, r3, #6
 8003ca6:	2232      	movs	r2, #50	@ 0x32
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	4a11      	ldr	r2, [pc, #68]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003cae:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb2:	099b      	lsrs	r3, r3, #6
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003cb8:	e002      	b.n	8003cc0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d102      	bne.n	8003cd2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f3      	bne.n	8003cba <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e000      	b.n	8003cde <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	46020800 	.word	0x46020800
 8003cf0:	20000010 	.word	0x20000010
 8003cf4:	10624dd3 	.word	0x10624dd3

08003cf8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003cfc:	4b04      	ldr	r3, [pc, #16]	@ (8003d10 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	46020800 	.word	0x46020800

08003d14 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003d1c:	4b22      	ldr	r3, [pc, #136]	@ (8003da8 <HAL_PWREx_ConfigSupply+0x94>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a22      	ldr	r2, [pc, #136]	@ (8003dac <HAL_PWREx_ConfigSupply+0x98>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	099b      	lsrs	r3, r3, #6
 8003d28:	2232      	movs	r2, #50	@ 0x32
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003dac <HAL_PWREx_ConfigSupply+0x98>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d113      	bne.n	8003d68 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003d40:	4b1b      	ldr	r3, [pc, #108]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4a1a      	ldr	r2, [pc, #104]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003d46:	f023 0302 	bic.w	r3, r3, #2
 8003d4a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003d4c:	e002      	b.n	8003d54 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003d54:	4b16      	ldr	r3, [pc, #88]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d116      	bne.n	8003d8e <HAL_PWREx_ConfigSupply+0x7a>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f3      	bne.n	8003d4e <HAL_PWREx_ConfigSupply+0x3a>
 8003d66:	e012      	b.n	8003d8e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003d68:	4b11      	ldr	r3, [pc, #68]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a10      	ldr	r2, [pc, #64]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003d6e:	f043 0302 	orr.w	r3, r3, #2
 8003d72:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003d74:	e002      	b.n	8003d7c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d102      	bne.n	8003d8e <HAL_PWREx_ConfigSupply+0x7a>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f3      	bne.n	8003d76 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e000      	b.n	8003d9a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000010 	.word	0x20000010
 8003dac:	10624dd3 	.word	0x10624dd3
 8003db0:	46020800 	.word	0x46020800

08003db4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003db8:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	4a04      	ldr	r2, [pc, #16]	@ (8003dd0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	6113      	str	r3, [r2, #16]
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	46020800 	.word	0x46020800

08003dd4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003dd8:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	4a04      	ldr	r2, [pc, #16]	@ (8003df0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003dde:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003de2:	6113      	str	r3, [r2, #16]
}
 8003de4:	bf00      	nop
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	46020800 	.word	0x46020800

08003df4 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003df8:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <HAL_PWREx_EnableVddA+0x1c>)
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	4a04      	ldr	r2, [pc, #16]	@ (8003e10 <HAL_PWREx_EnableVddA+0x1c>)
 8003dfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e02:	6113      	str	r3, [r2, #16]
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	46020800 	.word	0x46020800

08003e14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08e      	sub	sp, #56	@ 0x38
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d102      	bne.n	8003e2e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f000 bec8 	b.w	8004bbe <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e2e:	4b99      	ldr	r3, [pc, #612]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e38:	4b96      	ldr	r3, [pc, #600]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 816c 	beq.w	8004128 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <HAL_RCC_OscConfig+0x52>
 8003e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	f040 80de 	bne.w	800401a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	f040 80da 	bne.w	800401a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d102      	bne.n	8003e74 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f000 bea5 	b.w	8004bbe <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e78:	4b86      	ldr	r3, [pc, #536]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <HAL_RCC_OscConfig+0x7a>
 8003e84:	4b83      	ldr	r3, [pc, #524]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003e8c:	e005      	b.n	8003e9a <HAL_RCC_OscConfig+0x86>
 8003e8e:	4b81      	ldr	r3, [pc, #516]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e94:	041b      	lsls	r3, r3, #16
 8003e96:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d255      	bcs.n	8003f4a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10a      	bne.n	8003eba <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 f9d9 	bl	8005260 <RCC_SetFlashLatencyFromMSIRange>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f000 be82 	b.w	8004bbe <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003eba:	4b76      	ldr	r3, [pc, #472]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	4a75      	ldr	r2, [pc, #468]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003ec0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ec4:	6093      	str	r3, [r2, #8]
 8003ec6:	4b73      	ldr	r3, [pc, #460]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	4970      	ldr	r1, [pc, #448]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003ee0:	d309      	bcc.n	8003ef6 <HAL_RCC_OscConfig+0xe2>
 8003ee2:	4b6c      	ldr	r3, [pc, #432]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f023 021f 	bic.w	r2, r3, #31
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	4969      	ldr	r1, [pc, #420]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60cb      	str	r3, [r1, #12]
 8003ef4:	e07e      	b.n	8003ff4 <HAL_RCC_OscConfig+0x1e0>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	da0a      	bge.n	8003f14 <HAL_RCC_OscConfig+0x100>
 8003efe:	4b65      	ldr	r3, [pc, #404]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	015b      	lsls	r3, r3, #5
 8003f0c:	4961      	ldr	r1, [pc, #388]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60cb      	str	r3, [r1, #12]
 8003f12:	e06f      	b.n	8003ff4 <HAL_RCC_OscConfig+0x1e0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f1c:	d30a      	bcc.n	8003f34 <HAL_RCC_OscConfig+0x120>
 8003f1e:	4b5d      	ldr	r3, [pc, #372]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	029b      	lsls	r3, r3, #10
 8003f2c:	4959      	ldr	r1, [pc, #356]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60cb      	str	r3, [r1, #12]
 8003f32:	e05f      	b.n	8003ff4 <HAL_RCC_OscConfig+0x1e0>
 8003f34:	4b57      	ldr	r3, [pc, #348]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	03db      	lsls	r3, r3, #15
 8003f42:	4954      	ldr	r1, [pc, #336]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60cb      	str	r3, [r1, #12]
 8003f48:	e054      	b.n	8003ff4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003f4a:	4b52      	ldr	r3, [pc, #328]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	4a51      	ldr	r2, [pc, #324]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f54:	6093      	str	r3, [r2, #8]
 8003f56:	4b4f      	ldr	r3, [pc, #316]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	494c      	ldr	r1, [pc, #304]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003f70:	d309      	bcc.n	8003f86 <HAL_RCC_OscConfig+0x172>
 8003f72:	4b48      	ldr	r3, [pc, #288]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f023 021f 	bic.w	r2, r3, #31
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4945      	ldr	r1, [pc, #276]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60cb      	str	r3, [r1, #12]
 8003f84:	e028      	b.n	8003fd8 <HAL_RCC_OscConfig+0x1c4>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	da0a      	bge.n	8003fa4 <HAL_RCC_OscConfig+0x190>
 8003f8e:	4b41      	ldr	r3, [pc, #260]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	015b      	lsls	r3, r3, #5
 8003f9c:	493d      	ldr	r1, [pc, #244]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60cb      	str	r3, [r1, #12]
 8003fa2:	e019      	b.n	8003fd8 <HAL_RCC_OscConfig+0x1c4>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fac:	d30a      	bcc.n	8003fc4 <HAL_RCC_OscConfig+0x1b0>
 8003fae:	4b39      	ldr	r3, [pc, #228]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	029b      	lsls	r3, r3, #10
 8003fbc:	4935      	ldr	r1, [pc, #212]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60cb      	str	r3, [r1, #12]
 8003fc2:	e009      	b.n	8003fd8 <HAL_RCC_OscConfig+0x1c4>
 8003fc4:	4b33      	ldr	r3, [pc, #204]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	03db      	lsls	r3, r3, #15
 8003fd2:	4930      	ldr	r1, [pc, #192]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10a      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 f93c 	bl	8005260 <RCC_SetFlashLatencyFromMSIRange>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f000 bde5 	b.w	8004bbe <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003ff4:	f001 f8de 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ff8:	4b27      	ldr	r3, [pc, #156]	@ (8004098 <HAL_RCC_OscConfig+0x284>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fd fca9 	bl	8001954 <HAL_InitTick>
 8004002:	4603      	mov	r3, r0
 8004004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 808a 	beq.w	8004126 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004012:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004016:	f000 bdd2 	b.w	8004bbe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d066      	beq.n	80040f0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004022:	4b1c      	ldr	r3, [pc, #112]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1b      	ldr	r2, [pc, #108]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800402e:	f7fd fd1b 	bl	8001a68 <HAL_GetTick>
 8004032:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004034:	e009      	b.n	800404a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004036:	f7fd fd17 	bl	8001a68 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d902      	bls.n	800404a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	f000 bdba 	b.w	8004bbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800404a:	4b12      	ldr	r3, [pc, #72]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0ef      	beq.n	8004036 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004056:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	4a0e      	ldr	r2, [pc, #56]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 800405c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004060:	6093      	str	r3, [r2, #8]
 8004062:	4b0c      	ldr	r3, [pc, #48]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406e:	4909      	ldr	r1, [pc, #36]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8004070:	4313      	orrs	r3, r2
 8004072:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800407c:	d30e      	bcc.n	800409c <HAL_RCC_OscConfig+0x288>
 800407e:	4b05      	ldr	r3, [pc, #20]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f023 021f 	bic.w	r2, r3, #31
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	4902      	ldr	r1, [pc, #8]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 800408c:	4313      	orrs	r3, r2
 800408e:	60cb      	str	r3, [r1, #12]
 8004090:	e04a      	b.n	8004128 <HAL_RCC_OscConfig+0x314>
 8004092:	bf00      	nop
 8004094:	46020c00 	.word	0x46020c00
 8004098:	20000014 	.word	0x20000014
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	da0a      	bge.n	80040ba <HAL_RCC_OscConfig+0x2a6>
 80040a4:	4b98      	ldr	r3, [pc, #608]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	015b      	lsls	r3, r3, #5
 80040b2:	4995      	ldr	r1, [pc, #596]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60cb      	str	r3, [r1, #12]
 80040b8:	e036      	b.n	8004128 <HAL_RCC_OscConfig+0x314>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c2:	d30a      	bcc.n	80040da <HAL_RCC_OscConfig+0x2c6>
 80040c4:	4b90      	ldr	r3, [pc, #576]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	029b      	lsls	r3, r3, #10
 80040d2:	498d      	ldr	r1, [pc, #564]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60cb      	str	r3, [r1, #12]
 80040d8:	e026      	b.n	8004128 <HAL_RCC_OscConfig+0x314>
 80040da:	4b8b      	ldr	r3, [pc, #556]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	03db      	lsls	r3, r3, #15
 80040e8:	4987      	ldr	r1, [pc, #540]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60cb      	str	r3, [r1, #12]
 80040ee:	e01b      	b.n	8004128 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80040f0:	4b85      	ldr	r3, [pc, #532]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a84      	ldr	r2, [pc, #528]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80040fc:	f7fd fcb4 	bl	8001a68 <HAL_GetTick>
 8004100:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004102:	e009      	b.n	8004118 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004104:	f7fd fcb0 	bl	8001a68 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d902      	bls.n	8004118 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	f000 bd53 	b.w	8004bbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004118:	4b7b      	ldr	r3, [pc, #492]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1ef      	bne.n	8004104 <HAL_RCC_OscConfig+0x2f0>
 8004124:	e000      	b.n	8004128 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004126:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 808b 	beq.w	800424c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004138:	2b08      	cmp	r3, #8
 800413a:	d005      	beq.n	8004148 <HAL_RCC_OscConfig+0x334>
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413e:	2b0c      	cmp	r3, #12
 8004140:	d109      	bne.n	8004156 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004144:	2b03      	cmp	r3, #3
 8004146:	d106      	bne.n	8004156 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d17d      	bne.n	800424c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	f000 bd34 	b.w	8004bbe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800415e:	d106      	bne.n	800416e <HAL_RCC_OscConfig+0x35a>
 8004160:	4b69      	ldr	r3, [pc, #420]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a68      	ldr	r2, [pc, #416]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 8004166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	e041      	b.n	80041f2 <HAL_RCC_OscConfig+0x3de>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004176:	d112      	bne.n	800419e <HAL_RCC_OscConfig+0x38a>
 8004178:	4b63      	ldr	r3, [pc, #396]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a62      	ldr	r2, [pc, #392]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 800417e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	4b60      	ldr	r3, [pc, #384]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a5f      	ldr	r2, [pc, #380]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 800418a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	4b5d      	ldr	r3, [pc, #372]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a5c      	ldr	r2, [pc, #368]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 8004196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	e029      	b.n	80041f2 <HAL_RCC_OscConfig+0x3de>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80041a6:	d112      	bne.n	80041ce <HAL_RCC_OscConfig+0x3ba>
 80041a8:	4b57      	ldr	r3, [pc, #348]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a56      	ldr	r2, [pc, #344]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80041ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4b54      	ldr	r3, [pc, #336]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a53      	ldr	r2, [pc, #332]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80041ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	4b51      	ldr	r3, [pc, #324]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a50      	ldr	r2, [pc, #320]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80041c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	e011      	b.n	80041f2 <HAL_RCC_OscConfig+0x3de>
 80041ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a4d      	ldr	r2, [pc, #308]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80041d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	4b4b      	ldr	r3, [pc, #300]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a4a      	ldr	r2, [pc, #296]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80041e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	4b48      	ldr	r3, [pc, #288]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a47      	ldr	r2, [pc, #284]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80041ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80041f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d014      	beq.n	8004224 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80041fa:	f7fd fc35 	bl	8001a68 <HAL_GetTick>
 80041fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004200:	e009      	b.n	8004216 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004202:	f7fd fc31 	bl	8001a68 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b64      	cmp	r3, #100	@ 0x64
 800420e:	d902      	bls.n	8004216 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	f000 bcd4 	b.w	8004bbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004216:	4b3c      	ldr	r3, [pc, #240]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0ef      	beq.n	8004202 <HAL_RCC_OscConfig+0x3ee>
 8004222:	e013      	b.n	800424c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004224:	f7fd fc20 	bl	8001a68 <HAL_GetTick>
 8004228:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422a:	e009      	b.n	8004240 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800422c:	f7fd fc1c 	bl	8001a68 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	@ 0x64
 8004238:	d902      	bls.n	8004240 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	f000 bcbf 	b.w	8004bbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004240:	4b31      	ldr	r3, [pc, #196]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ef      	bne.n	800422c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d05f      	beq.n	8004318 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425a:	2b04      	cmp	r3, #4
 800425c:	d005      	beq.n	800426a <HAL_RCC_OscConfig+0x456>
 800425e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004260:	2b0c      	cmp	r3, #12
 8004262:	d114      	bne.n	800428e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004266:	2b02      	cmp	r3, #2
 8004268:	d111      	bne.n	800428e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d102      	bne.n	8004278 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	f000 bca3 	b.w	8004bbe <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004278:	4b23      	ldr	r3, [pc, #140]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	041b      	lsls	r3, r3, #16
 8004286:	4920      	ldr	r1, [pc, #128]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 8004288:	4313      	orrs	r3, r2
 800428a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800428c:	e044      	b.n	8004318 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d024      	beq.n	80042e0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004296:	4b1c      	ldr	r3, [pc, #112]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1b      	ldr	r2, [pc, #108]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042a2:	f7fd fbe1 	bl	8001a68 <HAL_GetTick>
 80042a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042a8:	e009      	b.n	80042be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042aa:	f7fd fbdd 	bl	8001a68 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d902      	bls.n	80042be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	f000 bc80 	b.w	8004bbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042be:	4b12      	ldr	r3, [pc, #72]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ef      	beq.n	80042aa <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80042ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	041b      	lsls	r3, r3, #16
 80042d8:	490b      	ldr	r1, [pc, #44]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	610b      	str	r3, [r1, #16]
 80042de:	e01b      	b.n	8004318 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80042e0:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a08      	ldr	r2, [pc, #32]	@ (8004308 <HAL_RCC_OscConfig+0x4f4>)
 80042e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042ec:	f7fd fbbc 	bl	8001a68 <HAL_GetTick>
 80042f0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f4:	f7fd fbb8 	bl	8001a68 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d904      	bls.n	800430c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	f000 bc5b 	b.w	8004bbe <HAL_RCC_OscConfig+0xdaa>
 8004308:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800430c:	4baf      	ldr	r3, [pc, #700]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ed      	bne.n	80042f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80c8 	beq.w	80044b6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432c:	4ba7      	ldr	r3, [pc, #668]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 800432e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d111      	bne.n	800435e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800433a:	4ba4      	ldr	r3, [pc, #656]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 800433c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004340:	4aa2      	ldr	r2, [pc, #648]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 8004342:	f043 0304 	orr.w	r3, r3, #4
 8004346:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800434a:	4ba0      	ldr	r3, [pc, #640]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 800434c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800435e:	4b9c      	ldr	r3, [pc, #624]	@ (80045d0 <HAL_RCC_OscConfig+0x7bc>)
 8004360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d119      	bne.n	800439e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800436a:	4b99      	ldr	r3, [pc, #612]	@ (80045d0 <HAL_RCC_OscConfig+0x7bc>)
 800436c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436e:	4a98      	ldr	r2, [pc, #608]	@ (80045d0 <HAL_RCC_OscConfig+0x7bc>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004376:	f7fd fb77 	bl	8001a68 <HAL_GetTick>
 800437a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800437c:	e009      	b.n	8004392 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437e:	f7fd fb73 	bl	8001a68 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d902      	bls.n	8004392 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	f000 bc16 	b.w	8004bbe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004392:	4b8f      	ldr	r3, [pc, #572]	@ (80045d0 <HAL_RCC_OscConfig+0x7bc>)
 8004394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0ef      	beq.n	800437e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d05f      	beq.n	8004466 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80043a6:	4b89      	ldr	r3, [pc, #548]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 80043a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043ac:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d037      	beq.n	800442c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d006      	beq.n	80043d4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e3f4      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01b      	beq.n	8004416 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80043de:	4b7b      	ldr	r3, [pc, #492]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 80043e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043e4:	4a79      	ldr	r2, [pc, #484]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 80043e6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80043ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80043ee:	f7fd fb3b 	bl	8001a68 <HAL_GetTick>
 80043f2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f6:	f7fd fb37 	bl	8001a68 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b05      	cmp	r3, #5
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e3da      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004408:	4b70      	ldr	r3, [pc, #448]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 800440a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800440e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1ef      	bne.n	80043f6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004416:	4b6d      	ldr	r3, [pc, #436]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 8004418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800441c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	4969      	ldr	r1, [pc, #420]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800442c:	4b67      	ldr	r3, [pc, #412]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 800442e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004432:	4a66      	ldr	r2, [pc, #408]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 8004434:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004438:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800443c:	f7fd fb14 	bl	8001a68 <HAL_GetTick>
 8004440:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004444:	f7fd fb10 	bl	8001a68 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b05      	cmp	r3, #5
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e3b3      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004456:	4b5d      	ldr	r3, [pc, #372]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 8004458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800445c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0ef      	beq.n	8004444 <HAL_RCC_OscConfig+0x630>
 8004464:	e01b      	b.n	800449e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004466:	4b59      	ldr	r3, [pc, #356]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 8004468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800446c:	4a57      	ldr	r2, [pc, #348]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 800446e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004472:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004476:	f7fd faf7 	bl	8001a68 <HAL_GetTick>
 800447a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800447e:	f7fd faf3 	bl	8001a68 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b05      	cmp	r3, #5
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e396      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004490:	4b4e      	ldr	r3, [pc, #312]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 8004492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1ef      	bne.n	800447e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800449e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d107      	bne.n	80044b6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a6:	4b49      	ldr	r3, [pc, #292]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 80044a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ac:	4a47      	ldr	r2, [pc, #284]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 80044ae:	f023 0304 	bic.w	r3, r3, #4
 80044b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 8111 	beq.w	80046e6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ca:	4b40      	ldr	r3, [pc, #256]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 80044cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d111      	bne.n	80044fc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d8:	4b3c      	ldr	r3, [pc, #240]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 80044da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044de:	4a3b      	ldr	r2, [pc, #236]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 80044e0:	f043 0304 	orr.w	r3, r3, #4
 80044e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80044e8:	4b38      	ldr	r3, [pc, #224]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 80044ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80044f6:	2301      	movs	r3, #1
 80044f8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80044fc:	4b34      	ldr	r3, [pc, #208]	@ (80045d0 <HAL_RCC_OscConfig+0x7bc>)
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d118      	bne.n	800453a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004508:	4b31      	ldr	r3, [pc, #196]	@ (80045d0 <HAL_RCC_OscConfig+0x7bc>)
 800450a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450c:	4a30      	ldr	r2, [pc, #192]	@ (80045d0 <HAL_RCC_OscConfig+0x7bc>)
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004514:	f7fd faa8 	bl	8001a68 <HAL_GetTick>
 8004518:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451c:	f7fd faa4 	bl	8001a68 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e347      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800452e:	4b28      	ldr	r3, [pc, #160]	@ (80045d0 <HAL_RCC_OscConfig+0x7bc>)
 8004530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d01f      	beq.n	8004586 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	d010      	beq.n	8004574 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004552:	4b1e      	ldr	r3, [pc, #120]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 8004554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004558:	4a1c      	ldr	r2, [pc, #112]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 800455a:	f043 0304 	orr.w	r3, r3, #4
 800455e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004562:	4b1a      	ldr	r3, [pc, #104]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 8004564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004568:	4a18      	ldr	r2, [pc, #96]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004572:	e018      	b.n	80045a6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004574:	4b15      	ldr	r3, [pc, #84]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 8004576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800457a:	4a14      	ldr	r2, [pc, #80]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 800457c:	f043 0301 	orr.w	r3, r3, #1
 8004580:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004584:	e00f      	b.n	80045a6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004586:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 8004588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800458c:	4a0f      	ldr	r2, [pc, #60]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004596:	4b0d      	ldr	r3, [pc, #52]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 8004598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800459c:	4a0b      	ldr	r2, [pc, #44]	@ (80045cc <HAL_RCC_OscConfig+0x7b8>)
 800459e:	f023 0304 	bic.w	r3, r3, #4
 80045a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d057      	beq.n	800465e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80045ae:	f7fd fa5b 	bl	8001a68 <HAL_GetTick>
 80045b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b4:	e00e      	b.n	80045d4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b6:	f7fd fa57 	bl	8001a68 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d905      	bls.n	80045d4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e2f8      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
 80045cc:	46020c00 	.word	0x46020c00
 80045d0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d4:	4b9c      	ldr	r3, [pc, #624]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 80045d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0e9      	beq.n	80045b6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01b      	beq.n	8004626 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80045ee:	4b96      	ldr	r3, [pc, #600]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 80045f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045f4:	4a94      	ldr	r2, [pc, #592]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 80045f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004600:	f7fd fa32 	bl	8001a68 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e2d3      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004616:	4b8c      	ldr	r3, [pc, #560]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 8004618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800461c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0ed      	beq.n	8004600 <HAL_RCC_OscConfig+0x7ec>
 8004624:	e053      	b.n	80046ce <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004626:	4b88      	ldr	r3, [pc, #544]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 8004628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800462c:	4a86      	ldr	r2, [pc, #536]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 800462e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004632:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004636:	e00a      	b.n	800464e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004638:	f7fd fa16 	bl	8001a68 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e2b7      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800464e:	4b7e      	ldr	r3, [pc, #504]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 8004650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1ed      	bne.n	8004638 <HAL_RCC_OscConfig+0x824>
 800465c:	e037      	b.n	80046ce <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800465e:	f7fd fa03 	bl	8001a68 <HAL_GetTick>
 8004662:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004664:	e00a      	b.n	800467c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004666:	f7fd f9ff 	bl	8001a68 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004674:	4293      	cmp	r3, r2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e2a0      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800467c:	4b72      	ldr	r3, [pc, #456]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 800467e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1ed      	bne.n	8004666 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800468a:	4b6f      	ldr	r3, [pc, #444]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 800468c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01a      	beq.n	80046ce <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004698:	4b6b      	ldr	r3, [pc, #428]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 800469a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800469e:	4a6a      	ldr	r2, [pc, #424]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 80046a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046a8:	e00a      	b.n	80046c0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fd f9dd 	bl	8001a68 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e27e      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046c0:	4b61      	ldr	r3, [pc, #388]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 80046c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1ed      	bne.n	80046aa <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046ce:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d107      	bne.n	80046e6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 80046d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046dc:	4a5a      	ldr	r2, [pc, #360]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 80046de:	f023 0304 	bic.w	r3, r3, #4
 80046e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d036      	beq.n	8004760 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d019      	beq.n	800472e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80046fa:	4b53      	ldr	r3, [pc, #332]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a52      	ldr	r2, [pc, #328]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 8004700:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004704:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004706:	f7fd f9af 	bl	8001a68 <HAL_GetTick>
 800470a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800470e:	f7fd f9ab 	bl	8001a68 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e24e      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004720:	4b49      	ldr	r3, [pc, #292]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x8fa>
 800472c:	e018      	b.n	8004760 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800472e:	4b46      	ldr	r3, [pc, #280]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a45      	ldr	r2, [pc, #276]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 8004734:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004738:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800473a:	f7fd f995 	bl	8001a68 <HAL_GetTick>
 800473e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004742:	f7fd f991 	bl	8001a68 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e234      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004754:	4b3c      	ldr	r3, [pc, #240]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f0      	bne.n	8004742 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d036      	beq.n	80047da <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004770:	2b00      	cmp	r3, #0
 8004772:	d019      	beq.n	80047a8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004774:	4b34      	ldr	r3, [pc, #208]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a33      	ldr	r2, [pc, #204]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 800477a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800477e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004780:	f7fd f972 	bl	8001a68 <HAL_GetTick>
 8004784:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004788:	f7fd f96e 	bl	8001a68 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e211      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800479a:	4b2b      	ldr	r3, [pc, #172]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x974>
 80047a6:	e018      	b.n	80047da <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80047a8:	4b27      	ldr	r3, [pc, #156]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a26      	ldr	r2, [pc, #152]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 80047ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047b2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80047b4:	f7fd f958 	bl	8001a68 <HAL_GetTick>
 80047b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80047bc:	f7fd f954 	bl	8001a68 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e1f7      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80047ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d07f      	beq.n	80048e6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d062      	beq.n	80048b4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80047ee:	4b16      	ldr	r3, [pc, #88]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	4a15      	ldr	r2, [pc, #84]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 80047f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047f8:	6093      	str	r3, [r2, #8]
 80047fa:	4b13      	ldr	r3, [pc, #76]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004806:	4910      	ldr	r1, [pc, #64]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 8004808:	4313      	orrs	r3, r2
 800480a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004814:	d309      	bcc.n	800482a <HAL_RCC_OscConfig+0xa16>
 8004816:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f023 021f 	bic.w	r2, r3, #31
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	4909      	ldr	r1, [pc, #36]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 8004824:	4313      	orrs	r3, r2
 8004826:	60cb      	str	r3, [r1, #12]
 8004828:	e02a      	b.n	8004880 <HAL_RCC_OscConfig+0xa6c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482e:	2b00      	cmp	r3, #0
 8004830:	da0c      	bge.n	800484c <HAL_RCC_OscConfig+0xa38>
 8004832:	4b05      	ldr	r3, [pc, #20]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	015b      	lsls	r3, r3, #5
 8004840:	4901      	ldr	r1, [pc, #4]	@ (8004848 <HAL_RCC_OscConfig+0xa34>)
 8004842:	4313      	orrs	r3, r2
 8004844:	60cb      	str	r3, [r1, #12]
 8004846:	e01b      	b.n	8004880 <HAL_RCC_OscConfig+0xa6c>
 8004848:	46020c00 	.word	0x46020c00
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004854:	d30a      	bcc.n	800486c <HAL_RCC_OscConfig+0xa58>
 8004856:	4ba1      	ldr	r3, [pc, #644]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	029b      	lsls	r3, r3, #10
 8004864:	499d      	ldr	r1, [pc, #628]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004866:	4313      	orrs	r3, r2
 8004868:	60cb      	str	r3, [r1, #12]
 800486a:	e009      	b.n	8004880 <HAL_RCC_OscConfig+0xa6c>
 800486c:	4b9b      	ldr	r3, [pc, #620]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	03db      	lsls	r3, r3, #15
 800487a:	4998      	ldr	r1, [pc, #608]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 800487c:	4313      	orrs	r3, r2
 800487e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004880:	4b96      	ldr	r3, [pc, #600]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a95      	ldr	r2, [pc, #596]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004886:	f043 0310 	orr.w	r3, r3, #16
 800488a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800488c:	f7fd f8ec 	bl	8001a68 <HAL_GetTick>
 8004890:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004894:	f7fd f8e8 	bl	8001a68 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e18b      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80048a6:	4b8d      	ldr	r3, [pc, #564]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0xa80>
 80048b2:	e018      	b.n	80048e6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80048b4:	4b89      	ldr	r3, [pc, #548]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a88      	ldr	r2, [pc, #544]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 80048ba:	f023 0310 	bic.w	r3, r3, #16
 80048be:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80048c0:	f7fd f8d2 	bl	8001a68 <HAL_GetTick>
 80048c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80048c8:	f7fd f8ce 	bl	8001a68 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e171      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80048da:	4b80      	ldr	r3, [pc, #512]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 8166 	beq.w	8004bbc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80048f0:	2300      	movs	r3, #0
 80048f2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048f6:	4b79      	ldr	r3, [pc, #484]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f003 030c 	and.w	r3, r3, #12
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	f000 80f2 	beq.w	8004ae8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004908:	2b02      	cmp	r3, #2
 800490a:	f040 80c5 	bne.w	8004a98 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800490e:	4b73      	ldr	r3, [pc, #460]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a72      	ldr	r2, [pc, #456]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004914:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004918:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800491a:	f7fd f8a5 	bl	8001a68 <HAL_GetTick>
 800491e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004922:	f7fd f8a1 	bl	8001a68 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e144      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004934:	4b69      	ldr	r3, [pc, #420]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f0      	bne.n	8004922 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004940:	4b66      	ldr	r3, [pc, #408]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	d111      	bne.n	8004972 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800494e:	4b63      	ldr	r3, [pc, #396]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004950:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004954:	4a61      	ldr	r2, [pc, #388]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004956:	f043 0304 	orr.w	r3, r3, #4
 800495a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800495e:	4b5f      	ldr	r3, [pc, #380]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004972:	4b5b      	ldr	r3, [pc, #364]	@ (8004ae0 <HAL_RCC_OscConfig+0xccc>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800497a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800497e:	d102      	bne.n	8004986 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004980:	2301      	movs	r3, #1
 8004982:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004986:	4b56      	ldr	r3, [pc, #344]	@ (8004ae0 <HAL_RCC_OscConfig+0xccc>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	4a55      	ldr	r2, [pc, #340]	@ (8004ae0 <HAL_RCC_OscConfig+0xccc>)
 800498c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004990:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004992:	4b52      	ldr	r3, [pc, #328]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004996:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800499a:	f023 0303 	bic.w	r3, r3, #3
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80049a6:	3a01      	subs	r2, #1
 80049a8:	0212      	lsls	r2, r2, #8
 80049aa:	4311      	orrs	r1, r2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80049b0:	430a      	orrs	r2, r1
 80049b2:	494a      	ldr	r1, [pc, #296]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80049b8:	4b48      	ldr	r3, [pc, #288]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 80049ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049bc:	4b49      	ldr	r3, [pc, #292]	@ (8004ae4 <HAL_RCC_OscConfig+0xcd0>)
 80049be:	4013      	ands	r3, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80049c4:	3a01      	subs	r2, #1
 80049c6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80049ce:	3a01      	subs	r2, #1
 80049d0:	0252      	lsls	r2, r2, #9
 80049d2:	b292      	uxth	r2, r2
 80049d4:	4311      	orrs	r1, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049da:	3a01      	subs	r2, #1
 80049dc:	0412      	lsls	r2, r2, #16
 80049de:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80049e2:	4311      	orrs	r1, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80049e8:	3a01      	subs	r2, #1
 80049ea:	0612      	lsls	r2, r2, #24
 80049ec:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80049f0:	430a      	orrs	r2, r1
 80049f2:	493a      	ldr	r1, [pc, #232]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80049f8:	4b38      	ldr	r3, [pc, #224]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	4a37      	ldr	r2, [pc, #220]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 80049fe:	f023 0310 	bic.w	r3, r3, #16
 8004a02:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a08:	4a34      	ldr	r2, [pc, #208]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004a0e:	4b33      	ldr	r3, [pc, #204]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	4a32      	ldr	r2, [pc, #200]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004a14:	f043 0310 	orr.w	r3, r3, #16
 8004a18:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004a1a:	4b30      	ldr	r3, [pc, #192]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1e:	f023 020c 	bic.w	r2, r3, #12
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a26:	492d      	ldr	r1, [pc, #180]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004a2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d105      	bne.n	8004a40 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004a34:	4b2a      	ldr	r3, [pc, #168]	@ (8004ae0 <HAL_RCC_OscConfig+0xccc>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4a29      	ldr	r2, [pc, #164]	@ (8004ae0 <HAL_RCC_OscConfig+0xccc>)
 8004a3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a3e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004a40:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d107      	bne.n	8004a58 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004a48:	4b24      	ldr	r3, [pc, #144]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a4e:	4a23      	ldr	r2, [pc, #140]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004a58:	4b20      	ldr	r3, [pc, #128]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004a5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a62:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a64:	f7fd f800 	bl	8001a68 <HAL_GetTick>
 8004a68:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6c:	f7fc fffc 	bl	8001a68 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e09f      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004a7e:	4b17      	ldr	r3, [pc, #92]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a8a:	4b14      	ldr	r3, [pc, #80]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8e:	4a13      	ldr	r2, [pc, #76]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a94:	6293      	str	r3, [r2, #40]	@ 0x28
 8004a96:	e091      	b.n	8004bbc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004a98:	4b10      	ldr	r3, [pc, #64]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004aa2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004aa4:	f7fc ffe0 	bl	8001a68 <HAL_GetTick>
 8004aa8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fc ffdc 	bl	8001a68 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e07f      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004abe:	4b07      	ldr	r3, [pc, #28]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004aca:	4b04      	ldr	r3, [pc, #16]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ace:	4a03      	ldr	r2, [pc, #12]	@ (8004adc <HAL_RCC_OscConfig+0xcc8>)
 8004ad0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004ad4:	f023 0303 	bic.w	r3, r3, #3
 8004ad8:	6293      	str	r3, [r2, #40]	@ 0x28
 8004ada:	e06f      	b.n	8004bbc <HAL_RCC_OscConfig+0xda8>
 8004adc:	46020c00 	.word	0x46020c00
 8004ae0:	46020800 	.word	0x46020800
 8004ae4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004ae8:	4b37      	ldr	r3, [pc, #220]	@ (8004bc8 <HAL_RCC_OscConfig+0xdb4>)
 8004aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aec:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004aee:	4b36      	ldr	r3, [pc, #216]	@ (8004bc8 <HAL_RCC_OscConfig+0xdb4>)
 8004af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d039      	beq.n	8004b70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f003 0203 	and.w	r2, r3, #3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d132      	bne.n	8004b70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	0a1b      	lsrs	r3, r3, #8
 8004b0e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d129      	bne.n	8004b70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d122      	bne.n	8004b70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b34:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d11a      	bne.n	8004b70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	0a5b      	lsrs	r3, r3, #9
 8004b3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d111      	bne.n	8004b70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	0c1b      	lsrs	r3, r3, #16
 8004b50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b58:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d108      	bne.n	8004b70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	0e1b      	lsrs	r3, r3, #24
 8004b62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e024      	b.n	8004bbe <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004b74:	4b14      	ldr	r3, [pc, #80]	@ (8004bc8 <HAL_RCC_OscConfig+0xdb4>)
 8004b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b78:	08db      	lsrs	r3, r3, #3
 8004b7a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d01a      	beq.n	8004bbc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004b86:	4b10      	ldr	r3, [pc, #64]	@ (8004bc8 <HAL_RCC_OscConfig+0xdb4>)
 8004b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8004bc8 <HAL_RCC_OscConfig+0xdb4>)
 8004b8c:	f023 0310 	bic.w	r3, r3, #16
 8004b90:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b92:	f7fc ff69 	bl	8001a68 <HAL_GetTick>
 8004b96:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004b98:	bf00      	nop
 8004b9a:	f7fc ff65 	bl	8001a68 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d0f9      	beq.n	8004b9a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004baa:	4a07      	ldr	r2, [pc, #28]	@ (8004bc8 <HAL_RCC_OscConfig+0xdb4>)
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004bb0:	4b05      	ldr	r3, [pc, #20]	@ (8004bc8 <HAL_RCC_OscConfig+0xdb4>)
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	4a04      	ldr	r2, [pc, #16]	@ (8004bc8 <HAL_RCC_OscConfig+0xdb4>)
 8004bb6:	f043 0310 	orr.w	r3, r3, #16
 8004bba:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3738      	adds	r7, #56	@ 0x38
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	46020c00 	.word	0x46020c00

08004bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e1d9      	b.n	8004f94 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be0:	4b9b      	ldr	r3, [pc, #620]	@ (8004e50 <HAL_RCC_ClockConfig+0x284>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d910      	bls.n	8004c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b98      	ldr	r3, [pc, #608]	@ (8004e50 <HAL_RCC_ClockConfig+0x284>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 020f 	bic.w	r2, r3, #15
 8004bf6:	4996      	ldr	r1, [pc, #600]	@ (8004e50 <HAL_RCC_ClockConfig+0x284>)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfe:	4b94      	ldr	r3, [pc, #592]	@ (8004e50 <HAL_RCC_ClockConfig+0x284>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e1c1      	b.n	8004f94 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d010      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	4b8c      	ldr	r3, [pc, #560]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d908      	bls.n	8004c3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004c2c:	4b89      	ldr	r3, [pc, #548]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	4986      	ldr	r1, [pc, #536]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d012      	beq.n	8004c70 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	4b81      	ldr	r3, [pc, #516]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	091b      	lsrs	r3, r3, #4
 8004c54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d909      	bls.n	8004c70 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004c5c:	4b7d      	ldr	r3, [pc, #500]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	497a      	ldr	r1, [pc, #488]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d010      	beq.n	8004c9e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	4b74      	ldr	r3, [pc, #464]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d908      	bls.n	8004c9e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004c8c:	4b71      	ldr	r3, [pc, #452]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	496e      	ldr	r1, [pc, #440]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d010      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	4b69      	ldr	r3, [pc, #420]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d908      	bls.n	8004ccc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004cba:	4b66      	ldr	r3, [pc, #408]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	f023 020f 	bic.w	r2, r3, #15
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	4963      	ldr	r1, [pc, #396]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80d2 	beq.w	8004e7e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d143      	bne.n	8004d6e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ce6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d110      	bne.n	8004d16 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004cf4:	4b57      	ldr	r3, [pc, #348]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cfa:	4a56      	ldr	r2, [pc, #344]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004cfc:	f043 0304 	orr.w	r3, r3, #4
 8004d00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004d04:	4b53      	ldr	r3, [pc, #332]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004d12:	2301      	movs	r3, #1
 8004d14:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004d16:	f7fc fea7 	bl	8001a68 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004d1c:	4b4e      	ldr	r3, [pc, #312]	@ (8004e58 <HAL_RCC_ClockConfig+0x28c>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00f      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004d2a:	f7fc fe9d 	bl	8001a68 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e12b      	b.n	8004f94 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004d3c:	4b46      	ldr	r3, [pc, #280]	@ (8004e58 <HAL_RCC_ClockConfig+0x28c>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004d4e:	4b41      	ldr	r3, [pc, #260]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d54:	4a3f      	ldr	r2, [pc, #252]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004d56:	f023 0304 	bic.w	r3, r3, #4
 8004d5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d121      	bne.n	8004dae <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e112      	b.n	8004f94 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d107      	bne.n	8004d86 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d76:	4b37      	ldr	r3, [pc, #220]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d115      	bne.n	8004dae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e106      	b.n	8004f94 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004d8e:	4b31      	ldr	r3, [pc, #196]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e0fa      	b.n	8004f94 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e0f2      	b.n	8004f94 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004dae:	4b29      	ldr	r3, [pc, #164]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f023 0203 	bic.w	r2, r3, #3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4926      	ldr	r1, [pc, #152]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004dc0:	f7fc fe52 	bl	8001a68 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d112      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd0:	f7fc fe4a 	bl	8001a68 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e0d6      	b.n	8004f94 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004de6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	2b0c      	cmp	r3, #12
 8004df0:	d1ee      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x204>
 8004df2:	e044      	b.n	8004e7e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d112      	bne.n	8004e22 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dfe:	f7fc fe33 	bl	8001a68 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e0bf      	b.n	8004f94 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e14:	4b0f      	ldr	r3, [pc, #60]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f003 030c 	and.w	r3, r3, #12
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d1ee      	bne.n	8004dfe <HAL_RCC_ClockConfig+0x232>
 8004e20:	e02d      	b.n	8004e7e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d123      	bne.n	8004e72 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2c:	f7fc fe1c 	bl	8001a68 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e0a8      	b.n	8004f94 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e42:	4b04      	ldr	r3, [pc, #16]	@ (8004e54 <HAL_RCC_ClockConfig+0x288>)
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1ee      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x260>
 8004e4e:	e016      	b.n	8004e7e <HAL_RCC_ClockConfig+0x2b2>
 8004e50:	40022000 	.word	0x40022000
 8004e54:	46020c00 	.word	0x46020c00
 8004e58:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e5c:	f7fc fe04 	bl	8001a68 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e090      	b.n	8004f94 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e72:	4b4a      	ldr	r3, [pc, #296]	@ (8004f9c <HAL_RCC_ClockConfig+0x3d0>)
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d1ee      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d010      	beq.n	8004eac <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	4b43      	ldr	r3, [pc, #268]	@ (8004f9c <HAL_RCC_ClockConfig+0x3d0>)
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d208      	bcs.n	8004eac <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004e9a:	4b40      	ldr	r3, [pc, #256]	@ (8004f9c <HAL_RCC_ClockConfig+0x3d0>)
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f023 020f 	bic.w	r2, r3, #15
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	493d      	ldr	r1, [pc, #244]	@ (8004f9c <HAL_RCC_ClockConfig+0x3d0>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eac:	4b3c      	ldr	r3, [pc, #240]	@ (8004fa0 <HAL_RCC_ClockConfig+0x3d4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d210      	bcs.n	8004edc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b39      	ldr	r3, [pc, #228]	@ (8004fa0 <HAL_RCC_ClockConfig+0x3d4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 020f 	bic.w	r2, r3, #15
 8004ec2:	4937      	ldr	r1, [pc, #220]	@ (8004fa0 <HAL_RCC_ClockConfig+0x3d4>)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eca:	4b35      	ldr	r3, [pc, #212]	@ (8004fa0 <HAL_RCC_ClockConfig+0x3d4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e05b      	b.n	8004f94 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d010      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	4b2b      	ldr	r3, [pc, #172]	@ (8004f9c <HAL_RCC_ClockConfig+0x3d0>)
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d208      	bcs.n	8004f0a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004ef8:	4b28      	ldr	r3, [pc, #160]	@ (8004f9c <HAL_RCC_ClockConfig+0x3d0>)
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4925      	ldr	r1, [pc, #148]	@ (8004f9c <HAL_RCC_ClockConfig+0x3d0>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d012      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	4b20      	ldr	r3, [pc, #128]	@ (8004f9c <HAL_RCC_ClockConfig+0x3d0>)
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	091b      	lsrs	r3, r3, #4
 8004f20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d209      	bcs.n	8004f3c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004f28:	4b1c      	ldr	r3, [pc, #112]	@ (8004f9c <HAL_RCC_ClockConfig+0x3d0>)
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	4919      	ldr	r1, [pc, #100]	@ (8004f9c <HAL_RCC_ClockConfig+0x3d0>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d010      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	4b13      	ldr	r3, [pc, #76]	@ (8004f9c <HAL_RCC_ClockConfig+0x3d0>)
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d208      	bcs.n	8004f6a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004f58:	4b10      	ldr	r3, [pc, #64]	@ (8004f9c <HAL_RCC_ClockConfig+0x3d0>)
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	490d      	ldr	r1, [pc, #52]	@ (8004f9c <HAL_RCC_ClockConfig+0x3d0>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004f6a:	f000 f821 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	4b0a      	ldr	r3, [pc, #40]	@ (8004f9c <HAL_RCC_ClockConfig+0x3d0>)
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	490a      	ldr	r1, [pc, #40]	@ (8004fa4 <HAL_RCC_ClockConfig+0x3d8>)
 8004f7a:	5ccb      	ldrb	r3, [r1, r3]
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f80:	4a09      	ldr	r2, [pc, #36]	@ (8004fa8 <HAL_RCC_ClockConfig+0x3dc>)
 8004f82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f84:	4b09      	ldr	r3, [pc, #36]	@ (8004fac <HAL_RCC_ClockConfig+0x3e0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fc fce3 	bl	8001954 <HAL_InitTick>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	73fb      	strb	r3, [r7, #15]

  return status;
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	46020c00 	.word	0x46020c00
 8004fa0:	40022000 	.word	0x40022000
 8004fa4:	0800b97c 	.word	0x0800b97c
 8004fa8:	20000010 	.word	0x20000010
 8004fac:	20000014 	.word	0x20000014

08004fb0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b08b      	sub	sp, #44	@ 0x2c
 8004fb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fbe:	4b78      	ldr	r3, [pc, #480]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fc8:	4b75      	ldr	r3, [pc, #468]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b0c      	cmp	r3, #12
 8004fdc:	d121      	bne.n	8005022 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d11e      	bne.n	8005022 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004fe4:	4b6e      	ldr	r3, [pc, #440]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d107      	bne.n	8005000 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004ff0:	4b6b      	ldr	r3, [pc, #428]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ff6:	0b1b      	lsrs	r3, r3, #12
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ffe:	e005      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005000:	4b67      	ldr	r3, [pc, #412]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	0f1b      	lsrs	r3, r3, #28
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800500c:	4a65      	ldr	r2, [pc, #404]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005014:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d110      	bne.n	800503e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005020:	e00d      	b.n	800503e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005022:	4b5f      	ldr	r3, [pc, #380]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f003 030c 	and.w	r3, r3, #12
 800502a:	2b04      	cmp	r3, #4
 800502c:	d102      	bne.n	8005034 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800502e:	4b5e      	ldr	r3, [pc, #376]	@ (80051a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005030:	623b      	str	r3, [r7, #32]
 8005032:	e004      	b.n	800503e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b08      	cmp	r3, #8
 8005038:	d101      	bne.n	800503e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800503a:	4b5b      	ldr	r3, [pc, #364]	@ (80051a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800503c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	2b0c      	cmp	r3, #12
 8005042:	f040 80a5 	bne.w	8005190 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005046:	4b56      	ldr	r3, [pc, #344]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005050:	4b53      	ldr	r3, [pc, #332]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005054:	0a1b      	lsrs	r3, r3, #8
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	3301      	adds	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800505e:	4b50      	ldr	r3, [pc, #320]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005062:	091b      	lsrs	r3, r3, #4
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800506a:	4b4d      	ldr	r3, [pc, #308]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800506c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506e:	08db      	lsrs	r3, r3, #3
 8005070:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005082:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b02      	cmp	r3, #2
 800508a:	d003      	beq.n	8005094 <HAL_RCC_GetSysClockFreq+0xe4>
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b03      	cmp	r3, #3
 8005090:	d022      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0x128>
 8005092:	e043      	b.n	800511c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80051ac <HAL_RCC_GetSysClockFreq+0x1fc>
 80050a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a6:	4b3e      	ldr	r3, [pc, #248]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80050b6:	ed97 6a01 	vldr	s12, [r7, #4]
 80050ba:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80051b0 <HAL_RCC_GetSysClockFreq+0x200>
 80050be:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80050c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050d6:	e046      	b.n	8005166 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80051ac <HAL_RCC_GetSysClockFreq+0x1fc>
 80050e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ea:	4b2d      	ldr	r3, [pc, #180]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80050fa:	ed97 6a01 	vldr	s12, [r7, #4]
 80050fe:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80051b0 <HAL_RCC_GetSysClockFreq+0x200>
 8005102:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005106:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800510a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800510e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800511a:	e024      	b.n	8005166 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	ee07 3a90 	vmov	s15, r3
 800512c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005134:	4b1a      	ldr	r3, [pc, #104]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513c:	ee07 3a90 	vmov	s15, r3
 8005140:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005144:	ed97 6a01 	vldr	s12, [r7, #4]
 8005148:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80051b0 <HAL_RCC_GetSysClockFreq+0x200>
 800514c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005150:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005154:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005158:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800515c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005164:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005166:	4b0e      	ldr	r3, [pc, #56]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800516a:	0e1b      	lsrs	r3, r3, #24
 800516c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005170:	3301      	adds	r3, #1
 8005172:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800517e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800518a:	ee17 3a90 	vmov	r3, s15
 800518e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005190:	6a3b      	ldr	r3, [r7, #32]
}
 8005192:	4618      	mov	r0, r3
 8005194:	372c      	adds	r7, #44	@ 0x2c
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	46020c00 	.word	0x46020c00
 80051a4:	0800b994 	.word	0x0800b994
 80051a8:	00f42400 	.word	0x00f42400
 80051ac:	4b742400 	.word	0x4b742400
 80051b0:	46000000 	.word	0x46000000

080051b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80051b8:	f7ff fefa 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 80051bc:	4602      	mov	r2, r0
 80051be:	4b07      	ldr	r3, [pc, #28]	@ (80051dc <HAL_RCC_GetHCLKFreq+0x28>)
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	4906      	ldr	r1, [pc, #24]	@ (80051e0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80051c8:	5ccb      	ldrb	r3, [r1, r3]
 80051ca:	fa22 f303 	lsr.w	r3, r2, r3
 80051ce:	4a05      	ldr	r2, [pc, #20]	@ (80051e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80051d0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80051d2:	4b04      	ldr	r3, [pc, #16]	@ (80051e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80051d4:	681b      	ldr	r3, [r3, #0]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	46020c00 	.word	0x46020c00
 80051e0:	0800b97c 	.word	0x0800b97c
 80051e4:	20000010 	.word	0x20000010

080051e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80051ec:	f7ff ffe2 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	091b      	lsrs	r3, r3, #4
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	4903      	ldr	r1, [pc, #12]	@ (800520c <HAL_RCC_GetPCLK1Freq+0x24>)
 80051fe:	5ccb      	ldrb	r3, [r1, r3]
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005204:	4618      	mov	r0, r3
 8005206:	bd80      	pop	{r7, pc}
 8005208:	46020c00 	.word	0x46020c00
 800520c:	0800b98c 	.word	0x0800b98c

08005210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005214:	f7ff ffce 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 8005218:	4602      	mov	r2, r0
 800521a:	4b05      	ldr	r3, [pc, #20]	@ (8005230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	0a1b      	lsrs	r3, r3, #8
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	4903      	ldr	r1, [pc, #12]	@ (8005234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005226:	5ccb      	ldrb	r3, [r1, r3]
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800522c:	4618      	mov	r0, r3
 800522e:	bd80      	pop	{r7, pc}
 8005230:	46020c00 	.word	0x46020c00
 8005234:	0800b98c 	.word	0x0800b98c

08005238 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800523c:	f7ff ffba 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 8005240:	4602      	mov	r2, r0
 8005242:	4b05      	ldr	r3, [pc, #20]	@ (8005258 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	4903      	ldr	r1, [pc, #12]	@ (800525c <HAL_RCC_GetPCLK3Freq+0x24>)
 800524e:	5ccb      	ldrb	r3, [r1, r3]
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005254:	4618      	mov	r0, r3
 8005256:	bd80      	pop	{r7, pc}
 8005258:	46020c00 	.word	0x46020c00
 800525c:	0800b98c 	.word	0x0800b98c

08005260 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005268:	4b3e      	ldr	r3, [pc, #248]	@ (8005364 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800526a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005276:	f7fe fd3f 	bl	8003cf8 <HAL_PWREx_GetVoltageRange>
 800527a:	6178      	str	r0, [r7, #20]
 800527c:	e019      	b.n	80052b2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800527e:	4b39      	ldr	r3, [pc, #228]	@ (8005364 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005280:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005284:	4a37      	ldr	r2, [pc, #220]	@ (8005364 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005286:	f043 0304 	orr.w	r3, r3, #4
 800528a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800528e:	4b35      	ldr	r3, [pc, #212]	@ (8005364 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005290:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800529c:	f7fe fd2c 	bl	8003cf8 <HAL_PWREx_GetVoltageRange>
 80052a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80052a2:	4b30      	ldr	r3, [pc, #192]	@ (8005364 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80052a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005364 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80052aa:	f023 0304 	bic.w	r3, r3, #4
 80052ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052b8:	d003      	beq.n	80052c2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052c0:	d109      	bne.n	80052d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052c8:	d202      	bcs.n	80052d0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80052ca:	2301      	movs	r3, #1
 80052cc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80052ce:	e033      	b.n	8005338 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80052d0:	2300      	movs	r3, #0
 80052d2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80052d4:	e030      	b.n	8005338 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052dc:	d208      	bcs.n	80052f0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052e4:	d102      	bne.n	80052ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80052e6:	2303      	movs	r3, #3
 80052e8:	613b      	str	r3, [r7, #16]
 80052ea:	e025      	b.n	8005338 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e035      	b.n	800535c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052f6:	d90f      	bls.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d109      	bne.n	8005312 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005304:	d902      	bls.n	800530c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005306:	2300      	movs	r3, #0
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	e015      	b.n	8005338 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800530c:	2301      	movs	r3, #1
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	e012      	b.n	8005338 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005312:	2300      	movs	r3, #0
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	e00f      	b.n	8005338 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800531e:	d109      	bne.n	8005334 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005326:	d102      	bne.n	800532e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005328:	2301      	movs	r3, #1
 800532a:	613b      	str	r3, [r7, #16]
 800532c:	e004      	b.n	8005338 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800532e:	2302      	movs	r3, #2
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	e001      	b.n	8005338 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005334:	2301      	movs	r3, #1
 8005336:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005338:	4b0b      	ldr	r3, [pc, #44]	@ (8005368 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f023 020f 	bic.w	r2, r3, #15
 8005340:	4909      	ldr	r1, [pc, #36]	@ (8005368 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005348:	4b07      	ldr	r3, [pc, #28]	@ (8005368 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	429a      	cmp	r2, r3
 8005354:	d001      	beq.n	800535a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	46020c00 	.word	0x46020c00
 8005368:	40022000 	.word	0x40022000

0800536c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800536c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005370:	b0b8      	sub	sp, #224	@ 0xe0
 8005372:	af00      	add	r7, sp, #0
 8005374:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005378:	2300      	movs	r3, #0
 800537a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800537e:	2300      	movs	r3, #0
 8005380:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	f002 0401 	and.w	r4, r2, #1
 8005390:	2500      	movs	r5, #0
 8005392:	ea54 0305 	orrs.w	r3, r4, r5
 8005396:	d00b      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005398:	4bca      	ldr	r3, [pc, #808]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800539a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800539e:	f023 0103 	bic.w	r1, r3, #3
 80053a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a8:	4ac6      	ldr	r2, [pc, #792]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80053aa:	430b      	orrs	r3, r1
 80053ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f002 0802 	and.w	r8, r2, #2
 80053bc:	f04f 0900 	mov.w	r9, #0
 80053c0:	ea58 0309 	orrs.w	r3, r8, r9
 80053c4:	d00b      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80053c6:	4bbf      	ldr	r3, [pc, #764]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80053c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053cc:	f023 010c 	bic.w	r1, r3, #12
 80053d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d6:	4abb      	ldr	r2, [pc, #748]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80053d8:	430b      	orrs	r3, r1
 80053da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f002 0a04 	and.w	sl, r2, #4
 80053ea:	f04f 0b00 	mov.w	fp, #0
 80053ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80053f2:	d00b      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80053f4:	4bb3      	ldr	r3, [pc, #716]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80053f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053fa:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80053fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005404:	4aaf      	ldr	r2, [pc, #700]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005406:	430b      	orrs	r3, r1
 8005408:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800540c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f002 0308 	and.w	r3, r2, #8
 8005418:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800541c:	2300      	movs	r3, #0
 800541e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005422:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005426:	460b      	mov	r3, r1
 8005428:	4313      	orrs	r3, r2
 800542a:	d00b      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800542c:	4ba5      	ldr	r3, [pc, #660]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800542e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005432:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005436:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800543a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800543c:	4aa1      	ldr	r2, [pc, #644]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800543e:	430b      	orrs	r3, r1
 8005440:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005444:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f002 0310 	and.w	r3, r2, #16
 8005450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005454:	2300      	movs	r3, #0
 8005456:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800545a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800545e:	460b      	mov	r3, r1
 8005460:	4313      	orrs	r3, r2
 8005462:	d00b      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005464:	4b97      	ldr	r3, [pc, #604]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800546a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800546e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005474:	4a93      	ldr	r2, [pc, #588]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005476:	430b      	orrs	r3, r1
 8005478:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800547c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005484:	f002 0320 	and.w	r3, r2, #32
 8005488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800548c:	2300      	movs	r3, #0
 800548e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005492:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005496:	460b      	mov	r3, r1
 8005498:	4313      	orrs	r3, r2
 800549a:	d00b      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800549c:	4b89      	ldr	r3, [pc, #548]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800549e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054a2:	f023 0107 	bic.w	r1, r3, #7
 80054a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054ac:	4a85      	ldr	r2, [pc, #532]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80054ae:	430b      	orrs	r3, r1
 80054b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054bc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80054c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054c4:	2300      	movs	r3, #0
 80054c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054ca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054ce:	460b      	mov	r3, r1
 80054d0:	4313      	orrs	r3, r2
 80054d2:	d00b      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80054d4:	4b7b      	ldr	r3, [pc, #492]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80054d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054da:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80054de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054e4:	4a77      	ldr	r2, [pc, #476]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80054e6:	430b      	orrs	r3, r1
 80054e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80054f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054fc:	2300      	movs	r3, #0
 80054fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005502:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005506:	460b      	mov	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	d00b      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800550c:	4b6d      	ldr	r3, [pc, #436]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800550e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005512:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005516:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800551a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800551c:	4a69      	ldr	r2, [pc, #420]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800551e:	430b      	orrs	r3, r1
 8005520:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005524:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005530:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005534:	2300      	movs	r3, #0
 8005536:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800553a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800553e:	460b      	mov	r3, r1
 8005540:	4313      	orrs	r3, r2
 8005542:	d00b      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005544:	4b5f      	ldr	r3, [pc, #380]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005546:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800554a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800554e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005554:	4a5b      	ldr	r2, [pc, #364]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005556:	430b      	orrs	r3, r1
 8005558:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800555c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005564:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005568:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800556c:	2300      	movs	r3, #0
 800556e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005572:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005576:	460b      	mov	r3, r1
 8005578:	4313      	orrs	r3, r2
 800557a:	d00b      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800557c:	4b51      	ldr	r3, [pc, #324]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800557e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005582:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005586:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800558a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800558c:	4a4d      	ldr	r2, [pc, #308]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800558e:	430b      	orrs	r3, r1
 8005590:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005594:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80055a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055a4:	2300      	movs	r3, #0
 80055a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80055ae:	460b      	mov	r3, r1
 80055b0:	4313      	orrs	r3, r2
 80055b2:	d00b      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80055b4:	4b43      	ldr	r3, [pc, #268]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80055b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055ba:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80055be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055c4:	4a3f      	ldr	r2, [pc, #252]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80055c6:	430b      	orrs	r3, r1
 80055c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80055d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055dc:	2300      	movs	r3, #0
 80055de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80055e6:	460b      	mov	r3, r1
 80055e8:	4313      	orrs	r3, r2
 80055ea:	d00b      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80055ec:	4b35      	ldr	r3, [pc, #212]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80055ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055f2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80055f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055fc:	4a31      	ldr	r2, [pc, #196]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80055fe:	430b      	orrs	r3, r1
 8005600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005604:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005610:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005612:	2300      	movs	r3, #0
 8005614:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005616:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800561a:	460b      	mov	r3, r1
 800561c:	4313      	orrs	r3, r2
 800561e:	d00c      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005620:	4b28      	ldr	r3, [pc, #160]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005626:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800562a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800562e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005632:	4a24      	ldr	r2, [pc, #144]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005634:	430b      	orrs	r3, r1
 8005636:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800563a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005646:	673b      	str	r3, [r7, #112]	@ 0x70
 8005648:	2300      	movs	r3, #0
 800564a:	677b      	str	r3, [r7, #116]	@ 0x74
 800564c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005650:	460b      	mov	r3, r1
 8005652:	4313      	orrs	r3, r2
 8005654:	d04f      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005656:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565e:	2b80      	cmp	r3, #128	@ 0x80
 8005660:	d02d      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x352>
 8005662:	2b80      	cmp	r3, #128	@ 0x80
 8005664:	d827      	bhi.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005666:	2b60      	cmp	r3, #96	@ 0x60
 8005668:	d02e      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800566a:	2b60      	cmp	r3, #96	@ 0x60
 800566c:	d823      	bhi.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800566e:	2b40      	cmp	r3, #64	@ 0x40
 8005670:	d006      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005672:	2b40      	cmp	r3, #64	@ 0x40
 8005674:	d81f      	bhi.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800567a:	2b20      	cmp	r3, #32
 800567c:	d011      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800567e:	e01a      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005680:	4b10      	ldr	r3, [pc, #64]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005684:	4a0f      	ldr	r2, [pc, #60]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800568a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800568c:	e01d      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800568e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005692:	3308      	adds	r3, #8
 8005694:	4618      	mov	r0, r3
 8005696:	f002 f9d1 	bl	8007a3c <RCCEx_PLL2_Config>
 800569a:	4603      	mov	r3, r0
 800569c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80056a0:	e013      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056a6:	332c      	adds	r3, #44	@ 0x2c
 80056a8:	4618      	mov	r0, r3
 80056aa:	f002 fa5f 	bl	8007b6c <RCCEx_PLL3_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80056b4:	e009      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80056bc:	e005      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80056be:	bf00      	nop
 80056c0:	e003      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80056c2:	bf00      	nop
 80056c4:	46020c00 	.word	0x46020c00
        break;
 80056c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10d      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80056d2:	4bb6      	ldr	r3, [pc, #728]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80056d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056d8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80056dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e4:	4ab1      	ldr	r2, [pc, #708]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80056e6:	430b      	orrs	r3, r1
 80056e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056ec:	e003      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056f2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80056f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005702:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005704:	2300      	movs	r3, #0
 8005706:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005708:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800570c:	460b      	mov	r3, r1
 800570e:	4313      	orrs	r3, r2
 8005710:	d053      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005712:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800571a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800571e:	d033      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005724:	d82c      	bhi.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800572a:	d02f      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800572c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005730:	d826      	bhi.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005736:	d008      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800573c:	d820      	bhi.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005746:	d011      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005748:	e01a      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800574a:	4b98      	ldr	r3, [pc, #608]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800574c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574e:	4a97      	ldr	r2, [pc, #604]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005754:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005756:	e01a      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005758:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800575c:	3308      	adds	r3, #8
 800575e:	4618      	mov	r0, r3
 8005760:	f002 f96c 	bl	8007a3c <RCCEx_PLL2_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800576a:	e010      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800576c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005770:	332c      	adds	r3, #44	@ 0x2c
 8005772:	4618      	mov	r0, r3
 8005774:	f002 f9fa 	bl	8007b6c <RCCEx_PLL3_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800577e:	e006      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005786:	e002      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005788:	bf00      	nop
 800578a:	e000      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800578c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800578e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10d      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005796:	4b85      	ldr	r3, [pc, #532]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005798:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800579c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80057a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057a8:	4a80      	ldr	r2, [pc, #512]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80057aa:	430b      	orrs	r3, r1
 80057ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80057b0:	e003      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80057b6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80057ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80057c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80057c8:	2300      	movs	r3, #0
 80057ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80057cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80057d0:	460b      	mov	r3, r1
 80057d2:	4313      	orrs	r3, r2
 80057d4:	d046      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80057d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057de:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80057e2:	d028      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80057e4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80057e8:	d821      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80057ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057ee:	d022      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80057f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057f4:	d81b      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80057f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057fa:	d01c      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80057fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005800:	d815      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005806:	d008      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005808:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800580c:	d80f      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800580e:	2b00      	cmp	r3, #0
 8005810:	d011      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005816:	d00e      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005818:	e009      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800581a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800581e:	3308      	adds	r3, #8
 8005820:	4618      	mov	r0, r3
 8005822:	f002 f90b 	bl	8007a3c <RCCEx_PLL2_Config>
 8005826:	4603      	mov	r3, r0
 8005828:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800582c:	e004      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005834:	e000      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8005836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005838:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10d      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005840:	4b5a      	ldr	r3, [pc, #360]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005846:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800584a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800584e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005852:	4a56      	ldr	r2, [pc, #344]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005854:	430b      	orrs	r3, r1
 8005856:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800585a:	e003      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005860:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005864:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005870:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005872:	2300      	movs	r3, #0
 8005874:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005876:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800587a:	460b      	mov	r3, r1
 800587c:	4313      	orrs	r3, r2
 800587e:	d03f      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005880:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005888:	2b04      	cmp	r3, #4
 800588a:	d81e      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800588c:	a201      	add	r2, pc, #4	@ (adr r2, 8005894 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	080058d3 	.word	0x080058d3
 8005898:	080058a9 	.word	0x080058a9
 800589c:	080058b7 	.word	0x080058b7
 80058a0:	080058d3 	.word	0x080058d3
 80058a4:	080058d3 	.word	0x080058d3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058a8:	4b40      	ldr	r3, [pc, #256]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80058aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ac:	4a3f      	ldr	r2, [pc, #252]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80058ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058b2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80058b4:	e00e      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058ba:	332c      	adds	r3, #44	@ 0x2c
 80058bc:	4618      	mov	r0, r3
 80058be:	f002 f955 	bl	8007b6c <RCCEx_PLL3_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80058c8:	e004      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80058d0:	e000      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80058d2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80058d4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10d      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80058dc:	4b33      	ldr	r3, [pc, #204]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80058de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058e2:	f023 0107 	bic.w	r1, r3, #7
 80058e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ee:	4a2f      	ldr	r2, [pc, #188]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80058f0:	430b      	orrs	r3, r1
 80058f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80058f6:	e003      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80058fc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005900:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800590c:	653b      	str	r3, [r7, #80]	@ 0x50
 800590e:	2300      	movs	r3, #0
 8005910:	657b      	str	r3, [r7, #84]	@ 0x54
 8005912:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005916:	460b      	mov	r3, r1
 8005918:	4313      	orrs	r3, r2
 800591a:	d04d      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800591c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005924:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005928:	d028      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x610>
 800592a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800592e:	d821      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005930:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005934:	d024      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005936:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800593a:	d81b      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800593c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005940:	d00e      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005942:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005946:	d815      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01b      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800594c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005950:	d110      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005952:	4b16      	ldr	r3, [pc, #88]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005956:	4a15      	ldr	r2, [pc, #84]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800595c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800595e:	e012      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005960:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005964:	332c      	adds	r3, #44	@ 0x2c
 8005966:	4618      	mov	r0, r3
 8005968:	f002 f900 	bl	8007b6c <RCCEx_PLL3_Config>
 800596c:	4603      	mov	r3, r0
 800596e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005972:	e008      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800597a:	e004      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800597c:	bf00      	nop
 800597e:	e002      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005980:	bf00      	nop
 8005982:	e000      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005984:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005986:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800598a:	2b00      	cmp	r3, #0
 800598c:	d110      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800598e:	4b07      	ldr	r3, [pc, #28]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005994:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005998:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800599c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059a0:	4a02      	ldr	r2, [pc, #8]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80059a2:	430b      	orrs	r3, r1
 80059a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80059a8:	e006      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80059aa:	bf00      	nop
 80059ac:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80059b4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80059c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059c6:	2300      	movs	r3, #0
 80059c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80059ce:	460b      	mov	r3, r1
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f000 80b5 	beq.w	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059d6:	2300      	movs	r3, #0
 80059d8:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059dc:	4b9d      	ldr	r3, [pc, #628]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80059de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059e2:	f003 0304 	and.w	r3, r3, #4
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d113      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ea:	4b9a      	ldr	r3, [pc, #616]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80059ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059f0:	4a98      	ldr	r2, [pc, #608]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80059f2:	f043 0304 	orr.w	r3, r3, #4
 80059f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80059fa:	4b96      	ldr	r3, [pc, #600]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80059fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005a12:	4b91      	ldr	r3, [pc, #580]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a16:	4a90      	ldr	r2, [pc, #576]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a18:	f043 0301 	orr.w	r3, r3, #1
 8005a1c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a1e:	f7fc f823 	bl	8001a68 <HAL_GetTick>
 8005a22:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005a26:	e00b      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a28:	f7fc f81e 	bl	8001a68 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d903      	bls.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005a3e:	e005      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005a40:	4b85      	ldr	r3, [pc, #532]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0ed      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8005a4c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d165      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a54:	4b7f      	ldr	r3, [pc, #508]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d023      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8005a6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a6e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01b      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a7a:	4b76      	ldr	r3, [pc, #472]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a88:	4b72      	ldr	r3, [pc, #456]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a8e:	4a71      	ldr	r2, [pc, #452]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a98:	4b6e      	ldr	r3, [pc, #440]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a9e:	4a6d      	ldr	r2, [pc, #436]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005aa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aa4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005aa8:	4a6a      	ldr	r2, [pc, #424]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d019      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abe:	f7fb ffd3 	bl	8001a68 <HAL_GetTick>
 8005ac2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ac6:	e00d      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac8:	f7fb ffce 	bl	8001a68 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ad2:	1ad2      	subs	r2, r2, r3
 8005ad4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d903      	bls.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8005ae2:	e006      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ae4:	4b5b      	ldr	r3, [pc, #364]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005ae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0ea      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8005af2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10d      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005afa:	4b56      	ldr	r3, [pc, #344]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b08:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b0c:	4a51      	ldr	r2, [pc, #324]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b0e:	430b      	orrs	r3, r1
 8005b10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005b14:	e008      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b16:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005b1a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8005b1e:	e003      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b20:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005b24:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b28:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d107      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b30:	4b48      	ldr	r3, [pc, #288]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b36:	4a47      	ldr	r2, [pc, #284]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b38:	f023 0304 	bic.w	r3, r3, #4
 8005b3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005b4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b4e:	2300      	movs	r3, #0
 8005b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b52:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005b56:	460b      	mov	r3, r1
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	d042      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005b5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b64:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005b68:	d022      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8005b6a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005b6e:	d81b      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005b70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b74:	d011      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005b76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b7a:	d815      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d019      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005b80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b84:	d110      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f001 ff55 	bl	8007a3c <RCCEx_PLL2_Config>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005b98:	e00d      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ba4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005ba6:	e006      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005bae:	e002      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005bb0:	bf00      	nop
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005bb4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005bb6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10d      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005bbe:	4b25      	ldr	r3, [pc, #148]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bc4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005bc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bd0:	4a20      	ldr	r2, [pc, #128]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005bd2:	430b      	orrs	r3, r1
 8005bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005bd8:	e003      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bda:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005bde:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005be2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005bee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bf4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	d032      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005bfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c0a:	d00b      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005c0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c10:	d804      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d008      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c1a:	d007      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005c22:	e004      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005c24:	bf00      	nop
 8005c26:	e002      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005c28:	bf00      	nop
 8005c2a:	e000      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005c2c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c2e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d112      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005c36:	4b07      	ldr	r3, [pc, #28]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005c38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c3c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c48:	4a02      	ldr	r2, [pc, #8]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005c4a:	430b      	orrs	r3, r1
 8005c4c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005c50:	e008      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005c52:	bf00      	nop
 8005c54:	46020c00 	.word	0x46020c00
 8005c58:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005c60:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005c64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c72:	2300      	movs	r3, #0
 8005c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c76:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	d019      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005c80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c8c:	d105      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c8e:	4b88      	ldr	r3, [pc, #544]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c92:	4a87      	ldr	r2, [pc, #540]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c98:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005c9a:	4b85      	ldr	r3, [pc, #532]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ca0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ca8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005cac:	4a80      	ldr	r2, [pc, #512]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005cb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cc6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	d00c      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005cd0:	4b77      	ldr	r3, [pc, #476]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ce2:	4973      	ldr	r1, [pc, #460]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005cea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005cf6:	623b      	str	r3, [r7, #32]
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cfc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d00:	460b      	mov	r3, r1
 8005d02:	4313      	orrs	r3, r2
 8005d04:	d00c      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005d06:	4b6a      	ldr	r3, [pc, #424]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d18:	4965      	ldr	r1, [pc, #404]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005d20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d2c:	61bb      	str	r3, [r7, #24]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61fb      	str	r3, [r7, #28]
 8005d32:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d36:	460b      	mov	r3, r1
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	d00c      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d42:	f023 0218 	bic.w	r2, r3, #24
 8005d46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005d4e:	4958      	ldr	r1, [pc, #352]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	d032      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d7e:	d105      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d80:	4b4b      	ldr	r3, [pc, #300]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d84:	4a4a      	ldr	r2, [pc, #296]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d8a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d98:	d108      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d9e:	3308      	adds	r3, #8
 8005da0:	4618      	mov	r0, r3
 8005da2:	f001 fe4b 	bl	8007a3c <RCCEx_PLL2_Config>
 8005da6:	4603      	mov	r3, r0
 8005da8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8005dac:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10d      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005db4:	4b3e      	ldr	r3, [pc, #248]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005db6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005dba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005dc6:	493a      	ldr	r1, [pc, #232]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005dce:	e003      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005dd4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005dee:	460b      	mov	r3, r1
 8005df0:	4313      	orrs	r3, r2
 8005df2:	d03a      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005df4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e00:	d00e      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005e02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e06:	d815      	bhi.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d017      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8005e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e10:	d110      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e12:	4b27      	ldr	r3, [pc, #156]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e16:	4a26      	ldr	r2, [pc, #152]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e1c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005e1e:	e00e      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e24:	3308      	adds	r3, #8
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 fe08 	bl	8007a3c <RCCEx_PLL2_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005e32:	e004      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005e3a:	e000      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8005e3c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005e3e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10d      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005e46:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e4c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e58:	4915      	ldr	r1, [pc, #84]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005e60:	e003      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e62:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005e66:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005e6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	607b      	str	r3, [r7, #4]
 8005e7c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e80:	460b      	mov	r3, r1
 8005e82:	4313      	orrs	r3, r2
 8005e84:	d00c      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005e86:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e8c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005e90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e98:	4905      	ldr	r1, [pc, #20]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005ea0:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	37e0      	adds	r7, #224	@ 0xe0
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eae:	bf00      	nop
 8005eb0:	46020c00 	.word	0x46020c00

08005eb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b089      	sub	sp, #36	@ 0x24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005ebc:	4ba6      	ldr	r3, [pc, #664]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005ec6:	4ba4      	ldr	r3, [pc, #656]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005ed0:	4ba1      	ldr	r3, [pc, #644]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed4:	0a1b      	lsrs	r3, r3, #8
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	3301      	adds	r3, #1
 8005edc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005ede:	4b9e      	ldr	r3, [pc, #632]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee2:	091b      	lsrs	r3, r3, #4
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005eea:	4b9b      	ldr	r3, [pc, #620]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eee:	08db      	lsrs	r3, r3, #3
 8005ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	fb02 f303 	mul.w	r3, r2, r3
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f02:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d062      	beq.n	8005fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	f200 8081 	bhi.w	8006016 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d024      	beq.n	8005f64 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d17a      	bne.n	8006016 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f32:	4b89      	ldr	r3, [pc, #548]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f46:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006160 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f62:	e08f      	b.n	8006084 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005f64:	4b7c      	ldr	r3, [pc, #496]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005f70:	4b79      	ldr	r3, [pc, #484]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	0f1b      	lsrs	r3, r3, #28
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	e006      	b.n	8005f8a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005f7c:	4b76      	ldr	r3, [pc, #472]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f82:	041b      	lsls	r3, r3, #16
 8005f84:	0f1b      	lsrs	r3, r3, #28
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	4a76      	ldr	r2, [pc, #472]	@ (8006164 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f90:	ee07 3a90 	vmov	s15, r3
 8005f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	ee07 3a90 	vmov	s15, r3
 8005fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fb4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006160 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fd0:	e058      	b.n	8006084 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	ee07 3a90 	vmov	s15, r3
 8005fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fdc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005fe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe4:	4b5c      	ldr	r3, [pc, #368]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fec:	ee07 3a90 	vmov	s15, r3
 8005ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ff4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ff8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006160 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005ffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006000:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006004:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006008:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800600c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006010:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006014:	e036      	b.n	8006084 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006016:	4b50      	ldr	r3, [pc, #320]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006022:	4b4d      	ldr	r3, [pc, #308]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	0f1b      	lsrs	r3, r3, #28
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	e006      	b.n	800603c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800602e:	4b4a      	ldr	r3, [pc, #296]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006034:	041b      	lsls	r3, r3, #16
 8006036:	0f1b      	lsrs	r3, r3, #28
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	4a49      	ldr	r2, [pc, #292]	@ (8006164 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800603e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	ee07 3a90 	vmov	s15, r3
 8006050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006062:	ed97 6a02 	vldr	s12, [r7, #8]
 8006066:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006160 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800606a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006076:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800607a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006082:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006084:	4b34      	ldr	r3, [pc, #208]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d017      	beq.n	80060c0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006090:	4b31      	ldr	r3, [pc, #196]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006094:	0a5b      	lsrs	r3, r3, #9
 8006096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80060a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060a6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80060aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b6:	ee17 2a90 	vmov	r2, s15
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	e002      	b.n	80060c6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80060c6:	4b24      	ldr	r3, [pc, #144]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d017      	beq.n	8006102 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80060d2:	4b21      	ldr	r3, [pc, #132]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d6:	0c1b      	lsrs	r3, r3, #16
 80060d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060dc:	ee07 3a90 	vmov	s15, r3
 80060e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80060e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060e8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80060ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80060f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f8:	ee17 2a90 	vmov	r2, s15
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	605a      	str	r2, [r3, #4]
 8006100:	e002      	b.n	8006108 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006108:	4b13      	ldr	r3, [pc, #76]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d017      	beq.n	8006144 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006114:	4b10      	ldr	r3, [pc, #64]	@ (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006118:	0e1b      	lsrs	r3, r3, #24
 800611a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006126:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800612a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800612e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800613a:	ee17 2a90 	vmov	r2, s15
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006142:	e002      	b.n	800614a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	609a      	str	r2, [r3, #8]
}
 800614a:	bf00      	nop
 800614c:	3724      	adds	r7, #36	@ 0x24
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	46020c00 	.word	0x46020c00
 800615c:	4b742400 	.word	0x4b742400
 8006160:	46000000 	.word	0x46000000
 8006164:	0800b994 	.word	0x0800b994

08006168 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006168:	b480      	push	{r7}
 800616a:	b089      	sub	sp, #36	@ 0x24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006170:	4ba6      	ldr	r3, [pc, #664]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006178:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800617a:	4ba4      	ldr	r3, [pc, #656]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006184:	4ba1      	ldr	r3, [pc, #644]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006188:	0a1b      	lsrs	r3, r3, #8
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	3301      	adds	r3, #1
 8006190:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006192:	4b9e      	ldr	r3, [pc, #632]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006196:	091b      	lsrs	r3, r3, #4
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800619e:	4b9b      	ldr	r3, [pc, #620]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	08db      	lsrs	r3, r3, #3
 80061a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	fb02 f303 	mul.w	r3, r2, r3
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d062      	beq.n	8006286 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	f200 8081 	bhi.w	80062ca <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d024      	beq.n	8006218 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d17a      	bne.n	80062ca <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061de:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006410 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80061e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061e6:	4b89      	ldr	r3, [pc, #548]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80061f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80061fa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80061fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006202:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800620a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800620e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006216:	e08f      	b.n	8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006218:	4b7c      	ldr	r3, [pc, #496]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006224:	4b79      	ldr	r3, [pc, #484]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	0f1b      	lsrs	r3, r3, #28
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	e006      	b.n	800623e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006230:	4b76      	ldr	r3, [pc, #472]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006232:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006236:	041b      	lsls	r3, r3, #16
 8006238:	0f1b      	lsrs	r3, r3, #28
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	4a76      	ldr	r2, [pc, #472]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006244:	ee07 3a90 	vmov	s15, r3
 8006248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	ee07 3a90 	vmov	s15, r3
 8006252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	ee07 3a90 	vmov	s15, r3
 8006260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006264:	ed97 6a02 	vldr	s12, [r7, #8]
 8006268:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800626c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006274:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006278:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800627c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006280:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006284:	e058      	b.n	8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	ee07 3a90 	vmov	s15, r3
 800628c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006290:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006410 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006298:	4b5c      	ldr	r3, [pc, #368]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800629a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a0:	ee07 3a90 	vmov	s15, r3
 80062a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80062a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ac:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80062b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80062b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80062b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80062c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062c8:	e036      	b.n	8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80062ca:	4b50      	ldr	r3, [pc, #320]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d005      	beq.n	80062e2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80062d6:	4b4d      	ldr	r3, [pc, #308]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	0f1b      	lsrs	r3, r3, #28
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	e006      	b.n	80062f0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80062e2:	4b4a      	ldr	r3, [pc, #296]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062e8:	041b      	lsls	r3, r3, #16
 80062ea:	0f1b      	lsrs	r3, r3, #28
 80062ec:	f003 030f 	and.w	r3, r3, #15
 80062f0:	4a49      	ldr	r2, [pc, #292]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80062f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006316:	ed97 6a02 	vldr	s12, [r7, #8]
 800631a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800631e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800632a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800632e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006332:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006336:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006338:	4b34      	ldr	r3, [pc, #208]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800633a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d017      	beq.n	8006374 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006344:	4b31      	ldr	r3, [pc, #196]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006348:	0a5b      	lsrs	r3, r3, #9
 800634a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006356:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800635a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800635e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800636a:	ee17 2a90 	vmov	r2, s15
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e002      	b.n	800637a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800637a:	4b24      	ldr	r3, [pc, #144]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800637c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d017      	beq.n	80063b6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006386:	4b21      	ldr	r3, [pc, #132]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800638a:	0c1b      	lsrs	r3, r3, #16
 800638c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006390:	ee07 3a90 	vmov	s15, r3
 8006394:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006398:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800639c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80063a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80063a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ac:	ee17 2a90 	vmov	r2, s15
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	605a      	str	r2, [r3, #4]
 80063b4:	e002      	b.n	80063bc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80063bc:	4b13      	ldr	r3, [pc, #76]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80063be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d017      	beq.n	80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80063c8:	4b10      	ldr	r3, [pc, #64]	@ (800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80063ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063cc:	0e1b      	lsrs	r3, r3, #24
 80063ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80063da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80063e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ee:	ee17 2a90 	vmov	r2, s15
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80063f6:	e002      	b.n	80063fe <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	609a      	str	r2, [r3, #8]
}
 80063fe:	bf00      	nop
 8006400:	3724      	adds	r7, #36	@ 0x24
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	46020c00 	.word	0x46020c00
 8006410:	4b742400 	.word	0x4b742400
 8006414:	46000000 	.word	0x46000000
 8006418:	0800b994 	.word	0x0800b994

0800641c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800641c:	b480      	push	{r7}
 800641e:	b089      	sub	sp, #36	@ 0x24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006424:	4ba6      	ldr	r3, [pc, #664]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800642e:	4ba4      	ldr	r3, [pc, #656]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006438:	4ba1      	ldr	r3, [pc, #644]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800643a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800643c:	0a1b      	lsrs	r3, r3, #8
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	3301      	adds	r3, #1
 8006444:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006446:	4b9e      	ldr	r3, [pc, #632]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644a:	091b      	lsrs	r3, r3, #4
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006452:	4b9b      	ldr	r3, [pc, #620]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006456:	08db      	lsrs	r3, r3, #3
 8006458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	fb02 f303 	mul.w	r3, r2, r3
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b03      	cmp	r3, #3
 8006472:	d062      	beq.n	800653a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2b03      	cmp	r3, #3
 8006478:	f200 8081 	bhi.w	800657e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d024      	beq.n	80064cc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d17a      	bne.n	800657e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006492:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800649a:	4b89      	ldr	r3, [pc, #548]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800649c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80064aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80064ae:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80066c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80064b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80064b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80064ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064be:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80064c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80064ca:	e08f      	b.n	80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80064cc:	4b7c      	ldr	r3, [pc, #496]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80064d8:	4b79      	ldr	r3, [pc, #484]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	0f1b      	lsrs	r3, r3, #28
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	e006      	b.n	80064f2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80064e4:	4b76      	ldr	r3, [pc, #472]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064ea:	041b      	lsls	r3, r3, #16
 80064ec:	0f1b      	lsrs	r3, r3, #28
 80064ee:	f003 030f 	and.w	r3, r3, #15
 80064f2:	4a76      	ldr	r2, [pc, #472]	@ (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80064f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f8:	ee07 3a90 	vmov	s15, r3
 80064fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	ee07 3a90 	vmov	s15, r3
 8006514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006518:	ed97 6a02 	vldr	s12, [r7, #8]
 800651c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80066c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006528:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800652c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006534:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006538:	e058      	b.n	80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	ee07 3a90 	vmov	s15, r3
 8006540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006544:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654c:	4b5c      	ldr	r3, [pc, #368]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800654e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006554:	ee07 3a90 	vmov	s15, r3
 8006558:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800655c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006560:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80066c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006564:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006568:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800656c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006570:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006578:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800657c:	e036      	b.n	80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800657e:	4b50      	ldr	r3, [pc, #320]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800658a:	4b4d      	ldr	r3, [pc, #308]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	0f1b      	lsrs	r3, r3, #28
 8006590:	f003 030f 	and.w	r3, r3, #15
 8006594:	e006      	b.n	80065a4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006596:	4b4a      	ldr	r3, [pc, #296]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006598:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800659c:	041b      	lsls	r3, r3, #16
 800659e:	0f1b      	lsrs	r3, r3, #28
 80065a0:	f003 030f 	and.w	r3, r3, #15
 80065a4:	4a49      	ldr	r2, [pc, #292]	@ (80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80065a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	ee07 3a90 	vmov	s15, r3
 80065b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ce:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80066c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80065d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065de:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80065e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065ea:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80065ec:	4b34      	ldr	r3, [pc, #208]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d017      	beq.n	8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80065f8:	4b31      	ldr	r3, [pc, #196]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065fc:	0a5b      	lsrs	r3, r3, #9
 80065fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800660a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800660e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006612:	edd7 6a07 	vldr	s13, [r7, #28]
 8006616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800661a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800661e:	ee17 2a90 	vmov	r2, s15
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	e002      	b.n	800662e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800662e:	4b24      	ldr	r3, [pc, #144]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d017      	beq.n	800666a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800663a:	4b21      	ldr	r3, [pc, #132]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800663c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663e:	0c1b      	lsrs	r3, r3, #16
 8006640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006644:	ee07 3a90 	vmov	s15, r3
 8006648:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800664c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006650:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006654:	edd7 6a07 	vldr	s13, [r7, #28]
 8006658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800665c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006660:	ee17 2a90 	vmov	r2, s15
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	605a      	str	r2, [r3, #4]
 8006668:	e002      	b.n	8006670 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006670:	4b13      	ldr	r3, [pc, #76]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006674:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d017      	beq.n	80066ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800667c:	4b10      	ldr	r3, [pc, #64]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800667e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006680:	0e1b      	lsrs	r3, r3, #24
 8006682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800668e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006692:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006696:	edd7 6a07 	vldr	s13, [r7, #28]
 800669a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800669e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066a2:	ee17 2a90 	vmov	r2, s15
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80066aa:	e002      	b.n	80066b2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	609a      	str	r2, [r3, #8]
}
 80066b2:	bf00      	nop
 80066b4:	3724      	adds	r7, #36	@ 0x24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	46020c00 	.word	0x46020c00
 80066c4:	4b742400 	.word	0x4b742400
 80066c8:	46000000 	.word	0x46000000
 80066cc:	0800b994 	.word	0x0800b994

080066d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08e      	sub	sp, #56	@ 0x38
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80066da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066de:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80066e2:	430b      	orrs	r3, r1
 80066e4:	d145      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80066e6:	4baa      	ldr	r3, [pc, #680]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80066e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066f0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80066f2:	4ba7      	ldr	r3, [pc, #668]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80066f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d108      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006706:	d104      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006708:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800670c:	637b      	str	r3, [r7, #52]	@ 0x34
 800670e:	f001 b987 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006712:	4b9f      	ldr	r3, [pc, #636]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800671c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006720:	d114      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006728:	d110      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800672a:	4b99      	ldr	r3, [pc, #612]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800672c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006738:	d103      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800673a:	23fa      	movs	r3, #250	@ 0xfa
 800673c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800673e:	f001 b96f 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006742:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006746:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006748:	f001 b96a 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800674c:	4b90      	ldr	r3, [pc, #576]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006758:	d107      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006760:	d103      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006762:	4b8c      	ldr	r3, [pc, #560]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006764:	637b      	str	r3, [r7, #52]	@ 0x34
 8006766:	f001 b95b 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	637b      	str	r3, [r7, #52]	@ 0x34
 800676e:	f001 b957 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006776:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800677a:	430b      	orrs	r3, r1
 800677c:	d151      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800677e:	4b84      	ldr	r3, [pc, #528]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006780:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006784:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006788:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	2b80      	cmp	r3, #128	@ 0x80
 800678e:	d035      	beq.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006792:	2b80      	cmp	r3, #128	@ 0x80
 8006794:	d841      	bhi.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	2b60      	cmp	r3, #96	@ 0x60
 800679a:	d02a      	beq.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800679c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679e:	2b60      	cmp	r3, #96	@ 0x60
 80067a0:	d83b      	bhi.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80067a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a4:	2b40      	cmp	r3, #64	@ 0x40
 80067a6:	d009      	beq.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80067a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067aa:	2b40      	cmp	r3, #64	@ 0x40
 80067ac:	d835      	bhi.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00c      	beq.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80067b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d012      	beq.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80067ba:	e02e      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff fb77 	bl	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067ca:	f001 b929 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ce:	f107 0318 	add.w	r3, r7, #24
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff fcc8 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067dc:	f001 b920 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067e0:	f107 030c 	add.w	r3, r7, #12
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff fe19 	bl	800641c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067ee:	f001 b917 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80067f2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80067f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067f8:	f001 b912 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067fc:	4b64      	ldr	r3, [pc, #400]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006808:	d103      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800680a:	4b63      	ldr	r3, [pc, #396]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800680c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800680e:	f001 b907 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006816:	f001 b903 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800681e:	f001 b8ff 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006826:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800682a:	430b      	orrs	r3, r1
 800682c:	d158      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800682e:	4b58      	ldr	r3, [pc, #352]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006830:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006834:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006838:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006840:	d03b      	beq.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006848:	d846      	bhi.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006850:	d02e      	beq.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006858:	d83e      	bhi.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006860:	d00b      	beq.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006868:	d836      	bhi.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00d      	beq.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006876:	d012      	beq.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006878:	e02e      	b.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800687a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff fb18 	bl	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006886:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006888:	f001 b8ca 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800688c:	f107 0318 	add.w	r3, r7, #24
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fc69 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800689a:	f001 b8c1 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800689e:	f107 030c 	add.w	r3, r7, #12
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff fdba 	bl	800641c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068ac:	f001 b8b8 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80068b0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80068b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068b6:	f001 b8b3 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068ba:	4b35      	ldr	r3, [pc, #212]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c6:	d103      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80068c8:	4b33      	ldr	r3, [pc, #204]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80068ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068cc:	f001 b8a8 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068d4:	f001 b8a4 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068dc:	f001 b8a0 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80068e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068e4:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80068e8:	430b      	orrs	r3, r1
 80068ea:	d16e      	bne.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80068ec:	4b28      	ldr	r3, [pc, #160]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80068ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068f2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80068f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80068f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80068fe:	d034      	beq.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8006900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006902:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006906:	d85c      	bhi.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800690e:	d00b      	beq.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006912:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006916:	d854      	bhi.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	2b00      	cmp	r3, #0
 800691c:	d016      	beq.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006924:	d009      	beq.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006926:	e04c      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff fac1 	bl	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006934:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006936:	f001 b873 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800693a:	f107 0318 	add.w	r3, r7, #24
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff fc12 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006948:	f001 b86a 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800694c:	4b10      	ldr	r3, [pc, #64]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006958:	d103      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800695a:	4b10      	ldr	r3, [pc, #64]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800695c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800695e:	f001 b85f 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006966:	f001 b85b 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800696a:	4b09      	ldr	r3, [pc, #36]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0320 	and.w	r3, r3, #32
 8006972:	2b20      	cmp	r3, #32
 8006974:	d121      	bne.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006976:	4b06      	ldr	r3, [pc, #24]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00e      	beq.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8006982:	4b03      	ldr	r3, [pc, #12]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	0e1b      	lsrs	r3, r3, #24
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	e00f      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800698e:	bf00      	nop
 8006990:	46020c00 	.word	0x46020c00
 8006994:	0007a120 	.word	0x0007a120
 8006998:	00f42400 	.word	0x00f42400
 800699c:	02dc6c00 	.word	0x02dc6c00
 80069a0:	4ba7      	ldr	r3, [pc, #668]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80069a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069a6:	041b      	lsls	r3, r3, #16
 80069a8:	0e1b      	lsrs	r3, r3, #24
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	4aa5      	ldr	r2, [pc, #660]	@ (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80069b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069b6:	f001 b833 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069be:	f001 b82f 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069c6:	f001 b82b 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80069ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ce:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80069d2:	430b      	orrs	r3, r1
 80069d4:	d17f      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80069d6:	4b9a      	ldr	r3, [pc, #616]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80069d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069e0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d165      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80069e8:	4b95      	ldr	r3, [pc, #596]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80069ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069ee:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80069f2:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80069f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80069fa:	d034      	beq.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80069fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a02:	d853      	bhi.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a0a:	d00b      	beq.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a12:	d84b      	bhi.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d016      	beq.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a20:	d009      	beq.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006a22:	e043      	b.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff fa43 	bl	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a30:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006a32:	f000 bff5 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a36:	f107 0318 	add.w	r3, r7, #24
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff fb94 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006a44:	f000 bfec 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006a48:	4b7d      	ldr	r3, [pc, #500]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a54:	d103      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8006a56:	4b7c      	ldr	r3, [pc, #496]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006a58:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006a5a:	f000 bfe1 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006a62:	f000 bfdd 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a66:	4b76      	ldr	r3, [pc, #472]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	d118      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a72:	4b73      	ldr	r3, [pc, #460]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d005      	beq.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006a7e:	4b70      	ldr	r3, [pc, #448]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	0e1b      	lsrs	r3, r3, #24
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	e006      	b.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8006a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006a8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a90:	041b      	lsls	r3, r3, #16
 8006a92:	0e1b      	lsrs	r3, r3, #24
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	4a6a      	ldr	r2, [pc, #424]	@ (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a9e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006aa0:	f000 bfbe 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006aa8:	f000 bfba 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006ab0:	f000 bfb6 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006aba:	d108      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff f9f7 	bl	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aca:	f000 bfa9 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad2:	f000 bfa5 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ada:	1e51      	subs	r1, r2, #1
 8006adc:	430b      	orrs	r3, r1
 8006ade:	d136      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006ae0:	4b57      	ldr	r3, [pc, #348]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d104      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006af2:	f7fe fb8d 	bl	8005210 <HAL_RCC_GetPCLK2Freq>
 8006af6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006af8:	f000 bf92 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d104      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b02:	f7fe fa55 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 8006b06:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b08:	f000 bf8a 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006b0c:	4b4c      	ldr	r3, [pc, #304]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b18:	d106      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d103      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8006b20:	4b4a      	ldr	r3, [pc, #296]	@ (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b24:	f000 bf7c 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006b28:	4b45      	ldr	r3, [pc, #276]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006b2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d107      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d104      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8006b3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b42:	f000 bf6d 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b4a:	f000 bf69 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b52:	1e91      	subs	r1, r2, #2
 8006b54:	430b      	orrs	r3, r1
 8006b56:	d136      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006b58:	4b39      	ldr	r3, [pc, #228]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b5e:	f003 030c 	and.w	r3, r3, #12
 8006b62:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d104      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b6a:	f7fe fb3d 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8006b6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b70:	f000 bf56 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d104      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b7a:	f7fe fa19 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 8006b7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b80:	f000 bf4e 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006b84:	4b2e      	ldr	r3, [pc, #184]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b90:	d106      	bne.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d103      	bne.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006b98:	4b2c      	ldr	r3, [pc, #176]	@ (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006b9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b9c:	f000 bf40 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006ba0:	4b27      	ldr	r3, [pc, #156]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d107      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	2b0c      	cmp	r3, #12
 8006bb2:	d104      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006bb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bba:	f000 bf31 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc2:	f000 bf2d 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bca:	1f11      	subs	r1, r2, #4
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	d13f      	bne.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bd6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006bda:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d104      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006be2:	f7fe fb01 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8006be6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006be8:	f000 bf1a 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bee:	2b10      	cmp	r3, #16
 8006bf0:	d104      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006bf2:	f7fe f9dd 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 8006bf6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bf8:	f000 bf12 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006bfc:	4b10      	ldr	r3, [pc, #64]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c08:	d106      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d103      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8006c10:	4b0e      	ldr	r3, [pc, #56]	@ (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c14:	f000 bf04 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006c18:	4b09      	ldr	r3, [pc, #36]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d107      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c28:	2b30      	cmp	r3, #48	@ 0x30
 8006c2a:	d104      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8006c2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c32:	f000 bef5 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c3a:	f000 bef1 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006c3e:	bf00      	nop
 8006c40:	46020c00 	.word	0x46020c00
 8006c44:	0800b994 	.word	0x0800b994
 8006c48:	02dc6c00 	.word	0x02dc6c00
 8006c4c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c54:	f1a2 0108 	sub.w	r1, r2, #8
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	d136      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006c5c:	4ba4      	ldr	r3, [pc, #656]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006c66:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d104      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c6e:	f7fe fabb 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8006c72:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c74:	f000 bed4 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	2b40      	cmp	r3, #64	@ 0x40
 8006c7c:	d104      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c7e:	f7fe f997 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 8006c82:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c84:	f000 becc 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006c88:	4b99      	ldr	r3, [pc, #612]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c94:	d106      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c98:	2b80      	cmp	r3, #128	@ 0x80
 8006c9a:	d103      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8006c9c:	4b95      	ldr	r3, [pc, #596]	@ (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca0:	f000 bebe 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006ca4:	4b92      	ldr	r3, [pc, #584]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d107      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb4:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cb6:	d104      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006cb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cbe:	f000 beaf 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc6:	f000 beab 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cce:	f1a2 0110 	sub.w	r1, r2, #16
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	d139      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006cd6:	4b86      	ldr	r3, [pc, #536]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ce0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d104      	bne.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ce8:	f7fe fa7e 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8006cec:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cee:	f000 be97 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf8:	d104      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006cfa:	f7fe f959 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 8006cfe:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d00:	f000 be8e 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006d04:	4b7a      	ldr	r3, [pc, #488]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d10:	d107      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8006d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d18:	d103      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8006d1a:	4b76      	ldr	r3, [pc, #472]	@ (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d1e:	f000 be7f 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006d22:	4b73      	ldr	r3, [pc, #460]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d108      	bne.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d36:	d104      	bne.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006d38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d3e:	f000 be6f 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d46:	f000 be6b 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d4e:	f1a2 0120 	sub.w	r1, r2, #32
 8006d52:	430b      	orrs	r3, r1
 8006d54:	d158      	bne.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006d56:	4b66      	ldr	r3, [pc, #408]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006d68:	f7fe fa66 	bl	8005238 <HAL_RCC_GetPCLK3Freq>
 8006d6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d6e:	f000 be57 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d104      	bne.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d78:	f7fe f91a 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 8006d7c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d7e:	f000 be4f 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006d82:	4b5b      	ldr	r3, [pc, #364]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d8e:	d106      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8006d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d103      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8006d96:	4b57      	ldr	r3, [pc, #348]	@ (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9a:	f000 be41 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006d9e:	4b54      	ldr	r3, [pc, #336]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d107      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8006dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d104      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8006db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db8:	f000 be32 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006dbc:	4b4c      	ldr	r3, [pc, #304]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0320 	and.w	r3, r3, #32
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d11b      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	d118      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006dce:	4b48      	ldr	r3, [pc, #288]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8006dda:	4b45      	ldr	r3, [pc, #276]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	0e1b      	lsrs	r3, r3, #24
 8006de0:	f003 030f 	and.w	r3, r3, #15
 8006de4:	e006      	b.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006de6:	4b42      	ldr	r3, [pc, #264]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006de8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006dec:	041b      	lsls	r3, r3, #16
 8006dee:	0e1b      	lsrs	r3, r3, #24
 8006df0:	f003 030f 	and.w	r3, r3, #15
 8006df4:	4a40      	ldr	r2, [pc, #256]	@ (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfc:	f000 be10 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e04:	f000 be0c 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006e10:	430b      	orrs	r3, r1
 8006e12:	d173      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006e14:	4b36      	ldr	r3, [pc, #216]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e1a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006e1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e26:	d104      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e28:	f7fe f8c2 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 8006e2c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e2e:	f000 bdf7 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e38:	d108      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e3a:	f107 0318 	add.w	r3, r7, #24
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7ff f992 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e48:	f000 bdea 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d104      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006e52:	f7fe f9af 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 8006e56:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e58:	f000 bde2 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006e62:	d122      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e64:	4b22      	ldr	r3, [pc, #136]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b20      	cmp	r3, #32
 8006e6e:	d118      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e70:	4b1f      	ldr	r3, [pc, #124]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8006e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	0e1b      	lsrs	r3, r3, #24
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	e006      	b.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006e88:	4b19      	ldr	r3, [pc, #100]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e8e:	041b      	lsls	r3, r3, #16
 8006e90:	0e1b      	lsrs	r3, r3, #24
 8006e92:	f003 030f 	and.w	r3, r3, #15
 8006e96:	4a18      	ldr	r2, [pc, #96]	@ (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9e:	f000 bdbf 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea6:	f000 bdbb 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006eaa:	4b11      	ldr	r3, [pc, #68]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eb6:	d107      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ebe:	d103      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec4:	f000 bdac 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006ec8:	4b09      	ldr	r3, [pc, #36]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ed4:	d107      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006edc:	d103      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8006ede:	4b05      	ldr	r3, [pc, #20]	@ (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ee2:	f000 bd9d 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eea:	f000 bd99 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006eee:	bf00      	nop
 8006ef0:	46020c00 	.word	0x46020c00
 8006ef4:	00f42400 	.word	0x00f42400
 8006ef8:	0800b994 	.word	0x0800b994
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f00:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006f04:	430b      	orrs	r3, r1
 8006f06:	d158      	bne.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006f08:	4bad      	ldr	r3, [pc, #692]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d84b      	bhi.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f20:	08006f59 	.word	0x08006f59
 8006f24:	08006f35 	.word	0x08006f35
 8006f28:	08006f47 	.word	0x08006f47
 8006f2c:	08006f63 	.word	0x08006f63
 8006f30:	08006f6d 	.word	0x08006f6d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe ffbb 	bl	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f42:	f000 bd6d 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f46:	f107 030c 	add.w	r3, r7, #12
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff fa66 	bl	800641c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f54:	f000 bd64 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006f58:	f7fe f92c 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 8006f5c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f5e:	f000 bd5f 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006f62:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006f66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f68:	f000 bd5a 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f6c:	4b94      	ldr	r3, [pc, #592]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0320 	and.w	r3, r3, #32
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	d118      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f78:	4b91      	ldr	r3, [pc, #580]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006f84:	4b8e      	ldr	r3, [pc, #568]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	0e1b      	lsrs	r3, r3, #24
 8006f8a:	f003 030f 	and.w	r3, r3, #15
 8006f8e:	e006      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006f90:	4b8b      	ldr	r3, [pc, #556]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f96:	041b      	lsls	r3, r3, #16
 8006f98:	0e1b      	lsrs	r3, r3, #24
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	4a89      	ldr	r2, [pc, #548]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fa6:	f000 bd3b 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fae:	f000 bd37 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fb6:	f000 bd33 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006fba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fbe:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006fc2:	430b      	orrs	r3, r1
 8006fc4:	d167      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006fc6:	4b7e      	ldr	r3, [pc, #504]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fcc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006fd0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fd8:	d036      	beq.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8006fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fdc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fe0:	d855      	bhi.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006fe8:	d029      	beq.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ff0:	d84d      	bhi.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ff8:	d013      	beq.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007000:	d845      	bhi.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007004:	2b00      	cmp	r3, #0
 8007006:	d015      	beq.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800700e:	d13e      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007010:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe ff4d 	bl	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800701e:	f000 bcff 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007022:	f107 030c 	add.w	r3, r7, #12
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff f9f8 	bl	800641c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007030:	f000 bcf6 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007034:	f7fe f8be 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 8007038:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800703a:	f000 bcf1 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800703e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007042:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007044:	f000 bcec 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007048:	4b5d      	ldr	r3, [pc, #372]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b20      	cmp	r3, #32
 8007052:	d118      	bne.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007054:	4b5a      	ldr	r3, [pc, #360]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8007060:	4b57      	ldr	r3, [pc, #348]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	0e1b      	lsrs	r3, r3, #24
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	e006      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800706c:	4b54      	ldr	r3, [pc, #336]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800706e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007072:	041b      	lsls	r3, r3, #16
 8007074:	0e1b      	lsrs	r3, r3, #24
 8007076:	f003 030f 	and.w	r3, r3, #15
 800707a:	4a52      	ldr	r2, [pc, #328]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800707c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007080:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007082:	f000 bccd 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800708a:	f000 bcc9 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007092:	f000 bcc5 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007096:	e9d7 2300 	ldrd	r2, r3, [r7]
 800709a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800709e:	430b      	orrs	r3, r1
 80070a0:	d14c      	bne.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80070a2:	4b47      	ldr	r3, [pc, #284]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80070ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d104      	bne.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80070b4:	f7fe f898 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 80070b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80070ba:	f000 bcb1 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80070be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070c4:	d104      	bne.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070c6:	f7fd ff73 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 80070ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80070cc:	f000 bca8 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80070d0:	4b3b      	ldr	r3, [pc, #236]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070dc:	d107      	bne.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80070de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070e4:	d103      	bne.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80070e6:	4b38      	ldr	r3, [pc, #224]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ea:	f000 bc99 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80070ee:	4b34      	ldr	r3, [pc, #208]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	d11c      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007100:	d118      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007102:	4b2f      	ldr	r3, [pc, #188]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800710e:	4b2c      	ldr	r3, [pc, #176]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	0e1b      	lsrs	r3, r3, #24
 8007114:	f003 030f 	and.w	r3, r3, #15
 8007118:	e006      	b.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800711a:	4b29      	ldr	r3, [pc, #164]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800711c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007120:	041b      	lsls	r3, r3, #16
 8007122:	0e1b      	lsrs	r3, r3, #24
 8007124:	f003 030f 	and.w	r3, r3, #15
 8007128:	4a26      	ldr	r2, [pc, #152]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800712a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800712e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007130:	f000 bc76 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	637b      	str	r3, [r7, #52]	@ 0x34
 8007138:	f000 bc72 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800713c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007140:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007144:	430b      	orrs	r3, r1
 8007146:	d152      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007148:	4b1d      	ldr	r3, [pc, #116]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800714a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800714e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007152:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007156:	2b00      	cmp	r3, #0
 8007158:	d104      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800715a:	f7fe f845 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 800715e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007160:	f000 bc5e 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800716a:	d104      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800716c:	f7fd ff20 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 8007170:	6378      	str	r0, [r7, #52]	@ 0x34
 8007172:	f000 bc55 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007176:	4b12      	ldr	r3, [pc, #72]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800717e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007182:	d107      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8007184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800718a:	d103      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 800718c:	4b0e      	ldr	r3, [pc, #56]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800718e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007190:	f000 bc46 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007194:	4b0a      	ldr	r3, [pc, #40]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b20      	cmp	r3, #32
 800719e:	d122      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 80071a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071a6:	d11e      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071a8:	4b05      	ldr	r3, [pc, #20]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00b      	beq.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 80071b4:	4b02      	ldr	r3, [pc, #8]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	0e1b      	lsrs	r3, r3, #24
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	e00c      	b.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 80071c0:	46020c00 	.word	0x46020c00
 80071c4:	0800b994 	.word	0x0800b994
 80071c8:	00f42400 	.word	0x00f42400
 80071cc:	4ba1      	ldr	r3, [pc, #644]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80071ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071d2:	041b      	lsls	r3, r3, #16
 80071d4:	0e1b      	lsrs	r3, r3, #24
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	4a9f      	ldr	r2, [pc, #636]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80071dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e2:	f000 bc1d 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ea:	f000 bc19 	b.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80071ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80071f6:	430b      	orrs	r3, r1
 80071f8:	d151      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80071fa:	4b96      	ldr	r3, [pc, #600]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80071fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007200:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007204:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007208:	2bc0      	cmp	r3, #192	@ 0xc0
 800720a:	d024      	beq.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800720c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007210:	d842      	bhi.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	2b80      	cmp	r3, #128	@ 0x80
 8007216:	d00d      	beq.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721a:	2b80      	cmp	r3, #128	@ 0x80
 800721c:	d83c      	bhi.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8007224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007226:	2b40      	cmp	r3, #64	@ 0x40
 8007228:	d011      	beq.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800722a:	e035      	b.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800722c:	f7fe f804 	bl	8005238 <HAL_RCC_GetPCLK3Freq>
 8007230:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007232:	e3f5      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007234:	4b87      	ldr	r3, [pc, #540]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800723c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007240:	d102      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8007242:	4b86      	ldr	r3, [pc, #536]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007244:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007246:	e3eb      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800724c:	e3e8      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800724e:	f7fd feaf 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 8007252:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007254:	e3e4      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007256:	4b7f      	ldr	r3, [pc, #508]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0320 	and.w	r3, r3, #32
 800725e:	2b20      	cmp	r3, #32
 8007260:	d117      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007262:	4b7c      	ldr	r3, [pc, #496]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800726e:	4b79      	ldr	r3, [pc, #484]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	0e1b      	lsrs	r3, r3, #24
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	e006      	b.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800727a:	4b76      	ldr	r3, [pc, #472]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800727c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007280:	041b      	lsls	r3, r3, #16
 8007282:	0e1b      	lsrs	r3, r3, #24
 8007284:	f003 030f 	and.w	r3, r3, #15
 8007288:	4a73      	ldr	r2, [pc, #460]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800728a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800728e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007290:	e3c6      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007296:	e3c3      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800729c:	e3c0      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800729e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a2:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80072a6:	430b      	orrs	r3, r1
 80072a8:	d147      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80072aa:	4b6a      	ldr	r3, [pc, #424]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80072ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80072b4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80072b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d103      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80072bc:	f7fd ff94 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 80072c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80072c2:	e3ad      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072ca:	d103      	bne.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80072cc:	f7fd fe70 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 80072d0:	6378      	str	r0, [r7, #52]	@ 0x34
 80072d2:	e3a5      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80072d4:	4b5f      	ldr	r3, [pc, #380]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072e0:	d106      	bne.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072e8:	d102      	bne.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 80072ea:	4b5c      	ldr	r3, [pc, #368]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80072ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ee:	e397      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80072f0:	4b58      	ldr	r3, [pc, #352]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b20      	cmp	r3, #32
 80072fa:	d11b      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80072fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007302:	d117      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007304:	4b53      	ldr	r3, [pc, #332]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8007310:	4b50      	ldr	r3, [pc, #320]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	0e1b      	lsrs	r3, r3, #24
 8007316:	f003 030f 	and.w	r3, r3, #15
 800731a:	e006      	b.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 800731c:	4b4d      	ldr	r3, [pc, #308]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800731e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007322:	041b      	lsls	r3, r3, #16
 8007324:	0e1b      	lsrs	r3, r3, #24
 8007326:	f003 030f 	and.w	r3, r3, #15
 800732a:	4a4b      	ldr	r2, [pc, #300]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800732c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007330:	637b      	str	r3, [r7, #52]	@ 0x34
 8007332:	e375      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	637b      	str	r3, [r7, #52]	@ 0x34
 8007338:	e372      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800733a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800733e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007342:	430b      	orrs	r3, r1
 8007344:	d164      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007346:	4b43      	ldr	r3, [pc, #268]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800734c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007350:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007354:	2b00      	cmp	r3, #0
 8007356:	d120      	bne.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007358:	4b3e      	ldr	r3, [pc, #248]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0320 	and.w	r3, r3, #32
 8007360:	2b20      	cmp	r3, #32
 8007362:	d117      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007364:	4b3b      	ldr	r3, [pc, #236]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d005      	beq.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007370:	4b38      	ldr	r3, [pc, #224]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	0e1b      	lsrs	r3, r3, #24
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	e006      	b.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 800737c:	4b35      	ldr	r3, [pc, #212]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800737e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007382:	041b      	lsls	r3, r3, #16
 8007384:	0e1b      	lsrs	r3, r3, #24
 8007386:	f003 030f 	and.w	r3, r3, #15
 800738a:	4a33      	ldr	r2, [pc, #204]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800738c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007390:	637b      	str	r3, [r7, #52]	@ 0x34
 8007392:	e345      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	637b      	str	r3, [r7, #52]	@ 0x34
 8007398:	e342      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800739a:	4b2e      	ldr	r3, [pc, #184]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800739c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073a8:	d112      	bne.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80073aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073b0:	d10e      	bne.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073b2:	4b28      	ldr	r3, [pc, #160]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80073b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073c0:	d102      	bne.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80073c2:	23fa      	movs	r3, #250	@ 0xfa
 80073c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073c6:	e32b      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80073c8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80073cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073ce:	e327      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80073d0:	4b20      	ldr	r3, [pc, #128]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073dc:	d106      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80073de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073e4:	d102      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80073e6:	4b1d      	ldr	r3, [pc, #116]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80073e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ea:	e319      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80073ec:	4b19      	ldr	r3, [pc, #100]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80073ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d107      	bne.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80073fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007400:	d103      	bne.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8007402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007406:	637b      	str	r3, [r7, #52]	@ 0x34
 8007408:	e30a      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	637b      	str	r3, [r7, #52]	@ 0x34
 800740e:	e307      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007414:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007418:	430b      	orrs	r3, r1
 800741a:	d16b      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800741c:	4b0d      	ldr	r3, [pc, #52]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800741e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007422:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007426:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742a:	2b00      	cmp	r3, #0
 800742c:	d127      	bne.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800742e:	4b09      	ldr	r3, [pc, #36]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0320 	and.w	r3, r3, #32
 8007436:	2b20      	cmp	r3, #32
 8007438:	d11e      	bne.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800743a:	4b06      	ldr	r3, [pc, #24]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00c      	beq.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8007446:	4b03      	ldr	r3, [pc, #12]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	0e1b      	lsrs	r3, r3, #24
 800744c:	f003 030f 	and.w	r3, r3, #15
 8007450:	e00d      	b.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8007452:	bf00      	nop
 8007454:	46020c00 	.word	0x46020c00
 8007458:	0800b994 	.word	0x0800b994
 800745c:	00f42400 	.word	0x00f42400
 8007460:	4b94      	ldr	r3, [pc, #592]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007462:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007466:	041b      	lsls	r3, r3, #16
 8007468:	0e1b      	lsrs	r3, r3, #24
 800746a:	f003 030f 	and.w	r3, r3, #15
 800746e:	4a92      	ldr	r2, [pc, #584]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007474:	637b      	str	r3, [r7, #52]	@ 0x34
 8007476:	e2d3      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	637b      	str	r3, [r7, #52]	@ 0x34
 800747c:	e2d0      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800747e:	4b8d      	ldr	r3, [pc, #564]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007488:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800748c:	d112      	bne.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 800748e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007494:	d10e      	bne.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007496:	4b87      	ldr	r3, [pc, #540]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800749c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074a4:	d102      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 80074a6:	23fa      	movs	r3, #250	@ 0xfa
 80074a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80074aa:	e2b9      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80074ac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80074b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80074b2:	e2b5      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80074b4:	4b7f      	ldr	r3, [pc, #508]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074c0:	d106      	bne.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 80074c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074c8:	d102      	bne.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 80074ca:	4b7c      	ldr	r3, [pc, #496]	@ (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80074cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ce:	e2a7      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80074d0:	4b78      	ldr	r3, [pc, #480]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80074d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d107      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074e4:	d103      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 80074e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ec:	e298      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074f2:	e295      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80074f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074f8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80074fc:	430b      	orrs	r3, r1
 80074fe:	d147      	bne.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007500:	4b6c      	ldr	r3, [pc, #432]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007506:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800750a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800750c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750e:	2b00      	cmp	r3, #0
 8007510:	d103      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007512:	f7fd fe69 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8007516:	6378      	str	r0, [r7, #52]	@ 0x34
 8007518:	e282      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800751a:	4b66      	ldr	r3, [pc, #408]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800751c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007528:	d112      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 800752a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007530:	d10e      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007532:	4b60      	ldr	r3, [pc, #384]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800753c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007540:	d102      	bne.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8007542:	23fa      	movs	r3, #250	@ 0xfa
 8007544:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007546:	e26b      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007548:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800754c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800754e:	e267      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007550:	4b58      	ldr	r3, [pc, #352]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800755c:	d106      	bne.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007564:	d102      	bne.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8007566:	4b55      	ldr	r3, [pc, #340]	@ (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007568:	637b      	str	r3, [r7, #52]	@ 0x34
 800756a:	e259      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800756c:	4b51      	ldr	r3, [pc, #324]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800756e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b02      	cmp	r3, #2
 8007578:	d107      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007580:	d103      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8007582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007586:	637b      	str	r3, [r7, #52]	@ 0x34
 8007588:	e24a      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	637b      	str	r3, [r7, #52]	@ 0x34
 800758e:	e247      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007594:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007598:	430b      	orrs	r3, r1
 800759a:	d12d      	bne.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800759c:	4b45      	ldr	r3, [pc, #276]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800759e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075a2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80075a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80075a8:	4b42      	ldr	r3, [pc, #264]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075b4:	d105      	bne.n	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 80075bc:	4b3f      	ldr	r3, [pc, #252]	@ (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075be:	637b      	str	r3, [r7, #52]	@ 0x34
 80075c0:	e22e      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80075c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075c8:	d107      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fe fc70 	bl	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80075d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80075d8:	e222      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075e0:	d107      	bne.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075e2:	f107 0318 	add.w	r3, r7, #24
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe fdbe 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f0:	e216      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f6:	e213      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80075f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075fc:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007600:	430b      	orrs	r3, r1
 8007602:	d15d      	bne.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007604:	4b2b      	ldr	r3, [pc, #172]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800760a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800760e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007612:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007616:	d028      	beq.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8007618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800761e:	d845      	bhi.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007626:	d013      	beq.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8007628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800762e:	d83d      	bhi.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	2b00      	cmp	r3, #0
 8007634:	d004      	beq.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800763c:	d004      	beq.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 800763e:	e035      	b.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007640:	f7fd fde6 	bl	8005210 <HAL_RCC_GetPCLK2Freq>
 8007644:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007646:	e1eb      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007648:	f7fd fcb2 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 800764c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800764e:	e1e7      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007650:	4b18      	ldr	r3, [pc, #96]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800765c:	d102      	bne.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 800765e:	4b17      	ldr	r3, [pc, #92]	@ (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007660:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007662:	e1dd      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007668:	e1da      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800766a:	4b12      	ldr	r3, [pc, #72]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b20      	cmp	r3, #32
 8007674:	d117      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007676:	4b0f      	ldr	r3, [pc, #60]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8007682:	4b0c      	ldr	r3, [pc, #48]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	0e1b      	lsrs	r3, r3, #24
 8007688:	f003 030f 	and.w	r3, r3, #15
 800768c:	e006      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800768e:	4b09      	ldr	r3, [pc, #36]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007690:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007694:	041b      	lsls	r3, r3, #16
 8007696:	0e1b      	lsrs	r3, r3, #24
 8007698:	f003 030f 	and.w	r3, r3, #15
 800769c:	4a06      	ldr	r2, [pc, #24]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800769e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076a4:	e1bc      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076aa:	e1b9      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076b0:	e1b6      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80076b2:	bf00      	nop
 80076b4:	46020c00 	.word	0x46020c00
 80076b8:	0800b994 	.word	0x0800b994
 80076bc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80076c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076c4:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80076c8:	430b      	orrs	r3, r1
 80076ca:	d156      	bne.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80076cc:	4ba5      	ldr	r3, [pc, #660]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80076ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80076d6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80076d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076de:	d028      	beq.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076e6:	d845      	bhi.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80076e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076ee:	d013      	beq.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 80076f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076f6:	d83d      	bhi.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d004      	beq.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 80076fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007704:	d004      	beq.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8007706:	e035      	b.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007708:	f7fd fd6e 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 800770c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800770e:	e187      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007710:	f7fd fc4e 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 8007714:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007716:	e183      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007718:	4b92      	ldr	r3, [pc, #584]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007724:	d102      	bne.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8007726:	4b90      	ldr	r3, [pc, #576]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007728:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800772a:	e179      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007730:	e176      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007732:	4b8c      	ldr	r3, [pc, #560]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b20      	cmp	r3, #32
 800773c:	d117      	bne.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800773e:	4b89      	ldr	r3, [pc, #548]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d005      	beq.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800774a:	4b86      	ldr	r3, [pc, #536]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	0e1b      	lsrs	r3, r3, #24
 8007750:	f003 030f 	and.w	r3, r3, #15
 8007754:	e006      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8007756:	4b83      	ldr	r3, [pc, #524]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800775c:	041b      	lsls	r3, r3, #16
 800775e:	0e1b      	lsrs	r3, r3, #24
 8007760:	f003 030f 	and.w	r3, r3, #15
 8007764:	4a81      	ldr	r2, [pc, #516]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800776a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800776c:	e158      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007772:	e155      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007778:	e152      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800777a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800777e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007782:	430b      	orrs	r3, r1
 8007784:	d177      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007786:	4b77      	ldr	r3, [pc, #476]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800778c:	f003 0318 	and.w	r3, r3, #24
 8007790:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007794:	2b18      	cmp	r3, #24
 8007796:	d86b      	bhi.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8007798:	a201      	add	r2, pc, #4	@ (adr r2, 80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800779a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779e:	bf00      	nop
 80077a0:	08007805 	.word	0x08007805
 80077a4:	08007871 	.word	0x08007871
 80077a8:	08007871 	.word	0x08007871
 80077ac:	08007871 	.word	0x08007871
 80077b0:	08007871 	.word	0x08007871
 80077b4:	08007871 	.word	0x08007871
 80077b8:	08007871 	.word	0x08007871
 80077bc:	08007871 	.word	0x08007871
 80077c0:	0800780d 	.word	0x0800780d
 80077c4:	08007871 	.word	0x08007871
 80077c8:	08007871 	.word	0x08007871
 80077cc:	08007871 	.word	0x08007871
 80077d0:	08007871 	.word	0x08007871
 80077d4:	08007871 	.word	0x08007871
 80077d8:	08007871 	.word	0x08007871
 80077dc:	08007871 	.word	0x08007871
 80077e0:	08007815 	.word	0x08007815
 80077e4:	08007871 	.word	0x08007871
 80077e8:	08007871 	.word	0x08007871
 80077ec:	08007871 	.word	0x08007871
 80077f0:	08007871 	.word	0x08007871
 80077f4:	08007871 	.word	0x08007871
 80077f8:	08007871 	.word	0x08007871
 80077fc:	08007871 	.word	0x08007871
 8007800:	0800782f 	.word	0x0800782f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007804:	f7fd fd18 	bl	8005238 <HAL_RCC_GetPCLK3Freq>
 8007808:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800780a:	e109      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800780c:	f7fd fbd0 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 8007810:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007812:	e105      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007814:	4b53      	ldr	r3, [pc, #332]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800781c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007820:	d102      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8007822:	4b51      	ldr	r3, [pc, #324]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007824:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007826:	e0fb      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800782c:	e0f8      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800782e:	4b4d      	ldr	r3, [pc, #308]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b20      	cmp	r3, #32
 8007838:	d117      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800783a:	4b4a      	ldr	r3, [pc, #296]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d005      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8007846:	4b47      	ldr	r3, [pc, #284]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	0e1b      	lsrs	r3, r3, #24
 800784c:	f003 030f 	and.w	r3, r3, #15
 8007850:	e006      	b.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8007852:	4b44      	ldr	r3, [pc, #272]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007858:	041b      	lsls	r3, r3, #16
 800785a:	0e1b      	lsrs	r3, r3, #24
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	4a42      	ldr	r2, [pc, #264]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007866:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007868:	e0da      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800786e:	e0d7      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007874:	e0d4      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800787a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800787e:	430b      	orrs	r3, r1
 8007880:	d155      	bne.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007882:	4b38      	ldr	r3, [pc, #224]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007884:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007888:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800788c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800788e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007890:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007894:	d013      	beq.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8007896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007898:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800789c:	d844      	bhi.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078a4:	d013      	beq.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078ac:	d83c      	bhi.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d014      	beq.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 80078b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078ba:	d014      	beq.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 80078bc:	e034      	b.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078be:	f107 0318 	add.w	r3, r7, #24
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe fc50 	bl	8006168 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078cc:	e0a8      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe faee 	bl	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80078d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078dc:	e0a0      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80078de:	f7fd fb67 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 80078e2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80078e4:	e09c      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80078e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0320 	and.w	r3, r3, #32
 80078ee:	2b20      	cmp	r3, #32
 80078f0:	d117      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80078f2:	4b1c      	ldr	r3, [pc, #112]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80078fe:	4b19      	ldr	r3, [pc, #100]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	0e1b      	lsrs	r3, r3, #24
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	e006      	b.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800790a:	4b16      	ldr	r3, [pc, #88]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800790c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007910:	041b      	lsls	r3, r3, #16
 8007912:	0e1b      	lsrs	r3, r3, #24
 8007914:	f003 030f 	and.w	r3, r3, #15
 8007918:	4a14      	ldr	r2, [pc, #80]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800791a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800791e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007920:	e07e      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007926:	e07b      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800792c:	e078      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800792e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007932:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007936:	430b      	orrs	r3, r1
 8007938:	d138      	bne.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800793a:	4b0a      	ldr	r3, [pc, #40]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800793c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007940:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007944:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007946:	4b07      	ldr	r3, [pc, #28]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b02      	cmp	r3, #2
 8007952:	d10d      	bne.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800795a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800795e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007960:	e05e      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007962:	bf00      	nop
 8007964:	46020c00 	.word	0x46020c00
 8007968:	00f42400 	.word	0x00f42400
 800796c:	0800b994 	.word	0x0800b994
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007970:	4b2e      	ldr	r3, [pc, #184]	@ (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007976:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800797a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800797e:	d112      	bne.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8007980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007986:	d10e      	bne.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007988:	4b28      	ldr	r3, [pc, #160]	@ (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800798a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800798e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007992:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007996:	d102      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8007998:	23fa      	movs	r3, #250	@ 0xfa
 800799a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800799c:	e040      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800799e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80079a2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079a4:	e03c      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079aa:	e039      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80079ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079b0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80079b4:	430b      	orrs	r3, r1
 80079b6:	d131      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80079b8:	4b1c      	ldr	r3, [pc, #112]	@ (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80079ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079be:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80079c2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80079c4:	4b19      	ldr	r3, [pc, #100]	@ (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079d0:	d105      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 80079d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 80079d8:	4b15      	ldr	r3, [pc, #84]	@ (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 80079da:	637b      	str	r3, [r7, #52]	@ 0x34
 80079dc:	e020      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80079de:	4b13      	ldr	r3, [pc, #76]	@ (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ea:	d106      	bne.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80079ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079f2:	d102      	bne.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80079f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80079f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f8:	e012      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80079fa:	4b0c      	ldr	r3, [pc, #48]	@ (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a06:	d106      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a0e:	d102      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8007a10:	4b09      	ldr	r3, [pc, #36]	@ (8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a14:	e004      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a1a:	e001      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3738      	adds	r7, #56	@ 0x38
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	46020c00 	.word	0x46020c00
 8007a30:	02dc6c00 	.word	0x02dc6c00
 8007a34:	016e3600 	.word	0x016e3600
 8007a38:	00f42400 	.word	0x00f42400

08007a3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007a44:	4b47      	ldr	r3, [pc, #284]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a46      	ldr	r2, [pc, #280]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007a4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a4e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a50:	f7fa f80a 	bl	8001a68 <HAL_GetTick>
 8007a54:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a56:	e008      	b.n	8007a6a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a58:	f7fa f806 	bl	8001a68 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d901      	bls.n	8007a6a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e077      	b.n	8007b5a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1f0      	bne.n	8007a58 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007a76:	4b3b      	ldr	r3, [pc, #236]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007a7e:	f023 0303 	bic.w	r3, r3, #3
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6811      	ldr	r1, [r2, #0]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6852      	ldr	r2, [r2, #4]
 8007a8a:	3a01      	subs	r2, #1
 8007a8c:	0212      	lsls	r2, r2, #8
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	4934      	ldr	r1, [pc, #208]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007a96:	4b33      	ldr	r3, [pc, #204]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007a98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a9a:	4b33      	ldr	r3, [pc, #204]	@ (8007b68 <RCCEx_PLL2_Config+0x12c>)
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	6892      	ldr	r2, [r2, #8]
 8007aa2:	3a01      	subs	r2, #1
 8007aa4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	68d2      	ldr	r2, [r2, #12]
 8007aac:	3a01      	subs	r2, #1
 8007aae:	0252      	lsls	r2, r2, #9
 8007ab0:	b292      	uxth	r2, r2
 8007ab2:	4311      	orrs	r1, r2
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6912      	ldr	r2, [r2, #16]
 8007ab8:	3a01      	subs	r2, #1
 8007aba:	0412      	lsls	r2, r2, #16
 8007abc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007ac0:	4311      	orrs	r1, r2
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	6952      	ldr	r2, [r2, #20]
 8007ac6:	3a01      	subs	r2, #1
 8007ac8:	0612      	lsls	r2, r2, #24
 8007aca:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	4924      	ldr	r1, [pc, #144]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007ad6:	4b23      	ldr	r3, [pc, #140]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ada:	f023 020c 	bic.w	r2, r3, #12
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	4920      	ldr	r1, [pc, #128]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	491c      	ldr	r1, [pc, #112]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007af6:	4b1b      	ldr	r3, [pc, #108]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afa:	4a1a      	ldr	r2, [pc, #104]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007afc:	f023 0310 	bic.w	r3, r3, #16
 8007b00:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b02:	4b18      	ldr	r3, [pc, #96]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b0a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	69d2      	ldr	r2, [r2, #28]
 8007b12:	00d2      	lsls	r2, r2, #3
 8007b14:	4913      	ldr	r1, [pc, #76]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007b1a:	4b12      	ldr	r3, [pc, #72]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1e:	4a11      	ldr	r2, [pc, #68]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007b20:	f043 0310 	orr.w	r3, r3, #16
 8007b24:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007b26:	4b0f      	ldr	r3, [pc, #60]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007b2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b30:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b32:	f7f9 ff99 	bl	8001a68 <HAL_GetTick>
 8007b36:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b38:	e008      	b.n	8007b4c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b3a:	f7f9 ff95 	bl	8001a68 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d901      	bls.n	8007b4c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e006      	b.n	8007b5a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b4c:	4b05      	ldr	r3, [pc, #20]	@ (8007b64 <RCCEx_PLL2_Config+0x128>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d0f0      	beq.n	8007b3a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007b58:	2300      	movs	r3, #0

}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	46020c00 	.word	0x46020c00
 8007b68:	80800000 	.word	0x80800000

08007b6c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007b74:	4b47      	ldr	r3, [pc, #284]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a46      	ldr	r2, [pc, #280]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007b7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b7e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b80:	f7f9 ff72 	bl	8001a68 <HAL_GetTick>
 8007b84:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b86:	e008      	b.n	8007b9a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b88:	f7f9 ff6e 	bl	8001a68 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d901      	bls.n	8007b9a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e077      	b.n	8007c8a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b9a:	4b3e      	ldr	r3, [pc, #248]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1f0      	bne.n	8007b88 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007baa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007bae:	f023 0303 	bic.w	r3, r3, #3
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	6811      	ldr	r1, [r2, #0]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6852      	ldr	r2, [r2, #4]
 8007bba:	3a01      	subs	r2, #1
 8007bbc:	0212      	lsls	r2, r2, #8
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	4934      	ldr	r1, [pc, #208]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	630b      	str	r3, [r1, #48]	@ 0x30
 8007bc6:	4b33      	ldr	r3, [pc, #204]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bca:	4b33      	ldr	r3, [pc, #204]	@ (8007c98 <RCCEx_PLL3_Config+0x12c>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	6892      	ldr	r2, [r2, #8]
 8007bd2:	3a01      	subs	r2, #1
 8007bd4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	68d2      	ldr	r2, [r2, #12]
 8007bdc:	3a01      	subs	r2, #1
 8007bde:	0252      	lsls	r2, r2, #9
 8007be0:	b292      	uxth	r2, r2
 8007be2:	4311      	orrs	r1, r2
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6912      	ldr	r2, [r2, #16]
 8007be8:	3a01      	subs	r2, #1
 8007bea:	0412      	lsls	r2, r2, #16
 8007bec:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007bf0:	4311      	orrs	r1, r2
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	6952      	ldr	r2, [r2, #20]
 8007bf6:	3a01      	subs	r2, #1
 8007bf8:	0612      	lsls	r2, r2, #24
 8007bfa:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	4924      	ldr	r1, [pc, #144]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007c06:	4b23      	ldr	r3, [pc, #140]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0a:	f023 020c 	bic.w	r2, r3, #12
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	4920      	ldr	r1, [pc, #128]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007c18:	4b1e      	ldr	r3, [pc, #120]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	491c      	ldr	r1, [pc, #112]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007c26:	4b1b      	ldr	r3, [pc, #108]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007c2c:	f023 0310 	bic.w	r3, r3, #16
 8007c30:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c32:	4b18      	ldr	r3, [pc, #96]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c3a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	69d2      	ldr	r2, [r2, #28]
 8007c42:	00d2      	lsls	r2, r2, #3
 8007c44:	4913      	ldr	r1, [pc, #76]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007c4a:	4b12      	ldr	r3, [pc, #72]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c4e:	4a11      	ldr	r2, [pc, #68]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007c50:	f043 0310 	orr.w	r3, r3, #16
 8007c54:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007c56:	4b0f      	ldr	r3, [pc, #60]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c60:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c62:	f7f9 ff01 	bl	8001a68 <HAL_GetTick>
 8007c66:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c68:	e008      	b.n	8007c7c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c6a:	f7f9 fefd 	bl	8001a68 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d901      	bls.n	8007c7c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e006      	b.n	8007c8a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c7c:	4b05      	ldr	r3, [pc, #20]	@ (8007c94 <RCCEx_PLL3_Config+0x128>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0f0      	beq.n	8007c6a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	46020c00 	.word	0x46020c00
 8007c98:	80800000 	.word	0x80800000

08007c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e042      	b.n	8007d34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d106      	bne.n	8007cc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7f9 fbc9 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2224      	movs	r2, #36	@ 0x24
 8007cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 0201 	bic.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fe44 	bl	8008974 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fc9f 	bl	8008630 <UART_SetConfig>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e01b      	b.n	8007d34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fec3 	bl	8008ab8 <UART_CheckIdleState>
 8007d32:	4603      	mov	r3, r0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08a      	sub	sp, #40	@ 0x28
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d52:	2b20      	cmp	r3, #32
 8007d54:	f040 808b 	bne.w	8007e6e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <HAL_UART_Transmit+0x28>
 8007d5e:	88fb      	ldrh	r3, [r7, #6]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e083      	b.n	8007e70 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d72:	2b80      	cmp	r3, #128	@ 0x80
 8007d74:	d107      	bne.n	8007d86 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d84:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2221      	movs	r2, #33	@ 0x21
 8007d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d96:	f7f9 fe67 	bl	8001a68 <HAL_GetTick>
 8007d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	88fa      	ldrh	r2, [r7, #6]
 8007da0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	88fa      	ldrh	r2, [r7, #6]
 8007da8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007db4:	d108      	bne.n	8007dc8 <HAL_UART_Transmit+0x8c>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d104      	bne.n	8007dc8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	61bb      	str	r3, [r7, #24]
 8007dc6:	e003      	b.n	8007dd0 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007dd0:	e030      	b.n	8007e34 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2180      	movs	r1, #128	@ 0x80
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 ff15 	bl	8008c0c <UART_WaitOnFlagUntilTimeout>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d005      	beq.n	8007df4 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e03d      	b.n	8007e70 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10b      	bne.n	8007e12 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	3302      	adds	r3, #2
 8007e0e:	61bb      	str	r3, [r7, #24]
 8007e10:	e007      	b.n	8007e22 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	781a      	ldrb	r2, [r3, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1c8      	bne.n	8007dd2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2200      	movs	r2, #0
 8007e48:	2140      	movs	r1, #64	@ 0x40
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 fede 	bl	8008c0c <UART_WaitOnFlagUntilTimeout>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d005      	beq.n	8007e62 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e006      	b.n	8007e70 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e000      	b.n	8007e70 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8007e6e:	2302      	movs	r3, #2
  }
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3720      	adds	r7, #32
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b091      	sub	sp, #68	@ 0x44
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4613      	mov	r3, r2
 8007e84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e8c:	2b20      	cmp	r3, #32
 8007e8e:	f040 8088 	bne.w	8007fa2 <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <HAL_UART_Transmit_IT+0x26>
 8007e98:	88fb      	ldrh	r3, [r7, #6]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e080      	b.n	8007fa4 <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eac:	2b80      	cmp	r3, #128	@ 0x80
 8007eae:	d107      	bne.n	8007ec0 <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ebe:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	88fa      	ldrh	r2, [r7, #6]
 8007eca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	88fa      	ldrh	r2, [r7, #6]
 8007ed2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2221      	movs	r2, #33	@ 0x21
 8007ee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ef4:	d12a      	bne.n	8007f4c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007efe:	d107      	bne.n	8007f10 <HAL_UART_Transmit_IT+0x98>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d103      	bne.n	8007f10 <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4a29      	ldr	r2, [pc, #164]	@ (8007fb0 <HAL_UART_Transmit_IT+0x138>)
 8007f0c:	679a      	str	r2, [r3, #120]	@ 0x78
 8007f0e:	e002      	b.n	8007f16 <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4a28      	ldr	r2, [pc, #160]	@ (8007fb4 <HAL_UART_Transmit_IT+0x13c>)
 8007f14:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3308      	adds	r3, #8
 8007f34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f36:	637a      	str	r2, [r7, #52]	@ 0x34
 8007f38:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e5      	bne.n	8007f16 <HAL_UART_Transmit_IT+0x9e>
 8007f4a:	e028      	b.n	8007f9e <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f54:	d107      	bne.n	8007f66 <HAL_UART_Transmit_IT+0xee>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d103      	bne.n	8007f66 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4a15      	ldr	r2, [pc, #84]	@ (8007fb8 <HAL_UART_Transmit_IT+0x140>)
 8007f62:	679a      	str	r2, [r3, #120]	@ 0x78
 8007f64:	e002      	b.n	8007f6c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	4a14      	ldr	r2, [pc, #80]	@ (8007fbc <HAL_UART_Transmit_IT+0x144>)
 8007f6a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	613b      	str	r3, [r7, #16]
   return(result);
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f8a:	623b      	str	r3, [r7, #32]
 8007f8c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	69f9      	ldr	r1, [r7, #28]
 8007f90:	6a3a      	ldr	r2, [r7, #32]
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e6      	bne.n	8007f6c <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	e000      	b.n	8007fa4 <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 8007fa2:	2302      	movs	r3, #2
  }
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3744      	adds	r7, #68	@ 0x44
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	0800927f 	.word	0x0800927f
 8007fb4:	0800919f 	.word	0x0800919f
 8007fb8:	080090dd 	.word	0x080090dd
 8007fbc:	08009025 	.word	0x08009025

08007fc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08a      	sub	sp, #40	@ 0x28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fd4:	2b20      	cmp	r3, #32
 8007fd6:	d14b      	bne.n	8008070 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <HAL_UART_Receive_IT+0x24>
 8007fde:	88fb      	ldrh	r3, [r7, #6]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e044      	b.n	8008072 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ff8:	2b40      	cmp	r3, #64	@ 0x40
 8007ffa:	d107      	bne.n	800800c <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800800a:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a1a      	ldr	r2, [pc, #104]	@ (800807c <HAL_UART_Receive_IT+0xbc>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d024      	beq.n	8008060 <HAL_UART_Receive_IT+0xa0>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a19      	ldr	r2, [pc, #100]	@ (8008080 <HAL_UART_Receive_IT+0xc0>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d01f      	beq.n	8008060 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d018      	beq.n	8008060 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	613b      	str	r3, [r7, #16]
   return(result);
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008042:	627b      	str	r3, [r7, #36]	@ 0x24
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804c:	623b      	str	r3, [r7, #32]
 800804e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	69f9      	ldr	r1, [r7, #28]
 8008052:	6a3a      	ldr	r2, [r7, #32]
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	61bb      	str	r3, [r7, #24]
   return(result);
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e6      	bne.n	800802e <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008060:	88fb      	ldrh	r3, [r7, #6]
 8008062:	461a      	mov	r2, r3
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 fe3e 	bl	8008ce8 <UART_Start_Receive_IT>
 800806c:	4603      	mov	r3, r0
 800806e:	e000      	b.n	8008072 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8008070:	2302      	movs	r3, #2
  }
}
 8008072:	4618      	mov	r0, r3
 8008074:	3728      	adds	r7, #40	@ 0x28
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	46002400 	.word	0x46002400
 8008080:	56002400 	.word	0x56002400

08008084 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b0ae      	sub	sp, #184	@ 0xb8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80080b2:	4013      	ands	r3, r2
 80080b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 80080b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d11b      	bne.n	80080f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080c4:	f003 0320 	and.w	r3, r3, #32
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d015      	beq.n	80080f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d105      	bne.n	80080e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d009      	beq.n	80080f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 827e 	beq.w	80085ea <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	4798      	blx	r3
      }
      return;
 80080f6:	e278      	b.n	80085ea <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 80fd 	beq.w	80082fc <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008102:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008106:	4b7a      	ldr	r3, [pc, #488]	@ (80082f0 <HAL_UART_IRQHandler+0x26c>)
 8008108:	4013      	ands	r3, r2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d106      	bne.n	800811c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800810e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008112:	4b78      	ldr	r3, [pc, #480]	@ (80082f4 <HAL_UART_IRQHandler+0x270>)
 8008114:	4013      	ands	r3, r2
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 80f0 	beq.w	80082fc <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800811c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d011      	beq.n	800814c <HAL_UART_IRQHandler+0xc8>
 8008128:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800812c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2201      	movs	r2, #1
 800813a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008142:	f043 0201 	orr.w	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800814c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d011      	beq.n	800817c <HAL_UART_IRQHandler+0xf8>
 8008158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00b      	beq.n	800817c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2202      	movs	r2, #2
 800816a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008172:	f043 0204 	orr.w	r2, r3, #4
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800817c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	2b00      	cmp	r3, #0
 8008186:	d011      	beq.n	80081ac <HAL_UART_IRQHandler+0x128>
 8008188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2204      	movs	r2, #4
 800819a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081a2:	f043 0202 	orr.w	r2, r3, #2
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081b0:	f003 0308 	and.w	r3, r3, #8
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d017      	beq.n	80081e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80081bc:	f003 0320 	and.w	r3, r3, #32
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d105      	bne.n	80081d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80081c8:	4b49      	ldr	r3, [pc, #292]	@ (80082f0 <HAL_UART_IRQHandler+0x26c>)
 80081ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00b      	beq.n	80081e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2208      	movs	r2, #8
 80081d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081de:	f043 0208 	orr.w	r2, r3, #8
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d012      	beq.n	800821a <HAL_UART_IRQHandler+0x196>
 80081f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80081f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00c      	beq.n	800821a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008210:	f043 0220 	orr.w	r2, r3, #32
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 81e4 	beq.w	80085ee <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008226:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b00      	cmp	r3, #0
 8008230:	d013      	beq.n	800825a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008232:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d105      	bne.n	800824a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800823e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008260:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800826e:	2b40      	cmp	r3, #64	@ 0x40
 8008270:	d005      	beq.n	800827e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008272:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008276:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800827a:	2b00      	cmp	r3, #0
 800827c:	d02e      	beq.n	80082dc <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fe54 	bl	8008f2c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800828e:	2b40      	cmp	r3, #64	@ 0x40
 8008290:	d120      	bne.n	80082d4 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008298:	2b00      	cmp	r3, #0
 800829a:	d017      	beq.n	80082cc <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a2:	4a15      	ldr	r2, [pc, #84]	@ (80082f8 <HAL_UART_IRQHandler+0x274>)
 80082a4:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fa f9e3 	bl	8002678 <HAL_DMA_Abort_IT>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d019      	beq.n	80082ec <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80082c6:	4610      	mov	r0, r2
 80082c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ca:	e00f      	b.n	80082ec <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f999 	bl	8008604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d2:	e00b      	b.n	80082ec <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f995 	bl	8008604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082da:	e007      	b.n	80082ec <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f991 	bl	8008604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80082ea:	e180      	b.n	80085ee <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ec:	bf00      	nop
    return;
 80082ee:	e17e      	b.n	80085ee <HAL_UART_IRQHandler+0x56a>
 80082f0:	10000001 	.word	0x10000001
 80082f4:	04000120 	.word	0x04000120
 80082f8:	08008ff9 	.word	0x08008ff9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008300:	2b01      	cmp	r3, #1
 8008302:	f040 8129 	bne.w	8008558 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800830a:	f003 0310 	and.w	r3, r3, #16
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 8122 	beq.w	8008558 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008314:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008318:	f003 0310 	and.w	r3, r3, #16
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 811b 	beq.w	8008558 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2210      	movs	r2, #16
 8008328:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008334:	2b40      	cmp	r3, #64	@ 0x40
 8008336:	f040 8091 	bne.w	800845c <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008344:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8008348:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8150 	beq.w	80085f2 <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008358:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800835c:	429a      	cmp	r2, r3
 800835e:	f080 8148 	bcs.w	80085f2 <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8008368:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008374:	2b81      	cmp	r3, #129	@ 0x81
 8008376:	d060      	beq.n	800843a <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008386:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800838c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	461a      	mov	r2, r3
 8008396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800839a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800839e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80083a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80083ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e2      	bne.n	8008378 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3308      	adds	r3, #8
 80083b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80083bc:	e853 3f00 	ldrex	r3, [r3]
 80083c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80083c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083c4:	f023 0301 	bic.w	r3, r3, #1
 80083c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3308      	adds	r3, #8
 80083d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80083d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80083d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80083dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80083de:	e841 2300 	strex	r3, r2, [r1]
 80083e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80083e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1e3      	bne.n	80083b2 <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2220      	movs	r2, #32
 80083ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008400:	e853 3f00 	ldrex	r3, [r3]
 8008404:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008408:	f023 0310 	bic.w	r3, r3, #16
 800840c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	461a      	mov	r2, r3
 8008416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800841a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800841c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008420:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e4      	bne.n	80083f8 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008434:	4618      	mov	r0, r3
 8008436:	f7fa f8a3 	bl	8002580 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2202      	movs	r2, #2
 800843e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800844c:	b29b      	uxth	r3, r3
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	b29b      	uxth	r3, r3
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f8df 	bl	8008618 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800845a:	e0ca      	b.n	80085f2 <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008468:	b29b      	uxth	r3, r3
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008476:	b29b      	uxth	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 80bc 	beq.w	80085f6 <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 800847e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 80b7 	beq.w	80085f6 <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800849c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	461a      	mov	r2, r3
 80084a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80084ac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e4      	bne.n	8008488 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3308      	adds	r3, #8
 80084c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	623b      	str	r3, [r7, #32]
   return(result);
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084d4:	f023 0301 	bic.w	r3, r3, #1
 80084d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3308      	adds	r3, #8
 80084e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80084e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80084e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e1      	bne.n	80084be <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2220      	movs	r2, #32
 80084fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	60fb      	str	r3, [r7, #12]
   return(result);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0310 	bic.w	r3, r3, #16
 8008522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008530:	61fb      	str	r3, [r7, #28]
 8008532:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008534:	69b9      	ldr	r1, [r7, #24]
 8008536:	69fa      	ldr	r2, [r7, #28]
 8008538:	e841 2300 	strex	r3, r2, [r1]
 800853c:	617b      	str	r3, [r7, #20]
   return(result);
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e4      	bne.n	800850e <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800854a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f861 	bl	8008618 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008556:	e04e      	b.n	80085f6 <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800855c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008560:	2b00      	cmp	r3, #0
 8008562:	d014      	beq.n	800858e <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800856c:	2b00      	cmp	r3, #0
 800856e:	d105      	bne.n	800857c <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008574:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d008      	beq.n	800858e <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008580:	2b00      	cmp	r3, #0
 8008582:	d03a      	beq.n	80085fa <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	4798      	blx	r3
    }
    return;
 800858c:	e035      	b.n	80085fa <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800858e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008596:	2b00      	cmp	r3, #0
 8008598:	d009      	beq.n	80085ae <HAL_UART_IRQHandler+0x52a>
 800859a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800859e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fede 	bl	8009368 <UART_EndTransmit_IT>
    return;
 80085ac:	e026      	b.n	80085fc <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80085ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <HAL_UART_IRQHandler+0x54a>
 80085ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80085be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f001 fc3c 	bl	8009e44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085cc:	e016      	b.n	80085fc <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80085ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d010      	beq.n	80085fc <HAL_UART_IRQHandler+0x578>
 80085da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	da0c      	bge.n	80085fc <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f001 fc24 	bl	8009e30 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085e8:	e008      	b.n	80085fc <HAL_UART_IRQHandler+0x578>
      return;
 80085ea:	bf00      	nop
 80085ec:	e006      	b.n	80085fc <HAL_UART_IRQHandler+0x578>
    return;
 80085ee:	bf00      	nop
 80085f0:	e004      	b.n	80085fc <HAL_UART_IRQHandler+0x578>
      return;
 80085f2:	bf00      	nop
 80085f4:	e002      	b.n	80085fc <HAL_UART_IRQHandler+0x578>
      return;
 80085f6:	bf00      	nop
 80085f8:	e000      	b.n	80085fc <HAL_UART_IRQHandler+0x578>
    return;
 80085fa:	bf00      	nop
  }
}
 80085fc:	37b8      	adds	r7, #184	@ 0xb8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop

08008604 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008634:	b094      	sub	sp, #80	@ 0x50
 8008636:	af00      	add	r7, sp, #0
 8008638:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	4b7e      	ldr	r3, [pc, #504]	@ (8008840 <UART_SetConfig+0x210>)
 8008646:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	431a      	orrs	r2, r3
 8008652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	431a      	orrs	r2, r3
 8008658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865a:	69db      	ldr	r3, [r3, #28]
 800865c:	4313      	orrs	r3, r2
 800865e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4977      	ldr	r1, [pc, #476]	@ (8008844 <UART_SetConfig+0x214>)
 8008668:	4019      	ands	r1, r3
 800866a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008670:	430b      	orrs	r3, r1
 8008672:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800867e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008680:	68d9      	ldr	r1, [r3, #12]
 8008682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	ea40 0301 	orr.w	r3, r0, r1
 800868a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800868c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	4b6a      	ldr	r3, [pc, #424]	@ (8008840 <UART_SetConfig+0x210>)
 8008698:	429a      	cmp	r2, r3
 800869a:	d009      	beq.n	80086b0 <UART_SetConfig+0x80>
 800869c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	4b69      	ldr	r3, [pc, #420]	@ (8008848 <UART_SetConfig+0x218>)
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d004      	beq.n	80086b0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a8:	6a1a      	ldr	r2, [r3, #32]
 80086aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086ac:	4313      	orrs	r3, r2
 80086ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80086ba:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80086be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086c4:	430b      	orrs	r3, r1
 80086c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ce:	f023 000f 	bic.w	r0, r3, #15
 80086d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80086d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	ea40 0301 	orr.w	r3, r0, r1
 80086de:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	4b59      	ldr	r3, [pc, #356]	@ (800884c <UART_SetConfig+0x21c>)
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d102      	bne.n	80086f0 <UART_SetConfig+0xc0>
 80086ea:	2301      	movs	r3, #1
 80086ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086ee:	e029      	b.n	8008744 <UART_SetConfig+0x114>
 80086f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	4b56      	ldr	r3, [pc, #344]	@ (8008850 <UART_SetConfig+0x220>)
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d102      	bne.n	8008700 <UART_SetConfig+0xd0>
 80086fa:	2302      	movs	r3, #2
 80086fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086fe:	e021      	b.n	8008744 <UART_SetConfig+0x114>
 8008700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	4b53      	ldr	r3, [pc, #332]	@ (8008854 <UART_SetConfig+0x224>)
 8008706:	429a      	cmp	r2, r3
 8008708:	d102      	bne.n	8008710 <UART_SetConfig+0xe0>
 800870a:	2304      	movs	r3, #4
 800870c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800870e:	e019      	b.n	8008744 <UART_SetConfig+0x114>
 8008710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	4b50      	ldr	r3, [pc, #320]	@ (8008858 <UART_SetConfig+0x228>)
 8008716:	429a      	cmp	r2, r3
 8008718:	d102      	bne.n	8008720 <UART_SetConfig+0xf0>
 800871a:	2308      	movs	r3, #8
 800871c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800871e:	e011      	b.n	8008744 <UART_SetConfig+0x114>
 8008720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	4b4d      	ldr	r3, [pc, #308]	@ (800885c <UART_SetConfig+0x22c>)
 8008726:	429a      	cmp	r2, r3
 8008728:	d102      	bne.n	8008730 <UART_SetConfig+0x100>
 800872a:	2310      	movs	r3, #16
 800872c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800872e:	e009      	b.n	8008744 <UART_SetConfig+0x114>
 8008730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	4b42      	ldr	r3, [pc, #264]	@ (8008840 <UART_SetConfig+0x210>)
 8008736:	429a      	cmp	r2, r3
 8008738:	d102      	bne.n	8008740 <UART_SetConfig+0x110>
 800873a:	2320      	movs	r3, #32
 800873c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800873e:	e001      	b.n	8008744 <UART_SetConfig+0x114>
 8008740:	2300      	movs	r3, #0
 8008742:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	4b3d      	ldr	r3, [pc, #244]	@ (8008840 <UART_SetConfig+0x210>)
 800874a:	429a      	cmp	r2, r3
 800874c:	d005      	beq.n	800875a <UART_SetConfig+0x12a>
 800874e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4b3d      	ldr	r3, [pc, #244]	@ (8008848 <UART_SetConfig+0x218>)
 8008754:	429a      	cmp	r2, r3
 8008756:	f040 8085 	bne.w	8008864 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800875a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800875c:	2200      	movs	r2, #0
 800875e:	623b      	str	r3, [r7, #32]
 8008760:	627a      	str	r2, [r7, #36]	@ 0x24
 8008762:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008766:	f7fd ffb3 	bl	80066d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800876a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800876c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800876e:	2b00      	cmp	r3, #0
 8008770:	f000 80e8 	beq.w	8008944 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008778:	4a39      	ldr	r2, [pc, #228]	@ (8008860 <UART_SetConfig+0x230>)
 800877a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800877e:	461a      	mov	r2, r3
 8008780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008782:	fbb3 f3f2 	udiv	r3, r3, r2
 8008786:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	4613      	mov	r3, r2
 800878e:	005b      	lsls	r3, r3, #1
 8008790:	4413      	add	r3, r2
 8008792:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008794:	429a      	cmp	r2, r3
 8008796:	d305      	bcc.n	80087a4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800879e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d903      	bls.n	80087ac <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80087aa:	e048      	b.n	800883e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087ae:	2200      	movs	r2, #0
 80087b0:	61bb      	str	r3, [r7, #24]
 80087b2:	61fa      	str	r2, [r7, #28]
 80087b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b8:	4a29      	ldr	r2, [pc, #164]	@ (8008860 <UART_SetConfig+0x230>)
 80087ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	2200      	movs	r2, #0
 80087c2:	613b      	str	r3, [r7, #16]
 80087c4:	617a      	str	r2, [r7, #20]
 80087c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80087ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80087ce:	f7f7 fd5b 	bl	8000288 <__aeabi_uldivmod>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4610      	mov	r0, r2
 80087d8:	4619      	mov	r1, r3
 80087da:	f04f 0200 	mov.w	r2, #0
 80087de:	f04f 0300 	mov.w	r3, #0
 80087e2:	020b      	lsls	r3, r1, #8
 80087e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80087e8:	0202      	lsls	r2, r0, #8
 80087ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087ec:	6849      	ldr	r1, [r1, #4]
 80087ee:	0849      	lsrs	r1, r1, #1
 80087f0:	2000      	movs	r0, #0
 80087f2:	460c      	mov	r4, r1
 80087f4:	4605      	mov	r5, r0
 80087f6:	eb12 0804 	adds.w	r8, r2, r4
 80087fa:	eb43 0905 	adc.w	r9, r3, r5
 80087fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	60bb      	str	r3, [r7, #8]
 8008806:	60fa      	str	r2, [r7, #12]
 8008808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800880c:	4640      	mov	r0, r8
 800880e:	4649      	mov	r1, r9
 8008810:	f7f7 fd3a 	bl	8000288 <__aeabi_uldivmod>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4613      	mov	r3, r2
 800881a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800881c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800881e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008822:	d308      	bcc.n	8008836 <UART_SetConfig+0x206>
 8008824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800882a:	d204      	bcs.n	8008836 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800882c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008832:	60da      	str	r2, [r3, #12]
 8008834:	e003      	b.n	800883e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800883c:	e082      	b.n	8008944 <UART_SetConfig+0x314>
 800883e:	e081      	b.n	8008944 <UART_SetConfig+0x314>
 8008840:	46002400 	.word	0x46002400
 8008844:	cfff69f3 	.word	0xcfff69f3
 8008848:	56002400 	.word	0x56002400
 800884c:	40013800 	.word	0x40013800
 8008850:	40004400 	.word	0x40004400
 8008854:	40004800 	.word	0x40004800
 8008858:	40004c00 	.word	0x40004c00
 800885c:	40005000 	.word	0x40005000
 8008860:	0800ba54 	.word	0x0800ba54
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800886c:	d13c      	bne.n	80088e8 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800886e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008870:	2200      	movs	r2, #0
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	607a      	str	r2, [r7, #4]
 8008876:	e9d7 0100 	ldrd	r0, r1, [r7]
 800887a:	f7fd ff29 	bl	80066d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800887e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008882:	2b00      	cmp	r3, #0
 8008884:	d05e      	beq.n	8008944 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800888a:	4a39      	ldr	r2, [pc, #228]	@ (8008970 <UART_SetConfig+0x340>)
 800888c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008890:	461a      	mov	r2, r3
 8008892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008894:	fbb3 f3f2 	udiv	r3, r3, r2
 8008898:	005a      	lsls	r2, r3, #1
 800889a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	085b      	lsrs	r3, r3, #1
 80088a0:	441a      	add	r2, r3
 80088a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ae:	2b0f      	cmp	r3, #15
 80088b0:	d916      	bls.n	80088e0 <UART_SetConfig+0x2b0>
 80088b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088b8:	d212      	bcs.n	80088e0 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088bc:	b29b      	uxth	r3, r3
 80088be:	f023 030f 	bic.w	r3, r3, #15
 80088c2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088c6:	085b      	lsrs	r3, r3, #1
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	f003 0307 	and.w	r3, r3, #7
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80088d2:	4313      	orrs	r3, r2
 80088d4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80088d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80088dc:	60da      	str	r2, [r3, #12]
 80088de:	e031      	b.n	8008944 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80088e6:	e02d      	b.n	8008944 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80088e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088ea:	2200      	movs	r2, #0
 80088ec:	469a      	mov	sl, r3
 80088ee:	4693      	mov	fp, r2
 80088f0:	4650      	mov	r0, sl
 80088f2:	4659      	mov	r1, fp
 80088f4:	f7fd feec 	bl	80066d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80088f8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80088fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d021      	beq.n	8008944 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008904:	4a1a      	ldr	r2, [pc, #104]	@ (8008970 <UART_SetConfig+0x340>)
 8008906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800890a:	461a      	mov	r2, r3
 800890c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800890e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	085b      	lsrs	r3, r3, #1
 8008918:	441a      	add	r2, r3
 800891a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008922:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008926:	2b0f      	cmp	r3, #15
 8008928:	d909      	bls.n	800893e <UART_SetConfig+0x30e>
 800892a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800892c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008930:	d205      	bcs.n	800893e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008934:	b29a      	uxth	r2, r3
 8008936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	60da      	str	r2, [r3, #12]
 800893c:	e002      	b.n	8008944 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008946:	2201      	movs	r2, #1
 8008948:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800894c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894e:	2201      	movs	r2, #1
 8008950:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008956:	2200      	movs	r2, #0
 8008958:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800895a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895c:	2200      	movs	r2, #0
 800895e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008960:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008964:	4618      	mov	r0, r3
 8008966:	3750      	adds	r7, #80	@ 0x50
 8008968:	46bd      	mov	sp, r7
 800896a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800896e:	bf00      	nop
 8008970:	0800ba54 	.word	0x0800ba54

08008974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008980:	f003 0308 	and.w	r3, r3, #8
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00a      	beq.n	800899e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c4:	f003 0302 	and.w	r3, r3, #2
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00a      	beq.n	80089e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e6:	f003 0304 	and.w	r3, r3, #4
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a08:	f003 0310 	and.w	r3, r3, #16
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00a      	beq.n	8008a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2a:	f003 0320 	and.w	r3, r3, #32
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00a      	beq.n	8008a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	430a      	orrs	r2, r1
 8008a46:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d01a      	beq.n	8008a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a72:	d10a      	bne.n	8008a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	605a      	str	r2, [r3, #4]
  }
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b098      	sub	sp, #96	@ 0x60
 8008abc:	af02      	add	r7, sp, #8
 8008abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ac8:	f7f8 ffce 	bl	8001a68 <HAL_GetTick>
 8008acc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0308 	and.w	r3, r3, #8
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	d12f      	bne.n	8008b3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008adc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f88e 	bl	8008c0c <UART_WaitOnFlagUntilTimeout>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d022      	beq.n	8008b3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	461a      	mov	r2, r3
 8008b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b1c:	e841 2300 	strex	r3, r2, [r1]
 8008b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1e6      	bne.n	8008af6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e063      	b.n	8008c04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0304 	and.w	r3, r3, #4
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d149      	bne.n	8008bde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b52:	2200      	movs	r2, #0
 8008b54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f857 	bl	8008c0c <UART_WaitOnFlagUntilTimeout>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d03c      	beq.n	8008bde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	623b      	str	r3, [r7, #32]
   return(result);
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b82:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e6      	bne.n	8008b64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3308      	adds	r3, #8
 8008b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f023 0301 	bic.w	r3, r3, #1
 8008bac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bb6:	61fa      	str	r2, [r7, #28]
 8008bb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	69b9      	ldr	r1, [r7, #24]
 8008bbc:	69fa      	ldr	r2, [r7, #28]
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	617b      	str	r3, [r7, #20]
   return(result);
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e5      	bne.n	8008b96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e012      	b.n	8008c04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3758      	adds	r7, #88	@ 0x58
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c1c:	e04f      	b.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c24:	d04b      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c26:	f7f8 ff1f 	bl	8001a68 <HAL_GetTick>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d302      	bcc.n	8008c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e04e      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d037      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2b80      	cmp	r3, #128	@ 0x80
 8008c52:	d034      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b40      	cmp	r3, #64	@ 0x40
 8008c58:	d031      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	f003 0308 	and.w	r3, r3, #8
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	d110      	bne.n	8008c8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2208      	movs	r2, #8
 8008c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 f95b 	bl	8008f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2208      	movs	r2, #8
 8008c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e029      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c98:	d111      	bne.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 f941 	bl	8008f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e00f      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69da      	ldr	r2, [r3, #28]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	bf0c      	ite	eq
 8008cce:	2301      	moveq	r3, #1
 8008cd0:	2300      	movne	r3, #0
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d0a0      	beq.n	8008c1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b0a3      	sub	sp, #140	@ 0x8c
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	88fa      	ldrh	r2, [r7, #6]
 8008d00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	88fa      	ldrh	r2, [r7, #6]
 8008d08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d1a:	d10e      	bne.n	8008d3a <UART_Start_Receive_IT+0x52>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d105      	bne.n	8008d30 <UART_Start_Receive_IT+0x48>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008d2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d2e:	e02d      	b.n	8008d8c <UART_Start_Receive_IT+0xa4>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	22ff      	movs	r2, #255	@ 0xff
 8008d34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d38:	e028      	b.n	8008d8c <UART_Start_Receive_IT+0xa4>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10d      	bne.n	8008d5e <UART_Start_Receive_IT+0x76>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d104      	bne.n	8008d54 <UART_Start_Receive_IT+0x6c>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	22ff      	movs	r2, #255	@ 0xff
 8008d4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d52:	e01b      	b.n	8008d8c <UART_Start_Receive_IT+0xa4>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	227f      	movs	r2, #127	@ 0x7f
 8008d58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d5c:	e016      	b.n	8008d8c <UART_Start_Receive_IT+0xa4>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d66:	d10d      	bne.n	8008d84 <UART_Start_Receive_IT+0x9c>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <UART_Start_Receive_IT+0x92>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	227f      	movs	r2, #127	@ 0x7f
 8008d74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d78:	e008      	b.n	8008d8c <UART_Start_Receive_IT+0xa4>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	223f      	movs	r2, #63	@ 0x3f
 8008d7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d82:	e003      	b.n	8008d8c <UART_Start_Receive_IT+0xa4>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2222      	movs	r2, #34	@ 0x22
 8008d98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3308      	adds	r3, #8
 8008da2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008da6:	e853 3f00 	ldrex	r3, [r3]
 8008daa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008dac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dae:	f043 0301 	orr.w	r3, r3, #1
 8008db2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3308      	adds	r3, #8
 8008dbc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008dc0:	673a      	str	r2, [r7, #112]	@ 0x70
 8008dc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008dc6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008dce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e3      	bne.n	8008d9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ddc:	d14f      	bne.n	8008e7e <UART_Start_Receive_IT+0x196>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008de4:	88fa      	ldrh	r2, [r7, #6]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d349      	bcc.n	8008e7e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008df2:	d107      	bne.n	8008e04 <UART_Start_Receive_IT+0x11c>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d103      	bne.n	8008e04 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4a47      	ldr	r2, [pc, #284]	@ (8008f1c <UART_Start_Receive_IT+0x234>)
 8008e00:	675a      	str	r2, [r3, #116]	@ 0x74
 8008e02:	e002      	b.n	8008e0a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4a46      	ldr	r2, [pc, #280]	@ (8008f20 <UART_Start_Receive_IT+0x238>)
 8008e08:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d01a      	beq.n	8008e48 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e1a:	e853 3f00 	ldrex	r3, [r3]
 8008e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e36:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e38:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008e3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e3c:	e841 2300 	strex	r3, r2, [r1]
 8008e40:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1e4      	bne.n	8008e12 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3308      	adds	r3, #8
 8008e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e52:	e853 3f00 	ldrex	r3, [r3]
 8008e56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3308      	adds	r3, #8
 8008e66:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008e68:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008e6a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e70:	e841 2300 	strex	r3, r2, [r1]
 8008e74:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1e5      	bne.n	8008e48 <UART_Start_Receive_IT+0x160>
 8008e7c:	e046      	b.n	8008f0c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e86:	d107      	bne.n	8008e98 <UART_Start_Receive_IT+0x1b0>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d103      	bne.n	8008e98 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4a24      	ldr	r2, [pc, #144]	@ (8008f24 <UART_Start_Receive_IT+0x23c>)
 8008e94:	675a      	str	r2, [r3, #116]	@ 0x74
 8008e96:	e002      	b.n	8008e9e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4a23      	ldr	r2, [pc, #140]	@ (8008f28 <UART_Start_Receive_IT+0x240>)
 8008e9c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d019      	beq.n	8008eda <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008eba:	677b      	str	r3, [r7, #116]	@ 0x74
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ec6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008eca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e6      	bne.n	8008ea6 <UART_Start_Receive_IT+0x1be>
 8008ed8:	e018      	b.n	8008f0c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	e853 3f00 	ldrex	r3, [r3]
 8008ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f043 0320 	orr.w	r3, r3, #32
 8008eee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ef8:	623b      	str	r3, [r7, #32]
 8008efa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efc:	69f9      	ldr	r1, [r7, #28]
 8008efe:	6a3a      	ldr	r2, [r7, #32]
 8008f00:	e841 2300 	strex	r3, r2, [r1]
 8008f04:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1e6      	bne.n	8008eda <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	378c      	adds	r7, #140	@ 0x8c
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	08009ab9 	.word	0x08009ab9
 8008f20:	08009749 	.word	0x08009749
 8008f24:	08009585 	.word	0x08009585
 8008f28:	080093c1 	.word	0x080093c1

08008f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b095      	sub	sp, #84	@ 0x54
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f3c:	e853 3f00 	ldrex	r3, [r3]
 8008f40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f52:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1e6      	bne.n	8008f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3308      	adds	r3, #8
 8008f6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f7c:	f023 0301 	bic.w	r3, r3, #1
 8008f80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3308      	adds	r3, #8
 8008f88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f92:	e841 2300 	strex	r3, r2, [r1]
 8008f96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1e3      	bne.n	8008f66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d118      	bne.n	8008fd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	e853 3f00 	ldrex	r3, [r3]
 8008fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f023 0310 	bic.w	r3, r3, #16
 8008fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fc4:	61bb      	str	r3, [r7, #24]
 8008fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc8:	6979      	ldr	r1, [r7, #20]
 8008fca:	69ba      	ldr	r2, [r7, #24]
 8008fcc:	e841 2300 	strex	r3, r2, [r1]
 8008fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1e6      	bne.n	8008fa6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2220      	movs	r2, #32
 8008fdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008fec:	bf00      	nop
 8008fee:	3754      	adds	r7, #84	@ 0x54
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f7ff faf4 	bl	8008604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800901c:	bf00      	nop
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009024:	b480      	push	{r7}
 8009026:	b08f      	sub	sp, #60	@ 0x3c
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009032:	2b21      	cmp	r3, #33	@ 0x21
 8009034:	d14c      	bne.n	80090d0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800903c:	b29b      	uxth	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d132      	bne.n	80090a8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	e853 3f00 	ldrex	r3, [r3]
 800904e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009056:	637b      	str	r3, [r7, #52]	@ 0x34
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	461a      	mov	r2, r3
 800905e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009062:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009068:	e841 2300 	strex	r3, r2, [r1]
 800906c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1e6      	bne.n	8009042 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	60bb      	str	r3, [r7, #8]
   return(result);
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009088:	633b      	str	r3, [r7, #48]	@ 0x30
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009092:	61bb      	str	r3, [r7, #24]
 8009094:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009096:	6979      	ldr	r1, [r7, #20]
 8009098:	69ba      	ldr	r2, [r7, #24]
 800909a:	e841 2300 	strex	r3, r2, [r1]
 800909e:	613b      	str	r3, [r7, #16]
   return(result);
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1e6      	bne.n	8009074 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80090a6:	e013      	b.n	80090d0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ac:	781a      	ldrb	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	3b01      	subs	r3, #1
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80090d0:	bf00      	nop
 80090d2:	373c      	adds	r7, #60	@ 0x3c
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80090dc:	b480      	push	{r7}
 80090de:	b091      	sub	sp, #68	@ 0x44
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ea:	2b21      	cmp	r3, #33	@ 0x21
 80090ec:	d151      	bne.n	8009192 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d132      	bne.n	8009160 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	623b      	str	r3, [r7, #32]
   return(result);
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800910e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	461a      	mov	r2, r3
 8009116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009118:	633b      	str	r3, [r7, #48]	@ 0x30
 800911a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800911e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e6      	bne.n	80090fa <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	60fb      	str	r3, [r7, #12]
   return(result);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009140:	637b      	str	r3, [r7, #52]	@ 0x34
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	461a      	mov	r2, r3
 8009148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800914a:	61fb      	str	r3, [r7, #28]
 800914c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	69b9      	ldr	r1, [r7, #24]
 8009150:	69fa      	ldr	r2, [r7, #28]
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	617b      	str	r3, [r7, #20]
   return(result);
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e6      	bne.n	800912c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800915e:	e018      	b.n	8009192 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009164:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009174:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800917a:	1c9a      	adds	r2, r3, #2
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009186:	b29b      	uxth	r3, r3
 8009188:	3b01      	subs	r3, #1
 800918a:	b29a      	uxth	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009192:	bf00      	nop
 8009194:	3744      	adds	r7, #68	@ 0x44
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800919e:	b480      	push	{r7}
 80091a0:	b091      	sub	sp, #68	@ 0x44
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ac:	2b21      	cmp	r3, #33	@ 0x21
 80091ae:	d160      	bne.n	8009272 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80091b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80091b8:	e057      	b.n	800926a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d133      	bne.n	800922e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3308      	adds	r3, #8
 80091cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d0:	e853 3f00 	ldrex	r3, [r3]
 80091d4:	623b      	str	r3, [r7, #32]
   return(result);
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80091dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	3308      	adds	r3, #8
 80091e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80091e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e5      	bne.n	80091c6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	e853 3f00 	ldrex	r3, [r3]
 8009206:	60fb      	str	r3, [r7, #12]
   return(result);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800920e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	461a      	mov	r2, r3
 8009216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009218:	61fb      	str	r3, [r7, #28]
 800921a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921c:	69b9      	ldr	r1, [r7, #24]
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	e841 2300 	strex	r3, r2, [r1]
 8009224:	617b      	str	r3, [r7, #20]
   return(result);
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1e6      	bne.n	80091fa <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800922c:	e021      	b.n	8009272 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	69db      	ldr	r3, [r3, #28]
 8009234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009238:	2b00      	cmp	r3, #0
 800923a:	d013      	beq.n	8009264 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009258:	b29b      	uxth	r3, r3
 800925a:	3b01      	subs	r3, #1
 800925c:	b29a      	uxth	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009264:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009266:	3b01      	subs	r3, #1
 8009268:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800926a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1a4      	bne.n	80091ba <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009270:	e7ff      	b.n	8009272 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009272:	bf00      	nop
 8009274:	3744      	adds	r7, #68	@ 0x44
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800927e:	b480      	push	{r7}
 8009280:	b091      	sub	sp, #68	@ 0x44
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800928c:	2b21      	cmp	r3, #33	@ 0x21
 800928e:	d165      	bne.n	800935c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009296:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009298:	e05c      	b.n	8009354 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d133      	bne.n	800930e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	3308      	adds	r3, #8
 80092ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ae:	6a3b      	ldr	r3, [r7, #32]
 80092b0:	e853 3f00 	ldrex	r3, [r3]
 80092b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80092bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3308      	adds	r3, #8
 80092c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092ce:	e841 2300 	strex	r3, r2, [r1]
 80092d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1e5      	bne.n	80092a6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	e853 3f00 	ldrex	r3, [r3]
 80092e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	461a      	mov	r2, r3
 80092f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f8:	61bb      	str	r3, [r7, #24]
 80092fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fc:	6979      	ldr	r1, [r7, #20]
 80092fe:	69ba      	ldr	r2, [r7, #24]
 8009300:	e841 2300 	strex	r3, r2, [r1]
 8009304:	613b      	str	r3, [r7, #16]
   return(result);
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1e6      	bne.n	80092da <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800930c:	e026      	b.n	800935c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	69db      	ldr	r3, [r3, #28]
 8009314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009318:	2b00      	cmp	r3, #0
 800931a:	d018      	beq.n	800934e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009320:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009324:	881b      	ldrh	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009330:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009336:	1c9a      	adds	r2, r3, #2
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009342:	b29b      	uxth	r3, r3
 8009344:	3b01      	subs	r3, #1
 8009346:	b29a      	uxth	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800934e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009350:	3b01      	subs	r3, #1
 8009352:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009354:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009356:	2b00      	cmp	r3, #0
 8009358:	d19f      	bne.n	800929a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800935a:	e7ff      	b.n	800935c <UART_TxISR_16BIT_FIFOEN+0xde>
 800935c:	bf00      	nop
 800935e:	3744      	adds	r7, #68	@ 0x44
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	60bb      	str	r3, [r7, #8]
   return(result);
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009384:	61fb      	str	r3, [r7, #28]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	61bb      	str	r3, [r7, #24]
 8009390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6979      	ldr	r1, [r7, #20]
 8009394:	69ba      	ldr	r2, [r7, #24]
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	613b      	str	r3, [r7, #16]
   return(result);
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e6      	bne.n	8009370 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7f7 fcdb 	bl	8000d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093b6:	bf00      	nop
 80093b8:	3720      	adds	r7, #32
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
	...

080093c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b09c      	sub	sp, #112	@ 0x70
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80093ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093d8:	2b22      	cmp	r3, #34	@ 0x22
 80093da:	f040 80c3 	bne.w	8009564 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80093e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80093ec:	b2d9      	uxtb	r1, r3
 80093ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093f8:	400a      	ands	r2, r1
 80093fa:	b2d2      	uxtb	r2, r2
 80093fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009402:	1c5a      	adds	r2, r3, #1
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800940e:	b29b      	uxth	r3, r3
 8009410:	3b01      	subs	r3, #1
 8009412:	b29a      	uxth	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009420:	b29b      	uxth	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	f040 80a6 	bne.w	8009574 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009430:	e853 3f00 	ldrex	r3, [r3]
 8009434:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009436:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009438:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800943c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009446:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009448:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800944c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009454:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e6      	bne.n	8009428 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3308      	adds	r3, #8
 8009460:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009464:	e853 3f00 	ldrex	r3, [r3]
 8009468:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800946a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800946c:	f023 0301 	bic.w	r3, r3, #1
 8009470:	667b      	str	r3, [r7, #100]	@ 0x64
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3308      	adds	r3, #8
 8009478:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800947a:	647a      	str	r2, [r7, #68]	@ 0x44
 800947c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009480:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009482:	e841 2300 	strex	r3, r2, [r1]
 8009486:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1e5      	bne.n	800945a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2220      	movs	r2, #32
 8009492:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a35      	ldr	r2, [pc, #212]	@ (800957c <UART_RxISR_8BIT+0x1bc>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d024      	beq.n	80094f6 <UART_RxISR_8BIT+0x136>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a33      	ldr	r2, [pc, #204]	@ (8009580 <UART_RxISR_8BIT+0x1c0>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d01f      	beq.n	80094f6 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d018      	beq.n	80094f6 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094cc:	e853 3f00 	ldrex	r3, [r3]
 80094d0:	623b      	str	r3, [r7, #32]
   return(result);
 80094d2:	6a3b      	ldr	r3, [r7, #32]
 80094d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80094d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80094e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094ea:	e841 2300 	strex	r3, r2, [r1]
 80094ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e6      	bne.n	80094c4 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d12e      	bne.n	800955c <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	e853 3f00 	ldrex	r3, [r3]
 8009510:	60fb      	str	r3, [r7, #12]
   return(result);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f023 0310 	bic.w	r3, r3, #16
 8009518:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009522:	61fb      	str	r3, [r7, #28]
 8009524:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	69b9      	ldr	r1, [r7, #24]
 8009528:	69fa      	ldr	r2, [r7, #28]
 800952a:	e841 2300 	strex	r3, r2, [r1]
 800952e:	617b      	str	r3, [r7, #20]
   return(result);
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1e6      	bne.n	8009504 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	f003 0310 	and.w	r3, r3, #16
 8009540:	2b10      	cmp	r3, #16
 8009542:	d103      	bne.n	800954c <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2210      	movs	r2, #16
 800954a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7ff f85f 	bl	8008618 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800955a:	e00b      	b.n	8009574 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f7f7 fb63 	bl	8000c28 <HAL_UART_RxCpltCallback>
}
 8009562:	e007      	b.n	8009574 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	699a      	ldr	r2, [r3, #24]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f042 0208 	orr.w	r2, r2, #8
 8009572:	619a      	str	r2, [r3, #24]
}
 8009574:	bf00      	nop
 8009576:	3770      	adds	r7, #112	@ 0x70
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	46002400 	.word	0x46002400
 8009580:	56002400 	.word	0x56002400

08009584 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b09c      	sub	sp, #112	@ 0x70
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009592:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800959c:	2b22      	cmp	r3, #34	@ 0x22
 800959e:	f040 80c3 	bne.w	8009728 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80095b2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80095b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80095ba:	4013      	ands	r3, r2
 80095bc:	b29a      	uxth	r2, r3
 80095be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80095c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095c6:	1c9a      	adds	r2, r3, #2
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	3b01      	subs	r3, #1
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f040 80a6 	bne.w	8009738 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80095fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009600:	667b      	str	r3, [r7, #100]	@ 0x64
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	461a      	mov	r2, r3
 8009608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800960a:	657b      	str	r3, [r7, #84]	@ 0x54
 800960c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009610:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009612:	e841 2300 	strex	r3, r2, [r1]
 8009616:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e6      	bne.n	80095ec <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3308      	adds	r3, #8
 8009624:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800962e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009630:	f023 0301 	bic.w	r3, r3, #1
 8009634:	663b      	str	r3, [r7, #96]	@ 0x60
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3308      	adds	r3, #8
 800963c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800963e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009640:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009642:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009644:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009646:	e841 2300 	strex	r3, r2, [r1]
 800964a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800964c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1e5      	bne.n	800961e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2220      	movs	r2, #32
 8009656:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a35      	ldr	r2, [pc, #212]	@ (8009740 <UART_RxISR_16BIT+0x1bc>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d024      	beq.n	80096ba <UART_RxISR_16BIT+0x136>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a33      	ldr	r2, [pc, #204]	@ (8009744 <UART_RxISR_16BIT+0x1c0>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d01f      	beq.n	80096ba <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d018      	beq.n	80096ba <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968e:	6a3b      	ldr	r3, [r7, #32]
 8009690:	e853 3f00 	ldrex	r3, [r3]
 8009694:	61fb      	str	r3, [r7, #28]
   return(result);
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800969c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096a8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1e6      	bne.n	8009688 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d12e      	bne.n	8009720 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	e853 3f00 	ldrex	r3, [r3]
 80096d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	f023 0310 	bic.w	r3, r3, #16
 80096dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096e6:	61bb      	str	r3, [r7, #24]
 80096e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ea:	6979      	ldr	r1, [r7, #20]
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	e841 2300 	strex	r3, r2, [r1]
 80096f2:	613b      	str	r3, [r7, #16]
   return(result);
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1e6      	bne.n	80096c8 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	69db      	ldr	r3, [r3, #28]
 8009700:	f003 0310 	and.w	r3, r3, #16
 8009704:	2b10      	cmp	r3, #16
 8009706:	d103      	bne.n	8009710 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2210      	movs	r2, #16
 800970e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7fe ff7d 	bl	8008618 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800971e:	e00b      	b.n	8009738 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7f7 fa81 	bl	8000c28 <HAL_UART_RxCpltCallback>
}
 8009726:	e007      	b.n	8009738 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	699a      	ldr	r2, [r3, #24]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 0208 	orr.w	r2, r2, #8
 8009736:	619a      	str	r2, [r3, #24]
}
 8009738:	bf00      	nop
 800973a:	3770      	adds	r7, #112	@ 0x70
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	46002400 	.word	0x46002400
 8009744:	56002400 	.word	0x56002400

08009748 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b0ac      	sub	sp, #176	@ 0xb0
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009756:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	69db      	ldr	r3, [r3, #28]
 8009760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800977e:	2b22      	cmp	r3, #34	@ 0x22
 8009780:	f040 8187 	bne.w	8009a92 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800978a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800978e:	e12a      	b.n	80099e6 <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009796:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800979a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800979e:	b2d9      	uxtb	r1, r3
 80097a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097aa:	400a      	ands	r2, r1
 80097ac:	b2d2      	uxtb	r2, r2
 80097ae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097b4:	1c5a      	adds	r2, r3, #1
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	3b01      	subs	r3, #1
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80097d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097da:	f003 0307 	and.w	r3, r3, #7
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d053      	beq.n	800988a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d011      	beq.n	8009812 <UART_RxISR_8BIT_FIFOEN+0xca>
 80097ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80097f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00b      	beq.n	8009812 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2201      	movs	r2, #1
 8009800:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009808:	f043 0201 	orr.w	r2, r3, #1
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	2b00      	cmp	r3, #0
 800981c:	d011      	beq.n	8009842 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800981e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00b      	beq.n	8009842 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2202      	movs	r2, #2
 8009830:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009838:	f043 0204 	orr.w	r2, r3, #4
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009846:	f003 0304 	and.w	r3, r3, #4
 800984a:	2b00      	cmp	r3, #0
 800984c:	d011      	beq.n	8009872 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800984e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00b      	beq.n	8009872 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2204      	movs	r2, #4
 8009860:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009868:	f043 0202 	orr.w	r2, r3, #2
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009878:	2b00      	cmp	r3, #0
 800987a:	d006      	beq.n	800988a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f7fe fec1 	bl	8008604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009890:	b29b      	uxth	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	f040 80a7 	bne.w	80099e6 <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098a0:	e853 3f00 	ldrex	r3, [r3]
 80098a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80098a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	461a      	mov	r2, r3
 80098b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80098bc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80098c0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80098c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e4      	bne.n	8009898 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3308      	adds	r3, #8
 80098d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80098de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098e4:	f023 0301 	bic.w	r3, r3, #1
 80098e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3308      	adds	r3, #8
 80098f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80098f6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80098f8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80098fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80098fe:	e841 2300 	strex	r3, r2, [r1]
 8009902:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009904:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1e1      	bne.n	80098ce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2220      	movs	r2, #32
 800990e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a62      	ldr	r2, [pc, #392]	@ (8009aac <UART_RxISR_8BIT_FIFOEN+0x364>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d026      	beq.n	8009976 <UART_RxISR_8BIT_FIFOEN+0x22e>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a60      	ldr	r2, [pc, #384]	@ (8009ab0 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d021      	beq.n	8009976 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01a      	beq.n	8009976 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800994e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009950:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009954:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	461a      	mov	r2, r3
 800995e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009962:	657b      	str	r3, [r7, #84]	@ 0x54
 8009964:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009968:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e4      	bne.n	8009940 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800997a:	2b01      	cmp	r3, #1
 800997c:	d130      	bne.n	80099e0 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800998c:	e853 3f00 	ldrex	r3, [r3]
 8009990:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009994:	f023 0310 	bic.w	r3, r3, #16
 8009998:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	461a      	mov	r2, r3
 80099a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80099a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099ae:	e841 2300 	strex	r3, r2, [r1]
 80099b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1e4      	bne.n	8009984 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	69db      	ldr	r3, [r3, #28]
 80099c0:	f003 0310 	and.w	r3, r3, #16
 80099c4:	2b10      	cmp	r3, #16
 80099c6:	d103      	bne.n	80099d0 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2210      	movs	r2, #16
 80099ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099d6:	4619      	mov	r1, r3
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7fe fe1d 	bl	8008618 <HAL_UARTEx_RxEventCallback>
 80099de:	e002      	b.n	80099e6 <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f7f7 f921 	bl	8000c28 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80099e6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d006      	beq.n	80099fc <UART_RxISR_8BIT_FIFOEN+0x2b4>
 80099ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099f2:	f003 0320 	and.w	r3, r3, #32
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f47f aeca 	bne.w	8009790 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a02:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a06:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d049      	beq.n	8009aa2 <UART_RxISR_8BIT_FIFOEN+0x35a>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a14:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d242      	bcs.n	8009aa2 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3308      	adds	r3, #8
 8009a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	e853 3f00 	ldrex	r3, [r3]
 8009a2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	3308      	adds	r3, #8
 8009a3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009a40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a48:	e841 2300 	strex	r3, r2, [r1]
 8009a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e3      	bne.n	8009a1c <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a17      	ldr	r2, [pc, #92]	@ (8009ab4 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8009a58:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	e853 3f00 	ldrex	r3, [r3]
 8009a66:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	f043 0320 	orr.w	r3, r3, #32
 8009a6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009a7c:	61bb      	str	r3, [r7, #24]
 8009a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	6979      	ldr	r1, [r7, #20]
 8009a82:	69ba      	ldr	r2, [r7, #24]
 8009a84:	e841 2300 	strex	r3, r2, [r1]
 8009a88:	613b      	str	r3, [r7, #16]
   return(result);
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1e4      	bne.n	8009a5a <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a90:	e007      	b.n	8009aa2 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	699a      	ldr	r2, [r3, #24]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f042 0208 	orr.w	r2, r2, #8
 8009aa0:	619a      	str	r2, [r3, #24]
}
 8009aa2:	bf00      	nop
 8009aa4:	37b0      	adds	r7, #176	@ 0xb0
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	46002400 	.word	0x46002400
 8009ab0:	56002400 	.word	0x56002400
 8009ab4:	080093c1 	.word	0x080093c1

08009ab8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b0ae      	sub	sp, #184	@ 0xb8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ac6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	69db      	ldr	r3, [r3, #28]
 8009ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009aee:	2b22      	cmp	r3, #34	@ 0x22
 8009af0:	f040 818b 	bne.w	8009e0a <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009afa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009afe:	e12e      	b.n	8009d5e <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b06:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009b12:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009b16:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b28:	1c9a      	adds	r2, r3, #2
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	3b01      	subs	r3, #1
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	69db      	ldr	r3, [r3, #28]
 8009b46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009b4e:	f003 0307 	and.w	r3, r3, #7
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d053      	beq.n	8009bfe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d011      	beq.n	8009b86 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00b      	beq.n	8009b86 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2201      	movs	r2, #1
 8009b74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b7c:	f043 0201 	orr.w	r2, r3, #1
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009b8a:	f003 0302 	and.w	r3, r3, #2
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d011      	beq.n	8009bb6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009b92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b96:	f003 0301 	and.w	r3, r3, #1
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00b      	beq.n	8009bb6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bac:	f043 0204 	orr.w	r2, r3, #4
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bba:	f003 0304 	and.w	r3, r3, #4
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d011      	beq.n	8009be6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009bc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00b      	beq.n	8009be6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2204      	movs	r2, #4
 8009bd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bdc:	f043 0202 	orr.w	r2, r3, #2
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d006      	beq.n	8009bfe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7fe fd07 	bl	8008604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f040 80a9 	bne.w	8009d5e <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009c1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	461a      	mov	r2, r3
 8009c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c32:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c3a:	e841 2300 	strex	r3, r2, [r1]
 8009c3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1e2      	bne.n	8009c0c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3308      	adds	r3, #8
 8009c4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c50:	e853 3f00 	ldrex	r3, [r3]
 8009c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c5c:	f023 0301 	bic.w	r3, r3, #1
 8009c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	3308      	adds	r3, #8
 8009c6a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009c6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c76:	e841 2300 	strex	r3, r2, [r1]
 8009c7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1e1      	bne.n	8009c46 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2220      	movs	r2, #32
 8009c86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a62      	ldr	r2, [pc, #392]	@ (8009e24 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d026      	beq.n	8009cee <UART_RxISR_16BIT_FIFOEN+0x236>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a60      	ldr	r2, [pc, #384]	@ (8009e28 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d021      	beq.n	8009cee <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d01a      	beq.n	8009cee <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cc0:	e853 3f00 	ldrex	r3, [r3]
 8009cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cc8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ccc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009cda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009cdc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ce0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ce2:	e841 2300 	strex	r3, r2, [r1]
 8009ce6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e4      	bne.n	8009cb8 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d130      	bne.n	8009d58 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0c:	f023 0310 	bic.w	r3, r3, #16
 8009d10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009d1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d20:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e4      	bne.n	8009cfc <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	f003 0310 	and.w	r3, r3, #16
 8009d3c:	2b10      	cmp	r3, #16
 8009d3e:	d103      	bne.n	8009d48 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2210      	movs	r2, #16
 8009d46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7fe fc61 	bl	8008618 <HAL_UARTEx_RxEventCallback>
 8009d56:	e002      	b.n	8009d5e <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7f6 ff65 	bl	8000c28 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d5e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d006      	beq.n	8009d74 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 8009d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d6a:	f003 0320 	and.w	r3, r3, #32
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f47f aec6 	bne.w	8009b00 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d7a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d7e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d049      	beq.n	8009e1a <UART_RxISR_16BIT_FIFOEN+0x362>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d8c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d242      	bcs.n	8009e1a <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	3308      	adds	r3, #8
 8009d9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9e:	e853 3f00 	ldrex	r3, [r3]
 8009da2:	623b      	str	r3, [r7, #32]
   return(result);
 8009da4:	6a3b      	ldr	r3, [r7, #32]
 8009da6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009daa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	3308      	adds	r3, #8
 8009db4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009db8:	633a      	str	r2, [r7, #48]	@ 0x30
 8009dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dc0:	e841 2300 	strex	r3, r2, [r1]
 8009dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1e3      	bne.n	8009d94 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a17      	ldr	r2, [pc, #92]	@ (8009e2c <UART_RxISR_16BIT_FIFOEN+0x374>)
 8009dd0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	e853 3f00 	ldrex	r3, [r3]
 8009dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f043 0320 	orr.w	r3, r3, #32
 8009de6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	461a      	mov	r2, r3
 8009df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009df4:	61fb      	str	r3, [r7, #28]
 8009df6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df8:	69b9      	ldr	r1, [r7, #24]
 8009dfa:	69fa      	ldr	r2, [r7, #28]
 8009dfc:	e841 2300 	strex	r3, r2, [r1]
 8009e00:	617b      	str	r3, [r7, #20]
   return(result);
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1e4      	bne.n	8009dd2 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e08:	e007      	b.n	8009e1a <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	699a      	ldr	r2, [r3, #24]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f042 0208 	orr.w	r2, r2, #8
 8009e18:	619a      	str	r2, [r3, #24]
}
 8009e1a:	bf00      	nop
 8009e1c:	37b8      	adds	r7, #184	@ 0xb8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	46002400 	.word	0x46002400
 8009e28:	56002400 	.word	0x56002400
 8009e2c:	08009585 	.word	0x08009585

08009e30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d101      	bne.n	8009e6e <HAL_UARTEx_DisableFifoMode+0x16>
 8009e6a:	2302      	movs	r3, #2
 8009e6c:	e027      	b.n	8009ebe <HAL_UARTEx_DisableFifoMode+0x66>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2224      	movs	r2, #36	@ 0x24
 8009e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f022 0201 	bic.w	r2, r2, #1
 8009e94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009e9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2220      	movs	r2, #32
 8009eb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d101      	bne.n	8009ee2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ede:	2302      	movs	r3, #2
 8009ee0:	e02d      	b.n	8009f3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2224      	movs	r2, #36	@ 0x24
 8009eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f022 0201 	bic.w	r2, r2, #1
 8009f08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f850 	bl	8009fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2220      	movs	r2, #32
 8009f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b084      	sub	sp, #16
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d101      	bne.n	8009f5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	e02d      	b.n	8009fba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2224      	movs	r2, #36	@ 0x24
 8009f6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f022 0201 	bic.w	r2, r2, #1
 8009f84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	430a      	orrs	r2, r1
 8009f98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f812 	bl	8009fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2220      	movs	r2, #32
 8009fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d108      	bne.n	8009fe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009fe4:	e031      	b.n	800a04a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009fe6:	2308      	movs	r3, #8
 8009fe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009fea:	2308      	movs	r3, #8
 8009fec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	0e5b      	lsrs	r3, r3, #25
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	f003 0307 	and.w	r3, r3, #7
 8009ffc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	0f5b      	lsrs	r3, r3, #29
 800a006:	b2db      	uxtb	r3, r3
 800a008:	f003 0307 	and.w	r3, r3, #7
 800a00c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a00e:	7bbb      	ldrb	r3, [r7, #14]
 800a010:	7b3a      	ldrb	r2, [r7, #12]
 800a012:	4911      	ldr	r1, [pc, #68]	@ (800a058 <UARTEx_SetNbDataToProcess+0x94>)
 800a014:	5c8a      	ldrb	r2, [r1, r2]
 800a016:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a01a:	7b3a      	ldrb	r2, [r7, #12]
 800a01c:	490f      	ldr	r1, [pc, #60]	@ (800a05c <UARTEx_SetNbDataToProcess+0x98>)
 800a01e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a020:	fb93 f3f2 	sdiv	r3, r3, r2
 800a024:	b29a      	uxth	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
 800a02e:	7b7a      	ldrb	r2, [r7, #13]
 800a030:	4909      	ldr	r1, [pc, #36]	@ (800a058 <UARTEx_SetNbDataToProcess+0x94>)
 800a032:	5c8a      	ldrb	r2, [r1, r2]
 800a034:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a038:	7b7a      	ldrb	r2, [r7, #13]
 800a03a:	4908      	ldr	r1, [pc, #32]	@ (800a05c <UARTEx_SetNbDataToProcess+0x98>)
 800a03c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a03e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a042:	b29a      	uxth	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a04a:	bf00      	nop
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	0800ba6c 	.word	0x0800ba6c
 800a05c:	0800ba74 	.word	0x0800ba74

0800a060 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a060:	b480      	push	{r7}
 800a062:	b08b      	sub	sp, #44	@ 0x2c
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	fa93 f3a3 	rbit	r3, r3
 800a07a:	613b      	str	r3, [r7, #16]
  return result;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a086:	2320      	movs	r3, #32
 800a088:	e003      	b.n	800a092 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	fab3 f383 	clz	r3, r3
 800a090:	b2db      	uxtb	r3, r3
 800a092:	005b      	lsls	r3, r3, #1
 800a094:	2103      	movs	r1, #3
 800a096:	fa01 f303 	lsl.w	r3, r1, r3
 800a09a:	43db      	mvns	r3, r3
 800a09c:	401a      	ands	r2, r3
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	fa93 f3a3 	rbit	r3, r3
 800a0a8:	61fb      	str	r3, [r7, #28]
  return result;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d101      	bne.n	800a0b8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a0b4:	2320      	movs	r3, #32
 800a0b6:	e003      	b.n	800a0c0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ba:	fab3 f383 	clz	r3, r3
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	005b      	lsls	r3, r3, #1
 800a0c2:	6879      	ldr	r1, [r7, #4]
 800a0c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c8:	431a      	orrs	r2, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 800a0ce:	bf00      	nop
 800a0d0:	372c      	adds	r7, #44	@ 0x2c
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b085      	sub	sp, #20
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	60f8      	str	r0, [r7, #12]
 800a0e2:	60b9      	str	r1, [r7, #8]
 800a0e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	43db      	mvns	r3, r3
 800a0ee:	401a      	ands	r2, r3
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	fb01 f303 	mul.w	r3, r1, r3
 800a0f8:	431a      	orrs	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	605a      	str	r2, [r3, #4]
}
 800a0fe:	bf00      	nop
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b08b      	sub	sp, #44	@ 0x2c
 800a10e:	af00      	add	r7, sp, #0
 800a110:	60f8      	str	r0, [r7, #12]
 800a112:	60b9      	str	r1, [r7, #8]
 800a114:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	689a      	ldr	r2, [r3, #8]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	fa93 f3a3 	rbit	r3, r3
 800a124:	613b      	str	r3, [r7, #16]
  return result;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a130:	2320      	movs	r3, #32
 800a132:	e003      	b.n	800a13c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	fab3 f383 	clz	r3, r3
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	2103      	movs	r1, #3
 800a140:	fa01 f303 	lsl.w	r3, r1, r3
 800a144:	43db      	mvns	r3, r3
 800a146:	401a      	ands	r2, r3
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a14c:	6a3b      	ldr	r3, [r7, #32]
 800a14e:	fa93 f3a3 	rbit	r3, r3
 800a152:	61fb      	str	r3, [r7, #28]
  return result;
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d101      	bne.n	800a162 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a15e:	2320      	movs	r3, #32
 800a160:	e003      	b.n	800a16a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a164:	fab3 f383 	clz	r3, r3
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	005b      	lsls	r3, r3, #1
 800a16c:	6879      	ldr	r1, [r7, #4]
 800a16e:	fa01 f303 	lsl.w	r3, r1, r3
 800a172:	431a      	orrs	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 800a178:	bf00      	nop
 800a17a:	372c      	adds	r7, #44	@ 0x2c
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a184:	b480      	push	{r7}
 800a186:	b08b      	sub	sp, #44	@ 0x2c
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	68da      	ldr	r2, [r3, #12]
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	fa93 f3a3 	rbit	r3, r3
 800a19e:	613b      	str	r3, [r7, #16]
  return result;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a1aa:	2320      	movs	r3, #32
 800a1ac:	e003      	b.n	800a1b6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	fab3 f383 	clz	r3, r3
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	005b      	lsls	r3, r3, #1
 800a1b8:	2103      	movs	r1, #3
 800a1ba:	fa01 f303 	lsl.w	r3, r1, r3
 800a1be:	43db      	mvns	r3, r3
 800a1c0:	401a      	ands	r2, r3
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	fa93 f3a3 	rbit	r3, r3
 800a1cc:	61fb      	str	r3, [r7, #28]
  return result;
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d101      	bne.n	800a1dc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a1d8:	2320      	movs	r3, #32
 800a1da:	e003      	b.n	800a1e4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1de:	fab3 f383 	clz	r3, r3
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	005b      	lsls	r3, r3, #1
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ec:	431a      	orrs	r2, r3
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 800a1f2:	bf00      	nop
 800a1f4:	372c      	adds	r7, #44	@ 0x2c
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a1fe:	b480      	push	{r7}
 800a200:	b08b      	sub	sp, #44	@ 0x2c
 800a202:	af00      	add	r7, sp, #0
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a1a      	ldr	r2, [r3, #32]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	fa93 f3a3 	rbit	r3, r3
 800a218:	613b      	str	r3, [r7, #16]
  return result;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a224:	2320      	movs	r3, #32
 800a226:	e003      	b.n	800a230 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	fab3 f383 	clz	r3, r3
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	210f      	movs	r1, #15
 800a234:	fa01 f303 	lsl.w	r3, r1, r3
 800a238:	43db      	mvns	r3, r3
 800a23a:	401a      	ands	r2, r3
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a240:	6a3b      	ldr	r3, [r7, #32]
 800a242:	fa93 f3a3 	rbit	r3, r3
 800a246:	61fb      	str	r3, [r7, #28]
  return result;
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a252:	2320      	movs	r3, #32
 800a254:	e003      	b.n	800a25e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a258:	fab3 f383 	clz	r3, r3
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	6879      	ldr	r1, [r7, #4]
 800a262:	fa01 f303 	lsl.w	r3, r1, r3
 800a266:	431a      	orrs	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 800a26c:	bf00      	nop
 800a26e:	372c      	adds	r7, #44	@ 0x2c
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a278:	b480      	push	{r7}
 800a27a:	b08b      	sub	sp, #44	@ 0x2c
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	0a1b      	lsrs	r3, r3, #8
 800a28c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	fa93 f3a3 	rbit	r3, r3
 800a294:	613b      	str	r3, [r7, #16]
  return result;
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a2a0:	2320      	movs	r3, #32
 800a2a2:	e003      	b.n	800a2ac <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	fab3 f383 	clz	r3, r3
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	210f      	movs	r1, #15
 800a2b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a2b4:	43db      	mvns	r3, r3
 800a2b6:	401a      	ands	r2, r3
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	0a1b      	lsrs	r3, r3, #8
 800a2bc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	fa93 f3a3 	rbit	r3, r3
 800a2c4:	61fb      	str	r3, [r7, #28]
  return result;
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a2d0:	2320      	movs	r3, #32
 800a2d2:	e003      	b.n	800a2dc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d6:	fab3 f383 	clz	r3, r3
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	6879      	ldr	r1, [r7, #4]
 800a2e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e4:	431a      	orrs	r2, r3
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 800a2ea:	bf00      	nop
 800a2ec:	372c      	adds	r7, #44	@ 0x2c
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b08a      	sub	sp, #40	@ 0x28
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	fa93 f3a3 	rbit	r3, r3
 800a30c:	617b      	str	r3, [r7, #20]
  return result;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d101      	bne.n	800a31c <LL_GPIO_Init+0x26>
    return 32U;
 800a318:	2320      	movs	r3, #32
 800a31a:	e003      	b.n	800a324 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	fab3 f383 	clz	r3, r3
 800a322:	b2db      	uxtb	r3, r3
 800a324:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a326:	e058      	b.n	800a3da <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	2101      	movs	r1, #1
 800a32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a330:	fa01 f303 	lsl.w	r3, r1, r3
 800a334:	4013      	ands	r3, r2
 800a336:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800a338:	6a3b      	ldr	r3, [r7, #32]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d04a      	beq.n	800a3d4 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d003      	beq.n	800a34e <LL_GPIO_Init+0x58>
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d10e      	bne.n	800a36c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	461a      	mov	r2, r3
 800a354:	6a39      	ldr	r1, [r7, #32]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7ff fed7 	bl	800a10a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	6819      	ldr	r1, [r3, #0]
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	461a      	mov	r2, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7ff feb7 	bl	800a0da <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	461a      	mov	r2, r3
 800a372:	6a39      	ldr	r1, [r7, #32]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff ff05 	bl	800a184 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d121      	bne.n	800a3c6 <LL_GPIO_Init+0xd0>
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	fa93 f3a3 	rbit	r3, r3
 800a38c:	60bb      	str	r3, [r7, #8]
  return result;
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d101      	bne.n	800a39c <LL_GPIO_Init+0xa6>
    return 32U;
 800a398:	2320      	movs	r3, #32
 800a39a:	e003      	b.n	800a3a4 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	fab3 f383 	clz	r3, r3
 800a3a2:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800a3a4:	2b07      	cmp	r3, #7
 800a3a6:	d807      	bhi.n	800a3b8 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	695b      	ldr	r3, [r3, #20]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	6a39      	ldr	r1, [r7, #32]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7ff ff24 	bl	800a1fe <LL_GPIO_SetAFPin_0_7>
 800a3b6:	e006      	b.n	800a3c6 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	695b      	ldr	r3, [r3, #20]
 800a3bc:	461a      	mov	r2, r3
 800a3be:	6a39      	ldr	r1, [r7, #32]
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7ff ff59 	bl	800a278 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	6a39      	ldr	r1, [r7, #32]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7ff fe46 	bl	800a060 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d19f      	bne.n	800a328 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3728      	adds	r7, #40	@ 0x28
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	f107 001c 	add.w	r0, r7, #28
 800a400:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 fd89 	bl	800af28 <USB_CoreReset>
 800a416:	4603      	mov	r3, r0
 800a418:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a41a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d106      	bne.n	800a430 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a426:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	639a      	str	r2, [r3, #56]	@ 0x38
 800a42e:	e005      	b.n	800a43c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a434:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a448:	b004      	add	sp, #16
 800a44a:	4770      	bx	lr

0800a44c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b087      	sub	sp, #28
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	4613      	mov	r3, r2
 800a458:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a45a:	79fb      	ldrb	r3, [r7, #7]
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d165      	bne.n	800a52c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	4a41      	ldr	r2, [pc, #260]	@ (800a568 <USB_SetTurnaroundTime+0x11c>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d906      	bls.n	800a476 <USB_SetTurnaroundTime+0x2a>
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	4a40      	ldr	r2, [pc, #256]	@ (800a56c <USB_SetTurnaroundTime+0x120>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d202      	bcs.n	800a476 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a470:	230f      	movs	r3, #15
 800a472:	617b      	str	r3, [r7, #20]
 800a474:	e062      	b.n	800a53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	4a3c      	ldr	r2, [pc, #240]	@ (800a56c <USB_SetTurnaroundTime+0x120>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d306      	bcc.n	800a48c <USB_SetTurnaroundTime+0x40>
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	4a3b      	ldr	r2, [pc, #236]	@ (800a570 <USB_SetTurnaroundTime+0x124>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d202      	bcs.n	800a48c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a486:	230e      	movs	r3, #14
 800a488:	617b      	str	r3, [r7, #20]
 800a48a:	e057      	b.n	800a53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	4a38      	ldr	r2, [pc, #224]	@ (800a570 <USB_SetTurnaroundTime+0x124>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d306      	bcc.n	800a4a2 <USB_SetTurnaroundTime+0x56>
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	4a37      	ldr	r2, [pc, #220]	@ (800a574 <USB_SetTurnaroundTime+0x128>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d202      	bcs.n	800a4a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a49c:	230d      	movs	r3, #13
 800a49e:	617b      	str	r3, [r7, #20]
 800a4a0:	e04c      	b.n	800a53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	4a33      	ldr	r2, [pc, #204]	@ (800a574 <USB_SetTurnaroundTime+0x128>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d306      	bcc.n	800a4b8 <USB_SetTurnaroundTime+0x6c>
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	4a32      	ldr	r2, [pc, #200]	@ (800a578 <USB_SetTurnaroundTime+0x12c>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d802      	bhi.n	800a4b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a4b2:	230c      	movs	r3, #12
 800a4b4:	617b      	str	r3, [r7, #20]
 800a4b6:	e041      	b.n	800a53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	4a2f      	ldr	r2, [pc, #188]	@ (800a578 <USB_SetTurnaroundTime+0x12c>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d906      	bls.n	800a4ce <USB_SetTurnaroundTime+0x82>
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	4a2e      	ldr	r2, [pc, #184]	@ (800a57c <USB_SetTurnaroundTime+0x130>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d802      	bhi.n	800a4ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a4c8:	230b      	movs	r3, #11
 800a4ca:	617b      	str	r3, [r7, #20]
 800a4cc:	e036      	b.n	800a53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	4a2a      	ldr	r2, [pc, #168]	@ (800a57c <USB_SetTurnaroundTime+0x130>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d906      	bls.n	800a4e4 <USB_SetTurnaroundTime+0x98>
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	4a29      	ldr	r2, [pc, #164]	@ (800a580 <USB_SetTurnaroundTime+0x134>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d802      	bhi.n	800a4e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a4de:	230a      	movs	r3, #10
 800a4e0:	617b      	str	r3, [r7, #20]
 800a4e2:	e02b      	b.n	800a53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	4a26      	ldr	r2, [pc, #152]	@ (800a580 <USB_SetTurnaroundTime+0x134>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d906      	bls.n	800a4fa <USB_SetTurnaroundTime+0xae>
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	4a25      	ldr	r2, [pc, #148]	@ (800a584 <USB_SetTurnaroundTime+0x138>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d202      	bcs.n	800a4fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a4f4:	2309      	movs	r3, #9
 800a4f6:	617b      	str	r3, [r7, #20]
 800a4f8:	e020      	b.n	800a53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	4a21      	ldr	r2, [pc, #132]	@ (800a584 <USB_SetTurnaroundTime+0x138>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d306      	bcc.n	800a510 <USB_SetTurnaroundTime+0xc4>
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	4a20      	ldr	r2, [pc, #128]	@ (800a588 <USB_SetTurnaroundTime+0x13c>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d802      	bhi.n	800a510 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a50a:	2308      	movs	r3, #8
 800a50c:	617b      	str	r3, [r7, #20]
 800a50e:	e015      	b.n	800a53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	4a1d      	ldr	r2, [pc, #116]	@ (800a588 <USB_SetTurnaroundTime+0x13c>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d906      	bls.n	800a526 <USB_SetTurnaroundTime+0xda>
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	4a1c      	ldr	r2, [pc, #112]	@ (800a58c <USB_SetTurnaroundTime+0x140>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d202      	bcs.n	800a526 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a520:	2307      	movs	r3, #7
 800a522:	617b      	str	r3, [r7, #20]
 800a524:	e00a      	b.n	800a53c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a526:	2306      	movs	r3, #6
 800a528:	617b      	str	r3, [r7, #20]
 800a52a:	e007      	b.n	800a53c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d102      	bne.n	800a538 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a532:	2309      	movs	r3, #9
 800a534:	617b      	str	r3, [r7, #20]
 800a536:	e001      	b.n	800a53c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a538:	2309      	movs	r3, #9
 800a53a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	68da      	ldr	r2, [r3, #12]
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	029b      	lsls	r3, r3, #10
 800a550:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a554:	431a      	orrs	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	371c      	adds	r7, #28
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr
 800a568:	00d8acbf 	.word	0x00d8acbf
 800a56c:	00e4e1c0 	.word	0x00e4e1c0
 800a570:	00f42400 	.word	0x00f42400
 800a574:	01067380 	.word	0x01067380
 800a578:	011a499f 	.word	0x011a499f
 800a57c:	01312cff 	.word	0x01312cff
 800a580:	014ca43f 	.word	0x014ca43f
 800a584:	016e3600 	.word	0x016e3600
 800a588:	01a6ab1f 	.word	0x01a6ab1f
 800a58c:	01e84800 	.word	0x01e84800

0800a590 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	f023 0201 	bic.w	r2, r3, #1
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b084      	sub	sp, #16
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a5ce:	78fb      	ldrb	r3, [r7, #3]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d115      	bne.n	800a600 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a5e0:	200a      	movs	r0, #10
 800a5e2:	f7f7 fa4d 	bl	8001a80 <HAL_Delay>
      ms += 10U;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	330a      	adds	r3, #10
 800a5ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fc0b 	bl	800ae08 <USB_GetMode>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d01e      	beq.n	800a636 <USB_SetCurrentMode+0x84>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2bc7      	cmp	r3, #199	@ 0xc7
 800a5fc:	d9f0      	bls.n	800a5e0 <USB_SetCurrentMode+0x2e>
 800a5fe:	e01a      	b.n	800a636 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d115      	bne.n	800a632 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a612:	200a      	movs	r0, #10
 800a614:	f7f7 fa34 	bl	8001a80 <HAL_Delay>
      ms += 10U;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	330a      	adds	r3, #10
 800a61c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fbf2 	bl	800ae08 <USB_GetMode>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d005      	beq.n	800a636 <USB_SetCurrentMode+0x84>
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a62e:	d9f0      	bls.n	800a612 <USB_SetCurrentMode+0x60>
 800a630:	e001      	b.n	800a636 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e005      	b.n	800a642 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2bc8      	cmp	r3, #200	@ 0xc8
 800a63a:	d101      	bne.n	800a640 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e000      	b.n	800a642 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a64c:	b084      	sub	sp, #16
 800a64e:	b580      	push	{r7, lr}
 800a650:	b086      	sub	sp, #24
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a65a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a666:	2300      	movs	r3, #0
 800a668:	613b      	str	r3, [r7, #16]
 800a66a:	e009      	b.n	800a680 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	3340      	adds	r3, #64	@ 0x40
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	4413      	add	r3, r2
 800a676:	2200      	movs	r2, #0
 800a678:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	3301      	adds	r3, #1
 800a67e:	613b      	str	r3, [r7, #16]
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	2b0e      	cmp	r3, #14
 800a684:	d9f2      	bls.n	800a66c <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a686:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d11c      	bne.n	800a6c8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a69c:	f043 0302 	orr.w	r3, r3, #2
 800a6a0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	601a      	str	r2, [r3, #0]
 800a6c6:	e005      	b.n	800a6d4 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a6da:	461a      	mov	r2, r3
 800a6dc:	2300      	movs	r3, #0
 800a6de:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a6e0:	2103      	movs	r1, #3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f95e 	bl	800a9a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a6e8:	2110      	movs	r1, #16
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f8fa 	bl	800a8e4 <USB_FlushTxFifo>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f924 	bl	800a948 <USB_FlushRxFifo>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a710:	461a      	mov	r2, r3
 800a712:	2300      	movs	r3, #0
 800a714:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a71c:	461a      	mov	r2, r3
 800a71e:	2300      	movs	r3, #0
 800a720:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a728:	461a      	mov	r2, r3
 800a72a:	2300      	movs	r3, #0
 800a72c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a72e:	2300      	movs	r3, #0
 800a730:	613b      	str	r3, [r7, #16]
 800a732:	e043      	b.n	800a7bc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	015a      	lsls	r2, r3, #5
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a746:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a74a:	d118      	bne.n	800a77e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10a      	bne.n	800a768 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	015a      	lsls	r2, r3, #5
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	4413      	add	r3, r2
 800a75a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a75e:	461a      	mov	r2, r3
 800a760:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a764:	6013      	str	r3, [r2, #0]
 800a766:	e013      	b.n	800a790 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a774:	461a      	mov	r2, r3
 800a776:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a77a:	6013      	str	r3, [r2, #0]
 800a77c:	e008      	b.n	800a790 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	4413      	add	r3, r2
 800a786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a78a:	461a      	mov	r2, r3
 800a78c:	2300      	movs	r3, #0
 800a78e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a79c:	461a      	mov	r2, r3
 800a79e:	2300      	movs	r3, #0
 800a7a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	015a      	lsls	r2, r3, #5
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a7b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	613b      	str	r3, [r7, #16]
 800a7bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d3b5      	bcc.n	800a734 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	613b      	str	r3, [r7, #16]
 800a7cc:	e043      	b.n	800a856 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	015a      	lsls	r2, r3, #5
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7e4:	d118      	bne.n	800a818 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d10a      	bne.n	800a802 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	015a      	lsls	r2, r3, #5
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a7fe:	6013      	str	r3, [r2, #0]
 800a800:	e013      	b.n	800a82a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	015a      	lsls	r2, r3, #5
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	4413      	add	r3, r2
 800a80a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a80e:	461a      	mov	r2, r3
 800a810:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a814:	6013      	str	r3, [r2, #0]
 800a816:	e008      	b.n	800a82a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	015a      	lsls	r2, r3, #5
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a824:	461a      	mov	r2, r3
 800a826:	2300      	movs	r3, #0
 800a828:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	015a      	lsls	r2, r3, #5
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	4413      	add	r3, r2
 800a832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a836:	461a      	mov	r2, r3
 800a838:	2300      	movs	r3, #0
 800a83a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a848:	461a      	mov	r2, r3
 800a84a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a84e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	3301      	adds	r3, #1
 800a854:	613b      	str	r3, [r7, #16]
 800a856:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a85a:	461a      	mov	r2, r3
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	4293      	cmp	r3, r2
 800a860:	d3b5      	bcc.n	800a7ce <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a874:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a882:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a884:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d105      	bne.n	800a898 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	f043 0210 	orr.w	r2, r3, #16
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	699a      	ldr	r2, [r3, #24]
 800a89c:	4b10      	ldr	r3, [pc, #64]	@ (800a8e0 <USB_DevInit+0x294>)
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a8a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d005      	beq.n	800a8b8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	f043 0208 	orr.w	r2, r3, #8
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a8b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d107      	bne.n	800a8d0 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8c8:	f043 0304 	orr.w	r3, r3, #4
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a8d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3718      	adds	r7, #24
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8dc:	b004      	add	sp, #16
 800a8de:	4770      	bx	lr
 800a8e0:	803c3800 	.word	0x803c3800

0800a8e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8fe:	d901      	bls.n	800a904 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e01b      	b.n	800a93c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	daf2      	bge.n	800a8f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a90c:	2300      	movs	r3, #0
 800a90e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	019b      	lsls	r3, r3, #6
 800a914:	f043 0220 	orr.w	r2, r3, #32
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	3301      	adds	r3, #1
 800a920:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a928:	d901      	bls.n	800a92e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e006      	b.n	800a93c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	f003 0320 	and.w	r3, r3, #32
 800a936:	2b20      	cmp	r3, #32
 800a938:	d0f0      	beq.n	800a91c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a950:	2300      	movs	r3, #0
 800a952:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3301      	adds	r3, #1
 800a958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a960:	d901      	bls.n	800a966 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e018      	b.n	800a998 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	daf2      	bge.n	800a954 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a96e:	2300      	movs	r3, #0
 800a970:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2210      	movs	r2, #16
 800a976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	3301      	adds	r3, #1
 800a97c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a984:	d901      	bls.n	800a98a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	e006      	b.n	800a998 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	f003 0310 	and.w	r3, r3, #16
 800a992:	2b10      	cmp	r3, #16
 800a994:	d0f0      	beq.n	800a978 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	78fb      	ldrb	r3, [r7, #3]
 800a9be:	68f9      	ldr	r1, [r7, #12]
 800a9c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b087      	sub	sp, #28
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	f003 0306 	and.w	r3, r3, #6
 800a9ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d102      	bne.n	800a9fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	75fb      	strb	r3, [r7, #23]
 800a9fa:	e00a      	b.n	800aa12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	d002      	beq.n	800aa08 <USB_GetDevSpeed+0x32>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2b06      	cmp	r3, #6
 800aa06:	d102      	bne.n	800aa0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800aa08:	2302      	movs	r3, #2
 800aa0a:	75fb      	strb	r3, [r7, #23]
 800aa0c:	e001      	b.n	800aa12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800aa0e:	230f      	movs	r3, #15
 800aa10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	371c      	adds	r7, #28
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	785b      	ldrb	r3, [r3, #1]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d14a      	bne.n	800aad4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa56:	f040 8086 	bne.w	800ab66 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	7812      	ldrb	r2, [r2, #0]
 800aa6e:	0151      	lsls	r1, r2, #5
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	440a      	add	r2, r1
 800aa74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aa7c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	7812      	ldrb	r2, [r2, #0]
 800aa92:	0151      	lsls	r1, r2, #5
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	440a      	add	r2, r1
 800aa98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aaa0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d902      	bls.n	800aab8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	75fb      	strb	r3, [r7, #23]
          break;
 800aab6:	e056      	b.n	800ab66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	015a      	lsls	r2, r3, #5
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	4413      	add	r3, r2
 800aac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aacc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aad0:	d0e7      	beq.n	800aaa2 <USB_EPStopXfer+0x82>
 800aad2:	e048      	b.n	800ab66 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	015a      	lsls	r2, r3, #5
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	4413      	add	r3, r2
 800aade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aae8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aaec:	d13b      	bne.n	800ab66 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	015a      	lsls	r2, r3, #5
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	683a      	ldr	r2, [r7, #0]
 800ab00:	7812      	ldrb	r2, [r2, #0]
 800ab02:	0151      	lsls	r1, r2, #5
 800ab04:	693a      	ldr	r2, [r7, #16]
 800ab06:	440a      	add	r2, r1
 800ab08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab10:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	7812      	ldrb	r2, [r2, #0]
 800ab26:	0151      	lsls	r1, r2, #5
 800ab28:	693a      	ldr	r2, [r7, #16]
 800ab2a:	440a      	add	r2, r1
 800ab2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d902      	bls.n	800ab4c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	75fb      	strb	r3, [r7, #23]
          break;
 800ab4a:	e00c      	b.n	800ab66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	015a      	lsls	r2, r3, #5
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	4413      	add	r3, r2
 800ab56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab64:	d0e7      	beq.n	800ab36 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ab66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	371c      	adds	r7, #28
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b089      	sub	sp, #36	@ 0x24
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	4611      	mov	r1, r2
 800ab80:	461a      	mov	r2, r3
 800ab82:	460b      	mov	r3, r1
 800ab84:	71fb      	strb	r3, [r7, #7]
 800ab86:	4613      	mov	r3, r2
 800ab88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ab92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d123      	bne.n	800abe2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ab9a:	88bb      	ldrh	r3, [r7, #4]
 800ab9c:	3303      	adds	r3, #3
 800ab9e:	089b      	lsrs	r3, r3, #2
 800aba0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800aba2:	2300      	movs	r3, #0
 800aba4:	61bb      	str	r3, [r7, #24]
 800aba6:	e018      	b.n	800abda <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aba8:	79fb      	ldrb	r3, [r7, #7]
 800abaa:	031a      	lsls	r2, r3, #12
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	4413      	add	r3, r2
 800abb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abb4:	461a      	mov	r2, r3
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6013      	str	r3, [r2, #0]
      pSrc++;
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	3301      	adds	r3, #1
 800abc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	3301      	adds	r3, #1
 800abc6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	3301      	adds	r3, #1
 800abcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	3301      	adds	r3, #1
 800abd2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	3301      	adds	r3, #1
 800abd8:	61bb      	str	r3, [r7, #24]
 800abda:	69ba      	ldr	r2, [r7, #24]
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d3e2      	bcc.n	800aba8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3724      	adds	r7, #36	@ 0x24
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b08b      	sub	sp, #44	@ 0x2c
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	4613      	mov	r3, r2
 800abfc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ac06:	88fb      	ldrh	r3, [r7, #6]
 800ac08:	089b      	lsrs	r3, r3, #2
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ac0e:	88fb      	ldrh	r3, [r7, #6]
 800ac10:	f003 0303 	and.w	r3, r3, #3
 800ac14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ac16:	2300      	movs	r3, #0
 800ac18:	623b      	str	r3, [r7, #32]
 800ac1a:	e014      	b.n	800ac46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac26:	601a      	str	r2, [r3, #0]
    pDest++;
 800ac28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac30:	3301      	adds	r3, #1
 800ac32:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ac34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac36:	3301      	adds	r3, #1
 800ac38:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ac40:	6a3b      	ldr	r3, [r7, #32]
 800ac42:	3301      	adds	r3, #1
 800ac44:	623b      	str	r3, [r7, #32]
 800ac46:	6a3a      	ldr	r2, [r7, #32]
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d3e6      	bcc.n	800ac1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ac4e:	8bfb      	ldrh	r3, [r7, #30]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d01e      	beq.n	800ac92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ac54:	2300      	movs	r3, #0
 800ac56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac5e:	461a      	mov	r2, r3
 800ac60:	f107 0310 	add.w	r3, r7, #16
 800ac64:	6812      	ldr	r2, [r2, #0]
 800ac66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	00db      	lsls	r3, r3, #3
 800ac70:	fa22 f303 	lsr.w	r3, r2, r3
 800ac74:	b2da      	uxtb	r2, r3
 800ac76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac78:	701a      	strb	r2, [r3, #0]
      i++;
 800ac7a:	6a3b      	ldr	r3, [r7, #32]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	623b      	str	r3, [r7, #32]
      pDest++;
 800ac80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac82:	3301      	adds	r3, #1
 800ac84:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ac86:	8bfb      	ldrh	r3, [r7, #30]
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ac8c:	8bfb      	ldrh	r3, [r7, #30]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1ea      	bne.n	800ac68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ac92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	372c      	adds	r7, #44	@ 0x2c
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800acba:	f023 0303 	bic.w	r3, r3, #3
 800acbe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acce:	f043 0302 	orr.w	r3, r3, #2
 800acd2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3714      	adds	r7, #20
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b085      	sub	sp, #20
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	699b      	ldr	r3, [r3, #24]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	4013      	ands	r3, r2
 800acf8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800acfa:	68fb      	ldr	r3, [r7, #12]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad24:	69db      	ldr	r3, [r3, #28]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	4013      	ands	r3, r2
 800ad2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	0c1b      	lsrs	r3, r3, #16
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3714      	adds	r7, #20
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad4e:	699b      	ldr	r3, [r3, #24]
 800ad50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad58:	69db      	ldr	r3, [r3, #28]
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	b29b      	uxth	r3, r3
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad80:	78fb      	ldrb	r3, [r7, #3]
 800ad82:	015a      	lsls	r2, r3, #5
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad96:	695b      	ldr	r3, [r3, #20]
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800adac:	b480      	push	{r7}
 800adae:	b087      	sub	sp, #28
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	460b      	mov	r3, r1
 800adb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800add0:	78fb      	ldrb	r3, [r7, #3]
 800add2:	f003 030f 	and.w	r3, r3, #15
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	fa22 f303 	lsr.w	r3, r2, r3
 800addc:	01db      	lsls	r3, r3, #7
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ade6:	78fb      	ldrb	r3, [r7, #3]
 800ade8:	015a      	lsls	r2, r3, #5
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	4413      	add	r3, r2
 800adee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	4013      	ands	r3, r2
 800adf8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800adfa:	68bb      	ldr	r3, [r7, #8]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	371c      	adds	r7, #28
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	695b      	ldr	r3, [r3, #20]
 800ae14:	f003 0301 	and.w	r3, r3, #1
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae3e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ae42:	f023 0307 	bic.w	r3, r3, #7
 800ae46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3714      	adds	r7, #20
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
	...

0800ae6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	460b      	mov	r3, r1
 800ae76:	607a      	str	r2, [r7, #4]
 800ae78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	333c      	adds	r3, #60	@ 0x3c
 800ae82:	3304      	adds	r3, #4
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	4a26      	ldr	r2, [pc, #152]	@ (800af24 <USB_EP0_OutStart+0xb8>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d90a      	bls.n	800aea6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aea0:	d101      	bne.n	800aea6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	e037      	b.n	800af16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeac:	461a      	mov	r2, r3
 800aeae:	2300      	movs	r3, #0
 800aeb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aec0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aec4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aed4:	f043 0318 	orr.w	r3, r3, #24
 800aed8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	697a      	ldr	r2, [r7, #20]
 800aee4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aee8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800aeec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aeee:	7afb      	ldrb	r3, [r7, #11]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d10f      	bne.n	800af14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aefa:	461a      	mov	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	697a      	ldr	r2, [r7, #20]
 800af0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af0e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800af12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	371c      	adds	r7, #28
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	4f54300a 	.word	0x4f54300a

0800af28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af30:	2300      	movs	r3, #0
 800af32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	3301      	adds	r3, #1
 800af38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af40:	d901      	bls.n	800af46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af42:	2303      	movs	r3, #3
 800af44:	e01b      	b.n	800af7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	daf2      	bge.n	800af34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800af4e:	2300      	movs	r3, #0
 800af50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	f043 0201 	orr.w	r2, r3, #1
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	3301      	adds	r3, #1
 800af62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af6a:	d901      	bls.n	800af70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af6c:	2303      	movs	r3, #3
 800af6e:	e006      	b.n	800af7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d0f0      	beq.n	800af5e <USB_CoreReset+0x36>

  return HAL_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
	...

0800af8c <malloc>:
 800af8c:	4b02      	ldr	r3, [pc, #8]	@ (800af98 <malloc+0xc>)
 800af8e:	4601      	mov	r1, r0
 800af90:	6818      	ldr	r0, [r3, #0]
 800af92:	f000 b82d 	b.w	800aff0 <_malloc_r>
 800af96:	bf00      	nop
 800af98:	2000001c 	.word	0x2000001c

0800af9c <free>:
 800af9c:	4b02      	ldr	r3, [pc, #8]	@ (800afa8 <free+0xc>)
 800af9e:	4601      	mov	r1, r0
 800afa0:	6818      	ldr	r0, [r3, #0]
 800afa2:	f000 b915 	b.w	800b1d0 <_free_r>
 800afa6:	bf00      	nop
 800afa8:	2000001c 	.word	0x2000001c

0800afac <sbrk_aligned>:
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	4e0f      	ldr	r6, [pc, #60]	@ (800afec <sbrk_aligned+0x40>)
 800afb0:	460c      	mov	r4, r1
 800afb2:	4605      	mov	r5, r0
 800afb4:	6831      	ldr	r1, [r6, #0]
 800afb6:	b911      	cbnz	r1, 800afbe <sbrk_aligned+0x12>
 800afb8:	f000 f8ce 	bl	800b158 <_sbrk_r>
 800afbc:	6030      	str	r0, [r6, #0]
 800afbe:	4621      	mov	r1, r4
 800afc0:	4628      	mov	r0, r5
 800afc2:	f000 f8c9 	bl	800b158 <_sbrk_r>
 800afc6:	1c43      	adds	r3, r0, #1
 800afc8:	d103      	bne.n	800afd2 <sbrk_aligned+0x26>
 800afca:	f04f 34ff 	mov.w	r4, #4294967295
 800afce:	4620      	mov	r0, r4
 800afd0:	bd70      	pop	{r4, r5, r6, pc}
 800afd2:	1cc4      	adds	r4, r0, #3
 800afd4:	f024 0403 	bic.w	r4, r4, #3
 800afd8:	42a0      	cmp	r0, r4
 800afda:	d0f8      	beq.n	800afce <sbrk_aligned+0x22>
 800afdc:	1a21      	subs	r1, r4, r0
 800afde:	4628      	mov	r0, r5
 800afe0:	f000 f8ba 	bl	800b158 <_sbrk_r>
 800afe4:	3001      	adds	r0, #1
 800afe6:	d1f2      	bne.n	800afce <sbrk_aligned+0x22>
 800afe8:	e7ef      	b.n	800afca <sbrk_aligned+0x1e>
 800afea:	bf00      	nop
 800afec:	20000740 	.word	0x20000740

0800aff0 <_malloc_r>:
 800aff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aff4:	1ccd      	adds	r5, r1, #3
 800aff6:	4606      	mov	r6, r0
 800aff8:	f025 0503 	bic.w	r5, r5, #3
 800affc:	3508      	adds	r5, #8
 800affe:	2d0c      	cmp	r5, #12
 800b000:	bf38      	it	cc
 800b002:	250c      	movcc	r5, #12
 800b004:	2d00      	cmp	r5, #0
 800b006:	db01      	blt.n	800b00c <_malloc_r+0x1c>
 800b008:	42a9      	cmp	r1, r5
 800b00a:	d904      	bls.n	800b016 <_malloc_r+0x26>
 800b00c:	230c      	movs	r3, #12
 800b00e:	6033      	str	r3, [r6, #0]
 800b010:	2000      	movs	r0, #0
 800b012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b016:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0ec <_malloc_r+0xfc>
 800b01a:	f000 f869 	bl	800b0f0 <__malloc_lock>
 800b01e:	f8d8 3000 	ldr.w	r3, [r8]
 800b022:	461c      	mov	r4, r3
 800b024:	bb44      	cbnz	r4, 800b078 <_malloc_r+0x88>
 800b026:	4629      	mov	r1, r5
 800b028:	4630      	mov	r0, r6
 800b02a:	f7ff ffbf 	bl	800afac <sbrk_aligned>
 800b02e:	1c43      	adds	r3, r0, #1
 800b030:	4604      	mov	r4, r0
 800b032:	d158      	bne.n	800b0e6 <_malloc_r+0xf6>
 800b034:	f8d8 4000 	ldr.w	r4, [r8]
 800b038:	4627      	mov	r7, r4
 800b03a:	2f00      	cmp	r7, #0
 800b03c:	d143      	bne.n	800b0c6 <_malloc_r+0xd6>
 800b03e:	2c00      	cmp	r4, #0
 800b040:	d04b      	beq.n	800b0da <_malloc_r+0xea>
 800b042:	6823      	ldr	r3, [r4, #0]
 800b044:	4639      	mov	r1, r7
 800b046:	4630      	mov	r0, r6
 800b048:	eb04 0903 	add.w	r9, r4, r3
 800b04c:	f000 f884 	bl	800b158 <_sbrk_r>
 800b050:	4581      	cmp	r9, r0
 800b052:	d142      	bne.n	800b0da <_malloc_r+0xea>
 800b054:	6821      	ldr	r1, [r4, #0]
 800b056:	4630      	mov	r0, r6
 800b058:	1a6d      	subs	r5, r5, r1
 800b05a:	4629      	mov	r1, r5
 800b05c:	f7ff ffa6 	bl	800afac <sbrk_aligned>
 800b060:	3001      	adds	r0, #1
 800b062:	d03a      	beq.n	800b0da <_malloc_r+0xea>
 800b064:	6823      	ldr	r3, [r4, #0]
 800b066:	442b      	add	r3, r5
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	f8d8 3000 	ldr.w	r3, [r8]
 800b06e:	685a      	ldr	r2, [r3, #4]
 800b070:	bb62      	cbnz	r2, 800b0cc <_malloc_r+0xdc>
 800b072:	f8c8 7000 	str.w	r7, [r8]
 800b076:	e00f      	b.n	800b098 <_malloc_r+0xa8>
 800b078:	6822      	ldr	r2, [r4, #0]
 800b07a:	1b52      	subs	r2, r2, r5
 800b07c:	d420      	bmi.n	800b0c0 <_malloc_r+0xd0>
 800b07e:	2a0b      	cmp	r2, #11
 800b080:	d917      	bls.n	800b0b2 <_malloc_r+0xc2>
 800b082:	1961      	adds	r1, r4, r5
 800b084:	42a3      	cmp	r3, r4
 800b086:	6025      	str	r5, [r4, #0]
 800b088:	bf18      	it	ne
 800b08a:	6059      	strne	r1, [r3, #4]
 800b08c:	6863      	ldr	r3, [r4, #4]
 800b08e:	bf08      	it	eq
 800b090:	f8c8 1000 	streq.w	r1, [r8]
 800b094:	5162      	str	r2, [r4, r5]
 800b096:	604b      	str	r3, [r1, #4]
 800b098:	4630      	mov	r0, r6
 800b09a:	f000 f82f 	bl	800b0fc <__malloc_unlock>
 800b09e:	f104 000b 	add.w	r0, r4, #11
 800b0a2:	1d23      	adds	r3, r4, #4
 800b0a4:	f020 0007 	bic.w	r0, r0, #7
 800b0a8:	1ac2      	subs	r2, r0, r3
 800b0aa:	bf1c      	itt	ne
 800b0ac:	1a1b      	subne	r3, r3, r0
 800b0ae:	50a3      	strne	r3, [r4, r2]
 800b0b0:	e7af      	b.n	800b012 <_malloc_r+0x22>
 800b0b2:	6862      	ldr	r2, [r4, #4]
 800b0b4:	42a3      	cmp	r3, r4
 800b0b6:	bf0c      	ite	eq
 800b0b8:	f8c8 2000 	streq.w	r2, [r8]
 800b0bc:	605a      	strne	r2, [r3, #4]
 800b0be:	e7eb      	b.n	800b098 <_malloc_r+0xa8>
 800b0c0:	4623      	mov	r3, r4
 800b0c2:	6864      	ldr	r4, [r4, #4]
 800b0c4:	e7ae      	b.n	800b024 <_malloc_r+0x34>
 800b0c6:	463c      	mov	r4, r7
 800b0c8:	687f      	ldr	r7, [r7, #4]
 800b0ca:	e7b6      	b.n	800b03a <_malloc_r+0x4a>
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	42a3      	cmp	r3, r4
 800b0d2:	d1fb      	bne.n	800b0cc <_malloc_r+0xdc>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	6053      	str	r3, [r2, #4]
 800b0d8:	e7de      	b.n	800b098 <_malloc_r+0xa8>
 800b0da:	230c      	movs	r3, #12
 800b0dc:	4630      	mov	r0, r6
 800b0de:	6033      	str	r3, [r6, #0]
 800b0e0:	f000 f80c 	bl	800b0fc <__malloc_unlock>
 800b0e4:	e794      	b.n	800b010 <_malloc_r+0x20>
 800b0e6:	6005      	str	r5, [r0, #0]
 800b0e8:	e7d6      	b.n	800b098 <_malloc_r+0xa8>
 800b0ea:	bf00      	nop
 800b0ec:	20000744 	.word	0x20000744

0800b0f0 <__malloc_lock>:
 800b0f0:	4801      	ldr	r0, [pc, #4]	@ (800b0f8 <__malloc_lock+0x8>)
 800b0f2:	f000 b86b 	b.w	800b1cc <__retarget_lock_acquire_recursive>
 800b0f6:	bf00      	nop
 800b0f8:	20000884 	.word	0x20000884

0800b0fc <__malloc_unlock>:
 800b0fc:	4801      	ldr	r0, [pc, #4]	@ (800b104 <__malloc_unlock+0x8>)
 800b0fe:	f000 b866 	b.w	800b1ce <__retarget_lock_release_recursive>
 800b102:	bf00      	nop
 800b104:	20000884 	.word	0x20000884

0800b108 <siprintf>:
 800b108:	b40e      	push	{r1, r2, r3}
 800b10a:	b500      	push	{lr}
 800b10c:	b09c      	sub	sp, #112	@ 0x70
 800b10e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b112:	ab1d      	add	r3, sp, #116	@ 0x74
 800b114:	9002      	str	r0, [sp, #8]
 800b116:	9006      	str	r0, [sp, #24]
 800b118:	9107      	str	r1, [sp, #28]
 800b11a:	9104      	str	r1, [sp, #16]
 800b11c:	4808      	ldr	r0, [pc, #32]	@ (800b140 <siprintf+0x38>)
 800b11e:	4909      	ldr	r1, [pc, #36]	@ (800b144 <siprintf+0x3c>)
 800b120:	f853 2b04 	ldr.w	r2, [r3], #4
 800b124:	9105      	str	r1, [sp, #20]
 800b126:	a902      	add	r1, sp, #8
 800b128:	6800      	ldr	r0, [r0, #0]
 800b12a:	9301      	str	r3, [sp, #4]
 800b12c:	f000 f8f6 	bl	800b31c <_svfiprintf_r>
 800b130:	9b02      	ldr	r3, [sp, #8]
 800b132:	2200      	movs	r2, #0
 800b134:	701a      	strb	r2, [r3, #0]
 800b136:	b01c      	add	sp, #112	@ 0x70
 800b138:	f85d eb04 	ldr.w	lr, [sp], #4
 800b13c:	b003      	add	sp, #12
 800b13e:	4770      	bx	lr
 800b140:	2000001c 	.word	0x2000001c
 800b144:	ffff0208 	.word	0xffff0208

0800b148 <memset>:
 800b148:	4402      	add	r2, r0
 800b14a:	4603      	mov	r3, r0
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d100      	bne.n	800b152 <memset+0xa>
 800b150:	4770      	bx	lr
 800b152:	f803 1b01 	strb.w	r1, [r3], #1
 800b156:	e7f9      	b.n	800b14c <memset+0x4>

0800b158 <_sbrk_r>:
 800b158:	b538      	push	{r3, r4, r5, lr}
 800b15a:	2300      	movs	r3, #0
 800b15c:	4d05      	ldr	r5, [pc, #20]	@ (800b174 <_sbrk_r+0x1c>)
 800b15e:	4604      	mov	r4, r0
 800b160:	4608      	mov	r0, r1
 800b162:	602b      	str	r3, [r5, #0]
 800b164:	f7f6 fb20 	bl	80017a8 <_sbrk>
 800b168:	1c43      	adds	r3, r0, #1
 800b16a:	d102      	bne.n	800b172 <_sbrk_r+0x1a>
 800b16c:	682b      	ldr	r3, [r5, #0]
 800b16e:	b103      	cbz	r3, 800b172 <_sbrk_r+0x1a>
 800b170:	6023      	str	r3, [r4, #0]
 800b172:	bd38      	pop	{r3, r4, r5, pc}
 800b174:	20000880 	.word	0x20000880

0800b178 <__errno>:
 800b178:	4b01      	ldr	r3, [pc, #4]	@ (800b180 <__errno+0x8>)
 800b17a:	6818      	ldr	r0, [r3, #0]
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	2000001c 	.word	0x2000001c

0800b184 <__libc_init_array>:
 800b184:	b570      	push	{r4, r5, r6, lr}
 800b186:	4d0d      	ldr	r5, [pc, #52]	@ (800b1bc <__libc_init_array+0x38>)
 800b188:	2600      	movs	r6, #0
 800b18a:	4c0d      	ldr	r4, [pc, #52]	@ (800b1c0 <__libc_init_array+0x3c>)
 800b18c:	1b64      	subs	r4, r4, r5
 800b18e:	10a4      	asrs	r4, r4, #2
 800b190:	42a6      	cmp	r6, r4
 800b192:	d109      	bne.n	800b1a8 <__libc_init_array+0x24>
 800b194:	4d0b      	ldr	r5, [pc, #44]	@ (800b1c4 <__libc_init_array+0x40>)
 800b196:	2600      	movs	r6, #0
 800b198:	4c0b      	ldr	r4, [pc, #44]	@ (800b1c8 <__libc_init_array+0x44>)
 800b19a:	f000 fbb9 	bl	800b910 <_init>
 800b19e:	1b64      	subs	r4, r4, r5
 800b1a0:	10a4      	asrs	r4, r4, #2
 800b1a2:	42a6      	cmp	r6, r4
 800b1a4:	d105      	bne.n	800b1b2 <__libc_init_array+0x2e>
 800b1a6:	bd70      	pop	{r4, r5, r6, pc}
 800b1a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ac:	3601      	adds	r6, #1
 800b1ae:	4798      	blx	r3
 800b1b0:	e7ee      	b.n	800b190 <__libc_init_array+0xc>
 800b1b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1b6:	3601      	adds	r6, #1
 800b1b8:	4798      	blx	r3
 800b1ba:	e7f2      	b.n	800b1a2 <__libc_init_array+0x1e>
 800b1bc:	0800bab8 	.word	0x0800bab8
 800b1c0:	0800bab8 	.word	0x0800bab8
 800b1c4:	0800bab8 	.word	0x0800bab8
 800b1c8:	0800babc 	.word	0x0800babc

0800b1cc <__retarget_lock_acquire_recursive>:
 800b1cc:	4770      	bx	lr

0800b1ce <__retarget_lock_release_recursive>:
 800b1ce:	4770      	bx	lr

0800b1d0 <_free_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	4605      	mov	r5, r0
 800b1d4:	2900      	cmp	r1, #0
 800b1d6:	d041      	beq.n	800b25c <_free_r+0x8c>
 800b1d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1dc:	1f0c      	subs	r4, r1, #4
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	bfb8      	it	lt
 800b1e2:	18e4      	addlt	r4, r4, r3
 800b1e4:	f7ff ff84 	bl	800b0f0 <__malloc_lock>
 800b1e8:	4a1d      	ldr	r2, [pc, #116]	@ (800b260 <_free_r+0x90>)
 800b1ea:	6813      	ldr	r3, [r2, #0]
 800b1ec:	b933      	cbnz	r3, 800b1fc <_free_r+0x2c>
 800b1ee:	6063      	str	r3, [r4, #4]
 800b1f0:	6014      	str	r4, [r2, #0]
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1f8:	f7ff bf80 	b.w	800b0fc <__malloc_unlock>
 800b1fc:	42a3      	cmp	r3, r4
 800b1fe:	d908      	bls.n	800b212 <_free_r+0x42>
 800b200:	6820      	ldr	r0, [r4, #0]
 800b202:	1821      	adds	r1, r4, r0
 800b204:	428b      	cmp	r3, r1
 800b206:	bf01      	itttt	eq
 800b208:	6819      	ldreq	r1, [r3, #0]
 800b20a:	685b      	ldreq	r3, [r3, #4]
 800b20c:	1809      	addeq	r1, r1, r0
 800b20e:	6021      	streq	r1, [r4, #0]
 800b210:	e7ed      	b.n	800b1ee <_free_r+0x1e>
 800b212:	461a      	mov	r2, r3
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	b10b      	cbz	r3, 800b21c <_free_r+0x4c>
 800b218:	42a3      	cmp	r3, r4
 800b21a:	d9fa      	bls.n	800b212 <_free_r+0x42>
 800b21c:	6811      	ldr	r1, [r2, #0]
 800b21e:	1850      	adds	r0, r2, r1
 800b220:	42a0      	cmp	r0, r4
 800b222:	d10b      	bne.n	800b23c <_free_r+0x6c>
 800b224:	6820      	ldr	r0, [r4, #0]
 800b226:	4401      	add	r1, r0
 800b228:	1850      	adds	r0, r2, r1
 800b22a:	6011      	str	r1, [r2, #0]
 800b22c:	4283      	cmp	r3, r0
 800b22e:	d1e0      	bne.n	800b1f2 <_free_r+0x22>
 800b230:	6818      	ldr	r0, [r3, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	4408      	add	r0, r1
 800b236:	6053      	str	r3, [r2, #4]
 800b238:	6010      	str	r0, [r2, #0]
 800b23a:	e7da      	b.n	800b1f2 <_free_r+0x22>
 800b23c:	d902      	bls.n	800b244 <_free_r+0x74>
 800b23e:	230c      	movs	r3, #12
 800b240:	602b      	str	r3, [r5, #0]
 800b242:	e7d6      	b.n	800b1f2 <_free_r+0x22>
 800b244:	6820      	ldr	r0, [r4, #0]
 800b246:	1821      	adds	r1, r4, r0
 800b248:	428b      	cmp	r3, r1
 800b24a:	bf02      	ittt	eq
 800b24c:	6819      	ldreq	r1, [r3, #0]
 800b24e:	685b      	ldreq	r3, [r3, #4]
 800b250:	1809      	addeq	r1, r1, r0
 800b252:	6063      	str	r3, [r4, #4]
 800b254:	bf08      	it	eq
 800b256:	6021      	streq	r1, [r4, #0]
 800b258:	6054      	str	r4, [r2, #4]
 800b25a:	e7ca      	b.n	800b1f2 <_free_r+0x22>
 800b25c:	bd38      	pop	{r3, r4, r5, pc}
 800b25e:	bf00      	nop
 800b260:	20000744 	.word	0x20000744

0800b264 <__ssputs_r>:
 800b264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b268:	461f      	mov	r7, r3
 800b26a:	688e      	ldr	r6, [r1, #8]
 800b26c:	4682      	mov	sl, r0
 800b26e:	460c      	mov	r4, r1
 800b270:	42be      	cmp	r6, r7
 800b272:	4690      	mov	r8, r2
 800b274:	680b      	ldr	r3, [r1, #0]
 800b276:	d82d      	bhi.n	800b2d4 <__ssputs_r+0x70>
 800b278:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b27c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b280:	d026      	beq.n	800b2d0 <__ssputs_r+0x6c>
 800b282:	6965      	ldr	r5, [r4, #20]
 800b284:	6909      	ldr	r1, [r1, #16]
 800b286:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b28a:	eba3 0901 	sub.w	r9, r3, r1
 800b28e:	1c7b      	adds	r3, r7, #1
 800b290:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b294:	444b      	add	r3, r9
 800b296:	106d      	asrs	r5, r5, #1
 800b298:	429d      	cmp	r5, r3
 800b29a:	bf38      	it	cc
 800b29c:	461d      	movcc	r5, r3
 800b29e:	0553      	lsls	r3, r2, #21
 800b2a0:	d527      	bpl.n	800b2f2 <__ssputs_r+0x8e>
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	f7ff fea4 	bl	800aff0 <_malloc_r>
 800b2a8:	4606      	mov	r6, r0
 800b2aa:	b360      	cbz	r0, 800b306 <__ssputs_r+0xa2>
 800b2ac:	464a      	mov	r2, r9
 800b2ae:	6921      	ldr	r1, [r4, #16]
 800b2b0:	f000 faea 	bl	800b888 <memcpy>
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2be:	81a3      	strh	r3, [r4, #12]
 800b2c0:	6126      	str	r6, [r4, #16]
 800b2c2:	444e      	add	r6, r9
 800b2c4:	6165      	str	r5, [r4, #20]
 800b2c6:	eba5 0509 	sub.w	r5, r5, r9
 800b2ca:	6026      	str	r6, [r4, #0]
 800b2cc:	463e      	mov	r6, r7
 800b2ce:	60a5      	str	r5, [r4, #8]
 800b2d0:	42be      	cmp	r6, r7
 800b2d2:	d900      	bls.n	800b2d6 <__ssputs_r+0x72>
 800b2d4:	463e      	mov	r6, r7
 800b2d6:	4632      	mov	r2, r6
 800b2d8:	4641      	mov	r1, r8
 800b2da:	6820      	ldr	r0, [r4, #0]
 800b2dc:	f000 faac 	bl	800b838 <memmove>
 800b2e0:	68a3      	ldr	r3, [r4, #8]
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	1b9b      	subs	r3, r3, r6
 800b2e6:	60a3      	str	r3, [r4, #8]
 800b2e8:	6823      	ldr	r3, [r4, #0]
 800b2ea:	4433      	add	r3, r6
 800b2ec:	6023      	str	r3, [r4, #0]
 800b2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f2:	462a      	mov	r2, r5
 800b2f4:	f000 fad5 	bl	800b8a2 <_realloc_r>
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d1e0      	bne.n	800b2c0 <__ssputs_r+0x5c>
 800b2fe:	6921      	ldr	r1, [r4, #16]
 800b300:	4650      	mov	r0, sl
 800b302:	f7ff ff65 	bl	800b1d0 <_free_r>
 800b306:	230c      	movs	r3, #12
 800b308:	f04f 30ff 	mov.w	r0, #4294967295
 800b30c:	f8ca 3000 	str.w	r3, [sl]
 800b310:	89a3      	ldrh	r3, [r4, #12]
 800b312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b316:	81a3      	strh	r3, [r4, #12]
 800b318:	e7e9      	b.n	800b2ee <__ssputs_r+0x8a>
	...

0800b31c <_svfiprintf_r>:
 800b31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b320:	4698      	mov	r8, r3
 800b322:	898b      	ldrh	r3, [r1, #12]
 800b324:	b09d      	sub	sp, #116	@ 0x74
 800b326:	4607      	mov	r7, r0
 800b328:	061b      	lsls	r3, r3, #24
 800b32a:	460d      	mov	r5, r1
 800b32c:	4614      	mov	r4, r2
 800b32e:	d510      	bpl.n	800b352 <_svfiprintf_r+0x36>
 800b330:	690b      	ldr	r3, [r1, #16]
 800b332:	b973      	cbnz	r3, 800b352 <_svfiprintf_r+0x36>
 800b334:	2140      	movs	r1, #64	@ 0x40
 800b336:	f7ff fe5b 	bl	800aff0 <_malloc_r>
 800b33a:	6028      	str	r0, [r5, #0]
 800b33c:	6128      	str	r0, [r5, #16]
 800b33e:	b930      	cbnz	r0, 800b34e <_svfiprintf_r+0x32>
 800b340:	230c      	movs	r3, #12
 800b342:	603b      	str	r3, [r7, #0]
 800b344:	f04f 30ff 	mov.w	r0, #4294967295
 800b348:	b01d      	add	sp, #116	@ 0x74
 800b34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34e:	2340      	movs	r3, #64	@ 0x40
 800b350:	616b      	str	r3, [r5, #20]
 800b352:	2300      	movs	r3, #0
 800b354:	f8cd 800c 	str.w	r8, [sp, #12]
 800b358:	f04f 0901 	mov.w	r9, #1
 800b35c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800b500 <_svfiprintf_r+0x1e4>
 800b360:	9309      	str	r3, [sp, #36]	@ 0x24
 800b362:	2320      	movs	r3, #32
 800b364:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b368:	2330      	movs	r3, #48	@ 0x30
 800b36a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b36e:	4623      	mov	r3, r4
 800b370:	469a      	mov	sl, r3
 800b372:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b376:	b10a      	cbz	r2, 800b37c <_svfiprintf_r+0x60>
 800b378:	2a25      	cmp	r2, #37	@ 0x25
 800b37a:	d1f9      	bne.n	800b370 <_svfiprintf_r+0x54>
 800b37c:	ebba 0b04 	subs.w	fp, sl, r4
 800b380:	d00b      	beq.n	800b39a <_svfiprintf_r+0x7e>
 800b382:	465b      	mov	r3, fp
 800b384:	4622      	mov	r2, r4
 800b386:	4629      	mov	r1, r5
 800b388:	4638      	mov	r0, r7
 800b38a:	f7ff ff6b 	bl	800b264 <__ssputs_r>
 800b38e:	3001      	adds	r0, #1
 800b390:	f000 80a7 	beq.w	800b4e2 <_svfiprintf_r+0x1c6>
 800b394:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b396:	445a      	add	r2, fp
 800b398:	9209      	str	r2, [sp, #36]	@ 0x24
 800b39a:	f89a 3000 	ldrb.w	r3, [sl]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f000 809f 	beq.w	800b4e2 <_svfiprintf_r+0x1c6>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3aa:	f10a 0a01 	add.w	sl, sl, #1
 800b3ae:	9304      	str	r3, [sp, #16]
 800b3b0:	9307      	str	r3, [sp, #28]
 800b3b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3bc:	4654      	mov	r4, sl
 800b3be:	2205      	movs	r2, #5
 800b3c0:	484f      	ldr	r0, [pc, #316]	@ (800b500 <_svfiprintf_r+0x1e4>)
 800b3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3c6:	f000 fa51 	bl	800b86c <memchr>
 800b3ca:	9a04      	ldr	r2, [sp, #16]
 800b3cc:	b9d8      	cbnz	r0, 800b406 <_svfiprintf_r+0xea>
 800b3ce:	06d0      	lsls	r0, r2, #27
 800b3d0:	bf44      	itt	mi
 800b3d2:	2320      	movmi	r3, #32
 800b3d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3d8:	0711      	lsls	r1, r2, #28
 800b3da:	bf44      	itt	mi
 800b3dc:	232b      	movmi	r3, #43	@ 0x2b
 800b3de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b3e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3e8:	d015      	beq.n	800b416 <_svfiprintf_r+0xfa>
 800b3ea:	9a07      	ldr	r2, [sp, #28]
 800b3ec:	4654      	mov	r4, sl
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	f04f 0c0a 	mov.w	ip, #10
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3fa:	3b30      	subs	r3, #48	@ 0x30
 800b3fc:	2b09      	cmp	r3, #9
 800b3fe:	d94b      	bls.n	800b498 <_svfiprintf_r+0x17c>
 800b400:	b1b0      	cbz	r0, 800b430 <_svfiprintf_r+0x114>
 800b402:	9207      	str	r2, [sp, #28]
 800b404:	e014      	b.n	800b430 <_svfiprintf_r+0x114>
 800b406:	eba0 0308 	sub.w	r3, r0, r8
 800b40a:	46a2      	mov	sl, r4
 800b40c:	fa09 f303 	lsl.w	r3, r9, r3
 800b410:	4313      	orrs	r3, r2
 800b412:	9304      	str	r3, [sp, #16]
 800b414:	e7d2      	b.n	800b3bc <_svfiprintf_r+0xa0>
 800b416:	9b03      	ldr	r3, [sp, #12]
 800b418:	1d19      	adds	r1, r3, #4
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	9103      	str	r1, [sp, #12]
 800b420:	bfbb      	ittet	lt
 800b422:	425b      	neglt	r3, r3
 800b424:	f042 0202 	orrlt.w	r2, r2, #2
 800b428:	9307      	strge	r3, [sp, #28]
 800b42a:	9307      	strlt	r3, [sp, #28]
 800b42c:	bfb8      	it	lt
 800b42e:	9204      	strlt	r2, [sp, #16]
 800b430:	7823      	ldrb	r3, [r4, #0]
 800b432:	2b2e      	cmp	r3, #46	@ 0x2e
 800b434:	d10a      	bne.n	800b44c <_svfiprintf_r+0x130>
 800b436:	7863      	ldrb	r3, [r4, #1]
 800b438:	2b2a      	cmp	r3, #42	@ 0x2a
 800b43a:	d132      	bne.n	800b4a2 <_svfiprintf_r+0x186>
 800b43c:	9b03      	ldr	r3, [sp, #12]
 800b43e:	3402      	adds	r4, #2
 800b440:	1d1a      	adds	r2, r3, #4
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b448:	9203      	str	r2, [sp, #12]
 800b44a:	9305      	str	r3, [sp, #20]
 800b44c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b510 <_svfiprintf_r+0x1f4>
 800b450:	2203      	movs	r2, #3
 800b452:	7821      	ldrb	r1, [r4, #0]
 800b454:	4650      	mov	r0, sl
 800b456:	f000 fa09 	bl	800b86c <memchr>
 800b45a:	b138      	cbz	r0, 800b46c <_svfiprintf_r+0x150>
 800b45c:	eba0 000a 	sub.w	r0, r0, sl
 800b460:	2240      	movs	r2, #64	@ 0x40
 800b462:	9b04      	ldr	r3, [sp, #16]
 800b464:	3401      	adds	r4, #1
 800b466:	4082      	lsls	r2, r0
 800b468:	4313      	orrs	r3, r2
 800b46a:	9304      	str	r3, [sp, #16]
 800b46c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b470:	2206      	movs	r2, #6
 800b472:	4824      	ldr	r0, [pc, #144]	@ (800b504 <_svfiprintf_r+0x1e8>)
 800b474:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b478:	f000 f9f8 	bl	800b86c <memchr>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d036      	beq.n	800b4ee <_svfiprintf_r+0x1d2>
 800b480:	4b21      	ldr	r3, [pc, #132]	@ (800b508 <_svfiprintf_r+0x1ec>)
 800b482:	bb1b      	cbnz	r3, 800b4cc <_svfiprintf_r+0x1b0>
 800b484:	9b03      	ldr	r3, [sp, #12]
 800b486:	3307      	adds	r3, #7
 800b488:	f023 0307 	bic.w	r3, r3, #7
 800b48c:	3308      	adds	r3, #8
 800b48e:	9303      	str	r3, [sp, #12]
 800b490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b492:	4433      	add	r3, r6
 800b494:	9309      	str	r3, [sp, #36]	@ 0x24
 800b496:	e76a      	b.n	800b36e <_svfiprintf_r+0x52>
 800b498:	fb0c 3202 	mla	r2, ip, r2, r3
 800b49c:	460c      	mov	r4, r1
 800b49e:	2001      	movs	r0, #1
 800b4a0:	e7a8      	b.n	800b3f4 <_svfiprintf_r+0xd8>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	3401      	adds	r4, #1
 800b4a6:	f04f 0c0a 	mov.w	ip, #10
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	9305      	str	r3, [sp, #20]
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4b4:	3a30      	subs	r2, #48	@ 0x30
 800b4b6:	2a09      	cmp	r2, #9
 800b4b8:	d903      	bls.n	800b4c2 <_svfiprintf_r+0x1a6>
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d0c6      	beq.n	800b44c <_svfiprintf_r+0x130>
 800b4be:	9105      	str	r1, [sp, #20]
 800b4c0:	e7c4      	b.n	800b44c <_svfiprintf_r+0x130>
 800b4c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e7f0      	b.n	800b4ae <_svfiprintf_r+0x192>
 800b4cc:	ab03      	add	r3, sp, #12
 800b4ce:	462a      	mov	r2, r5
 800b4d0:	a904      	add	r1, sp, #16
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b50c <_svfiprintf_r+0x1f0>)
 800b4d8:	f3af 8000 	nop.w
 800b4dc:	1c42      	adds	r2, r0, #1
 800b4de:	4606      	mov	r6, r0
 800b4e0:	d1d6      	bne.n	800b490 <_svfiprintf_r+0x174>
 800b4e2:	89ab      	ldrh	r3, [r5, #12]
 800b4e4:	065b      	lsls	r3, r3, #25
 800b4e6:	f53f af2d 	bmi.w	800b344 <_svfiprintf_r+0x28>
 800b4ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4ec:	e72c      	b.n	800b348 <_svfiprintf_r+0x2c>
 800b4ee:	ab03      	add	r3, sp, #12
 800b4f0:	462a      	mov	r2, r5
 800b4f2:	a904      	add	r1, sp, #16
 800b4f4:	4638      	mov	r0, r7
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	4b04      	ldr	r3, [pc, #16]	@ (800b50c <_svfiprintf_r+0x1f0>)
 800b4fa:	f000 f87d 	bl	800b5f8 <_printf_i>
 800b4fe:	e7ed      	b.n	800b4dc <_svfiprintf_r+0x1c0>
 800b500:	0800ba7c 	.word	0x0800ba7c
 800b504:	0800ba86 	.word	0x0800ba86
 800b508:	00000000 	.word	0x00000000
 800b50c:	0800b265 	.word	0x0800b265
 800b510:	0800ba82 	.word	0x0800ba82

0800b514 <_printf_common>:
 800b514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b518:	4616      	mov	r6, r2
 800b51a:	4698      	mov	r8, r3
 800b51c:	688a      	ldr	r2, [r1, #8]
 800b51e:	4607      	mov	r7, r0
 800b520:	690b      	ldr	r3, [r1, #16]
 800b522:	460c      	mov	r4, r1
 800b524:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b528:	4293      	cmp	r3, r2
 800b52a:	bfb8      	it	lt
 800b52c:	4613      	movlt	r3, r2
 800b52e:	6033      	str	r3, [r6, #0]
 800b530:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b534:	b10a      	cbz	r2, 800b53a <_printf_common+0x26>
 800b536:	3301      	adds	r3, #1
 800b538:	6033      	str	r3, [r6, #0]
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	0699      	lsls	r1, r3, #26
 800b53e:	bf42      	ittt	mi
 800b540:	6833      	ldrmi	r3, [r6, #0]
 800b542:	3302      	addmi	r3, #2
 800b544:	6033      	strmi	r3, [r6, #0]
 800b546:	6825      	ldr	r5, [r4, #0]
 800b548:	f015 0506 	ands.w	r5, r5, #6
 800b54c:	d106      	bne.n	800b55c <_printf_common+0x48>
 800b54e:	f104 0a19 	add.w	sl, r4, #25
 800b552:	68e3      	ldr	r3, [r4, #12]
 800b554:	6832      	ldr	r2, [r6, #0]
 800b556:	1a9b      	subs	r3, r3, r2
 800b558:	42ab      	cmp	r3, r5
 800b55a:	dc2b      	bgt.n	800b5b4 <_printf_common+0xa0>
 800b55c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b560:	6822      	ldr	r2, [r4, #0]
 800b562:	3b00      	subs	r3, #0
 800b564:	bf18      	it	ne
 800b566:	2301      	movne	r3, #1
 800b568:	0692      	lsls	r2, r2, #26
 800b56a:	d430      	bmi.n	800b5ce <_printf_common+0xba>
 800b56c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b570:	4641      	mov	r1, r8
 800b572:	4638      	mov	r0, r7
 800b574:	47c8      	blx	r9
 800b576:	3001      	adds	r0, #1
 800b578:	d023      	beq.n	800b5c2 <_printf_common+0xae>
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	341a      	adds	r4, #26
 800b57e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b582:	f003 0306 	and.w	r3, r3, #6
 800b586:	2b04      	cmp	r3, #4
 800b588:	bf0a      	itet	eq
 800b58a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b58e:	2500      	movne	r5, #0
 800b590:	6833      	ldreq	r3, [r6, #0]
 800b592:	f04f 0600 	mov.w	r6, #0
 800b596:	bf08      	it	eq
 800b598:	1aed      	subeq	r5, r5, r3
 800b59a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b59e:	bf08      	it	eq
 800b5a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	bfc4      	itt	gt
 800b5a8:	1a9b      	subgt	r3, r3, r2
 800b5aa:	18ed      	addgt	r5, r5, r3
 800b5ac:	42b5      	cmp	r5, r6
 800b5ae:	d11a      	bne.n	800b5e6 <_printf_common+0xd2>
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	e008      	b.n	800b5c6 <_printf_common+0xb2>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	4652      	mov	r2, sl
 800b5b8:	4641      	mov	r1, r8
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	47c8      	blx	r9
 800b5be:	3001      	adds	r0, #1
 800b5c0:	d103      	bne.n	800b5ca <_printf_common+0xb6>
 800b5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ca:	3501      	adds	r5, #1
 800b5cc:	e7c1      	b.n	800b552 <_printf_common+0x3e>
 800b5ce:	18e1      	adds	r1, r4, r3
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	2030      	movs	r0, #48	@ 0x30
 800b5d4:	3302      	adds	r3, #2
 800b5d6:	4422      	add	r2, r4
 800b5d8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5e4:	e7c2      	b.n	800b56c <_printf_common+0x58>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	4622      	mov	r2, r4
 800b5ea:	4641      	mov	r1, r8
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	47c8      	blx	r9
 800b5f0:	3001      	adds	r0, #1
 800b5f2:	d0e6      	beq.n	800b5c2 <_printf_common+0xae>
 800b5f4:	3601      	adds	r6, #1
 800b5f6:	e7d9      	b.n	800b5ac <_printf_common+0x98>

0800b5f8 <_printf_i>:
 800b5f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5fc:	7e0f      	ldrb	r7, [r1, #24]
 800b5fe:	4691      	mov	r9, r2
 800b600:	4680      	mov	r8, r0
 800b602:	460c      	mov	r4, r1
 800b604:	2f78      	cmp	r7, #120	@ 0x78
 800b606:	469a      	mov	sl, r3
 800b608:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b60a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b60e:	d807      	bhi.n	800b620 <_printf_i+0x28>
 800b610:	2f62      	cmp	r7, #98	@ 0x62
 800b612:	d80a      	bhi.n	800b62a <_printf_i+0x32>
 800b614:	2f00      	cmp	r7, #0
 800b616:	f000 80d2 	beq.w	800b7be <_printf_i+0x1c6>
 800b61a:	2f58      	cmp	r7, #88	@ 0x58
 800b61c:	f000 80b9 	beq.w	800b792 <_printf_i+0x19a>
 800b620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b624:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b628:	e03a      	b.n	800b6a0 <_printf_i+0xa8>
 800b62a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b62e:	2b15      	cmp	r3, #21
 800b630:	d8f6      	bhi.n	800b620 <_printf_i+0x28>
 800b632:	a101      	add	r1, pc, #4	@ (adr r1, 800b638 <_printf_i+0x40>)
 800b634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b638:	0800b691 	.word	0x0800b691
 800b63c:	0800b6a5 	.word	0x0800b6a5
 800b640:	0800b621 	.word	0x0800b621
 800b644:	0800b621 	.word	0x0800b621
 800b648:	0800b621 	.word	0x0800b621
 800b64c:	0800b621 	.word	0x0800b621
 800b650:	0800b6a5 	.word	0x0800b6a5
 800b654:	0800b621 	.word	0x0800b621
 800b658:	0800b621 	.word	0x0800b621
 800b65c:	0800b621 	.word	0x0800b621
 800b660:	0800b621 	.word	0x0800b621
 800b664:	0800b7a5 	.word	0x0800b7a5
 800b668:	0800b6cf 	.word	0x0800b6cf
 800b66c:	0800b75f 	.word	0x0800b75f
 800b670:	0800b621 	.word	0x0800b621
 800b674:	0800b621 	.word	0x0800b621
 800b678:	0800b7c7 	.word	0x0800b7c7
 800b67c:	0800b621 	.word	0x0800b621
 800b680:	0800b6cf 	.word	0x0800b6cf
 800b684:	0800b621 	.word	0x0800b621
 800b688:	0800b621 	.word	0x0800b621
 800b68c:	0800b767 	.word	0x0800b767
 800b690:	6833      	ldr	r3, [r6, #0]
 800b692:	1d1a      	adds	r2, r3, #4
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	6032      	str	r2, [r6, #0]
 800b698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b69c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e09d      	b.n	800b7e0 <_printf_i+0x1e8>
 800b6a4:	6833      	ldr	r3, [r6, #0]
 800b6a6:	6820      	ldr	r0, [r4, #0]
 800b6a8:	1d19      	adds	r1, r3, #4
 800b6aa:	6031      	str	r1, [r6, #0]
 800b6ac:	0606      	lsls	r6, r0, #24
 800b6ae:	d501      	bpl.n	800b6b4 <_printf_i+0xbc>
 800b6b0:	681d      	ldr	r5, [r3, #0]
 800b6b2:	e003      	b.n	800b6bc <_printf_i+0xc4>
 800b6b4:	0645      	lsls	r5, r0, #25
 800b6b6:	d5fb      	bpl.n	800b6b0 <_printf_i+0xb8>
 800b6b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6bc:	2d00      	cmp	r5, #0
 800b6be:	da03      	bge.n	800b6c8 <_printf_i+0xd0>
 800b6c0:	232d      	movs	r3, #45	@ 0x2d
 800b6c2:	426d      	negs	r5, r5
 800b6c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6c8:	4859      	ldr	r0, [pc, #356]	@ (800b830 <_printf_i+0x238>)
 800b6ca:	230a      	movs	r3, #10
 800b6cc:	e011      	b.n	800b6f2 <_printf_i+0xfa>
 800b6ce:	6821      	ldr	r1, [r4, #0]
 800b6d0:	6833      	ldr	r3, [r6, #0]
 800b6d2:	0608      	lsls	r0, r1, #24
 800b6d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6d8:	d402      	bmi.n	800b6e0 <_printf_i+0xe8>
 800b6da:	0649      	lsls	r1, r1, #25
 800b6dc:	bf48      	it	mi
 800b6de:	b2ad      	uxthmi	r5, r5
 800b6e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6e2:	6033      	str	r3, [r6, #0]
 800b6e4:	4852      	ldr	r0, [pc, #328]	@ (800b830 <_printf_i+0x238>)
 800b6e6:	bf14      	ite	ne
 800b6e8:	230a      	movne	r3, #10
 800b6ea:	2308      	moveq	r3, #8
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6f2:	6866      	ldr	r6, [r4, #4]
 800b6f4:	2e00      	cmp	r6, #0
 800b6f6:	60a6      	str	r6, [r4, #8]
 800b6f8:	bfa2      	ittt	ge
 800b6fa:	6821      	ldrge	r1, [r4, #0]
 800b6fc:	f021 0104 	bicge.w	r1, r1, #4
 800b700:	6021      	strge	r1, [r4, #0]
 800b702:	b90d      	cbnz	r5, 800b708 <_printf_i+0x110>
 800b704:	2e00      	cmp	r6, #0
 800b706:	d04b      	beq.n	800b7a0 <_printf_i+0x1a8>
 800b708:	4616      	mov	r6, r2
 800b70a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b70e:	fb03 5711 	mls	r7, r3, r1, r5
 800b712:	5dc7      	ldrb	r7, [r0, r7]
 800b714:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b718:	462f      	mov	r7, r5
 800b71a:	460d      	mov	r5, r1
 800b71c:	42bb      	cmp	r3, r7
 800b71e:	d9f4      	bls.n	800b70a <_printf_i+0x112>
 800b720:	2b08      	cmp	r3, #8
 800b722:	d10b      	bne.n	800b73c <_printf_i+0x144>
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	07df      	lsls	r7, r3, #31
 800b728:	d508      	bpl.n	800b73c <_printf_i+0x144>
 800b72a:	6923      	ldr	r3, [r4, #16]
 800b72c:	6861      	ldr	r1, [r4, #4]
 800b72e:	4299      	cmp	r1, r3
 800b730:	bfde      	ittt	le
 800b732:	2330      	movle	r3, #48	@ 0x30
 800b734:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b738:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b73c:	1b92      	subs	r2, r2, r6
 800b73e:	6122      	str	r2, [r4, #16]
 800b740:	464b      	mov	r3, r9
 800b742:	aa03      	add	r2, sp, #12
 800b744:	4621      	mov	r1, r4
 800b746:	4640      	mov	r0, r8
 800b748:	f8cd a000 	str.w	sl, [sp]
 800b74c:	f7ff fee2 	bl	800b514 <_printf_common>
 800b750:	3001      	adds	r0, #1
 800b752:	d14a      	bne.n	800b7ea <_printf_i+0x1f2>
 800b754:	f04f 30ff 	mov.w	r0, #4294967295
 800b758:	b004      	add	sp, #16
 800b75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	f043 0320 	orr.w	r3, r3, #32
 800b764:	6023      	str	r3, [r4, #0]
 800b766:	2778      	movs	r7, #120	@ 0x78
 800b768:	4832      	ldr	r0, [pc, #200]	@ (800b834 <_printf_i+0x23c>)
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b770:	061f      	lsls	r7, r3, #24
 800b772:	6831      	ldr	r1, [r6, #0]
 800b774:	f851 5b04 	ldr.w	r5, [r1], #4
 800b778:	d402      	bmi.n	800b780 <_printf_i+0x188>
 800b77a:	065f      	lsls	r7, r3, #25
 800b77c:	bf48      	it	mi
 800b77e:	b2ad      	uxthmi	r5, r5
 800b780:	6031      	str	r1, [r6, #0]
 800b782:	07d9      	lsls	r1, r3, #31
 800b784:	bf44      	itt	mi
 800b786:	f043 0320 	orrmi.w	r3, r3, #32
 800b78a:	6023      	strmi	r3, [r4, #0]
 800b78c:	b11d      	cbz	r5, 800b796 <_printf_i+0x19e>
 800b78e:	2310      	movs	r3, #16
 800b790:	e7ac      	b.n	800b6ec <_printf_i+0xf4>
 800b792:	4827      	ldr	r0, [pc, #156]	@ (800b830 <_printf_i+0x238>)
 800b794:	e7e9      	b.n	800b76a <_printf_i+0x172>
 800b796:	6823      	ldr	r3, [r4, #0]
 800b798:	f023 0320 	bic.w	r3, r3, #32
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	e7f6      	b.n	800b78e <_printf_i+0x196>
 800b7a0:	4616      	mov	r6, r2
 800b7a2:	e7bd      	b.n	800b720 <_printf_i+0x128>
 800b7a4:	6833      	ldr	r3, [r6, #0]
 800b7a6:	6825      	ldr	r5, [r4, #0]
 800b7a8:	1d18      	adds	r0, r3, #4
 800b7aa:	6961      	ldr	r1, [r4, #20]
 800b7ac:	6030      	str	r0, [r6, #0]
 800b7ae:	062e      	lsls	r6, r5, #24
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	d501      	bpl.n	800b7b8 <_printf_i+0x1c0>
 800b7b4:	6019      	str	r1, [r3, #0]
 800b7b6:	e002      	b.n	800b7be <_printf_i+0x1c6>
 800b7b8:	0668      	lsls	r0, r5, #25
 800b7ba:	d5fb      	bpl.n	800b7b4 <_printf_i+0x1bc>
 800b7bc:	8019      	strh	r1, [r3, #0]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	4616      	mov	r6, r2
 800b7c2:	6123      	str	r3, [r4, #16]
 800b7c4:	e7bc      	b.n	800b740 <_printf_i+0x148>
 800b7c6:	6833      	ldr	r3, [r6, #0]
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	1d1a      	adds	r2, r3, #4
 800b7cc:	6032      	str	r2, [r6, #0]
 800b7ce:	681e      	ldr	r6, [r3, #0]
 800b7d0:	6862      	ldr	r2, [r4, #4]
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	f000 f84a 	bl	800b86c <memchr>
 800b7d8:	b108      	cbz	r0, 800b7de <_printf_i+0x1e6>
 800b7da:	1b80      	subs	r0, r0, r6
 800b7dc:	6060      	str	r0, [r4, #4]
 800b7de:	6863      	ldr	r3, [r4, #4]
 800b7e0:	6123      	str	r3, [r4, #16]
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7e8:	e7aa      	b.n	800b740 <_printf_i+0x148>
 800b7ea:	6923      	ldr	r3, [r4, #16]
 800b7ec:	4632      	mov	r2, r6
 800b7ee:	4649      	mov	r1, r9
 800b7f0:	4640      	mov	r0, r8
 800b7f2:	47d0      	blx	sl
 800b7f4:	3001      	adds	r0, #1
 800b7f6:	d0ad      	beq.n	800b754 <_printf_i+0x15c>
 800b7f8:	6823      	ldr	r3, [r4, #0]
 800b7fa:	079b      	lsls	r3, r3, #30
 800b7fc:	d413      	bmi.n	800b826 <_printf_i+0x22e>
 800b7fe:	68e0      	ldr	r0, [r4, #12]
 800b800:	9b03      	ldr	r3, [sp, #12]
 800b802:	4298      	cmp	r0, r3
 800b804:	bfb8      	it	lt
 800b806:	4618      	movlt	r0, r3
 800b808:	e7a6      	b.n	800b758 <_printf_i+0x160>
 800b80a:	2301      	movs	r3, #1
 800b80c:	4632      	mov	r2, r6
 800b80e:	4649      	mov	r1, r9
 800b810:	4640      	mov	r0, r8
 800b812:	47d0      	blx	sl
 800b814:	3001      	adds	r0, #1
 800b816:	d09d      	beq.n	800b754 <_printf_i+0x15c>
 800b818:	3501      	adds	r5, #1
 800b81a:	68e3      	ldr	r3, [r4, #12]
 800b81c:	9903      	ldr	r1, [sp, #12]
 800b81e:	1a5b      	subs	r3, r3, r1
 800b820:	42ab      	cmp	r3, r5
 800b822:	dcf2      	bgt.n	800b80a <_printf_i+0x212>
 800b824:	e7eb      	b.n	800b7fe <_printf_i+0x206>
 800b826:	2500      	movs	r5, #0
 800b828:	f104 0619 	add.w	r6, r4, #25
 800b82c:	e7f5      	b.n	800b81a <_printf_i+0x222>
 800b82e:	bf00      	nop
 800b830:	0800ba8d 	.word	0x0800ba8d
 800b834:	0800ba9e 	.word	0x0800ba9e

0800b838 <memmove>:
 800b838:	4288      	cmp	r0, r1
 800b83a:	b510      	push	{r4, lr}
 800b83c:	eb01 0402 	add.w	r4, r1, r2
 800b840:	d902      	bls.n	800b848 <memmove+0x10>
 800b842:	4284      	cmp	r4, r0
 800b844:	4623      	mov	r3, r4
 800b846:	d807      	bhi.n	800b858 <memmove+0x20>
 800b848:	1e43      	subs	r3, r0, #1
 800b84a:	42a1      	cmp	r1, r4
 800b84c:	d008      	beq.n	800b860 <memmove+0x28>
 800b84e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b852:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b856:	e7f8      	b.n	800b84a <memmove+0x12>
 800b858:	4402      	add	r2, r0
 800b85a:	4601      	mov	r1, r0
 800b85c:	428a      	cmp	r2, r1
 800b85e:	d100      	bne.n	800b862 <memmove+0x2a>
 800b860:	bd10      	pop	{r4, pc}
 800b862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b86a:	e7f7      	b.n	800b85c <memmove+0x24>

0800b86c <memchr>:
 800b86c:	b2c9      	uxtb	r1, r1
 800b86e:	4603      	mov	r3, r0
 800b870:	4402      	add	r2, r0
 800b872:	b510      	push	{r4, lr}
 800b874:	4293      	cmp	r3, r2
 800b876:	4618      	mov	r0, r3
 800b878:	d101      	bne.n	800b87e <memchr+0x12>
 800b87a:	2000      	movs	r0, #0
 800b87c:	e003      	b.n	800b886 <memchr+0x1a>
 800b87e:	7804      	ldrb	r4, [r0, #0]
 800b880:	3301      	adds	r3, #1
 800b882:	428c      	cmp	r4, r1
 800b884:	d1f6      	bne.n	800b874 <memchr+0x8>
 800b886:	bd10      	pop	{r4, pc}

0800b888 <memcpy>:
 800b888:	440a      	add	r2, r1
 800b88a:	1e43      	subs	r3, r0, #1
 800b88c:	4291      	cmp	r1, r2
 800b88e:	d100      	bne.n	800b892 <memcpy+0xa>
 800b890:	4770      	bx	lr
 800b892:	b510      	push	{r4, lr}
 800b894:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b898:	4291      	cmp	r1, r2
 800b89a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b89e:	d1f9      	bne.n	800b894 <memcpy+0xc>
 800b8a0:	bd10      	pop	{r4, pc}

0800b8a2 <_realloc_r>:
 800b8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a6:	4680      	mov	r8, r0
 800b8a8:	4615      	mov	r5, r2
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	b921      	cbnz	r1, 800b8b8 <_realloc_r+0x16>
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b4:	f7ff bb9c 	b.w	800aff0 <_malloc_r>
 800b8b8:	b92a      	cbnz	r2, 800b8c6 <_realloc_r+0x24>
 800b8ba:	f7ff fc89 	bl	800b1d0 <_free_r>
 800b8be:	2400      	movs	r4, #0
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8c6:	f000 f81a 	bl	800b8fe <_malloc_usable_size_r>
 800b8ca:	4285      	cmp	r5, r0
 800b8cc:	4606      	mov	r6, r0
 800b8ce:	d802      	bhi.n	800b8d6 <_realloc_r+0x34>
 800b8d0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b8d4:	d8f4      	bhi.n	800b8c0 <_realloc_r+0x1e>
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	4640      	mov	r0, r8
 800b8da:	f7ff fb89 	bl	800aff0 <_malloc_r>
 800b8de:	4607      	mov	r7, r0
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	d0ec      	beq.n	800b8be <_realloc_r+0x1c>
 800b8e4:	42b5      	cmp	r5, r6
 800b8e6:	462a      	mov	r2, r5
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	bf28      	it	cs
 800b8ec:	4632      	movcs	r2, r6
 800b8ee:	f7ff ffcb 	bl	800b888 <memcpy>
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	4640      	mov	r0, r8
 800b8f6:	463c      	mov	r4, r7
 800b8f8:	f7ff fc6a 	bl	800b1d0 <_free_r>
 800b8fc:	e7e0      	b.n	800b8c0 <_realloc_r+0x1e>

0800b8fe <_malloc_usable_size_r>:
 800b8fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b902:	1f18      	subs	r0, r3, #4
 800b904:	2b00      	cmp	r3, #0
 800b906:	bfbc      	itt	lt
 800b908:	580b      	ldrlt	r3, [r1, r0]
 800b90a:	18c0      	addlt	r0, r0, r3
 800b90c:	4770      	bx	lr
	...

0800b910 <_init>:
 800b910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b912:	bf00      	nop
 800b914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b916:	bc08      	pop	{r3}
 800b918:	469e      	mov	lr, r3
 800b91a:	4770      	bx	lr

0800b91c <_fini>:
 800b91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91e:	bf00      	nop
 800b920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b922:	bc08      	pop	{r3}
 800b924:	469e      	mov	lr, r3
 800b926:	4770      	bx	lr
